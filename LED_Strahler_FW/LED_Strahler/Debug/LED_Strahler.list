
LED_Strahler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d84  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08008e44  08008e44  00018e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fcc  08008fcc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008fcc  08008fcc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fcc  08008fcc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fd0  08008fd0  00018fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000078  0800904c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  0800904c  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b95  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000319d  00000000  00000000  00032c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  00035dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  000370a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001133e  00000000  00000000  000381d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010247  00000000  00000000  0004950e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00055c2d  00000000  00000000  00059755  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af382  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048bc  00000000  00000000  000af400  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008e2c 	.word	0x08008e2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08008e2c 	.word	0x08008e2c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f8c7 	bl	8000590 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f849 	bl	80004a4 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f8b9 	bl	8000590 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f8af 	bl	8000590 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f857 	bl	80004f4 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f84d 	bl	80004f4 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_d2uiz>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	2200      	movs	r2, #0
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <__aeabi_d2uiz+0x38>)
 800046e:	0004      	movs	r4, r0
 8000470:	000d      	movs	r5, r1
 8000472:	f002 f843 	bl	80024fc <__aeabi_dcmpge>
 8000476:	2800      	cmp	r0, #0
 8000478:	d104      	bne.n	8000484 <__aeabi_d2uiz+0x1c>
 800047a:	0020      	movs	r0, r4
 800047c:	0029      	movs	r1, r5
 800047e:	f001 fefd 	bl	800227c <__aeabi_d2iz>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <__aeabi_d2uiz+0x38>)
 8000486:	2200      	movs	r2, #0
 8000488:	0020      	movs	r0, r4
 800048a:	0029      	movs	r1, r5
 800048c:	f001 fbae 	bl	8001bec <__aeabi_dsub>
 8000490:	f001 fef4 	bl	800227c <__aeabi_d2iz>
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	061b      	lsls	r3, r3, #24
 8000498:	469c      	mov	ip, r3
 800049a:	4460      	add	r0, ip
 800049c:	e7f1      	b.n	8000482 <__aeabi_d2uiz+0x1a>
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	41e00000 	.word	0x41e00000

080004a4 <__eqsf2>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	0042      	lsls	r2, r0, #1
 80004a8:	024e      	lsls	r6, r1, #9
 80004aa:	004c      	lsls	r4, r1, #1
 80004ac:	0245      	lsls	r5, r0, #9
 80004ae:	0a6d      	lsrs	r5, r5, #9
 80004b0:	0e12      	lsrs	r2, r2, #24
 80004b2:	0fc3      	lsrs	r3, r0, #31
 80004b4:	0a76      	lsrs	r6, r6, #9
 80004b6:	0e24      	lsrs	r4, r4, #24
 80004b8:	0fc9      	lsrs	r1, r1, #31
 80004ba:	2aff      	cmp	r2, #255	; 0xff
 80004bc:	d00f      	beq.n	80004de <__eqsf2+0x3a>
 80004be:	2cff      	cmp	r4, #255	; 0xff
 80004c0:	d011      	beq.n	80004e6 <__eqsf2+0x42>
 80004c2:	2001      	movs	r0, #1
 80004c4:	42a2      	cmp	r2, r4
 80004c6:	d000      	beq.n	80004ca <__eqsf2+0x26>
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	42b5      	cmp	r5, r6
 80004cc:	d1fc      	bne.n	80004c8 <__eqsf2+0x24>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d00d      	beq.n	80004ee <__eqsf2+0x4a>
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d1f8      	bne.n	80004c8 <__eqsf2+0x24>
 80004d6:	0028      	movs	r0, r5
 80004d8:	1e45      	subs	r5, r0, #1
 80004da:	41a8      	sbcs	r0, r5
 80004dc:	e7f4      	b.n	80004c8 <__eqsf2+0x24>
 80004de:	2001      	movs	r0, #1
 80004e0:	2d00      	cmp	r5, #0
 80004e2:	d1f1      	bne.n	80004c8 <__eqsf2+0x24>
 80004e4:	e7eb      	b.n	80004be <__eqsf2+0x1a>
 80004e6:	2001      	movs	r0, #1
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d1ed      	bne.n	80004c8 <__eqsf2+0x24>
 80004ec:	e7e9      	b.n	80004c2 <__eqsf2+0x1e>
 80004ee:	2000      	movs	r0, #0
 80004f0:	e7ea      	b.n	80004c8 <__eqsf2+0x24>
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__gesf2>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	004a      	lsls	r2, r1, #1
 80004f8:	024e      	lsls	r6, r1, #9
 80004fa:	0245      	lsls	r5, r0, #9
 80004fc:	0044      	lsls	r4, r0, #1
 80004fe:	0a6d      	lsrs	r5, r5, #9
 8000500:	0e24      	lsrs	r4, r4, #24
 8000502:	0fc3      	lsrs	r3, r0, #31
 8000504:	0a76      	lsrs	r6, r6, #9
 8000506:	0e12      	lsrs	r2, r2, #24
 8000508:	0fc9      	lsrs	r1, r1, #31
 800050a:	2cff      	cmp	r4, #255	; 0xff
 800050c:	d015      	beq.n	800053a <__gesf2+0x46>
 800050e:	2aff      	cmp	r2, #255	; 0xff
 8000510:	d00e      	beq.n	8000530 <__gesf2+0x3c>
 8000512:	2c00      	cmp	r4, #0
 8000514:	d115      	bne.n	8000542 <__gesf2+0x4e>
 8000516:	2a00      	cmp	r2, #0
 8000518:	d101      	bne.n	800051e <__gesf2+0x2a>
 800051a:	2e00      	cmp	r6, #0
 800051c:	d01c      	beq.n	8000558 <__gesf2+0x64>
 800051e:	2d00      	cmp	r5, #0
 8000520:	d014      	beq.n	800054c <__gesf2+0x58>
 8000522:	428b      	cmp	r3, r1
 8000524:	d027      	beq.n	8000576 <__gesf2+0x82>
 8000526:	2002      	movs	r0, #2
 8000528:	3b01      	subs	r3, #1
 800052a:	4018      	ands	r0, r3
 800052c:	3801      	subs	r0, #1
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	2e00      	cmp	r6, #0
 8000532:	d0ee      	beq.n	8000512 <__gesf2+0x1e>
 8000534:	2002      	movs	r0, #2
 8000536:	4240      	negs	r0, r0
 8000538:	e7f9      	b.n	800052e <__gesf2+0x3a>
 800053a:	2d00      	cmp	r5, #0
 800053c:	d1fa      	bne.n	8000534 <__gesf2+0x40>
 800053e:	2aff      	cmp	r2, #255	; 0xff
 8000540:	d00e      	beq.n	8000560 <__gesf2+0x6c>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d10e      	bne.n	8000564 <__gesf2+0x70>
 8000546:	2e00      	cmp	r6, #0
 8000548:	d0ed      	beq.n	8000526 <__gesf2+0x32>
 800054a:	e00b      	b.n	8000564 <__gesf2+0x70>
 800054c:	2301      	movs	r3, #1
 800054e:	3901      	subs	r1, #1
 8000550:	4399      	bics	r1, r3
 8000552:	0008      	movs	r0, r1
 8000554:	3001      	adds	r0, #1
 8000556:	e7ea      	b.n	800052e <__gesf2+0x3a>
 8000558:	2000      	movs	r0, #0
 800055a:	2d00      	cmp	r5, #0
 800055c:	d0e7      	beq.n	800052e <__gesf2+0x3a>
 800055e:	e7e2      	b.n	8000526 <__gesf2+0x32>
 8000560:	2e00      	cmp	r6, #0
 8000562:	d1e7      	bne.n	8000534 <__gesf2+0x40>
 8000564:	428b      	cmp	r3, r1
 8000566:	d1de      	bne.n	8000526 <__gesf2+0x32>
 8000568:	4294      	cmp	r4, r2
 800056a:	dd05      	ble.n	8000578 <__gesf2+0x84>
 800056c:	2102      	movs	r1, #2
 800056e:	1e58      	subs	r0, r3, #1
 8000570:	4008      	ands	r0, r1
 8000572:	3801      	subs	r0, #1
 8000574:	e7db      	b.n	800052e <__gesf2+0x3a>
 8000576:	2400      	movs	r4, #0
 8000578:	42a2      	cmp	r2, r4
 800057a:	dc04      	bgt.n	8000586 <__gesf2+0x92>
 800057c:	42b5      	cmp	r5, r6
 800057e:	d8d2      	bhi.n	8000526 <__gesf2+0x32>
 8000580:	2000      	movs	r0, #0
 8000582:	42b5      	cmp	r5, r6
 8000584:	d2d3      	bcs.n	800052e <__gesf2+0x3a>
 8000586:	1e58      	subs	r0, r3, #1
 8000588:	2301      	movs	r3, #1
 800058a:	4398      	bics	r0, r3
 800058c:	3001      	adds	r0, #1
 800058e:	e7ce      	b.n	800052e <__gesf2+0x3a>

08000590 <__lesf2>:
 8000590:	b530      	push	{r4, r5, lr}
 8000592:	0042      	lsls	r2, r0, #1
 8000594:	0244      	lsls	r4, r0, #9
 8000596:	024d      	lsls	r5, r1, #9
 8000598:	0fc3      	lsrs	r3, r0, #31
 800059a:	0048      	lsls	r0, r1, #1
 800059c:	0a64      	lsrs	r4, r4, #9
 800059e:	0e12      	lsrs	r2, r2, #24
 80005a0:	0a6d      	lsrs	r5, r5, #9
 80005a2:	0e00      	lsrs	r0, r0, #24
 80005a4:	0fc9      	lsrs	r1, r1, #31
 80005a6:	2aff      	cmp	r2, #255	; 0xff
 80005a8:	d012      	beq.n	80005d0 <__lesf2+0x40>
 80005aa:	28ff      	cmp	r0, #255	; 0xff
 80005ac:	d00c      	beq.n	80005c8 <__lesf2+0x38>
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d112      	bne.n	80005d8 <__lesf2+0x48>
 80005b2:	2800      	cmp	r0, #0
 80005b4:	d119      	bne.n	80005ea <__lesf2+0x5a>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d117      	bne.n	80005ea <__lesf2+0x5a>
 80005ba:	2c00      	cmp	r4, #0
 80005bc:	d02b      	beq.n	8000616 <__lesf2+0x86>
 80005be:	2002      	movs	r0, #2
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4018      	ands	r0, r3
 80005c4:	3801      	subs	r0, #1
 80005c6:	e026      	b.n	8000616 <__lesf2+0x86>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d0f0      	beq.n	80005ae <__lesf2+0x1e>
 80005cc:	2002      	movs	r0, #2
 80005ce:	e022      	b.n	8000616 <__lesf2+0x86>
 80005d0:	2c00      	cmp	r4, #0
 80005d2:	d1fb      	bne.n	80005cc <__lesf2+0x3c>
 80005d4:	28ff      	cmp	r0, #255	; 0xff
 80005d6:	d01f      	beq.n	8000618 <__lesf2+0x88>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d11f      	bne.n	800061c <__lesf2+0x8c>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d11d      	bne.n	800061c <__lesf2+0x8c>
 80005e0:	2002      	movs	r0, #2
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4018      	ands	r0, r3
 80005e6:	3801      	subs	r0, #1
 80005e8:	e015      	b.n	8000616 <__lesf2+0x86>
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d00e      	beq.n	800060c <__lesf2+0x7c>
 80005ee:	428b      	cmp	r3, r1
 80005f0:	d1e5      	bne.n	80005be <__lesf2+0x2e>
 80005f2:	2200      	movs	r2, #0
 80005f4:	4290      	cmp	r0, r2
 80005f6:	dc04      	bgt.n	8000602 <__lesf2+0x72>
 80005f8:	42ac      	cmp	r4, r5
 80005fa:	d8e0      	bhi.n	80005be <__lesf2+0x2e>
 80005fc:	2000      	movs	r0, #0
 80005fe:	42ac      	cmp	r4, r5
 8000600:	d209      	bcs.n	8000616 <__lesf2+0x86>
 8000602:	1e58      	subs	r0, r3, #1
 8000604:	2301      	movs	r3, #1
 8000606:	4398      	bics	r0, r3
 8000608:	3001      	adds	r0, #1
 800060a:	e004      	b.n	8000616 <__lesf2+0x86>
 800060c:	2301      	movs	r3, #1
 800060e:	3901      	subs	r1, #1
 8000610:	4399      	bics	r1, r3
 8000612:	0008      	movs	r0, r1
 8000614:	3001      	adds	r0, #1
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	2d00      	cmp	r5, #0
 800061a:	d1d7      	bne.n	80005cc <__lesf2+0x3c>
 800061c:	428b      	cmp	r3, r1
 800061e:	d1ce      	bne.n	80005be <__lesf2+0x2e>
 8000620:	4282      	cmp	r2, r0
 8000622:	dde7      	ble.n	80005f4 <__lesf2+0x64>
 8000624:	2102      	movs	r1, #2
 8000626:	1e58      	subs	r0, r3, #1
 8000628:	4008      	ands	r0, r1
 800062a:	3801      	subs	r0, #1
 800062c:	e7f3      	b.n	8000616 <__lesf2+0x86>
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__aeabi_fsub>:
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000632:	4647      	mov	r7, r8
 8000634:	46ce      	mov	lr, r9
 8000636:	0044      	lsls	r4, r0, #1
 8000638:	0fc2      	lsrs	r2, r0, #31
 800063a:	b580      	push	{r7, lr}
 800063c:	0247      	lsls	r7, r0, #9
 800063e:	0248      	lsls	r0, r1, #9
 8000640:	0a40      	lsrs	r0, r0, #9
 8000642:	4684      	mov	ip, r0
 8000644:	4666      	mov	r6, ip
 8000646:	0048      	lsls	r0, r1, #1
 8000648:	0a7f      	lsrs	r7, r7, #9
 800064a:	0e24      	lsrs	r4, r4, #24
 800064c:	00f6      	lsls	r6, r6, #3
 800064e:	0025      	movs	r5, r4
 8000650:	4690      	mov	r8, r2
 8000652:	00fb      	lsls	r3, r7, #3
 8000654:	0e00      	lsrs	r0, r0, #24
 8000656:	0fc9      	lsrs	r1, r1, #31
 8000658:	46b1      	mov	r9, r6
 800065a:	28ff      	cmp	r0, #255	; 0xff
 800065c:	d100      	bne.n	8000660 <__aeabi_fsub+0x30>
 800065e:	e085      	b.n	800076c <__aeabi_fsub+0x13c>
 8000660:	2601      	movs	r6, #1
 8000662:	4071      	eors	r1, r6
 8000664:	1a26      	subs	r6, r4, r0
 8000666:	4291      	cmp	r1, r2
 8000668:	d057      	beq.n	800071a <__aeabi_fsub+0xea>
 800066a:	2e00      	cmp	r6, #0
 800066c:	dd43      	ble.n	80006f6 <__aeabi_fsub+0xc6>
 800066e:	2800      	cmp	r0, #0
 8000670:	d000      	beq.n	8000674 <__aeabi_fsub+0x44>
 8000672:	e07f      	b.n	8000774 <__aeabi_fsub+0x144>
 8000674:	4649      	mov	r1, r9
 8000676:	2900      	cmp	r1, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fsub+0x4c>
 800067a:	e0aa      	b.n	80007d2 <__aeabi_fsub+0x1a2>
 800067c:	3e01      	subs	r6, #1
 800067e:	2e00      	cmp	r6, #0
 8000680:	d000      	beq.n	8000684 <__aeabi_fsub+0x54>
 8000682:	e0f7      	b.n	8000874 <__aeabi_fsub+0x244>
 8000684:	1a5b      	subs	r3, r3, r1
 8000686:	015a      	lsls	r2, r3, #5
 8000688:	d400      	bmi.n	800068c <__aeabi_fsub+0x5c>
 800068a:	e08b      	b.n	80007a4 <__aeabi_fsub+0x174>
 800068c:	019b      	lsls	r3, r3, #6
 800068e:	099c      	lsrs	r4, r3, #6
 8000690:	0020      	movs	r0, r4
 8000692:	f001 ff3d 	bl	8002510 <__clzsi2>
 8000696:	3805      	subs	r0, #5
 8000698:	4084      	lsls	r4, r0
 800069a:	4285      	cmp	r5, r0
 800069c:	dd00      	ble.n	80006a0 <__aeabi_fsub+0x70>
 800069e:	e0d3      	b.n	8000848 <__aeabi_fsub+0x218>
 80006a0:	1b45      	subs	r5, r0, r5
 80006a2:	0023      	movs	r3, r4
 80006a4:	2020      	movs	r0, #32
 80006a6:	3501      	adds	r5, #1
 80006a8:	40eb      	lsrs	r3, r5
 80006aa:	1b45      	subs	r5, r0, r5
 80006ac:	40ac      	lsls	r4, r5
 80006ae:	1e62      	subs	r2, r4, #1
 80006b0:	4194      	sbcs	r4, r2
 80006b2:	4323      	orrs	r3, r4
 80006b4:	2407      	movs	r4, #7
 80006b6:	2500      	movs	r5, #0
 80006b8:	401c      	ands	r4, r3
 80006ba:	2201      	movs	r2, #1
 80006bc:	4641      	mov	r1, r8
 80006be:	400a      	ands	r2, r1
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	d004      	beq.n	80006ce <__aeabi_fsub+0x9e>
 80006c4:	210f      	movs	r1, #15
 80006c6:	4019      	ands	r1, r3
 80006c8:	2904      	cmp	r1, #4
 80006ca:	d000      	beq.n	80006ce <__aeabi_fsub+0x9e>
 80006cc:	3304      	adds	r3, #4
 80006ce:	0159      	lsls	r1, r3, #5
 80006d0:	d400      	bmi.n	80006d4 <__aeabi_fsub+0xa4>
 80006d2:	e080      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 80006d4:	3501      	adds	r5, #1
 80006d6:	b2ec      	uxtb	r4, r5
 80006d8:	2dff      	cmp	r5, #255	; 0xff
 80006da:	d000      	beq.n	80006de <__aeabi_fsub+0xae>
 80006dc:	e0a3      	b.n	8000826 <__aeabi_fsub+0x1f6>
 80006de:	24ff      	movs	r4, #255	; 0xff
 80006e0:	2300      	movs	r3, #0
 80006e2:	025b      	lsls	r3, r3, #9
 80006e4:	05e4      	lsls	r4, r4, #23
 80006e6:	0a58      	lsrs	r0, r3, #9
 80006e8:	07d2      	lsls	r2, r2, #31
 80006ea:	4320      	orrs	r0, r4
 80006ec:	4310      	orrs	r0, r2
 80006ee:	bc0c      	pop	{r2, r3}
 80006f0:	4690      	mov	r8, r2
 80006f2:	4699      	mov	r9, r3
 80006f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	d174      	bne.n	80007e4 <__aeabi_fsub+0x1b4>
 80006fa:	1c60      	adds	r0, r4, #1
 80006fc:	b2c0      	uxtb	r0, r0
 80006fe:	2801      	cmp	r0, #1
 8000700:	dc00      	bgt.n	8000704 <__aeabi_fsub+0xd4>
 8000702:	e0a7      	b.n	8000854 <__aeabi_fsub+0x224>
 8000704:	464a      	mov	r2, r9
 8000706:	1a9c      	subs	r4, r3, r2
 8000708:	0162      	lsls	r2, r4, #5
 800070a:	d500      	bpl.n	800070e <__aeabi_fsub+0xde>
 800070c:	e0b6      	b.n	800087c <__aeabi_fsub+0x24c>
 800070e:	2c00      	cmp	r4, #0
 8000710:	d1be      	bne.n	8000690 <__aeabi_fsub+0x60>
 8000712:	2200      	movs	r2, #0
 8000714:	2400      	movs	r4, #0
 8000716:	2300      	movs	r3, #0
 8000718:	e7e3      	b.n	80006e2 <__aeabi_fsub+0xb2>
 800071a:	2e00      	cmp	r6, #0
 800071c:	dc00      	bgt.n	8000720 <__aeabi_fsub+0xf0>
 800071e:	e085      	b.n	800082c <__aeabi_fsub+0x1fc>
 8000720:	2800      	cmp	r0, #0
 8000722:	d046      	beq.n	80007b2 <__aeabi_fsub+0x182>
 8000724:	2cff      	cmp	r4, #255	; 0xff
 8000726:	d049      	beq.n	80007bc <__aeabi_fsub+0x18c>
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	4648      	mov	r0, r9
 800072c:	04d2      	lsls	r2, r2, #19
 800072e:	4310      	orrs	r0, r2
 8000730:	4681      	mov	r9, r0
 8000732:	2201      	movs	r2, #1
 8000734:	2e1b      	cmp	r6, #27
 8000736:	dc09      	bgt.n	800074c <__aeabi_fsub+0x11c>
 8000738:	2020      	movs	r0, #32
 800073a:	464c      	mov	r4, r9
 800073c:	1b80      	subs	r0, r0, r6
 800073e:	4084      	lsls	r4, r0
 8000740:	464a      	mov	r2, r9
 8000742:	0020      	movs	r0, r4
 8000744:	40f2      	lsrs	r2, r6
 8000746:	1e44      	subs	r4, r0, #1
 8000748:	41a0      	sbcs	r0, r4
 800074a:	4302      	orrs	r2, r0
 800074c:	189b      	adds	r3, r3, r2
 800074e:	015a      	lsls	r2, r3, #5
 8000750:	d528      	bpl.n	80007a4 <__aeabi_fsub+0x174>
 8000752:	3501      	adds	r5, #1
 8000754:	2dff      	cmp	r5, #255	; 0xff
 8000756:	d100      	bne.n	800075a <__aeabi_fsub+0x12a>
 8000758:	e0a8      	b.n	80008ac <__aeabi_fsub+0x27c>
 800075a:	2201      	movs	r2, #1
 800075c:	2407      	movs	r4, #7
 800075e:	4994      	ldr	r1, [pc, #592]	; (80009b0 <__aeabi_fsub+0x380>)
 8000760:	401a      	ands	r2, r3
 8000762:	085b      	lsrs	r3, r3, #1
 8000764:	400b      	ands	r3, r1
 8000766:	4313      	orrs	r3, r2
 8000768:	401c      	ands	r4, r3
 800076a:	e7a6      	b.n	80006ba <__aeabi_fsub+0x8a>
 800076c:	2e00      	cmp	r6, #0
 800076e:	d000      	beq.n	8000772 <__aeabi_fsub+0x142>
 8000770:	e778      	b.n	8000664 <__aeabi_fsub+0x34>
 8000772:	e775      	b.n	8000660 <__aeabi_fsub+0x30>
 8000774:	2cff      	cmp	r4, #255	; 0xff
 8000776:	d054      	beq.n	8000822 <__aeabi_fsub+0x1f2>
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	4649      	mov	r1, r9
 800077c:	04d2      	lsls	r2, r2, #19
 800077e:	4311      	orrs	r1, r2
 8000780:	4689      	mov	r9, r1
 8000782:	2201      	movs	r2, #1
 8000784:	2e1b      	cmp	r6, #27
 8000786:	dc09      	bgt.n	800079c <__aeabi_fsub+0x16c>
 8000788:	2120      	movs	r1, #32
 800078a:	4648      	mov	r0, r9
 800078c:	1b89      	subs	r1, r1, r6
 800078e:	4088      	lsls	r0, r1
 8000790:	464a      	mov	r2, r9
 8000792:	0001      	movs	r1, r0
 8000794:	40f2      	lsrs	r2, r6
 8000796:	1e48      	subs	r0, r1, #1
 8000798:	4181      	sbcs	r1, r0
 800079a:	430a      	orrs	r2, r1
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	015a      	lsls	r2, r3, #5
 80007a0:	d500      	bpl.n	80007a4 <__aeabi_fsub+0x174>
 80007a2:	e773      	b.n	800068c <__aeabi_fsub+0x5c>
 80007a4:	2201      	movs	r2, #1
 80007a6:	4641      	mov	r1, r8
 80007a8:	400a      	ands	r2, r1
 80007aa:	0759      	lsls	r1, r3, #29
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fsub+0x180>
 80007ae:	e789      	b.n	80006c4 <__aeabi_fsub+0x94>
 80007b0:	e011      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 80007b2:	4648      	mov	r0, r9
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d158      	bne.n	800086a <__aeabi_fsub+0x23a>
 80007b8:	2cff      	cmp	r4, #255	; 0xff
 80007ba:	d10c      	bne.n	80007d6 <__aeabi_fsub+0x1a6>
 80007bc:	08db      	lsrs	r3, r3, #3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0x194>
 80007c2:	e78c      	b.n	80006de <__aeabi_fsub+0xae>
 80007c4:	2080      	movs	r0, #128	; 0x80
 80007c6:	03c0      	lsls	r0, r0, #15
 80007c8:	4303      	orrs	r3, r0
 80007ca:	025b      	lsls	r3, r3, #9
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	24ff      	movs	r4, #255	; 0xff
 80007d0:	e787      	b.n	80006e2 <__aeabi_fsub+0xb2>
 80007d2:	2cff      	cmp	r4, #255	; 0xff
 80007d4:	d025      	beq.n	8000822 <__aeabi_fsub+0x1f2>
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	2dff      	cmp	r5, #255	; 0xff
 80007da:	d0f0      	beq.n	80007be <__aeabi_fsub+0x18e>
 80007dc:	025b      	lsls	r3, r3, #9
 80007de:	0a5b      	lsrs	r3, r3, #9
 80007e0:	b2ec      	uxtb	r4, r5
 80007e2:	e77e      	b.n	80006e2 <__aeabi_fsub+0xb2>
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d04d      	beq.n	8000884 <__aeabi_fsub+0x254>
 80007e8:	28ff      	cmp	r0, #255	; 0xff
 80007ea:	d018      	beq.n	800081e <__aeabi_fsub+0x1ee>
 80007ec:	2480      	movs	r4, #128	; 0x80
 80007ee:	04e4      	lsls	r4, r4, #19
 80007f0:	4272      	negs	r2, r6
 80007f2:	4323      	orrs	r3, r4
 80007f4:	2a1b      	cmp	r2, #27
 80007f6:	dd00      	ble.n	80007fa <__aeabi_fsub+0x1ca>
 80007f8:	e0c4      	b.n	8000984 <__aeabi_fsub+0x354>
 80007fa:	001c      	movs	r4, r3
 80007fc:	2520      	movs	r5, #32
 80007fe:	40d4      	lsrs	r4, r2
 8000800:	1aaa      	subs	r2, r5, r2
 8000802:	4093      	lsls	r3, r2
 8000804:	1e5a      	subs	r2, r3, #1
 8000806:	4193      	sbcs	r3, r2
 8000808:	4323      	orrs	r3, r4
 800080a:	464a      	mov	r2, r9
 800080c:	0005      	movs	r5, r0
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	4688      	mov	r8, r1
 8000812:	e738      	b.n	8000686 <__aeabi_fsub+0x56>
 8000814:	1c72      	adds	r2, r6, #1
 8000816:	d0f8      	beq.n	800080a <__aeabi_fsub+0x1da>
 8000818:	43f2      	mvns	r2, r6
 800081a:	28ff      	cmp	r0, #255	; 0xff
 800081c:	d1ea      	bne.n	80007f4 <__aeabi_fsub+0x1c4>
 800081e:	000a      	movs	r2, r1
 8000820:	464b      	mov	r3, r9
 8000822:	25ff      	movs	r5, #255	; 0xff
 8000824:	e7d7      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 8000826:	019b      	lsls	r3, r3, #6
 8000828:	0a5b      	lsrs	r3, r3, #9
 800082a:	e75a      	b.n	80006e2 <__aeabi_fsub+0xb2>
 800082c:	2e00      	cmp	r6, #0
 800082e:	d141      	bne.n	80008b4 <__aeabi_fsub+0x284>
 8000830:	1c65      	adds	r5, r4, #1
 8000832:	b2e9      	uxtb	r1, r5
 8000834:	2901      	cmp	r1, #1
 8000836:	dd45      	ble.n	80008c4 <__aeabi_fsub+0x294>
 8000838:	2dff      	cmp	r5, #255	; 0xff
 800083a:	d100      	bne.n	800083e <__aeabi_fsub+0x20e>
 800083c:	e74f      	b.n	80006de <__aeabi_fsub+0xae>
 800083e:	2407      	movs	r4, #7
 8000840:	444b      	add	r3, r9
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	401c      	ands	r4, r3
 8000846:	e738      	b.n	80006ba <__aeabi_fsub+0x8a>
 8000848:	2207      	movs	r2, #7
 800084a:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <__aeabi_fsub+0x384>)
 800084c:	1a2d      	subs	r5, r5, r0
 800084e:	4023      	ands	r3, r4
 8000850:	4014      	ands	r4, r2
 8000852:	e732      	b.n	80006ba <__aeabi_fsub+0x8a>
 8000854:	2c00      	cmp	r4, #0
 8000856:	d11d      	bne.n	8000894 <__aeabi_fsub+0x264>
 8000858:	2b00      	cmp	r3, #0
 800085a:	d17a      	bne.n	8000952 <__aeabi_fsub+0x322>
 800085c:	464b      	mov	r3, r9
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fsub+0x234>
 8000862:	e091      	b.n	8000988 <__aeabi_fsub+0x358>
 8000864:	000a      	movs	r2, r1
 8000866:	2500      	movs	r5, #0
 8000868:	e7b5      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 800086a:	3e01      	subs	r6, #1
 800086c:	2e00      	cmp	r6, #0
 800086e:	d119      	bne.n	80008a4 <__aeabi_fsub+0x274>
 8000870:	444b      	add	r3, r9
 8000872:	e76c      	b.n	800074e <__aeabi_fsub+0x11e>
 8000874:	2cff      	cmp	r4, #255	; 0xff
 8000876:	d184      	bne.n	8000782 <__aeabi_fsub+0x152>
 8000878:	25ff      	movs	r5, #255	; 0xff
 800087a:	e7ac      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 800087c:	464a      	mov	r2, r9
 800087e:	4688      	mov	r8, r1
 8000880:	1ad4      	subs	r4, r2, r3
 8000882:	e705      	b.n	8000690 <__aeabi_fsub+0x60>
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1c5      	bne.n	8000814 <__aeabi_fsub+0x1e4>
 8000888:	000a      	movs	r2, r1
 800088a:	28ff      	cmp	r0, #255	; 0xff
 800088c:	d0c8      	beq.n	8000820 <__aeabi_fsub+0x1f0>
 800088e:	0005      	movs	r5, r0
 8000890:	464b      	mov	r3, r9
 8000892:	e7a0      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 8000894:	2b00      	cmp	r3, #0
 8000896:	d149      	bne.n	800092c <__aeabi_fsub+0x2fc>
 8000898:	464b      	mov	r3, r9
 800089a:	2b00      	cmp	r3, #0
 800089c:	d077      	beq.n	800098e <__aeabi_fsub+0x35e>
 800089e:	000a      	movs	r2, r1
 80008a0:	25ff      	movs	r5, #255	; 0xff
 80008a2:	e798      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 80008a4:	2cff      	cmp	r4, #255	; 0xff
 80008a6:	d000      	beq.n	80008aa <__aeabi_fsub+0x27a>
 80008a8:	e743      	b.n	8000732 <__aeabi_fsub+0x102>
 80008aa:	e787      	b.n	80007bc <__aeabi_fsub+0x18c>
 80008ac:	000a      	movs	r2, r1
 80008ae:	24ff      	movs	r4, #255	; 0xff
 80008b0:	2300      	movs	r3, #0
 80008b2:	e716      	b.n	80006e2 <__aeabi_fsub+0xb2>
 80008b4:	2c00      	cmp	r4, #0
 80008b6:	d115      	bne.n	80008e4 <__aeabi_fsub+0x2b4>
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d157      	bne.n	800096c <__aeabi_fsub+0x33c>
 80008bc:	28ff      	cmp	r0, #255	; 0xff
 80008be:	d1e6      	bne.n	800088e <__aeabi_fsub+0x25e>
 80008c0:	464b      	mov	r3, r9
 80008c2:	e77b      	b.n	80007bc <__aeabi_fsub+0x18c>
 80008c4:	2c00      	cmp	r4, #0
 80008c6:	d120      	bne.n	800090a <__aeabi_fsub+0x2da>
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d057      	beq.n	800097c <__aeabi_fsub+0x34c>
 80008cc:	4649      	mov	r1, r9
 80008ce:	2900      	cmp	r1, #0
 80008d0:	d053      	beq.n	800097a <__aeabi_fsub+0x34a>
 80008d2:	444b      	add	r3, r9
 80008d4:	015a      	lsls	r2, r3, #5
 80008d6:	d568      	bpl.n	80009aa <__aeabi_fsub+0x37a>
 80008d8:	2407      	movs	r4, #7
 80008da:	4a36      	ldr	r2, [pc, #216]	; (80009b4 <__aeabi_fsub+0x384>)
 80008dc:	401c      	ands	r4, r3
 80008de:	2501      	movs	r5, #1
 80008e0:	4013      	ands	r3, r2
 80008e2:	e6ea      	b.n	80006ba <__aeabi_fsub+0x8a>
 80008e4:	28ff      	cmp	r0, #255	; 0xff
 80008e6:	d0eb      	beq.n	80008c0 <__aeabi_fsub+0x290>
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	04d2      	lsls	r2, r2, #19
 80008ec:	4276      	negs	r6, r6
 80008ee:	4313      	orrs	r3, r2
 80008f0:	2e1b      	cmp	r6, #27
 80008f2:	dc53      	bgt.n	800099c <__aeabi_fsub+0x36c>
 80008f4:	2520      	movs	r5, #32
 80008f6:	1bad      	subs	r5, r5, r6
 80008f8:	001a      	movs	r2, r3
 80008fa:	40ab      	lsls	r3, r5
 80008fc:	40f2      	lsrs	r2, r6
 80008fe:	1e5c      	subs	r4, r3, #1
 8000900:	41a3      	sbcs	r3, r4
 8000902:	4313      	orrs	r3, r2
 8000904:	444b      	add	r3, r9
 8000906:	0005      	movs	r5, r0
 8000908:	e721      	b.n	800074e <__aeabi_fsub+0x11e>
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0d8      	beq.n	80008c0 <__aeabi_fsub+0x290>
 800090e:	4649      	mov	r1, r9
 8000910:	2900      	cmp	r1, #0
 8000912:	d100      	bne.n	8000916 <__aeabi_fsub+0x2e6>
 8000914:	e752      	b.n	80007bc <__aeabi_fsub+0x18c>
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	03c9      	lsls	r1, r1, #15
 800091a:	420f      	tst	r7, r1
 800091c:	d100      	bne.n	8000920 <__aeabi_fsub+0x2f0>
 800091e:	e74d      	b.n	80007bc <__aeabi_fsub+0x18c>
 8000920:	4660      	mov	r0, ip
 8000922:	4208      	tst	r0, r1
 8000924:	d000      	beq.n	8000928 <__aeabi_fsub+0x2f8>
 8000926:	e749      	b.n	80007bc <__aeabi_fsub+0x18c>
 8000928:	464b      	mov	r3, r9
 800092a:	e747      	b.n	80007bc <__aeabi_fsub+0x18c>
 800092c:	4648      	mov	r0, r9
 800092e:	25ff      	movs	r5, #255	; 0xff
 8000930:	2800      	cmp	r0, #0
 8000932:	d100      	bne.n	8000936 <__aeabi_fsub+0x306>
 8000934:	e74f      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	03d2      	lsls	r2, r2, #15
 800093a:	4217      	tst	r7, r2
 800093c:	d004      	beq.n	8000948 <__aeabi_fsub+0x318>
 800093e:	4660      	mov	r0, ip
 8000940:	4210      	tst	r0, r2
 8000942:	d101      	bne.n	8000948 <__aeabi_fsub+0x318>
 8000944:	464b      	mov	r3, r9
 8000946:	4688      	mov	r8, r1
 8000948:	2201      	movs	r2, #1
 800094a:	4641      	mov	r1, r8
 800094c:	25ff      	movs	r5, #255	; 0xff
 800094e:	400a      	ands	r2, r1
 8000950:	e741      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 8000952:	4648      	mov	r0, r9
 8000954:	2800      	cmp	r0, #0
 8000956:	d01f      	beq.n	8000998 <__aeabi_fsub+0x368>
 8000958:	1a1a      	subs	r2, r3, r0
 800095a:	0150      	lsls	r0, r2, #5
 800095c:	d520      	bpl.n	80009a0 <__aeabi_fsub+0x370>
 800095e:	464a      	mov	r2, r9
 8000960:	2407      	movs	r4, #7
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	401c      	ands	r4, r3
 8000966:	4688      	mov	r8, r1
 8000968:	2500      	movs	r5, #0
 800096a:	e6a6      	b.n	80006ba <__aeabi_fsub+0x8a>
 800096c:	1c74      	adds	r4, r6, #1
 800096e:	d0c9      	beq.n	8000904 <__aeabi_fsub+0x2d4>
 8000970:	43f6      	mvns	r6, r6
 8000972:	28ff      	cmp	r0, #255	; 0xff
 8000974:	d1bc      	bne.n	80008f0 <__aeabi_fsub+0x2c0>
 8000976:	464b      	mov	r3, r9
 8000978:	e720      	b.n	80007bc <__aeabi_fsub+0x18c>
 800097a:	4699      	mov	r9, r3
 800097c:	464b      	mov	r3, r9
 800097e:	2500      	movs	r5, #0
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	e72b      	b.n	80007dc <__aeabi_fsub+0x1ac>
 8000984:	2301      	movs	r3, #1
 8000986:	e740      	b.n	800080a <__aeabi_fsub+0x1da>
 8000988:	2200      	movs	r2, #0
 800098a:	2300      	movs	r3, #0
 800098c:	e6a9      	b.n	80006e2 <__aeabi_fsub+0xb2>
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	2200      	movs	r2, #0
 8000992:	03db      	lsls	r3, r3, #15
 8000994:	24ff      	movs	r4, #255	; 0xff
 8000996:	e6a4      	b.n	80006e2 <__aeabi_fsub+0xb2>
 8000998:	2500      	movs	r5, #0
 800099a:	e71c      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 800099c:	2301      	movs	r3, #1
 800099e:	e7b1      	b.n	8000904 <__aeabi_fsub+0x2d4>
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	d0f1      	beq.n	8000988 <__aeabi_fsub+0x358>
 80009a4:	0013      	movs	r3, r2
 80009a6:	2500      	movs	r5, #0
 80009a8:	e6fc      	b.n	80007a4 <__aeabi_fsub+0x174>
 80009aa:	2500      	movs	r5, #0
 80009ac:	e6fa      	b.n	80007a4 <__aeabi_fsub+0x174>
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	7dffffff 	.word	0x7dffffff
 80009b4:	fbffffff 	.word	0xfbffffff

080009b8 <__aeabi_i2f>:
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d03d      	beq.n	8000a3a <__aeabi_i2f+0x82>
 80009be:	17c3      	asrs	r3, r0, #31
 80009c0:	18c5      	adds	r5, r0, r3
 80009c2:	405d      	eors	r5, r3
 80009c4:	0fc4      	lsrs	r4, r0, #31
 80009c6:	0028      	movs	r0, r5
 80009c8:	f001 fda2 	bl	8002510 <__clzsi2>
 80009cc:	229e      	movs	r2, #158	; 0x9e
 80009ce:	1a12      	subs	r2, r2, r0
 80009d0:	2a96      	cmp	r2, #150	; 0x96
 80009d2:	dc07      	bgt.n	80009e4 <__aeabi_i2f+0x2c>
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	2808      	cmp	r0, #8
 80009d8:	dd33      	ble.n	8000a42 <__aeabi_i2f+0x8a>
 80009da:	3808      	subs	r0, #8
 80009dc:	4085      	lsls	r5, r0
 80009de:	0268      	lsls	r0, r5, #9
 80009e0:	0a40      	lsrs	r0, r0, #9
 80009e2:	e023      	b.n	8000a2c <__aeabi_i2f+0x74>
 80009e4:	2a99      	cmp	r2, #153	; 0x99
 80009e6:	dd0b      	ble.n	8000a00 <__aeabi_i2f+0x48>
 80009e8:	2305      	movs	r3, #5
 80009ea:	0029      	movs	r1, r5
 80009ec:	1a1b      	subs	r3, r3, r0
 80009ee:	40d9      	lsrs	r1, r3
 80009f0:	0003      	movs	r3, r0
 80009f2:	331b      	adds	r3, #27
 80009f4:	409d      	lsls	r5, r3
 80009f6:	002b      	movs	r3, r5
 80009f8:	1e5d      	subs	r5, r3, #1
 80009fa:	41ab      	sbcs	r3, r5
 80009fc:	4319      	orrs	r1, r3
 80009fe:	000d      	movs	r5, r1
 8000a00:	2805      	cmp	r0, #5
 8000a02:	dd01      	ble.n	8000a08 <__aeabi_i2f+0x50>
 8000a04:	1f43      	subs	r3, r0, #5
 8000a06:	409d      	lsls	r5, r3
 8000a08:	002b      	movs	r3, r5
 8000a0a:	490f      	ldr	r1, [pc, #60]	; (8000a48 <__aeabi_i2f+0x90>)
 8000a0c:	400b      	ands	r3, r1
 8000a0e:	076e      	lsls	r6, r5, #29
 8000a10:	d009      	beq.n	8000a26 <__aeabi_i2f+0x6e>
 8000a12:	260f      	movs	r6, #15
 8000a14:	4035      	ands	r5, r6
 8000a16:	2d04      	cmp	r5, #4
 8000a18:	d005      	beq.n	8000a26 <__aeabi_i2f+0x6e>
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	015d      	lsls	r5, r3, #5
 8000a1e:	d502      	bpl.n	8000a26 <__aeabi_i2f+0x6e>
 8000a20:	229f      	movs	r2, #159	; 0x9f
 8000a22:	400b      	ands	r3, r1
 8000a24:	1a12      	subs	r2, r2, r0
 8000a26:	019b      	lsls	r3, r3, #6
 8000a28:	0a58      	lsrs	r0, r3, #9
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	0240      	lsls	r0, r0, #9
 8000a2e:	05d2      	lsls	r2, r2, #23
 8000a30:	0a40      	lsrs	r0, r0, #9
 8000a32:	07e4      	lsls	r4, r4, #31
 8000a34:	4310      	orrs	r0, r2
 8000a36:	4320      	orrs	r0, r4
 8000a38:	bd70      	pop	{r4, r5, r6, pc}
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	e7f4      	b.n	8000a2c <__aeabi_i2f+0x74>
 8000a42:	0268      	lsls	r0, r5, #9
 8000a44:	0a40      	lsrs	r0, r0, #9
 8000a46:	e7f1      	b.n	8000a2c <__aeabi_i2f+0x74>
 8000a48:	fbffffff 	.word	0xfbffffff

08000a4c <__aeabi_ui2f>:
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	1e04      	subs	r4, r0, #0
 8000a50:	d034      	beq.n	8000abc <__aeabi_ui2f+0x70>
 8000a52:	f001 fd5d 	bl	8002510 <__clzsi2>
 8000a56:	229e      	movs	r2, #158	; 0x9e
 8000a58:	1a12      	subs	r2, r2, r0
 8000a5a:	2a96      	cmp	r2, #150	; 0x96
 8000a5c:	dc07      	bgt.n	8000a6e <__aeabi_ui2f+0x22>
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	2808      	cmp	r0, #8
 8000a62:	dd2e      	ble.n	8000ac2 <__aeabi_ui2f+0x76>
 8000a64:	3808      	subs	r0, #8
 8000a66:	4084      	lsls	r4, r0
 8000a68:	0260      	lsls	r0, r4, #9
 8000a6a:	0a40      	lsrs	r0, r0, #9
 8000a6c:	e021      	b.n	8000ab2 <__aeabi_ui2f+0x66>
 8000a6e:	2a99      	cmp	r2, #153	; 0x99
 8000a70:	dd09      	ble.n	8000a86 <__aeabi_ui2f+0x3a>
 8000a72:	0003      	movs	r3, r0
 8000a74:	0021      	movs	r1, r4
 8000a76:	331b      	adds	r3, #27
 8000a78:	4099      	lsls	r1, r3
 8000a7a:	1e4b      	subs	r3, r1, #1
 8000a7c:	4199      	sbcs	r1, r3
 8000a7e:	2305      	movs	r3, #5
 8000a80:	1a1b      	subs	r3, r3, r0
 8000a82:	40dc      	lsrs	r4, r3
 8000a84:	430c      	orrs	r4, r1
 8000a86:	2805      	cmp	r0, #5
 8000a88:	dd01      	ble.n	8000a8e <__aeabi_ui2f+0x42>
 8000a8a:	1f43      	subs	r3, r0, #5
 8000a8c:	409c      	lsls	r4, r3
 8000a8e:	0023      	movs	r3, r4
 8000a90:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <__aeabi_ui2f+0x7c>)
 8000a92:	400b      	ands	r3, r1
 8000a94:	0765      	lsls	r5, r4, #29
 8000a96:	d009      	beq.n	8000aac <__aeabi_ui2f+0x60>
 8000a98:	250f      	movs	r5, #15
 8000a9a:	402c      	ands	r4, r5
 8000a9c:	2c04      	cmp	r4, #4
 8000a9e:	d005      	beq.n	8000aac <__aeabi_ui2f+0x60>
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	015c      	lsls	r4, r3, #5
 8000aa4:	d502      	bpl.n	8000aac <__aeabi_ui2f+0x60>
 8000aa6:	229f      	movs	r2, #159	; 0x9f
 8000aa8:	400b      	ands	r3, r1
 8000aaa:	1a12      	subs	r2, r2, r0
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	0a58      	lsrs	r0, r3, #9
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	0240      	lsls	r0, r0, #9
 8000ab4:	05d2      	lsls	r2, r2, #23
 8000ab6:	0a40      	lsrs	r0, r0, #9
 8000ab8:	4310      	orrs	r0, r2
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
 8000abc:	2200      	movs	r2, #0
 8000abe:	2000      	movs	r0, #0
 8000ac0:	e7f7      	b.n	8000ab2 <__aeabi_ui2f+0x66>
 8000ac2:	0260      	lsls	r0, r4, #9
 8000ac4:	0a40      	lsrs	r0, r0, #9
 8000ac6:	e7f4      	b.n	8000ab2 <__aeabi_ui2f+0x66>
 8000ac8:	fbffffff 	.word	0xfbffffff

08000acc <__aeabi_dadd>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	464f      	mov	r7, r9
 8000ad0:	4646      	mov	r6, r8
 8000ad2:	46d6      	mov	lr, sl
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	0309      	lsls	r1, r1, #12
 8000ad8:	b5c0      	push	{r6, r7, lr}
 8000ada:	0a49      	lsrs	r1, r1, #9
 8000adc:	0f47      	lsrs	r7, r0, #29
 8000ade:	005e      	lsls	r6, r3, #1
 8000ae0:	4339      	orrs	r1, r7
 8000ae2:	031f      	lsls	r7, r3, #12
 8000ae4:	0fdb      	lsrs	r3, r3, #31
 8000ae6:	469c      	mov	ip, r3
 8000ae8:	0065      	lsls	r5, r4, #1
 8000aea:	0a7b      	lsrs	r3, r7, #9
 8000aec:	0f57      	lsrs	r7, r2, #29
 8000aee:	431f      	orrs	r7, r3
 8000af0:	0d6d      	lsrs	r5, r5, #21
 8000af2:	0fe4      	lsrs	r4, r4, #31
 8000af4:	0d76      	lsrs	r6, r6, #21
 8000af6:	46a1      	mov	r9, r4
 8000af8:	00c0      	lsls	r0, r0, #3
 8000afa:	46b8      	mov	r8, r7
 8000afc:	00d2      	lsls	r2, r2, #3
 8000afe:	1bab      	subs	r3, r5, r6
 8000b00:	4564      	cmp	r4, ip
 8000b02:	d07b      	beq.n	8000bfc <__aeabi_dadd+0x130>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	dd5f      	ble.n	8000bc8 <__aeabi_dadd+0xfc>
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x42>
 8000b0c:	e0a4      	b.n	8000c58 <__aeabi_dadd+0x18c>
 8000b0e:	003e      	movs	r6, r7
 8000b10:	4316      	orrs	r6, r2
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x4a>
 8000b14:	e112      	b.n	8000d3c <__aeabi_dadd+0x270>
 8000b16:	1e5e      	subs	r6, r3, #1
 8000b18:	2e00      	cmp	r6, #0
 8000b1a:	d000      	beq.n	8000b1e <__aeabi_dadd+0x52>
 8000b1c:	e19e      	b.n	8000e5c <__aeabi_dadd+0x390>
 8000b1e:	1a87      	subs	r7, r0, r2
 8000b20:	4643      	mov	r3, r8
 8000b22:	42b8      	cmp	r0, r7
 8000b24:	4180      	sbcs	r0, r0
 8000b26:	2501      	movs	r5, #1
 8000b28:	1ac9      	subs	r1, r1, r3
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	1a09      	subs	r1, r1, r0
 8000b2e:	020b      	lsls	r3, r1, #8
 8000b30:	d400      	bmi.n	8000b34 <__aeabi_dadd+0x68>
 8000b32:	e131      	b.n	8000d98 <__aeabi_dadd+0x2cc>
 8000b34:	0249      	lsls	r1, r1, #9
 8000b36:	0a4e      	lsrs	r6, r1, #9
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x72>
 8000b3c:	e16e      	b.n	8000e1c <__aeabi_dadd+0x350>
 8000b3e:	0030      	movs	r0, r6
 8000b40:	f001 fce6 	bl	8002510 <__clzsi2>
 8000b44:	0003      	movs	r3, r0
 8000b46:	3b08      	subs	r3, #8
 8000b48:	2b1f      	cmp	r3, #31
 8000b4a:	dd00      	ble.n	8000b4e <__aeabi_dadd+0x82>
 8000b4c:	e161      	b.n	8000e12 <__aeabi_dadd+0x346>
 8000b4e:	2220      	movs	r2, #32
 8000b50:	0039      	movs	r1, r7
 8000b52:	1ad2      	subs	r2, r2, r3
 8000b54:	409e      	lsls	r6, r3
 8000b56:	40d1      	lsrs	r1, r2
 8000b58:	409f      	lsls	r7, r3
 8000b5a:	430e      	orrs	r6, r1
 8000b5c:	429d      	cmp	r5, r3
 8000b5e:	dd00      	ble.n	8000b62 <__aeabi_dadd+0x96>
 8000b60:	e151      	b.n	8000e06 <__aeabi_dadd+0x33a>
 8000b62:	1b5d      	subs	r5, r3, r5
 8000b64:	1c6b      	adds	r3, r5, #1
 8000b66:	2b1f      	cmp	r3, #31
 8000b68:	dd00      	ble.n	8000b6c <__aeabi_dadd+0xa0>
 8000b6a:	e17c      	b.n	8000e66 <__aeabi_dadd+0x39a>
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	1ac9      	subs	r1, r1, r3
 8000b70:	003d      	movs	r5, r7
 8000b72:	0030      	movs	r0, r6
 8000b74:	408f      	lsls	r7, r1
 8000b76:	4088      	lsls	r0, r1
 8000b78:	40dd      	lsrs	r5, r3
 8000b7a:	1e79      	subs	r1, r7, #1
 8000b7c:	418f      	sbcs	r7, r1
 8000b7e:	0031      	movs	r1, r6
 8000b80:	2207      	movs	r2, #7
 8000b82:	4328      	orrs	r0, r5
 8000b84:	40d9      	lsrs	r1, r3
 8000b86:	2500      	movs	r5, #0
 8000b88:	4307      	orrs	r7, r0
 8000b8a:	403a      	ands	r2, r7
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d009      	beq.n	8000ba4 <__aeabi_dadd+0xd8>
 8000b90:	230f      	movs	r3, #15
 8000b92:	403b      	ands	r3, r7
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d005      	beq.n	8000ba4 <__aeabi_dadd+0xd8>
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	42bb      	cmp	r3, r7
 8000b9c:	41bf      	sbcs	r7, r7
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	19c9      	adds	r1, r1, r7
 8000ba2:	001f      	movs	r7, r3
 8000ba4:	020b      	lsls	r3, r1, #8
 8000ba6:	d400      	bmi.n	8000baa <__aeabi_dadd+0xde>
 8000ba8:	e226      	b.n	8000ff8 <__aeabi_dadd+0x52c>
 8000baa:	1c6a      	adds	r2, r5, #1
 8000bac:	4bc6      	ldr	r3, [pc, #792]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000bae:	0555      	lsls	r5, r2, #21
 8000bb0:	0d6d      	lsrs	r5, r5, #21
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dadd+0xec>
 8000bb6:	e106      	b.n	8000dc6 <__aeabi_dadd+0x2fa>
 8000bb8:	4ac4      	ldr	r2, [pc, #784]	; (8000ecc <__aeabi_dadd+0x400>)
 8000bba:	08ff      	lsrs	r7, r7, #3
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	0753      	lsls	r3, r2, #29
 8000bc0:	0252      	lsls	r2, r2, #9
 8000bc2:	433b      	orrs	r3, r7
 8000bc4:	0b12      	lsrs	r2, r2, #12
 8000bc6:	e08e      	b.n	8000ce6 <__aeabi_dadd+0x21a>
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d000      	beq.n	8000bce <__aeabi_dadd+0x102>
 8000bcc:	e0b8      	b.n	8000d40 <__aeabi_dadd+0x274>
 8000bce:	1c6b      	adds	r3, r5, #1
 8000bd0:	055b      	lsls	r3, r3, #21
 8000bd2:	0d5b      	lsrs	r3, r3, #21
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	dc00      	bgt.n	8000bda <__aeabi_dadd+0x10e>
 8000bd8:	e130      	b.n	8000e3c <__aeabi_dadd+0x370>
 8000bda:	1a87      	subs	r7, r0, r2
 8000bdc:	4643      	mov	r3, r8
 8000bde:	42b8      	cmp	r0, r7
 8000be0:	41b6      	sbcs	r6, r6
 8000be2:	1acb      	subs	r3, r1, r3
 8000be4:	4276      	negs	r6, r6
 8000be6:	1b9e      	subs	r6, r3, r6
 8000be8:	0233      	lsls	r3, r6, #8
 8000bea:	d500      	bpl.n	8000bee <__aeabi_dadd+0x122>
 8000bec:	e14c      	b.n	8000e88 <__aeabi_dadd+0x3bc>
 8000bee:	003b      	movs	r3, r7
 8000bf0:	4333      	orrs	r3, r6
 8000bf2:	d1a1      	bne.n	8000b38 <__aeabi_dadd+0x6c>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2400      	movs	r4, #0
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	e070      	b.n	8000cde <__aeabi_dadd+0x212>
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	dc00      	bgt.n	8000c02 <__aeabi_dadd+0x136>
 8000c00:	e0e5      	b.n	8000dce <__aeabi_dadd+0x302>
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d100      	bne.n	8000c08 <__aeabi_dadd+0x13c>
 8000c06:	e083      	b.n	8000d10 <__aeabi_dadd+0x244>
 8000c08:	4eaf      	ldr	r6, [pc, #700]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000c0a:	42b5      	cmp	r5, r6
 8000c0c:	d060      	beq.n	8000cd0 <__aeabi_dadd+0x204>
 8000c0e:	2680      	movs	r6, #128	; 0x80
 8000c10:	0436      	lsls	r6, r6, #16
 8000c12:	4337      	orrs	r7, r6
 8000c14:	46b8      	mov	r8, r7
 8000c16:	2b38      	cmp	r3, #56	; 0x38
 8000c18:	dc00      	bgt.n	8000c1c <__aeabi_dadd+0x150>
 8000c1a:	e13e      	b.n	8000e9a <__aeabi_dadd+0x3ce>
 8000c1c:	4643      	mov	r3, r8
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	001f      	movs	r7, r3
 8000c22:	1e7a      	subs	r2, r7, #1
 8000c24:	4197      	sbcs	r7, r2
 8000c26:	183f      	adds	r7, r7, r0
 8000c28:	4287      	cmp	r7, r0
 8000c2a:	4180      	sbcs	r0, r0
 8000c2c:	4240      	negs	r0, r0
 8000c2e:	1809      	adds	r1, r1, r0
 8000c30:	020b      	lsls	r3, r1, #8
 8000c32:	d400      	bmi.n	8000c36 <__aeabi_dadd+0x16a>
 8000c34:	e0b0      	b.n	8000d98 <__aeabi_dadd+0x2cc>
 8000c36:	4ba4      	ldr	r3, [pc, #656]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000c38:	3501      	adds	r5, #1
 8000c3a:	429d      	cmp	r5, r3
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dadd+0x174>
 8000c3e:	e0c3      	b.n	8000dc8 <__aeabi_dadd+0x2fc>
 8000c40:	4aa2      	ldr	r2, [pc, #648]	; (8000ecc <__aeabi_dadd+0x400>)
 8000c42:	087b      	lsrs	r3, r7, #1
 8000c44:	400a      	ands	r2, r1
 8000c46:	2101      	movs	r1, #1
 8000c48:	400f      	ands	r7, r1
 8000c4a:	431f      	orrs	r7, r3
 8000c4c:	0851      	lsrs	r1, r2, #1
 8000c4e:	07d3      	lsls	r3, r2, #31
 8000c50:	2207      	movs	r2, #7
 8000c52:	431f      	orrs	r7, r3
 8000c54:	403a      	ands	r2, r7
 8000c56:	e799      	b.n	8000b8c <__aeabi_dadd+0xc0>
 8000c58:	4e9b      	ldr	r6, [pc, #620]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000c5a:	42b5      	cmp	r5, r6
 8000c5c:	d038      	beq.n	8000cd0 <__aeabi_dadd+0x204>
 8000c5e:	2680      	movs	r6, #128	; 0x80
 8000c60:	0436      	lsls	r6, r6, #16
 8000c62:	4337      	orrs	r7, r6
 8000c64:	46b8      	mov	r8, r7
 8000c66:	2b38      	cmp	r3, #56	; 0x38
 8000c68:	dd00      	ble.n	8000c6c <__aeabi_dadd+0x1a0>
 8000c6a:	e0dc      	b.n	8000e26 <__aeabi_dadd+0x35a>
 8000c6c:	2b1f      	cmp	r3, #31
 8000c6e:	dc00      	bgt.n	8000c72 <__aeabi_dadd+0x1a6>
 8000c70:	e130      	b.n	8000ed4 <__aeabi_dadd+0x408>
 8000c72:	001e      	movs	r6, r3
 8000c74:	4647      	mov	r7, r8
 8000c76:	3e20      	subs	r6, #32
 8000c78:	40f7      	lsrs	r7, r6
 8000c7a:	46bc      	mov	ip, r7
 8000c7c:	2b20      	cmp	r3, #32
 8000c7e:	d004      	beq.n	8000c8a <__aeabi_dadd+0x1be>
 8000c80:	2640      	movs	r6, #64	; 0x40
 8000c82:	1af3      	subs	r3, r6, r3
 8000c84:	4646      	mov	r6, r8
 8000c86:	409e      	lsls	r6, r3
 8000c88:	4332      	orrs	r2, r6
 8000c8a:	0017      	movs	r7, r2
 8000c8c:	4663      	mov	r3, ip
 8000c8e:	1e7a      	subs	r2, r7, #1
 8000c90:	4197      	sbcs	r7, r2
 8000c92:	431f      	orrs	r7, r3
 8000c94:	e0cc      	b.n	8000e30 <__aeabi_dadd+0x364>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d100      	bne.n	8000c9c <__aeabi_dadd+0x1d0>
 8000c9a:	e204      	b.n	80010a6 <__aeabi_dadd+0x5da>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_dadd+0x1d8>
 8000ca2:	e159      	b.n	8000f58 <__aeabi_dadd+0x48c>
 8000ca4:	074b      	lsls	r3, r1, #29
 8000ca6:	08c0      	lsrs	r0, r0, #3
 8000ca8:	4318      	orrs	r0, r3
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	08c9      	lsrs	r1, r1, #3
 8000cae:	031b      	lsls	r3, r3, #12
 8000cb0:	4219      	tst	r1, r3
 8000cb2:	d008      	beq.n	8000cc6 <__aeabi_dadd+0x1fa>
 8000cb4:	4645      	mov	r5, r8
 8000cb6:	08ed      	lsrs	r5, r5, #3
 8000cb8:	421d      	tst	r5, r3
 8000cba:	d104      	bne.n	8000cc6 <__aeabi_dadd+0x1fa>
 8000cbc:	4643      	mov	r3, r8
 8000cbe:	08d0      	lsrs	r0, r2, #3
 8000cc0:	0759      	lsls	r1, r3, #29
 8000cc2:	4308      	orrs	r0, r1
 8000cc4:	0029      	movs	r1, r5
 8000cc6:	0f42      	lsrs	r2, r0, #29
 8000cc8:	00c9      	lsls	r1, r1, #3
 8000cca:	4d7f      	ldr	r5, [pc, #508]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000ccc:	4311      	orrs	r1, r2
 8000cce:	00c0      	lsls	r0, r0, #3
 8000cd0:	074b      	lsls	r3, r1, #29
 8000cd2:	08ca      	lsrs	r2, r1, #3
 8000cd4:	497c      	ldr	r1, [pc, #496]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000cd6:	08c0      	lsrs	r0, r0, #3
 8000cd8:	4303      	orrs	r3, r0
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	d068      	beq.n	8000db0 <__aeabi_dadd+0x2e4>
 8000cde:	0312      	lsls	r2, r2, #12
 8000ce0:	056d      	lsls	r5, r5, #21
 8000ce2:	0b12      	lsrs	r2, r2, #12
 8000ce4:	0d6d      	lsrs	r5, r5, #21
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	0312      	lsls	r2, r2, #12
 8000cea:	0018      	movs	r0, r3
 8000cec:	0b13      	lsrs	r3, r2, #12
 8000cee:	0d0a      	lsrs	r2, r1, #20
 8000cf0:	0512      	lsls	r2, r2, #20
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	4b76      	ldr	r3, [pc, #472]	; (8000ed0 <__aeabi_dadd+0x404>)
 8000cf6:	052d      	lsls	r5, r5, #20
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	432b      	orrs	r3, r5
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	07e4      	lsls	r4, r4, #31
 8000d00:	085b      	lsrs	r3, r3, #1
 8000d02:	4323      	orrs	r3, r4
 8000d04:	0019      	movs	r1, r3
 8000d06:	bc1c      	pop	{r2, r3, r4}
 8000d08:	4690      	mov	r8, r2
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	46a2      	mov	sl, r4
 8000d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d10:	003e      	movs	r6, r7
 8000d12:	4316      	orrs	r6, r2
 8000d14:	d012      	beq.n	8000d3c <__aeabi_dadd+0x270>
 8000d16:	1e5e      	subs	r6, r3, #1
 8000d18:	2e00      	cmp	r6, #0
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x252>
 8000d1c:	e100      	b.n	8000f20 <__aeabi_dadd+0x454>
 8000d1e:	1887      	adds	r7, r0, r2
 8000d20:	4287      	cmp	r7, r0
 8000d22:	4180      	sbcs	r0, r0
 8000d24:	4441      	add	r1, r8
 8000d26:	4240      	negs	r0, r0
 8000d28:	1809      	adds	r1, r1, r0
 8000d2a:	2501      	movs	r5, #1
 8000d2c:	020b      	lsls	r3, r1, #8
 8000d2e:	d533      	bpl.n	8000d98 <__aeabi_dadd+0x2cc>
 8000d30:	2502      	movs	r5, #2
 8000d32:	e785      	b.n	8000c40 <__aeabi_dadd+0x174>
 8000d34:	4664      	mov	r4, ip
 8000d36:	0033      	movs	r3, r6
 8000d38:	4641      	mov	r1, r8
 8000d3a:	0010      	movs	r0, r2
 8000d3c:	001d      	movs	r5, r3
 8000d3e:	e7c7      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000d40:	2d00      	cmp	r5, #0
 8000d42:	d000      	beq.n	8000d46 <__aeabi_dadd+0x27a>
 8000d44:	e0da      	b.n	8000efc <__aeabi_dadd+0x430>
 8000d46:	000c      	movs	r4, r1
 8000d48:	4304      	orrs	r4, r0
 8000d4a:	d0f3      	beq.n	8000d34 <__aeabi_dadd+0x268>
 8000d4c:	1c5c      	adds	r4, r3, #1
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_dadd+0x286>
 8000d50:	e19f      	b.n	8001092 <__aeabi_dadd+0x5c6>
 8000d52:	4c5d      	ldr	r4, [pc, #372]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000d54:	42a6      	cmp	r6, r4
 8000d56:	d100      	bne.n	8000d5a <__aeabi_dadd+0x28e>
 8000d58:	e12f      	b.n	8000fba <__aeabi_dadd+0x4ee>
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	2b38      	cmp	r3, #56	; 0x38
 8000d5e:	dd00      	ble.n	8000d62 <__aeabi_dadd+0x296>
 8000d60:	e166      	b.n	8001030 <__aeabi_dadd+0x564>
 8000d62:	2b1f      	cmp	r3, #31
 8000d64:	dd00      	ble.n	8000d68 <__aeabi_dadd+0x29c>
 8000d66:	e183      	b.n	8001070 <__aeabi_dadd+0x5a4>
 8000d68:	2420      	movs	r4, #32
 8000d6a:	0005      	movs	r5, r0
 8000d6c:	1ae4      	subs	r4, r4, r3
 8000d6e:	000f      	movs	r7, r1
 8000d70:	40dd      	lsrs	r5, r3
 8000d72:	40d9      	lsrs	r1, r3
 8000d74:	40a0      	lsls	r0, r4
 8000d76:	4643      	mov	r3, r8
 8000d78:	40a7      	lsls	r7, r4
 8000d7a:	1a5b      	subs	r3, r3, r1
 8000d7c:	1e44      	subs	r4, r0, #1
 8000d7e:	41a0      	sbcs	r0, r4
 8000d80:	4698      	mov	r8, r3
 8000d82:	432f      	orrs	r7, r5
 8000d84:	4338      	orrs	r0, r7
 8000d86:	1a17      	subs	r7, r2, r0
 8000d88:	42ba      	cmp	r2, r7
 8000d8a:	4192      	sbcs	r2, r2
 8000d8c:	4643      	mov	r3, r8
 8000d8e:	4252      	negs	r2, r2
 8000d90:	1a99      	subs	r1, r3, r2
 8000d92:	4664      	mov	r4, ip
 8000d94:	0035      	movs	r5, r6
 8000d96:	e6ca      	b.n	8000b2e <__aeabi_dadd+0x62>
 8000d98:	2207      	movs	r2, #7
 8000d9a:	403a      	ands	r2, r7
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_dadd+0x2d6>
 8000da0:	e6f6      	b.n	8000b90 <__aeabi_dadd+0xc4>
 8000da2:	074b      	lsls	r3, r1, #29
 8000da4:	08ca      	lsrs	r2, r1, #3
 8000da6:	4948      	ldr	r1, [pc, #288]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000da8:	08ff      	lsrs	r7, r7, #3
 8000daa:	433b      	orrs	r3, r7
 8000dac:	428d      	cmp	r5, r1
 8000dae:	d196      	bne.n	8000cde <__aeabi_dadd+0x212>
 8000db0:	0019      	movs	r1, r3
 8000db2:	4311      	orrs	r1, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_dadd+0x2ec>
 8000db6:	e19e      	b.n	80010f6 <__aeabi_dadd+0x62a>
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	0309      	lsls	r1, r1, #12
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	0312      	lsls	r2, r2, #12
 8000dc0:	0b12      	lsrs	r2, r2, #12
 8000dc2:	4d41      	ldr	r5, [pc, #260]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000dc4:	e78f      	b.n	8000ce6 <__aeabi_dadd+0x21a>
 8000dc6:	0015      	movs	r5, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e78b      	b.n	8000ce6 <__aeabi_dadd+0x21a>
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_dadd+0x308>
 8000dd2:	e0c7      	b.n	8000f64 <__aeabi_dadd+0x498>
 8000dd4:	1c6b      	adds	r3, r5, #1
 8000dd6:	055f      	lsls	r7, r3, #21
 8000dd8:	0d7f      	lsrs	r7, r7, #21
 8000dda:	2f01      	cmp	r7, #1
 8000ddc:	dc00      	bgt.n	8000de0 <__aeabi_dadd+0x314>
 8000dde:	e0f1      	b.n	8000fc4 <__aeabi_dadd+0x4f8>
 8000de0:	4d39      	ldr	r5, [pc, #228]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d100      	bne.n	8000de8 <__aeabi_dadd+0x31c>
 8000de6:	e0b9      	b.n	8000f5c <__aeabi_dadd+0x490>
 8000de8:	1885      	adds	r5, r0, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	4285      	cmp	r5, r0
 8000dee:	4189      	sbcs	r1, r1
 8000df0:	4442      	add	r2, r8
 8000df2:	4249      	negs	r1, r1
 8000df4:	1851      	adds	r1, r2, r1
 8000df6:	2207      	movs	r2, #7
 8000df8:	07cf      	lsls	r7, r1, #31
 8000dfa:	086d      	lsrs	r5, r5, #1
 8000dfc:	432f      	orrs	r7, r5
 8000dfe:	0849      	lsrs	r1, r1, #1
 8000e00:	403a      	ands	r2, r7
 8000e02:	001d      	movs	r5, r3
 8000e04:	e6c2      	b.n	8000b8c <__aeabi_dadd+0xc0>
 8000e06:	2207      	movs	r2, #7
 8000e08:	4930      	ldr	r1, [pc, #192]	; (8000ecc <__aeabi_dadd+0x400>)
 8000e0a:	1aed      	subs	r5, r5, r3
 8000e0c:	4031      	ands	r1, r6
 8000e0e:	403a      	ands	r2, r7
 8000e10:	e6bc      	b.n	8000b8c <__aeabi_dadd+0xc0>
 8000e12:	003e      	movs	r6, r7
 8000e14:	3828      	subs	r0, #40	; 0x28
 8000e16:	4086      	lsls	r6, r0
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e69f      	b.n	8000b5c <__aeabi_dadd+0x90>
 8000e1c:	0038      	movs	r0, r7
 8000e1e:	f001 fb77 	bl	8002510 <__clzsi2>
 8000e22:	3020      	adds	r0, #32
 8000e24:	e68e      	b.n	8000b44 <__aeabi_dadd+0x78>
 8000e26:	4643      	mov	r3, r8
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	001f      	movs	r7, r3
 8000e2c:	1e7a      	subs	r2, r7, #1
 8000e2e:	4197      	sbcs	r7, r2
 8000e30:	1bc7      	subs	r7, r0, r7
 8000e32:	42b8      	cmp	r0, r7
 8000e34:	4180      	sbcs	r0, r0
 8000e36:	4240      	negs	r0, r0
 8000e38:	1a09      	subs	r1, r1, r0
 8000e3a:	e678      	b.n	8000b2e <__aeabi_dadd+0x62>
 8000e3c:	000e      	movs	r6, r1
 8000e3e:	003b      	movs	r3, r7
 8000e40:	4306      	orrs	r6, r0
 8000e42:	4313      	orrs	r3, r2
 8000e44:	2d00      	cmp	r5, #0
 8000e46:	d161      	bne.n	8000f0c <__aeabi_dadd+0x440>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_dadd+0x382>
 8000e4c:	e0f4      	b.n	8001038 <__aeabi_dadd+0x56c>
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d100      	bne.n	8000e54 <__aeabi_dadd+0x388>
 8000e52:	e11b      	b.n	800108c <__aeabi_dadd+0x5c0>
 8000e54:	4664      	mov	r4, ip
 8000e56:	0039      	movs	r1, r7
 8000e58:	0010      	movs	r0, r2
 8000e5a:	e739      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000e5c:	4f1a      	ldr	r7, [pc, #104]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000e5e:	42bb      	cmp	r3, r7
 8000e60:	d07a      	beq.n	8000f58 <__aeabi_dadd+0x48c>
 8000e62:	0033      	movs	r3, r6
 8000e64:	e6ff      	b.n	8000c66 <__aeabi_dadd+0x19a>
 8000e66:	0030      	movs	r0, r6
 8000e68:	3d1f      	subs	r5, #31
 8000e6a:	40e8      	lsrs	r0, r5
 8000e6c:	2b20      	cmp	r3, #32
 8000e6e:	d003      	beq.n	8000e78 <__aeabi_dadd+0x3ac>
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	1acb      	subs	r3, r1, r3
 8000e74:	409e      	lsls	r6, r3
 8000e76:	4337      	orrs	r7, r6
 8000e78:	1e7b      	subs	r3, r7, #1
 8000e7a:	419f      	sbcs	r7, r3
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	4307      	orrs	r7, r0
 8000e80:	403a      	ands	r2, r7
 8000e82:	2100      	movs	r1, #0
 8000e84:	2500      	movs	r5, #0
 8000e86:	e789      	b.n	8000d9c <__aeabi_dadd+0x2d0>
 8000e88:	1a17      	subs	r7, r2, r0
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	42ba      	cmp	r2, r7
 8000e8e:	41b6      	sbcs	r6, r6
 8000e90:	1a59      	subs	r1, r3, r1
 8000e92:	4276      	negs	r6, r6
 8000e94:	1b8e      	subs	r6, r1, r6
 8000e96:	4664      	mov	r4, ip
 8000e98:	e64e      	b.n	8000b38 <__aeabi_dadd+0x6c>
 8000e9a:	2b1f      	cmp	r3, #31
 8000e9c:	dd00      	ble.n	8000ea0 <__aeabi_dadd+0x3d4>
 8000e9e:	e0ad      	b.n	8000ffc <__aeabi_dadd+0x530>
 8000ea0:	2620      	movs	r6, #32
 8000ea2:	4647      	mov	r7, r8
 8000ea4:	1af6      	subs	r6, r6, r3
 8000ea6:	40b7      	lsls	r7, r6
 8000ea8:	46b9      	mov	r9, r7
 8000eaa:	0017      	movs	r7, r2
 8000eac:	46b2      	mov	sl, r6
 8000eae:	40df      	lsrs	r7, r3
 8000eb0:	464e      	mov	r6, r9
 8000eb2:	433e      	orrs	r6, r7
 8000eb4:	0037      	movs	r7, r6
 8000eb6:	4656      	mov	r6, sl
 8000eb8:	40b2      	lsls	r2, r6
 8000eba:	1e56      	subs	r6, r2, #1
 8000ebc:	41b2      	sbcs	r2, r6
 8000ebe:	4317      	orrs	r7, r2
 8000ec0:	4642      	mov	r2, r8
 8000ec2:	40da      	lsrs	r2, r3
 8000ec4:	1889      	adds	r1, r1, r2
 8000ec6:	e6ae      	b.n	8000c26 <__aeabi_dadd+0x15a>
 8000ec8:	000007ff 	.word	0x000007ff
 8000ecc:	ff7fffff 	.word	0xff7fffff
 8000ed0:	800fffff 	.word	0x800fffff
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	4647      	mov	r7, r8
 8000ed8:	1af6      	subs	r6, r6, r3
 8000eda:	40b7      	lsls	r7, r6
 8000edc:	46b9      	mov	r9, r7
 8000ede:	0017      	movs	r7, r2
 8000ee0:	46b2      	mov	sl, r6
 8000ee2:	40df      	lsrs	r7, r3
 8000ee4:	464e      	mov	r6, r9
 8000ee6:	433e      	orrs	r6, r7
 8000ee8:	0037      	movs	r7, r6
 8000eea:	4656      	mov	r6, sl
 8000eec:	40b2      	lsls	r2, r6
 8000eee:	1e56      	subs	r6, r2, #1
 8000ef0:	41b2      	sbcs	r2, r6
 8000ef2:	4317      	orrs	r7, r2
 8000ef4:	4642      	mov	r2, r8
 8000ef6:	40da      	lsrs	r2, r3
 8000ef8:	1a89      	subs	r1, r1, r2
 8000efa:	e799      	b.n	8000e30 <__aeabi_dadd+0x364>
 8000efc:	4c7f      	ldr	r4, [pc, #508]	; (80010fc <__aeabi_dadd+0x630>)
 8000efe:	42a6      	cmp	r6, r4
 8000f00:	d05b      	beq.n	8000fba <__aeabi_dadd+0x4ee>
 8000f02:	2480      	movs	r4, #128	; 0x80
 8000f04:	0424      	lsls	r4, r4, #16
 8000f06:	425b      	negs	r3, r3
 8000f08:	4321      	orrs	r1, r4
 8000f0a:	e727      	b.n	8000d5c <__aeabi_dadd+0x290>
 8000f0c:	2e00      	cmp	r6, #0
 8000f0e:	d10c      	bne.n	8000f2a <__aeabi_dadd+0x45e>
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d100      	bne.n	8000f16 <__aeabi_dadd+0x44a>
 8000f14:	e0cb      	b.n	80010ae <__aeabi_dadd+0x5e2>
 8000f16:	4664      	mov	r4, ip
 8000f18:	0039      	movs	r1, r7
 8000f1a:	0010      	movs	r0, r2
 8000f1c:	4d77      	ldr	r5, [pc, #476]	; (80010fc <__aeabi_dadd+0x630>)
 8000f1e:	e6d7      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000f20:	4f76      	ldr	r7, [pc, #472]	; (80010fc <__aeabi_dadd+0x630>)
 8000f22:	42bb      	cmp	r3, r7
 8000f24:	d018      	beq.n	8000f58 <__aeabi_dadd+0x48c>
 8000f26:	0033      	movs	r3, r6
 8000f28:	e675      	b.n	8000c16 <__aeabi_dadd+0x14a>
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d014      	beq.n	8000f58 <__aeabi_dadd+0x48c>
 8000f2e:	074b      	lsls	r3, r1, #29
 8000f30:	08c0      	lsrs	r0, r0, #3
 8000f32:	4318      	orrs	r0, r3
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	08c9      	lsrs	r1, r1, #3
 8000f38:	031b      	lsls	r3, r3, #12
 8000f3a:	4219      	tst	r1, r3
 8000f3c:	d007      	beq.n	8000f4e <__aeabi_dadd+0x482>
 8000f3e:	08fc      	lsrs	r4, r7, #3
 8000f40:	421c      	tst	r4, r3
 8000f42:	d104      	bne.n	8000f4e <__aeabi_dadd+0x482>
 8000f44:	0779      	lsls	r1, r7, #29
 8000f46:	08d0      	lsrs	r0, r2, #3
 8000f48:	4308      	orrs	r0, r1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	0021      	movs	r1, r4
 8000f4e:	464c      	mov	r4, r9
 8000f50:	0f42      	lsrs	r2, r0, #29
 8000f52:	00c9      	lsls	r1, r1, #3
 8000f54:	4311      	orrs	r1, r2
 8000f56:	00c0      	lsls	r0, r0, #3
 8000f58:	4d68      	ldr	r5, [pc, #416]	; (80010fc <__aeabi_dadd+0x630>)
 8000f5a:	e6b9      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000f5c:	001d      	movs	r5, r3
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2300      	movs	r3, #0
 8000f62:	e6c0      	b.n	8000ce6 <__aeabi_dadd+0x21a>
 8000f64:	2d00      	cmp	r5, #0
 8000f66:	d15b      	bne.n	8001020 <__aeabi_dadd+0x554>
 8000f68:	000d      	movs	r5, r1
 8000f6a:	4305      	orrs	r5, r0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_dadd+0x4a4>
 8000f6e:	e6e2      	b.n	8000d36 <__aeabi_dadd+0x26a>
 8000f70:	1c5d      	adds	r5, r3, #1
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dadd+0x4aa>
 8000f74:	e0b0      	b.n	80010d8 <__aeabi_dadd+0x60c>
 8000f76:	4d61      	ldr	r5, [pc, #388]	; (80010fc <__aeabi_dadd+0x630>)
 8000f78:	42ae      	cmp	r6, r5
 8000f7a:	d01f      	beq.n	8000fbc <__aeabi_dadd+0x4f0>
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	2b38      	cmp	r3, #56	; 0x38
 8000f80:	dc71      	bgt.n	8001066 <__aeabi_dadd+0x59a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dd00      	ble.n	8000f88 <__aeabi_dadd+0x4bc>
 8000f86:	e096      	b.n	80010b6 <__aeabi_dadd+0x5ea>
 8000f88:	2520      	movs	r5, #32
 8000f8a:	000f      	movs	r7, r1
 8000f8c:	1aed      	subs	r5, r5, r3
 8000f8e:	40af      	lsls	r7, r5
 8000f90:	46b9      	mov	r9, r7
 8000f92:	0007      	movs	r7, r0
 8000f94:	46aa      	mov	sl, r5
 8000f96:	40df      	lsrs	r7, r3
 8000f98:	464d      	mov	r5, r9
 8000f9a:	433d      	orrs	r5, r7
 8000f9c:	002f      	movs	r7, r5
 8000f9e:	4655      	mov	r5, sl
 8000fa0:	40a8      	lsls	r0, r5
 8000fa2:	40d9      	lsrs	r1, r3
 8000fa4:	1e45      	subs	r5, r0, #1
 8000fa6:	41a8      	sbcs	r0, r5
 8000fa8:	4488      	add	r8, r1
 8000faa:	4307      	orrs	r7, r0
 8000fac:	18bf      	adds	r7, r7, r2
 8000fae:	4297      	cmp	r7, r2
 8000fb0:	4192      	sbcs	r2, r2
 8000fb2:	4251      	negs	r1, r2
 8000fb4:	4441      	add	r1, r8
 8000fb6:	0035      	movs	r5, r6
 8000fb8:	e63a      	b.n	8000c30 <__aeabi_dadd+0x164>
 8000fba:	4664      	mov	r4, ip
 8000fbc:	0035      	movs	r5, r6
 8000fbe:	4641      	mov	r1, r8
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	e685      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000fc4:	000b      	movs	r3, r1
 8000fc6:	4303      	orrs	r3, r0
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	d000      	beq.n	8000fce <__aeabi_dadd+0x502>
 8000fcc:	e663      	b.n	8000c96 <__aeabi_dadd+0x1ca>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f5      	beq.n	8000fbe <__aeabi_dadd+0x4f2>
 8000fd2:	4643      	mov	r3, r8
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dadd+0x50e>
 8000fd8:	e67a      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000fda:	1887      	adds	r7, r0, r2
 8000fdc:	4287      	cmp	r7, r0
 8000fde:	4180      	sbcs	r0, r0
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	4441      	add	r1, r8
 8000fe4:	4240      	negs	r0, r0
 8000fe6:	1809      	adds	r1, r1, r0
 8000fe8:	403a      	ands	r2, r7
 8000fea:	020b      	lsls	r3, r1, #8
 8000fec:	d400      	bmi.n	8000ff0 <__aeabi_dadd+0x524>
 8000fee:	e6d5      	b.n	8000d9c <__aeabi_dadd+0x2d0>
 8000ff0:	4b43      	ldr	r3, [pc, #268]	; (8001100 <__aeabi_dadd+0x634>)
 8000ff2:	3501      	adds	r5, #1
 8000ff4:	4019      	ands	r1, r3
 8000ff6:	e5c9      	b.n	8000b8c <__aeabi_dadd+0xc0>
 8000ff8:	0038      	movs	r0, r7
 8000ffa:	e669      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000ffc:	001e      	movs	r6, r3
 8000ffe:	4647      	mov	r7, r8
 8001000:	3e20      	subs	r6, #32
 8001002:	40f7      	lsrs	r7, r6
 8001004:	46bc      	mov	ip, r7
 8001006:	2b20      	cmp	r3, #32
 8001008:	d004      	beq.n	8001014 <__aeabi_dadd+0x548>
 800100a:	2640      	movs	r6, #64	; 0x40
 800100c:	1af3      	subs	r3, r6, r3
 800100e:	4646      	mov	r6, r8
 8001010:	409e      	lsls	r6, r3
 8001012:	4332      	orrs	r2, r6
 8001014:	0017      	movs	r7, r2
 8001016:	4663      	mov	r3, ip
 8001018:	1e7a      	subs	r2, r7, #1
 800101a:	4197      	sbcs	r7, r2
 800101c:	431f      	orrs	r7, r3
 800101e:	e602      	b.n	8000c26 <__aeabi_dadd+0x15a>
 8001020:	4d36      	ldr	r5, [pc, #216]	; (80010fc <__aeabi_dadd+0x630>)
 8001022:	42ae      	cmp	r6, r5
 8001024:	d0ca      	beq.n	8000fbc <__aeabi_dadd+0x4f0>
 8001026:	2580      	movs	r5, #128	; 0x80
 8001028:	042d      	lsls	r5, r5, #16
 800102a:	425b      	negs	r3, r3
 800102c:	4329      	orrs	r1, r5
 800102e:	e7a6      	b.n	8000f7e <__aeabi_dadd+0x4b2>
 8001030:	4308      	orrs	r0, r1
 8001032:	1e41      	subs	r1, r0, #1
 8001034:	4188      	sbcs	r0, r1
 8001036:	e6a6      	b.n	8000d86 <__aeabi_dadd+0x2ba>
 8001038:	2b00      	cmp	r3, #0
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x572>
 800103c:	e648      	b.n	8000cd0 <__aeabi_dadd+0x204>
 800103e:	1a87      	subs	r7, r0, r2
 8001040:	4643      	mov	r3, r8
 8001042:	42b8      	cmp	r0, r7
 8001044:	41b6      	sbcs	r6, r6
 8001046:	1acb      	subs	r3, r1, r3
 8001048:	4276      	negs	r6, r6
 800104a:	1b9e      	subs	r6, r3, r6
 800104c:	0233      	lsls	r3, r6, #8
 800104e:	d54b      	bpl.n	80010e8 <__aeabi_dadd+0x61c>
 8001050:	1a17      	subs	r7, r2, r0
 8001052:	4643      	mov	r3, r8
 8001054:	42ba      	cmp	r2, r7
 8001056:	4192      	sbcs	r2, r2
 8001058:	1a59      	subs	r1, r3, r1
 800105a:	4252      	negs	r2, r2
 800105c:	1a89      	subs	r1, r1, r2
 800105e:	2207      	movs	r2, #7
 8001060:	4664      	mov	r4, ip
 8001062:	403a      	ands	r2, r7
 8001064:	e592      	b.n	8000b8c <__aeabi_dadd+0xc0>
 8001066:	4301      	orrs	r1, r0
 8001068:	000f      	movs	r7, r1
 800106a:	1e79      	subs	r1, r7, #1
 800106c:	418f      	sbcs	r7, r1
 800106e:	e79d      	b.n	8000fac <__aeabi_dadd+0x4e0>
 8001070:	001c      	movs	r4, r3
 8001072:	000f      	movs	r7, r1
 8001074:	3c20      	subs	r4, #32
 8001076:	40e7      	lsrs	r7, r4
 8001078:	2b20      	cmp	r3, #32
 800107a:	d003      	beq.n	8001084 <__aeabi_dadd+0x5b8>
 800107c:	2440      	movs	r4, #64	; 0x40
 800107e:	1ae3      	subs	r3, r4, r3
 8001080:	4099      	lsls	r1, r3
 8001082:	4308      	orrs	r0, r1
 8001084:	1e41      	subs	r1, r0, #1
 8001086:	4188      	sbcs	r0, r1
 8001088:	4338      	orrs	r0, r7
 800108a:	e67c      	b.n	8000d86 <__aeabi_dadd+0x2ba>
 800108c:	2200      	movs	r2, #0
 800108e:	2400      	movs	r4, #0
 8001090:	e625      	b.n	8000cde <__aeabi_dadd+0x212>
 8001092:	1a17      	subs	r7, r2, r0
 8001094:	4643      	mov	r3, r8
 8001096:	42ba      	cmp	r2, r7
 8001098:	4192      	sbcs	r2, r2
 800109a:	1a59      	subs	r1, r3, r1
 800109c:	4252      	negs	r2, r2
 800109e:	1a89      	subs	r1, r1, r2
 80010a0:	4664      	mov	r4, ip
 80010a2:	0035      	movs	r5, r6
 80010a4:	e543      	b.n	8000b2e <__aeabi_dadd+0x62>
 80010a6:	4641      	mov	r1, r8
 80010a8:	0010      	movs	r0, r2
 80010aa:	4d14      	ldr	r5, [pc, #80]	; (80010fc <__aeabi_dadd+0x630>)
 80010ac:	e610      	b.n	8000cd0 <__aeabi_dadd+0x204>
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	2400      	movs	r4, #0
 80010b2:	0312      	lsls	r2, r2, #12
 80010b4:	e680      	b.n	8000db8 <__aeabi_dadd+0x2ec>
 80010b6:	001d      	movs	r5, r3
 80010b8:	000f      	movs	r7, r1
 80010ba:	3d20      	subs	r5, #32
 80010bc:	40ef      	lsrs	r7, r5
 80010be:	46bc      	mov	ip, r7
 80010c0:	2b20      	cmp	r3, #32
 80010c2:	d003      	beq.n	80010cc <__aeabi_dadd+0x600>
 80010c4:	2540      	movs	r5, #64	; 0x40
 80010c6:	1aeb      	subs	r3, r5, r3
 80010c8:	4099      	lsls	r1, r3
 80010ca:	4308      	orrs	r0, r1
 80010cc:	0007      	movs	r7, r0
 80010ce:	4663      	mov	r3, ip
 80010d0:	1e78      	subs	r0, r7, #1
 80010d2:	4187      	sbcs	r7, r0
 80010d4:	431f      	orrs	r7, r3
 80010d6:	e769      	b.n	8000fac <__aeabi_dadd+0x4e0>
 80010d8:	1887      	adds	r7, r0, r2
 80010da:	4297      	cmp	r7, r2
 80010dc:	419b      	sbcs	r3, r3
 80010de:	4441      	add	r1, r8
 80010e0:	425b      	negs	r3, r3
 80010e2:	18c9      	adds	r1, r1, r3
 80010e4:	0035      	movs	r5, r6
 80010e6:	e5a3      	b.n	8000c30 <__aeabi_dadd+0x164>
 80010e8:	003b      	movs	r3, r7
 80010ea:	4333      	orrs	r3, r6
 80010ec:	d0ce      	beq.n	800108c <__aeabi_dadd+0x5c0>
 80010ee:	2207      	movs	r2, #7
 80010f0:	0031      	movs	r1, r6
 80010f2:	403a      	ands	r2, r7
 80010f4:	e652      	b.n	8000d9c <__aeabi_dadd+0x2d0>
 80010f6:	2300      	movs	r3, #0
 80010f8:	001a      	movs	r2, r3
 80010fa:	e5f4      	b.n	8000ce6 <__aeabi_dadd+0x21a>
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	ff7fffff 	.word	0xff7fffff

08001104 <__aeabi_ddiv>:
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	4657      	mov	r7, sl
 8001108:	46de      	mov	lr, fp
 800110a:	464e      	mov	r6, r9
 800110c:	4645      	mov	r5, r8
 800110e:	b5e0      	push	{r5, r6, r7, lr}
 8001110:	4683      	mov	fp, r0
 8001112:	0007      	movs	r7, r0
 8001114:	030e      	lsls	r6, r1, #12
 8001116:	0048      	lsls	r0, r1, #1
 8001118:	b085      	sub	sp, #20
 800111a:	4692      	mov	sl, r2
 800111c:	001c      	movs	r4, r3
 800111e:	0b36      	lsrs	r6, r6, #12
 8001120:	0d40      	lsrs	r0, r0, #21
 8001122:	0fcd      	lsrs	r5, r1, #31
 8001124:	2800      	cmp	r0, #0
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x26>
 8001128:	e09d      	b.n	8001266 <__aeabi_ddiv+0x162>
 800112a:	4b95      	ldr	r3, [pc, #596]	; (8001380 <__aeabi_ddiv+0x27c>)
 800112c:	4298      	cmp	r0, r3
 800112e:	d039      	beq.n	80011a4 <__aeabi_ddiv+0xa0>
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	00f6      	lsls	r6, r6, #3
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	431e      	orrs	r6, r3
 8001138:	4a92      	ldr	r2, [pc, #584]	; (8001384 <__aeabi_ddiv+0x280>)
 800113a:	0f7b      	lsrs	r3, r7, #29
 800113c:	4333      	orrs	r3, r6
 800113e:	4699      	mov	r9, r3
 8001140:	4694      	mov	ip, r2
 8001142:	0003      	movs	r3, r0
 8001144:	4463      	add	r3, ip
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2300      	movs	r3, #0
 800114a:	2600      	movs	r6, #0
 800114c:	00ff      	lsls	r7, r7, #3
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	0323      	lsls	r3, r4, #12
 8001152:	0b1b      	lsrs	r3, r3, #12
 8001154:	4698      	mov	r8, r3
 8001156:	0063      	lsls	r3, r4, #1
 8001158:	0fe4      	lsrs	r4, r4, #31
 800115a:	4652      	mov	r2, sl
 800115c:	0d5b      	lsrs	r3, r3, #21
 800115e:	9401      	str	r4, [sp, #4]
 8001160:	d100      	bne.n	8001164 <__aeabi_ddiv+0x60>
 8001162:	e0b3      	b.n	80012cc <__aeabi_ddiv+0x1c8>
 8001164:	4986      	ldr	r1, [pc, #536]	; (8001380 <__aeabi_ddiv+0x27c>)
 8001166:	428b      	cmp	r3, r1
 8001168:	d100      	bne.n	800116c <__aeabi_ddiv+0x68>
 800116a:	e09e      	b.n	80012aa <__aeabi_ddiv+0x1a6>
 800116c:	4642      	mov	r2, r8
 800116e:	00d1      	lsls	r1, r2, #3
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	0412      	lsls	r2, r2, #16
 8001174:	430a      	orrs	r2, r1
 8001176:	4651      	mov	r1, sl
 8001178:	0f49      	lsrs	r1, r1, #29
 800117a:	4311      	orrs	r1, r2
 800117c:	468b      	mov	fp, r1
 800117e:	4981      	ldr	r1, [pc, #516]	; (8001384 <__aeabi_ddiv+0x280>)
 8001180:	4652      	mov	r2, sl
 8001182:	468c      	mov	ip, r1
 8001184:	9900      	ldr	r1, [sp, #0]
 8001186:	4463      	add	r3, ip
 8001188:	1acb      	subs	r3, r1, r3
 800118a:	2100      	movs	r1, #0
 800118c:	00d2      	lsls	r2, r2, #3
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	002b      	movs	r3, r5
 8001192:	4063      	eors	r3, r4
 8001194:	469a      	mov	sl, r3
 8001196:	2e0f      	cmp	r6, #15
 8001198:	d900      	bls.n	800119c <__aeabi_ddiv+0x98>
 800119a:	e105      	b.n	80013a8 <__aeabi_ddiv+0x2a4>
 800119c:	4b7a      	ldr	r3, [pc, #488]	; (8001388 <__aeabi_ddiv+0x284>)
 800119e:	00b6      	lsls	r6, r6, #2
 80011a0:	599b      	ldr	r3, [r3, r6]
 80011a2:	469f      	mov	pc, r3
 80011a4:	465b      	mov	r3, fp
 80011a6:	4333      	orrs	r3, r6
 80011a8:	4699      	mov	r9, r3
 80011aa:	d000      	beq.n	80011ae <__aeabi_ddiv+0xaa>
 80011ac:	e0b8      	b.n	8001320 <__aeabi_ddiv+0x21c>
 80011ae:	2302      	movs	r3, #2
 80011b0:	2608      	movs	r6, #8
 80011b2:	2700      	movs	r7, #0
 80011b4:	9000      	str	r0, [sp, #0]
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	e7ca      	b.n	8001150 <__aeabi_ddiv+0x4c>
 80011ba:	46cb      	mov	fp, r9
 80011bc:	003a      	movs	r2, r7
 80011be:	9902      	ldr	r1, [sp, #8]
 80011c0:	9501      	str	r5, [sp, #4]
 80011c2:	9b01      	ldr	r3, [sp, #4]
 80011c4:	469a      	mov	sl, r3
 80011c6:	2902      	cmp	r1, #2
 80011c8:	d027      	beq.n	800121a <__aeabi_ddiv+0x116>
 80011ca:	2903      	cmp	r1, #3
 80011cc:	d100      	bne.n	80011d0 <__aeabi_ddiv+0xcc>
 80011ce:	e280      	b.n	80016d2 <__aeabi_ddiv+0x5ce>
 80011d0:	2901      	cmp	r1, #1
 80011d2:	d044      	beq.n	800125e <__aeabi_ddiv+0x15a>
 80011d4:	496d      	ldr	r1, [pc, #436]	; (800138c <__aeabi_ddiv+0x288>)
 80011d6:	9b00      	ldr	r3, [sp, #0]
 80011d8:	468c      	mov	ip, r1
 80011da:	4463      	add	r3, ip
 80011dc:	001c      	movs	r4, r3
 80011de:	2c00      	cmp	r4, #0
 80011e0:	dd38      	ble.n	8001254 <__aeabi_ddiv+0x150>
 80011e2:	0753      	lsls	r3, r2, #29
 80011e4:	d000      	beq.n	80011e8 <__aeabi_ddiv+0xe4>
 80011e6:	e213      	b.n	8001610 <__aeabi_ddiv+0x50c>
 80011e8:	08d2      	lsrs	r2, r2, #3
 80011ea:	465b      	mov	r3, fp
 80011ec:	01db      	lsls	r3, r3, #7
 80011ee:	d509      	bpl.n	8001204 <__aeabi_ddiv+0x100>
 80011f0:	4659      	mov	r1, fp
 80011f2:	4b67      	ldr	r3, [pc, #412]	; (8001390 <__aeabi_ddiv+0x28c>)
 80011f4:	4019      	ands	r1, r3
 80011f6:	468b      	mov	fp, r1
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	00c9      	lsls	r1, r1, #3
 80011fc:	468c      	mov	ip, r1
 80011fe:	9b00      	ldr	r3, [sp, #0]
 8001200:	4463      	add	r3, ip
 8001202:	001c      	movs	r4, r3
 8001204:	4b63      	ldr	r3, [pc, #396]	; (8001394 <__aeabi_ddiv+0x290>)
 8001206:	429c      	cmp	r4, r3
 8001208:	dc07      	bgt.n	800121a <__aeabi_ddiv+0x116>
 800120a:	465b      	mov	r3, fp
 800120c:	0564      	lsls	r4, r4, #21
 800120e:	075f      	lsls	r7, r3, #29
 8001210:	025b      	lsls	r3, r3, #9
 8001212:	4317      	orrs	r7, r2
 8001214:	0b1b      	lsrs	r3, r3, #12
 8001216:	0d62      	lsrs	r2, r4, #21
 8001218:	e002      	b.n	8001220 <__aeabi_ddiv+0x11c>
 800121a:	2300      	movs	r3, #0
 800121c:	2700      	movs	r7, #0
 800121e:	4a58      	ldr	r2, [pc, #352]	; (8001380 <__aeabi_ddiv+0x27c>)
 8001220:	2100      	movs	r1, #0
 8001222:	031b      	lsls	r3, r3, #12
 8001224:	0b1c      	lsrs	r4, r3, #12
 8001226:	0d0b      	lsrs	r3, r1, #20
 8001228:	051b      	lsls	r3, r3, #20
 800122a:	4323      	orrs	r3, r4
 800122c:	0514      	lsls	r4, r2, #20
 800122e:	4a5a      	ldr	r2, [pc, #360]	; (8001398 <__aeabi_ddiv+0x294>)
 8001230:	0038      	movs	r0, r7
 8001232:	4013      	ands	r3, r2
 8001234:	431c      	orrs	r4, r3
 8001236:	4653      	mov	r3, sl
 8001238:	0064      	lsls	r4, r4, #1
 800123a:	07db      	lsls	r3, r3, #31
 800123c:	0864      	lsrs	r4, r4, #1
 800123e:	431c      	orrs	r4, r3
 8001240:	0021      	movs	r1, r4
 8001242:	b005      	add	sp, #20
 8001244:	bc3c      	pop	{r2, r3, r4, r5}
 8001246:	4690      	mov	r8, r2
 8001248:	4699      	mov	r9, r3
 800124a:	46a2      	mov	sl, r4
 800124c:	46ab      	mov	fp, r5
 800124e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001250:	2201      	movs	r2, #1
 8001252:	4252      	negs	r2, r2
 8001254:	2301      	movs	r3, #1
 8001256:	1b1b      	subs	r3, r3, r4
 8001258:	2b38      	cmp	r3, #56	; 0x38
 800125a:	dc00      	bgt.n	800125e <__aeabi_ddiv+0x15a>
 800125c:	e1ad      	b.n	80015ba <__aeabi_ddiv+0x4b6>
 800125e:	2200      	movs	r2, #0
 8001260:	2300      	movs	r3, #0
 8001262:	2700      	movs	r7, #0
 8001264:	e7dc      	b.n	8001220 <__aeabi_ddiv+0x11c>
 8001266:	465b      	mov	r3, fp
 8001268:	4333      	orrs	r3, r6
 800126a:	4699      	mov	r9, r3
 800126c:	d05e      	beq.n	800132c <__aeabi_ddiv+0x228>
 800126e:	2e00      	cmp	r6, #0
 8001270:	d100      	bne.n	8001274 <__aeabi_ddiv+0x170>
 8001272:	e18a      	b.n	800158a <__aeabi_ddiv+0x486>
 8001274:	0030      	movs	r0, r6
 8001276:	f001 f94b 	bl	8002510 <__clzsi2>
 800127a:	0003      	movs	r3, r0
 800127c:	3b0b      	subs	r3, #11
 800127e:	2b1c      	cmp	r3, #28
 8001280:	dd00      	ble.n	8001284 <__aeabi_ddiv+0x180>
 8001282:	e17b      	b.n	800157c <__aeabi_ddiv+0x478>
 8001284:	221d      	movs	r2, #29
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	465a      	mov	r2, fp
 800128a:	0001      	movs	r1, r0
 800128c:	40da      	lsrs	r2, r3
 800128e:	3908      	subs	r1, #8
 8001290:	408e      	lsls	r6, r1
 8001292:	0013      	movs	r3, r2
 8001294:	465f      	mov	r7, fp
 8001296:	4333      	orrs	r3, r6
 8001298:	4699      	mov	r9, r3
 800129a:	408f      	lsls	r7, r1
 800129c:	4b3f      	ldr	r3, [pc, #252]	; (800139c <__aeabi_ddiv+0x298>)
 800129e:	2600      	movs	r6, #0
 80012a0:	1a1b      	subs	r3, r3, r0
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2300      	movs	r3, #0
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	e752      	b.n	8001150 <__aeabi_ddiv+0x4c>
 80012aa:	4641      	mov	r1, r8
 80012ac:	4653      	mov	r3, sl
 80012ae:	430b      	orrs	r3, r1
 80012b0:	493b      	ldr	r1, [pc, #236]	; (80013a0 <__aeabi_ddiv+0x29c>)
 80012b2:	469b      	mov	fp, r3
 80012b4:	468c      	mov	ip, r1
 80012b6:	9b00      	ldr	r3, [sp, #0]
 80012b8:	4463      	add	r3, ip
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	465b      	mov	r3, fp
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d13b      	bne.n	800133a <__aeabi_ddiv+0x236>
 80012c2:	2302      	movs	r3, #2
 80012c4:	2200      	movs	r2, #0
 80012c6:	431e      	orrs	r6, r3
 80012c8:	2102      	movs	r1, #2
 80012ca:	e761      	b.n	8001190 <__aeabi_ddiv+0x8c>
 80012cc:	4643      	mov	r3, r8
 80012ce:	4313      	orrs	r3, r2
 80012d0:	469b      	mov	fp, r3
 80012d2:	d037      	beq.n	8001344 <__aeabi_ddiv+0x240>
 80012d4:	4643      	mov	r3, r8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d100      	bne.n	80012dc <__aeabi_ddiv+0x1d8>
 80012da:	e162      	b.n	80015a2 <__aeabi_ddiv+0x49e>
 80012dc:	4640      	mov	r0, r8
 80012de:	f001 f917 	bl	8002510 <__clzsi2>
 80012e2:	0003      	movs	r3, r0
 80012e4:	3b0b      	subs	r3, #11
 80012e6:	2b1c      	cmp	r3, #28
 80012e8:	dd00      	ble.n	80012ec <__aeabi_ddiv+0x1e8>
 80012ea:	e153      	b.n	8001594 <__aeabi_ddiv+0x490>
 80012ec:	0002      	movs	r2, r0
 80012ee:	4641      	mov	r1, r8
 80012f0:	3a08      	subs	r2, #8
 80012f2:	4091      	lsls	r1, r2
 80012f4:	4688      	mov	r8, r1
 80012f6:	211d      	movs	r1, #29
 80012f8:	1acb      	subs	r3, r1, r3
 80012fa:	4651      	mov	r1, sl
 80012fc:	40d9      	lsrs	r1, r3
 80012fe:	000b      	movs	r3, r1
 8001300:	4641      	mov	r1, r8
 8001302:	430b      	orrs	r3, r1
 8001304:	469b      	mov	fp, r3
 8001306:	4653      	mov	r3, sl
 8001308:	4093      	lsls	r3, r2
 800130a:	001a      	movs	r2, r3
 800130c:	9b00      	ldr	r3, [sp, #0]
 800130e:	4925      	ldr	r1, [pc, #148]	; (80013a4 <__aeabi_ddiv+0x2a0>)
 8001310:	469c      	mov	ip, r3
 8001312:	4460      	add	r0, ip
 8001314:	0003      	movs	r3, r0
 8001316:	468c      	mov	ip, r1
 8001318:	4463      	add	r3, ip
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2100      	movs	r1, #0
 800131e:	e737      	b.n	8001190 <__aeabi_ddiv+0x8c>
 8001320:	2303      	movs	r3, #3
 8001322:	46b1      	mov	r9, r6
 8001324:	9000      	str	r0, [sp, #0]
 8001326:	260c      	movs	r6, #12
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	e711      	b.n	8001150 <__aeabi_ddiv+0x4c>
 800132c:	2300      	movs	r3, #0
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	2604      	movs	r6, #4
 8001334:	2700      	movs	r7, #0
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	e70a      	b.n	8001150 <__aeabi_ddiv+0x4c>
 800133a:	2303      	movs	r3, #3
 800133c:	46c3      	mov	fp, r8
 800133e:	431e      	orrs	r6, r3
 8001340:	2103      	movs	r1, #3
 8001342:	e725      	b.n	8001190 <__aeabi_ddiv+0x8c>
 8001344:	3301      	adds	r3, #1
 8001346:	431e      	orrs	r6, r3
 8001348:	2200      	movs	r2, #0
 800134a:	2101      	movs	r1, #1
 800134c:	e720      	b.n	8001190 <__aeabi_ddiv+0x8c>
 800134e:	2300      	movs	r3, #0
 8001350:	469a      	mov	sl, r3
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	2700      	movs	r7, #0
 8001356:	031b      	lsls	r3, r3, #12
 8001358:	4a09      	ldr	r2, [pc, #36]	; (8001380 <__aeabi_ddiv+0x27c>)
 800135a:	e761      	b.n	8001220 <__aeabi_ddiv+0x11c>
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	4649      	mov	r1, r9
 8001360:	031b      	lsls	r3, r3, #12
 8001362:	4219      	tst	r1, r3
 8001364:	d100      	bne.n	8001368 <__aeabi_ddiv+0x264>
 8001366:	e0e2      	b.n	800152e <__aeabi_ddiv+0x42a>
 8001368:	4659      	mov	r1, fp
 800136a:	4219      	tst	r1, r3
 800136c:	d000      	beq.n	8001370 <__aeabi_ddiv+0x26c>
 800136e:	e0de      	b.n	800152e <__aeabi_ddiv+0x42a>
 8001370:	430b      	orrs	r3, r1
 8001372:	031b      	lsls	r3, r3, #12
 8001374:	0017      	movs	r7, r2
 8001376:	0b1b      	lsrs	r3, r3, #12
 8001378:	46a2      	mov	sl, r4
 800137a:	4a01      	ldr	r2, [pc, #4]	; (8001380 <__aeabi_ddiv+0x27c>)
 800137c:	e750      	b.n	8001220 <__aeabi_ddiv+0x11c>
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	000007ff 	.word	0x000007ff
 8001384:	fffffc01 	.word	0xfffffc01
 8001388:	08008e80 	.word	0x08008e80
 800138c:	000003ff 	.word	0x000003ff
 8001390:	feffffff 	.word	0xfeffffff
 8001394:	000007fe 	.word	0x000007fe
 8001398:	800fffff 	.word	0x800fffff
 800139c:	fffffc0d 	.word	0xfffffc0d
 80013a0:	fffff801 	.word	0xfffff801
 80013a4:	000003f3 	.word	0x000003f3
 80013a8:	45d9      	cmp	r9, fp
 80013aa:	d900      	bls.n	80013ae <__aeabi_ddiv+0x2aa>
 80013ac:	e0cb      	b.n	8001546 <__aeabi_ddiv+0x442>
 80013ae:	d100      	bne.n	80013b2 <__aeabi_ddiv+0x2ae>
 80013b0:	e0c6      	b.n	8001540 <__aeabi_ddiv+0x43c>
 80013b2:	003c      	movs	r4, r7
 80013b4:	4648      	mov	r0, r9
 80013b6:	2700      	movs	r7, #0
 80013b8:	9b00      	ldr	r3, [sp, #0]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	465b      	mov	r3, fp
 80013c0:	0e16      	lsrs	r6, r2, #24
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	431e      	orrs	r6, r3
 80013c6:	0213      	lsls	r3, r2, #8
 80013c8:	4698      	mov	r8, r3
 80013ca:	0433      	lsls	r3, r6, #16
 80013cc:	0c1b      	lsrs	r3, r3, #16
 80013ce:	4699      	mov	r9, r3
 80013d0:	0c31      	lsrs	r1, r6, #16
 80013d2:	9101      	str	r1, [sp, #4]
 80013d4:	f7fe ff1e 	bl	8000214 <__aeabi_uidivmod>
 80013d8:	464a      	mov	r2, r9
 80013da:	4342      	muls	r2, r0
 80013dc:	040b      	lsls	r3, r1, #16
 80013de:	0c21      	lsrs	r1, r4, #16
 80013e0:	0005      	movs	r5, r0
 80013e2:	4319      	orrs	r1, r3
 80013e4:	428a      	cmp	r2, r1
 80013e6:	d907      	bls.n	80013f8 <__aeabi_ddiv+0x2f4>
 80013e8:	1989      	adds	r1, r1, r6
 80013ea:	3d01      	subs	r5, #1
 80013ec:	428e      	cmp	r6, r1
 80013ee:	d803      	bhi.n	80013f8 <__aeabi_ddiv+0x2f4>
 80013f0:	428a      	cmp	r2, r1
 80013f2:	d901      	bls.n	80013f8 <__aeabi_ddiv+0x2f4>
 80013f4:	1e85      	subs	r5, r0, #2
 80013f6:	1989      	adds	r1, r1, r6
 80013f8:	1a88      	subs	r0, r1, r2
 80013fa:	9901      	ldr	r1, [sp, #4]
 80013fc:	f7fe ff0a 	bl	8000214 <__aeabi_uidivmod>
 8001400:	0409      	lsls	r1, r1, #16
 8001402:	468c      	mov	ip, r1
 8001404:	464a      	mov	r2, r9
 8001406:	0421      	lsls	r1, r4, #16
 8001408:	4664      	mov	r4, ip
 800140a:	4342      	muls	r2, r0
 800140c:	0c09      	lsrs	r1, r1, #16
 800140e:	0003      	movs	r3, r0
 8001410:	4321      	orrs	r1, r4
 8001412:	428a      	cmp	r2, r1
 8001414:	d904      	bls.n	8001420 <__aeabi_ddiv+0x31c>
 8001416:	1989      	adds	r1, r1, r6
 8001418:	3b01      	subs	r3, #1
 800141a:	428e      	cmp	r6, r1
 800141c:	d800      	bhi.n	8001420 <__aeabi_ddiv+0x31c>
 800141e:	e0f1      	b.n	8001604 <__aeabi_ddiv+0x500>
 8001420:	042d      	lsls	r5, r5, #16
 8001422:	431d      	orrs	r5, r3
 8001424:	46ab      	mov	fp, r5
 8001426:	4643      	mov	r3, r8
 8001428:	1a89      	subs	r1, r1, r2
 800142a:	4642      	mov	r2, r8
 800142c:	0c28      	lsrs	r0, r5, #16
 800142e:	0412      	lsls	r2, r2, #16
 8001430:	0c1d      	lsrs	r5, r3, #16
 8001432:	465b      	mov	r3, fp
 8001434:	0c14      	lsrs	r4, r2, #16
 8001436:	0022      	movs	r2, r4
 8001438:	041b      	lsls	r3, r3, #16
 800143a:	0c1b      	lsrs	r3, r3, #16
 800143c:	435a      	muls	r2, r3
 800143e:	9403      	str	r4, [sp, #12]
 8001440:	436b      	muls	r3, r5
 8001442:	4344      	muls	r4, r0
 8001444:	9502      	str	r5, [sp, #8]
 8001446:	4368      	muls	r0, r5
 8001448:	191b      	adds	r3, r3, r4
 800144a:	0c15      	lsrs	r5, r2, #16
 800144c:	18eb      	adds	r3, r5, r3
 800144e:	429c      	cmp	r4, r3
 8001450:	d903      	bls.n	800145a <__aeabi_ddiv+0x356>
 8001452:	2480      	movs	r4, #128	; 0x80
 8001454:	0264      	lsls	r4, r4, #9
 8001456:	46a4      	mov	ip, r4
 8001458:	4460      	add	r0, ip
 800145a:	0c1c      	lsrs	r4, r3, #16
 800145c:	0415      	lsls	r5, r2, #16
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	0c2d      	lsrs	r5, r5, #16
 8001462:	1820      	adds	r0, r4, r0
 8001464:	195d      	adds	r5, r3, r5
 8001466:	4281      	cmp	r1, r0
 8001468:	d377      	bcc.n	800155a <__aeabi_ddiv+0x456>
 800146a:	d073      	beq.n	8001554 <__aeabi_ddiv+0x450>
 800146c:	1a0c      	subs	r4, r1, r0
 800146e:	4aa2      	ldr	r2, [pc, #648]	; (80016f8 <__aeabi_ddiv+0x5f4>)
 8001470:	1b7d      	subs	r5, r7, r5
 8001472:	42af      	cmp	r7, r5
 8001474:	41bf      	sbcs	r7, r7
 8001476:	4694      	mov	ip, r2
 8001478:	9b00      	ldr	r3, [sp, #0]
 800147a:	427f      	negs	r7, r7
 800147c:	4463      	add	r3, ip
 800147e:	1be0      	subs	r0, r4, r7
 8001480:	001c      	movs	r4, r3
 8001482:	4286      	cmp	r6, r0
 8001484:	d100      	bne.n	8001488 <__aeabi_ddiv+0x384>
 8001486:	e0db      	b.n	8001640 <__aeabi_ddiv+0x53c>
 8001488:	9901      	ldr	r1, [sp, #4]
 800148a:	f7fe fec3 	bl	8000214 <__aeabi_uidivmod>
 800148e:	464a      	mov	r2, r9
 8001490:	4342      	muls	r2, r0
 8001492:	040b      	lsls	r3, r1, #16
 8001494:	0c29      	lsrs	r1, r5, #16
 8001496:	0007      	movs	r7, r0
 8001498:	4319      	orrs	r1, r3
 800149a:	428a      	cmp	r2, r1
 800149c:	d907      	bls.n	80014ae <__aeabi_ddiv+0x3aa>
 800149e:	1989      	adds	r1, r1, r6
 80014a0:	3f01      	subs	r7, #1
 80014a2:	428e      	cmp	r6, r1
 80014a4:	d803      	bhi.n	80014ae <__aeabi_ddiv+0x3aa>
 80014a6:	428a      	cmp	r2, r1
 80014a8:	d901      	bls.n	80014ae <__aeabi_ddiv+0x3aa>
 80014aa:	1e87      	subs	r7, r0, #2
 80014ac:	1989      	adds	r1, r1, r6
 80014ae:	1a88      	subs	r0, r1, r2
 80014b0:	9901      	ldr	r1, [sp, #4]
 80014b2:	f7fe feaf 	bl	8000214 <__aeabi_uidivmod>
 80014b6:	0409      	lsls	r1, r1, #16
 80014b8:	464a      	mov	r2, r9
 80014ba:	4689      	mov	r9, r1
 80014bc:	0429      	lsls	r1, r5, #16
 80014be:	464d      	mov	r5, r9
 80014c0:	4342      	muls	r2, r0
 80014c2:	0c09      	lsrs	r1, r1, #16
 80014c4:	0003      	movs	r3, r0
 80014c6:	4329      	orrs	r1, r5
 80014c8:	428a      	cmp	r2, r1
 80014ca:	d907      	bls.n	80014dc <__aeabi_ddiv+0x3d8>
 80014cc:	1989      	adds	r1, r1, r6
 80014ce:	3b01      	subs	r3, #1
 80014d0:	428e      	cmp	r6, r1
 80014d2:	d803      	bhi.n	80014dc <__aeabi_ddiv+0x3d8>
 80014d4:	428a      	cmp	r2, r1
 80014d6:	d901      	bls.n	80014dc <__aeabi_ddiv+0x3d8>
 80014d8:	1e83      	subs	r3, r0, #2
 80014da:	1989      	adds	r1, r1, r6
 80014dc:	043f      	lsls	r7, r7, #16
 80014de:	1a89      	subs	r1, r1, r2
 80014e0:	003a      	movs	r2, r7
 80014e2:	9f03      	ldr	r7, [sp, #12]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	0038      	movs	r0, r7
 80014e8:	0413      	lsls	r3, r2, #16
 80014ea:	0c1b      	lsrs	r3, r3, #16
 80014ec:	4358      	muls	r0, r3
 80014ee:	4681      	mov	r9, r0
 80014f0:	9802      	ldr	r0, [sp, #8]
 80014f2:	0c15      	lsrs	r5, r2, #16
 80014f4:	436f      	muls	r7, r5
 80014f6:	4343      	muls	r3, r0
 80014f8:	4345      	muls	r5, r0
 80014fa:	4648      	mov	r0, r9
 80014fc:	0c00      	lsrs	r0, r0, #16
 80014fe:	4684      	mov	ip, r0
 8001500:	19db      	adds	r3, r3, r7
 8001502:	4463      	add	r3, ip
 8001504:	429f      	cmp	r7, r3
 8001506:	d903      	bls.n	8001510 <__aeabi_ddiv+0x40c>
 8001508:	2080      	movs	r0, #128	; 0x80
 800150a:	0240      	lsls	r0, r0, #9
 800150c:	4684      	mov	ip, r0
 800150e:	4465      	add	r5, ip
 8001510:	4648      	mov	r0, r9
 8001512:	0c1f      	lsrs	r7, r3, #16
 8001514:	0400      	lsls	r0, r0, #16
 8001516:	041b      	lsls	r3, r3, #16
 8001518:	0c00      	lsrs	r0, r0, #16
 800151a:	197d      	adds	r5, r7, r5
 800151c:	1818      	adds	r0, r3, r0
 800151e:	42a9      	cmp	r1, r5
 8001520:	d200      	bcs.n	8001524 <__aeabi_ddiv+0x420>
 8001522:	e084      	b.n	800162e <__aeabi_ddiv+0x52a>
 8001524:	d100      	bne.n	8001528 <__aeabi_ddiv+0x424>
 8001526:	e07f      	b.n	8001628 <__aeabi_ddiv+0x524>
 8001528:	2301      	movs	r3, #1
 800152a:	431a      	orrs	r2, r3
 800152c:	e657      	b.n	80011de <__aeabi_ddiv+0xda>
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	464a      	mov	r2, r9
 8001532:	031b      	lsls	r3, r3, #12
 8001534:	4313      	orrs	r3, r2
 8001536:	031b      	lsls	r3, r3, #12
 8001538:	0b1b      	lsrs	r3, r3, #12
 800153a:	46aa      	mov	sl, r5
 800153c:	4a6f      	ldr	r2, [pc, #444]	; (80016fc <__aeabi_ddiv+0x5f8>)
 800153e:	e66f      	b.n	8001220 <__aeabi_ddiv+0x11c>
 8001540:	42ba      	cmp	r2, r7
 8001542:	d900      	bls.n	8001546 <__aeabi_ddiv+0x442>
 8001544:	e735      	b.n	80013b2 <__aeabi_ddiv+0x2ae>
 8001546:	464b      	mov	r3, r9
 8001548:	07dc      	lsls	r4, r3, #31
 800154a:	0858      	lsrs	r0, r3, #1
 800154c:	087b      	lsrs	r3, r7, #1
 800154e:	431c      	orrs	r4, r3
 8001550:	07ff      	lsls	r7, r7, #31
 8001552:	e734      	b.n	80013be <__aeabi_ddiv+0x2ba>
 8001554:	2400      	movs	r4, #0
 8001556:	42af      	cmp	r7, r5
 8001558:	d289      	bcs.n	800146e <__aeabi_ddiv+0x36a>
 800155a:	4447      	add	r7, r8
 800155c:	4547      	cmp	r7, r8
 800155e:	41a4      	sbcs	r4, r4
 8001560:	465b      	mov	r3, fp
 8001562:	4264      	negs	r4, r4
 8001564:	19a4      	adds	r4, r4, r6
 8001566:	1864      	adds	r4, r4, r1
 8001568:	3b01      	subs	r3, #1
 800156a:	42a6      	cmp	r6, r4
 800156c:	d21e      	bcs.n	80015ac <__aeabi_ddiv+0x4a8>
 800156e:	42a0      	cmp	r0, r4
 8001570:	d86d      	bhi.n	800164e <__aeabi_ddiv+0x54a>
 8001572:	d100      	bne.n	8001576 <__aeabi_ddiv+0x472>
 8001574:	e0b6      	b.n	80016e4 <__aeabi_ddiv+0x5e0>
 8001576:	1a24      	subs	r4, r4, r0
 8001578:	469b      	mov	fp, r3
 800157a:	e778      	b.n	800146e <__aeabi_ddiv+0x36a>
 800157c:	0003      	movs	r3, r0
 800157e:	465a      	mov	r2, fp
 8001580:	3b28      	subs	r3, #40	; 0x28
 8001582:	409a      	lsls	r2, r3
 8001584:	2700      	movs	r7, #0
 8001586:	4691      	mov	r9, r2
 8001588:	e688      	b.n	800129c <__aeabi_ddiv+0x198>
 800158a:	4658      	mov	r0, fp
 800158c:	f000 ffc0 	bl	8002510 <__clzsi2>
 8001590:	3020      	adds	r0, #32
 8001592:	e672      	b.n	800127a <__aeabi_ddiv+0x176>
 8001594:	0003      	movs	r3, r0
 8001596:	4652      	mov	r2, sl
 8001598:	3b28      	subs	r3, #40	; 0x28
 800159a:	409a      	lsls	r2, r3
 800159c:	4693      	mov	fp, r2
 800159e:	2200      	movs	r2, #0
 80015a0:	e6b4      	b.n	800130c <__aeabi_ddiv+0x208>
 80015a2:	4650      	mov	r0, sl
 80015a4:	f000 ffb4 	bl	8002510 <__clzsi2>
 80015a8:	3020      	adds	r0, #32
 80015aa:	e69a      	b.n	80012e2 <__aeabi_ddiv+0x1de>
 80015ac:	42a6      	cmp	r6, r4
 80015ae:	d1e2      	bne.n	8001576 <__aeabi_ddiv+0x472>
 80015b0:	45b8      	cmp	r8, r7
 80015b2:	d9dc      	bls.n	800156e <__aeabi_ddiv+0x46a>
 80015b4:	1a34      	subs	r4, r6, r0
 80015b6:	469b      	mov	fp, r3
 80015b8:	e759      	b.n	800146e <__aeabi_ddiv+0x36a>
 80015ba:	2b1f      	cmp	r3, #31
 80015bc:	dc65      	bgt.n	800168a <__aeabi_ddiv+0x586>
 80015be:	4c50      	ldr	r4, [pc, #320]	; (8001700 <__aeabi_ddiv+0x5fc>)
 80015c0:	9900      	ldr	r1, [sp, #0]
 80015c2:	46a4      	mov	ip, r4
 80015c4:	465c      	mov	r4, fp
 80015c6:	4461      	add	r1, ip
 80015c8:	0008      	movs	r0, r1
 80015ca:	408c      	lsls	r4, r1
 80015cc:	0011      	movs	r1, r2
 80015ce:	4082      	lsls	r2, r0
 80015d0:	40d9      	lsrs	r1, r3
 80015d2:	1e50      	subs	r0, r2, #1
 80015d4:	4182      	sbcs	r2, r0
 80015d6:	430c      	orrs	r4, r1
 80015d8:	4314      	orrs	r4, r2
 80015da:	465a      	mov	r2, fp
 80015dc:	40da      	lsrs	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	0762      	lsls	r2, r4, #29
 80015e2:	d009      	beq.n	80015f8 <__aeabi_ddiv+0x4f4>
 80015e4:	220f      	movs	r2, #15
 80015e6:	4022      	ands	r2, r4
 80015e8:	2a04      	cmp	r2, #4
 80015ea:	d005      	beq.n	80015f8 <__aeabi_ddiv+0x4f4>
 80015ec:	0022      	movs	r2, r4
 80015ee:	1d14      	adds	r4, r2, #4
 80015f0:	4294      	cmp	r4, r2
 80015f2:	4189      	sbcs	r1, r1
 80015f4:	4249      	negs	r1, r1
 80015f6:	185b      	adds	r3, r3, r1
 80015f8:	021a      	lsls	r2, r3, #8
 80015fa:	d562      	bpl.n	80016c2 <__aeabi_ddiv+0x5be>
 80015fc:	2201      	movs	r2, #1
 80015fe:	2300      	movs	r3, #0
 8001600:	2700      	movs	r7, #0
 8001602:	e60d      	b.n	8001220 <__aeabi_ddiv+0x11c>
 8001604:	428a      	cmp	r2, r1
 8001606:	d800      	bhi.n	800160a <__aeabi_ddiv+0x506>
 8001608:	e70a      	b.n	8001420 <__aeabi_ddiv+0x31c>
 800160a:	1e83      	subs	r3, r0, #2
 800160c:	1989      	adds	r1, r1, r6
 800160e:	e707      	b.n	8001420 <__aeabi_ddiv+0x31c>
 8001610:	230f      	movs	r3, #15
 8001612:	4013      	ands	r3, r2
 8001614:	2b04      	cmp	r3, #4
 8001616:	d100      	bne.n	800161a <__aeabi_ddiv+0x516>
 8001618:	e5e6      	b.n	80011e8 <__aeabi_ddiv+0xe4>
 800161a:	1d17      	adds	r7, r2, #4
 800161c:	4297      	cmp	r7, r2
 800161e:	4192      	sbcs	r2, r2
 8001620:	4253      	negs	r3, r2
 8001622:	449b      	add	fp, r3
 8001624:	08fa      	lsrs	r2, r7, #3
 8001626:	e5e0      	b.n	80011ea <__aeabi_ddiv+0xe6>
 8001628:	2800      	cmp	r0, #0
 800162a:	d100      	bne.n	800162e <__aeabi_ddiv+0x52a>
 800162c:	e5d7      	b.n	80011de <__aeabi_ddiv+0xda>
 800162e:	1871      	adds	r1, r6, r1
 8001630:	1e53      	subs	r3, r2, #1
 8001632:	42b1      	cmp	r1, r6
 8001634:	d327      	bcc.n	8001686 <__aeabi_ddiv+0x582>
 8001636:	42a9      	cmp	r1, r5
 8001638:	d315      	bcc.n	8001666 <__aeabi_ddiv+0x562>
 800163a:	d058      	beq.n	80016ee <__aeabi_ddiv+0x5ea>
 800163c:	001a      	movs	r2, r3
 800163e:	e773      	b.n	8001528 <__aeabi_ddiv+0x424>
 8001640:	2b00      	cmp	r3, #0
 8001642:	dc00      	bgt.n	8001646 <__aeabi_ddiv+0x542>
 8001644:	e604      	b.n	8001250 <__aeabi_ddiv+0x14c>
 8001646:	2301      	movs	r3, #1
 8001648:	2200      	movs	r2, #0
 800164a:	449b      	add	fp, r3
 800164c:	e5cd      	b.n	80011ea <__aeabi_ddiv+0xe6>
 800164e:	2302      	movs	r3, #2
 8001650:	4447      	add	r7, r8
 8001652:	4547      	cmp	r7, r8
 8001654:	4189      	sbcs	r1, r1
 8001656:	425b      	negs	r3, r3
 8001658:	469c      	mov	ip, r3
 800165a:	4249      	negs	r1, r1
 800165c:	1989      	adds	r1, r1, r6
 800165e:	190c      	adds	r4, r1, r4
 8001660:	44e3      	add	fp, ip
 8001662:	1a24      	subs	r4, r4, r0
 8001664:	e703      	b.n	800146e <__aeabi_ddiv+0x36a>
 8001666:	4643      	mov	r3, r8
 8001668:	005f      	lsls	r7, r3, #1
 800166a:	4547      	cmp	r7, r8
 800166c:	419b      	sbcs	r3, r3
 800166e:	46b8      	mov	r8, r7
 8001670:	425b      	negs	r3, r3
 8001672:	199e      	adds	r6, r3, r6
 8001674:	3a02      	subs	r2, #2
 8001676:	1989      	adds	r1, r1, r6
 8001678:	42a9      	cmp	r1, r5
 800167a:	d000      	beq.n	800167e <__aeabi_ddiv+0x57a>
 800167c:	e754      	b.n	8001528 <__aeabi_ddiv+0x424>
 800167e:	4540      	cmp	r0, r8
 8001680:	d000      	beq.n	8001684 <__aeabi_ddiv+0x580>
 8001682:	e751      	b.n	8001528 <__aeabi_ddiv+0x424>
 8001684:	e5ab      	b.n	80011de <__aeabi_ddiv+0xda>
 8001686:	001a      	movs	r2, r3
 8001688:	e7f6      	b.n	8001678 <__aeabi_ddiv+0x574>
 800168a:	211f      	movs	r1, #31
 800168c:	465f      	mov	r7, fp
 800168e:	4249      	negs	r1, r1
 8001690:	1b0c      	subs	r4, r1, r4
 8001692:	40e7      	lsrs	r7, r4
 8001694:	2b20      	cmp	r3, #32
 8001696:	d007      	beq.n	80016a8 <__aeabi_ddiv+0x5a4>
 8001698:	491a      	ldr	r1, [pc, #104]	; (8001704 <__aeabi_ddiv+0x600>)
 800169a:	9b00      	ldr	r3, [sp, #0]
 800169c:	468c      	mov	ip, r1
 800169e:	4463      	add	r3, ip
 80016a0:	0018      	movs	r0, r3
 80016a2:	465b      	mov	r3, fp
 80016a4:	4083      	lsls	r3, r0
 80016a6:	431a      	orrs	r2, r3
 80016a8:	1e50      	subs	r0, r2, #1
 80016aa:	4182      	sbcs	r2, r0
 80016ac:	433a      	orrs	r2, r7
 80016ae:	2707      	movs	r7, #7
 80016b0:	2300      	movs	r3, #0
 80016b2:	4017      	ands	r7, r2
 80016b4:	d009      	beq.n	80016ca <__aeabi_ddiv+0x5c6>
 80016b6:	210f      	movs	r1, #15
 80016b8:	2300      	movs	r3, #0
 80016ba:	4011      	ands	r1, r2
 80016bc:	0014      	movs	r4, r2
 80016be:	2904      	cmp	r1, #4
 80016c0:	d195      	bne.n	80015ee <__aeabi_ddiv+0x4ea>
 80016c2:	0022      	movs	r2, r4
 80016c4:	075f      	lsls	r7, r3, #29
 80016c6:	025b      	lsls	r3, r3, #9
 80016c8:	0b1b      	lsrs	r3, r3, #12
 80016ca:	08d2      	lsrs	r2, r2, #3
 80016cc:	4317      	orrs	r7, r2
 80016ce:	2200      	movs	r2, #0
 80016d0:	e5a6      	b.n	8001220 <__aeabi_ddiv+0x11c>
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	4659      	mov	r1, fp
 80016d6:	031b      	lsls	r3, r3, #12
 80016d8:	430b      	orrs	r3, r1
 80016da:	031b      	lsls	r3, r3, #12
 80016dc:	0017      	movs	r7, r2
 80016de:	0b1b      	lsrs	r3, r3, #12
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <__aeabi_ddiv+0x5f8>)
 80016e2:	e59d      	b.n	8001220 <__aeabi_ddiv+0x11c>
 80016e4:	42bd      	cmp	r5, r7
 80016e6:	d8b2      	bhi.n	800164e <__aeabi_ddiv+0x54a>
 80016e8:	469b      	mov	fp, r3
 80016ea:	2400      	movs	r4, #0
 80016ec:	e6bf      	b.n	800146e <__aeabi_ddiv+0x36a>
 80016ee:	4580      	cmp	r8, r0
 80016f0:	d3b9      	bcc.n	8001666 <__aeabi_ddiv+0x562>
 80016f2:	001a      	movs	r2, r3
 80016f4:	e7c3      	b.n	800167e <__aeabi_ddiv+0x57a>
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	000003ff 	.word	0x000003ff
 80016fc:	000007ff 	.word	0x000007ff
 8001700:	0000041e 	.word	0x0000041e
 8001704:	0000043e 	.word	0x0000043e

08001708 <__aeabi_dmul>:
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	4657      	mov	r7, sl
 800170c:	46de      	mov	lr, fp
 800170e:	464e      	mov	r6, r9
 8001710:	4645      	mov	r5, r8
 8001712:	b5e0      	push	{r5, r6, r7, lr}
 8001714:	4683      	mov	fp, r0
 8001716:	0006      	movs	r6, r0
 8001718:	030f      	lsls	r7, r1, #12
 800171a:	0048      	lsls	r0, r1, #1
 800171c:	b087      	sub	sp, #28
 800171e:	4692      	mov	sl, r2
 8001720:	001d      	movs	r5, r3
 8001722:	0b3f      	lsrs	r7, r7, #12
 8001724:	0d40      	lsrs	r0, r0, #21
 8001726:	0fcc      	lsrs	r4, r1, #31
 8001728:	2800      	cmp	r0, #0
 800172a:	d100      	bne.n	800172e <__aeabi_dmul+0x26>
 800172c:	e06f      	b.n	800180e <__aeabi_dmul+0x106>
 800172e:	4bde      	ldr	r3, [pc, #888]	; (8001aa8 <__aeabi_dmul+0x3a0>)
 8001730:	4298      	cmp	r0, r3
 8001732:	d038      	beq.n	80017a6 <__aeabi_dmul+0x9e>
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	00ff      	lsls	r7, r7, #3
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	431f      	orrs	r7, r3
 800173c:	0f73      	lsrs	r3, r6, #29
 800173e:	433b      	orrs	r3, r7
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	4bda      	ldr	r3, [pc, #872]	; (8001aac <__aeabi_dmul+0x3a4>)
 8001744:	2700      	movs	r7, #0
 8001746:	4699      	mov	r9, r3
 8001748:	2300      	movs	r3, #0
 800174a:	469b      	mov	fp, r3
 800174c:	00f6      	lsls	r6, r6, #3
 800174e:	4481      	add	r9, r0
 8001750:	032b      	lsls	r3, r5, #12
 8001752:	0069      	lsls	r1, r5, #1
 8001754:	0b1b      	lsrs	r3, r3, #12
 8001756:	4652      	mov	r2, sl
 8001758:	4698      	mov	r8, r3
 800175a:	0d49      	lsrs	r1, r1, #21
 800175c:	0fed      	lsrs	r5, r5, #31
 800175e:	2900      	cmp	r1, #0
 8001760:	d100      	bne.n	8001764 <__aeabi_dmul+0x5c>
 8001762:	e085      	b.n	8001870 <__aeabi_dmul+0x168>
 8001764:	4bd0      	ldr	r3, [pc, #832]	; (8001aa8 <__aeabi_dmul+0x3a0>)
 8001766:	4299      	cmp	r1, r3
 8001768:	d100      	bne.n	800176c <__aeabi_dmul+0x64>
 800176a:	e073      	b.n	8001854 <__aeabi_dmul+0x14c>
 800176c:	4643      	mov	r3, r8
 800176e:	00da      	lsls	r2, r3, #3
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	041b      	lsls	r3, r3, #16
 8001774:	4313      	orrs	r3, r2
 8001776:	4652      	mov	r2, sl
 8001778:	48cc      	ldr	r0, [pc, #816]	; (8001aac <__aeabi_dmul+0x3a4>)
 800177a:	0f52      	lsrs	r2, r2, #29
 800177c:	4684      	mov	ip, r0
 800177e:	4313      	orrs	r3, r2
 8001780:	4652      	mov	r2, sl
 8001782:	2000      	movs	r0, #0
 8001784:	4461      	add	r1, ip
 8001786:	00d2      	lsls	r2, r2, #3
 8001788:	4489      	add	r9, r1
 800178a:	0021      	movs	r1, r4
 800178c:	4069      	eors	r1, r5
 800178e:	9100      	str	r1, [sp, #0]
 8001790:	468c      	mov	ip, r1
 8001792:	2101      	movs	r1, #1
 8001794:	4449      	add	r1, r9
 8001796:	468a      	mov	sl, r1
 8001798:	2f0f      	cmp	r7, #15
 800179a:	d900      	bls.n	800179e <__aeabi_dmul+0x96>
 800179c:	e090      	b.n	80018c0 <__aeabi_dmul+0x1b8>
 800179e:	49c4      	ldr	r1, [pc, #784]	; (8001ab0 <__aeabi_dmul+0x3a8>)
 80017a0:	00bf      	lsls	r7, r7, #2
 80017a2:	59cf      	ldr	r7, [r1, r7]
 80017a4:	46bf      	mov	pc, r7
 80017a6:	465b      	mov	r3, fp
 80017a8:	433b      	orrs	r3, r7
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	d000      	beq.n	80017b0 <__aeabi_dmul+0xa8>
 80017ae:	e16a      	b.n	8001a86 <__aeabi_dmul+0x37e>
 80017b0:	2302      	movs	r3, #2
 80017b2:	2708      	movs	r7, #8
 80017b4:	2600      	movs	r6, #0
 80017b6:	4681      	mov	r9, r0
 80017b8:	469b      	mov	fp, r3
 80017ba:	e7c9      	b.n	8001750 <__aeabi_dmul+0x48>
 80017bc:	0032      	movs	r2, r6
 80017be:	4658      	mov	r0, fp
 80017c0:	9b01      	ldr	r3, [sp, #4]
 80017c2:	4661      	mov	r1, ip
 80017c4:	9100      	str	r1, [sp, #0]
 80017c6:	2802      	cmp	r0, #2
 80017c8:	d100      	bne.n	80017cc <__aeabi_dmul+0xc4>
 80017ca:	e075      	b.n	80018b8 <__aeabi_dmul+0x1b0>
 80017cc:	2803      	cmp	r0, #3
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dmul+0xca>
 80017d0:	e1fe      	b.n	8001bd0 <__aeabi_dmul+0x4c8>
 80017d2:	2801      	cmp	r0, #1
 80017d4:	d000      	beq.n	80017d8 <__aeabi_dmul+0xd0>
 80017d6:	e12c      	b.n	8001a32 <__aeabi_dmul+0x32a>
 80017d8:	2300      	movs	r3, #0
 80017da:	2700      	movs	r7, #0
 80017dc:	2600      	movs	r6, #0
 80017de:	2500      	movs	r5, #0
 80017e0:	033f      	lsls	r7, r7, #12
 80017e2:	0d2a      	lsrs	r2, r5, #20
 80017e4:	0b3f      	lsrs	r7, r7, #12
 80017e6:	48b3      	ldr	r0, [pc, #716]	; (8001ab4 <__aeabi_dmul+0x3ac>)
 80017e8:	0512      	lsls	r2, r2, #20
 80017ea:	433a      	orrs	r2, r7
 80017ec:	4002      	ands	r2, r0
 80017ee:	051b      	lsls	r3, r3, #20
 80017f0:	4313      	orrs	r3, r2
 80017f2:	9a00      	ldr	r2, [sp, #0]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	07d1      	lsls	r1, r2, #31
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	430b      	orrs	r3, r1
 80017fc:	0030      	movs	r0, r6
 80017fe:	0019      	movs	r1, r3
 8001800:	b007      	add	sp, #28
 8001802:	bc3c      	pop	{r2, r3, r4, r5}
 8001804:	4690      	mov	r8, r2
 8001806:	4699      	mov	r9, r3
 8001808:	46a2      	mov	sl, r4
 800180a:	46ab      	mov	fp, r5
 800180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180e:	465b      	mov	r3, fp
 8001810:	433b      	orrs	r3, r7
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	d100      	bne.n	8001818 <__aeabi_dmul+0x110>
 8001816:	e12f      	b.n	8001a78 <__aeabi_dmul+0x370>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d100      	bne.n	800181e <__aeabi_dmul+0x116>
 800181c:	e1a5      	b.n	8001b6a <__aeabi_dmul+0x462>
 800181e:	0038      	movs	r0, r7
 8001820:	f000 fe76 	bl	8002510 <__clzsi2>
 8001824:	0003      	movs	r3, r0
 8001826:	3b0b      	subs	r3, #11
 8001828:	2b1c      	cmp	r3, #28
 800182a:	dd00      	ble.n	800182e <__aeabi_dmul+0x126>
 800182c:	e196      	b.n	8001b5c <__aeabi_dmul+0x454>
 800182e:	221d      	movs	r2, #29
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	465a      	mov	r2, fp
 8001834:	0001      	movs	r1, r0
 8001836:	40da      	lsrs	r2, r3
 8001838:	465e      	mov	r6, fp
 800183a:	3908      	subs	r1, #8
 800183c:	408f      	lsls	r7, r1
 800183e:	0013      	movs	r3, r2
 8001840:	408e      	lsls	r6, r1
 8001842:	433b      	orrs	r3, r7
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	4b9c      	ldr	r3, [pc, #624]	; (8001ab8 <__aeabi_dmul+0x3b0>)
 8001848:	2700      	movs	r7, #0
 800184a:	1a1b      	subs	r3, r3, r0
 800184c:	4699      	mov	r9, r3
 800184e:	2300      	movs	r3, #0
 8001850:	469b      	mov	fp, r3
 8001852:	e77d      	b.n	8001750 <__aeabi_dmul+0x48>
 8001854:	4641      	mov	r1, r8
 8001856:	4653      	mov	r3, sl
 8001858:	430b      	orrs	r3, r1
 800185a:	4993      	ldr	r1, [pc, #588]	; (8001aa8 <__aeabi_dmul+0x3a0>)
 800185c:	468c      	mov	ip, r1
 800185e:	44e1      	add	r9, ip
 8001860:	2b00      	cmp	r3, #0
 8001862:	d000      	beq.n	8001866 <__aeabi_dmul+0x15e>
 8001864:	e11a      	b.n	8001a9c <__aeabi_dmul+0x394>
 8001866:	2202      	movs	r2, #2
 8001868:	2002      	movs	r0, #2
 800186a:	4317      	orrs	r7, r2
 800186c:	2200      	movs	r2, #0
 800186e:	e78c      	b.n	800178a <__aeabi_dmul+0x82>
 8001870:	4313      	orrs	r3, r2
 8001872:	d100      	bne.n	8001876 <__aeabi_dmul+0x16e>
 8001874:	e10d      	b.n	8001a92 <__aeabi_dmul+0x38a>
 8001876:	4643      	mov	r3, r8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d100      	bne.n	800187e <__aeabi_dmul+0x176>
 800187c:	e181      	b.n	8001b82 <__aeabi_dmul+0x47a>
 800187e:	4640      	mov	r0, r8
 8001880:	f000 fe46 	bl	8002510 <__clzsi2>
 8001884:	0002      	movs	r2, r0
 8001886:	3a0b      	subs	r2, #11
 8001888:	2a1c      	cmp	r2, #28
 800188a:	dd00      	ble.n	800188e <__aeabi_dmul+0x186>
 800188c:	e172      	b.n	8001b74 <__aeabi_dmul+0x46c>
 800188e:	0001      	movs	r1, r0
 8001890:	4643      	mov	r3, r8
 8001892:	3908      	subs	r1, #8
 8001894:	408b      	lsls	r3, r1
 8001896:	4698      	mov	r8, r3
 8001898:	231d      	movs	r3, #29
 800189a:	1a9a      	subs	r2, r3, r2
 800189c:	4653      	mov	r3, sl
 800189e:	40d3      	lsrs	r3, r2
 80018a0:	001a      	movs	r2, r3
 80018a2:	4643      	mov	r3, r8
 80018a4:	4313      	orrs	r3, r2
 80018a6:	4652      	mov	r2, sl
 80018a8:	408a      	lsls	r2, r1
 80018aa:	4649      	mov	r1, r9
 80018ac:	1a08      	subs	r0, r1, r0
 80018ae:	4982      	ldr	r1, [pc, #520]	; (8001ab8 <__aeabi_dmul+0x3b0>)
 80018b0:	4689      	mov	r9, r1
 80018b2:	4481      	add	r9, r0
 80018b4:	2000      	movs	r0, #0
 80018b6:	e768      	b.n	800178a <__aeabi_dmul+0x82>
 80018b8:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <__aeabi_dmul+0x3a0>)
 80018ba:	2700      	movs	r7, #0
 80018bc:	2600      	movs	r6, #0
 80018be:	e78e      	b.n	80017de <__aeabi_dmul+0xd6>
 80018c0:	0c14      	lsrs	r4, r2, #16
 80018c2:	0412      	lsls	r2, r2, #16
 80018c4:	0c12      	lsrs	r2, r2, #16
 80018c6:	0011      	movs	r1, r2
 80018c8:	0c37      	lsrs	r7, r6, #16
 80018ca:	0436      	lsls	r6, r6, #16
 80018cc:	0c35      	lsrs	r5, r6, #16
 80018ce:	4379      	muls	r1, r7
 80018d0:	0028      	movs	r0, r5
 80018d2:	468c      	mov	ip, r1
 80018d4:	002e      	movs	r6, r5
 80018d6:	4360      	muls	r0, r4
 80018d8:	4460      	add	r0, ip
 80018da:	4683      	mov	fp, r0
 80018dc:	4356      	muls	r6, r2
 80018de:	0021      	movs	r1, r4
 80018e0:	0c30      	lsrs	r0, r6, #16
 80018e2:	4680      	mov	r8, r0
 80018e4:	4658      	mov	r0, fp
 80018e6:	4379      	muls	r1, r7
 80018e8:	4440      	add	r0, r8
 80018ea:	9102      	str	r1, [sp, #8]
 80018ec:	4584      	cmp	ip, r0
 80018ee:	d906      	bls.n	80018fe <__aeabi_dmul+0x1f6>
 80018f0:	4688      	mov	r8, r1
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	0249      	lsls	r1, r1, #9
 80018f6:	468c      	mov	ip, r1
 80018f8:	44e0      	add	r8, ip
 80018fa:	4641      	mov	r1, r8
 80018fc:	9102      	str	r1, [sp, #8]
 80018fe:	0436      	lsls	r6, r6, #16
 8001900:	0c01      	lsrs	r1, r0, #16
 8001902:	0c36      	lsrs	r6, r6, #16
 8001904:	0400      	lsls	r0, r0, #16
 8001906:	468b      	mov	fp, r1
 8001908:	1981      	adds	r1, r0, r6
 800190a:	0c1e      	lsrs	r6, r3, #16
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	0c1b      	lsrs	r3, r3, #16
 8001910:	9103      	str	r1, [sp, #12]
 8001912:	0019      	movs	r1, r3
 8001914:	4379      	muls	r1, r7
 8001916:	468c      	mov	ip, r1
 8001918:	0028      	movs	r0, r5
 800191a:	4375      	muls	r5, r6
 800191c:	4465      	add	r5, ip
 800191e:	46a8      	mov	r8, r5
 8001920:	4358      	muls	r0, r3
 8001922:	0c05      	lsrs	r5, r0, #16
 8001924:	4445      	add	r5, r8
 8001926:	4377      	muls	r7, r6
 8001928:	42a9      	cmp	r1, r5
 800192a:	d903      	bls.n	8001934 <__aeabi_dmul+0x22c>
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	0249      	lsls	r1, r1, #9
 8001930:	468c      	mov	ip, r1
 8001932:	4467      	add	r7, ip
 8001934:	0c29      	lsrs	r1, r5, #16
 8001936:	468c      	mov	ip, r1
 8001938:	0039      	movs	r1, r7
 800193a:	0400      	lsls	r0, r0, #16
 800193c:	0c00      	lsrs	r0, r0, #16
 800193e:	042d      	lsls	r5, r5, #16
 8001940:	182d      	adds	r5, r5, r0
 8001942:	4461      	add	r1, ip
 8001944:	44ab      	add	fp, r5
 8001946:	9105      	str	r1, [sp, #20]
 8001948:	4659      	mov	r1, fp
 800194a:	9104      	str	r1, [sp, #16]
 800194c:	9901      	ldr	r1, [sp, #4]
 800194e:	040f      	lsls	r7, r1, #16
 8001950:	0c3f      	lsrs	r7, r7, #16
 8001952:	0c08      	lsrs	r0, r1, #16
 8001954:	0039      	movs	r1, r7
 8001956:	4351      	muls	r1, r2
 8001958:	4342      	muls	r2, r0
 800195a:	4690      	mov	r8, r2
 800195c:	0002      	movs	r2, r0
 800195e:	468c      	mov	ip, r1
 8001960:	0c09      	lsrs	r1, r1, #16
 8001962:	468b      	mov	fp, r1
 8001964:	4362      	muls	r2, r4
 8001966:	437c      	muls	r4, r7
 8001968:	4444      	add	r4, r8
 800196a:	445c      	add	r4, fp
 800196c:	45a0      	cmp	r8, r4
 800196e:	d903      	bls.n	8001978 <__aeabi_dmul+0x270>
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	0249      	lsls	r1, r1, #9
 8001974:	4688      	mov	r8, r1
 8001976:	4442      	add	r2, r8
 8001978:	0c21      	lsrs	r1, r4, #16
 800197a:	4688      	mov	r8, r1
 800197c:	4661      	mov	r1, ip
 800197e:	0409      	lsls	r1, r1, #16
 8001980:	0c09      	lsrs	r1, r1, #16
 8001982:	468c      	mov	ip, r1
 8001984:	0039      	movs	r1, r7
 8001986:	4359      	muls	r1, r3
 8001988:	4343      	muls	r3, r0
 800198a:	4370      	muls	r0, r6
 800198c:	437e      	muls	r6, r7
 800198e:	0c0f      	lsrs	r7, r1, #16
 8001990:	18f6      	adds	r6, r6, r3
 8001992:	0424      	lsls	r4, r4, #16
 8001994:	19be      	adds	r6, r7, r6
 8001996:	4464      	add	r4, ip
 8001998:	4442      	add	r2, r8
 800199a:	468c      	mov	ip, r1
 800199c:	42b3      	cmp	r3, r6
 800199e:	d903      	bls.n	80019a8 <__aeabi_dmul+0x2a0>
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	025b      	lsls	r3, r3, #9
 80019a4:	4698      	mov	r8, r3
 80019a6:	4440      	add	r0, r8
 80019a8:	9b02      	ldr	r3, [sp, #8]
 80019aa:	4661      	mov	r1, ip
 80019ac:	4698      	mov	r8, r3
 80019ae:	9b04      	ldr	r3, [sp, #16]
 80019b0:	0437      	lsls	r7, r6, #16
 80019b2:	4443      	add	r3, r8
 80019b4:	469b      	mov	fp, r3
 80019b6:	45ab      	cmp	fp, r5
 80019b8:	41ad      	sbcs	r5, r5
 80019ba:	426b      	negs	r3, r5
 80019bc:	040d      	lsls	r5, r1, #16
 80019be:	9905      	ldr	r1, [sp, #20]
 80019c0:	0c2d      	lsrs	r5, r5, #16
 80019c2:	468c      	mov	ip, r1
 80019c4:	197f      	adds	r7, r7, r5
 80019c6:	4467      	add	r7, ip
 80019c8:	18fd      	adds	r5, r7, r3
 80019ca:	46a8      	mov	r8, r5
 80019cc:	465d      	mov	r5, fp
 80019ce:	192d      	adds	r5, r5, r4
 80019d0:	42a5      	cmp	r5, r4
 80019d2:	41a4      	sbcs	r4, r4
 80019d4:	4693      	mov	fp, r2
 80019d6:	4264      	negs	r4, r4
 80019d8:	46a4      	mov	ip, r4
 80019da:	44c3      	add	fp, r8
 80019dc:	44dc      	add	ip, fp
 80019de:	428f      	cmp	r7, r1
 80019e0:	41bf      	sbcs	r7, r7
 80019e2:	4598      	cmp	r8, r3
 80019e4:	419b      	sbcs	r3, r3
 80019e6:	4593      	cmp	fp, r2
 80019e8:	4192      	sbcs	r2, r2
 80019ea:	45a4      	cmp	ip, r4
 80019ec:	41a4      	sbcs	r4, r4
 80019ee:	425b      	negs	r3, r3
 80019f0:	427f      	negs	r7, r7
 80019f2:	431f      	orrs	r7, r3
 80019f4:	0c36      	lsrs	r6, r6, #16
 80019f6:	4252      	negs	r2, r2
 80019f8:	4264      	negs	r4, r4
 80019fa:	19bf      	adds	r7, r7, r6
 80019fc:	4322      	orrs	r2, r4
 80019fe:	18bf      	adds	r7, r7, r2
 8001a00:	4662      	mov	r2, ip
 8001a02:	1838      	adds	r0, r7, r0
 8001a04:	0243      	lsls	r3, r0, #9
 8001a06:	0dd2      	lsrs	r2, r2, #23
 8001a08:	9903      	ldr	r1, [sp, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	026a      	lsls	r2, r5, #9
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	1e50      	subs	r0, r2, #1
 8001a12:	4182      	sbcs	r2, r0
 8001a14:	4661      	mov	r1, ip
 8001a16:	0ded      	lsrs	r5, r5, #23
 8001a18:	432a      	orrs	r2, r5
 8001a1a:	024e      	lsls	r6, r1, #9
 8001a1c:	4332      	orrs	r2, r6
 8001a1e:	01d9      	lsls	r1, r3, #7
 8001a20:	d400      	bmi.n	8001a24 <__aeabi_dmul+0x31c>
 8001a22:	e0b3      	b.n	8001b8c <__aeabi_dmul+0x484>
 8001a24:	2601      	movs	r6, #1
 8001a26:	0850      	lsrs	r0, r2, #1
 8001a28:	4032      	ands	r2, r6
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	07de      	lsls	r6, r3, #31
 8001a2e:	4332      	orrs	r2, r6
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4c22      	ldr	r4, [pc, #136]	; (8001abc <__aeabi_dmul+0x3b4>)
 8001a34:	4454      	add	r4, sl
 8001a36:	2c00      	cmp	r4, #0
 8001a38:	dd62      	ble.n	8001b00 <__aeabi_dmul+0x3f8>
 8001a3a:	0751      	lsls	r1, r2, #29
 8001a3c:	d009      	beq.n	8001a52 <__aeabi_dmul+0x34a>
 8001a3e:	200f      	movs	r0, #15
 8001a40:	4010      	ands	r0, r2
 8001a42:	2804      	cmp	r0, #4
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dmul+0x34a>
 8001a46:	1d10      	adds	r0, r2, #4
 8001a48:	4290      	cmp	r0, r2
 8001a4a:	4192      	sbcs	r2, r2
 8001a4c:	4252      	negs	r2, r2
 8001a4e:	189b      	adds	r3, r3, r2
 8001a50:	0002      	movs	r2, r0
 8001a52:	01d9      	lsls	r1, r3, #7
 8001a54:	d504      	bpl.n	8001a60 <__aeabi_dmul+0x358>
 8001a56:	2480      	movs	r4, #128	; 0x80
 8001a58:	4819      	ldr	r0, [pc, #100]	; (8001ac0 <__aeabi_dmul+0x3b8>)
 8001a5a:	00e4      	lsls	r4, r4, #3
 8001a5c:	4003      	ands	r3, r0
 8001a5e:	4454      	add	r4, sl
 8001a60:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <__aeabi_dmul+0x3bc>)
 8001a62:	4284      	cmp	r4, r0
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x360>
 8001a66:	e727      	b.n	80018b8 <__aeabi_dmul+0x1b0>
 8001a68:	075e      	lsls	r6, r3, #29
 8001a6a:	025b      	lsls	r3, r3, #9
 8001a6c:	08d2      	lsrs	r2, r2, #3
 8001a6e:	0b1f      	lsrs	r7, r3, #12
 8001a70:	0563      	lsls	r3, r4, #21
 8001a72:	4316      	orrs	r6, r2
 8001a74:	0d5b      	lsrs	r3, r3, #21
 8001a76:	e6b2      	b.n	80017de <__aeabi_dmul+0xd6>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	2704      	movs	r7, #4
 8001a80:	2600      	movs	r6, #0
 8001a82:	469b      	mov	fp, r3
 8001a84:	e664      	b.n	8001750 <__aeabi_dmul+0x48>
 8001a86:	2303      	movs	r3, #3
 8001a88:	9701      	str	r7, [sp, #4]
 8001a8a:	4681      	mov	r9, r0
 8001a8c:	270c      	movs	r7, #12
 8001a8e:	469b      	mov	fp, r3
 8001a90:	e65e      	b.n	8001750 <__aeabi_dmul+0x48>
 8001a92:	2201      	movs	r2, #1
 8001a94:	2001      	movs	r0, #1
 8001a96:	4317      	orrs	r7, r2
 8001a98:	2200      	movs	r2, #0
 8001a9a:	e676      	b.n	800178a <__aeabi_dmul+0x82>
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	431f      	orrs	r7, r3
 8001aa2:	4643      	mov	r3, r8
 8001aa4:	e671      	b.n	800178a <__aeabi_dmul+0x82>
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	000007ff 	.word	0x000007ff
 8001aac:	fffffc01 	.word	0xfffffc01
 8001ab0:	08008ec0 	.word	0x08008ec0
 8001ab4:	800fffff 	.word	0x800fffff
 8001ab8:	fffffc0d 	.word	0xfffffc0d
 8001abc:	000003ff 	.word	0x000003ff
 8001ac0:	feffffff 	.word	0xfeffffff
 8001ac4:	000007fe 	.word	0x000007fe
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2780      	movs	r7, #128	; 0x80
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	033f      	lsls	r7, r7, #12
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <__aeabi_dmul+0x4d8>)
 8001ad4:	e683      	b.n	80017de <__aeabi_dmul+0xd6>
 8001ad6:	9b01      	ldr	r3, [sp, #4]
 8001ad8:	0032      	movs	r2, r6
 8001ada:	46a4      	mov	ip, r4
 8001adc:	4658      	mov	r0, fp
 8001ade:	e670      	b.n	80017c2 <__aeabi_dmul+0xba>
 8001ae0:	46ac      	mov	ip, r5
 8001ae2:	e66e      	b.n	80017c2 <__aeabi_dmul+0xba>
 8001ae4:	2780      	movs	r7, #128	; 0x80
 8001ae6:	9901      	ldr	r1, [sp, #4]
 8001ae8:	033f      	lsls	r7, r7, #12
 8001aea:	4239      	tst	r1, r7
 8001aec:	d02d      	beq.n	8001b4a <__aeabi_dmul+0x442>
 8001aee:	423b      	tst	r3, r7
 8001af0:	d12b      	bne.n	8001b4a <__aeabi_dmul+0x442>
 8001af2:	431f      	orrs	r7, r3
 8001af4:	033f      	lsls	r7, r7, #12
 8001af6:	0b3f      	lsrs	r7, r7, #12
 8001af8:	9500      	str	r5, [sp, #0]
 8001afa:	0016      	movs	r6, r2
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <__aeabi_dmul+0x4d8>)
 8001afe:	e66e      	b.n	80017de <__aeabi_dmul+0xd6>
 8001b00:	2501      	movs	r5, #1
 8001b02:	1b2d      	subs	r5, r5, r4
 8001b04:	2d38      	cmp	r5, #56	; 0x38
 8001b06:	dd00      	ble.n	8001b0a <__aeabi_dmul+0x402>
 8001b08:	e666      	b.n	80017d8 <__aeabi_dmul+0xd0>
 8001b0a:	2d1f      	cmp	r5, #31
 8001b0c:	dc40      	bgt.n	8001b90 <__aeabi_dmul+0x488>
 8001b0e:	4835      	ldr	r0, [pc, #212]	; (8001be4 <__aeabi_dmul+0x4dc>)
 8001b10:	001c      	movs	r4, r3
 8001b12:	4450      	add	r0, sl
 8001b14:	0016      	movs	r6, r2
 8001b16:	4082      	lsls	r2, r0
 8001b18:	4084      	lsls	r4, r0
 8001b1a:	40ee      	lsrs	r6, r5
 8001b1c:	1e50      	subs	r0, r2, #1
 8001b1e:	4182      	sbcs	r2, r0
 8001b20:	4334      	orrs	r4, r6
 8001b22:	4314      	orrs	r4, r2
 8001b24:	40eb      	lsrs	r3, r5
 8001b26:	0762      	lsls	r2, r4, #29
 8001b28:	d009      	beq.n	8001b3e <__aeabi_dmul+0x436>
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	4022      	ands	r2, r4
 8001b2e:	2a04      	cmp	r2, #4
 8001b30:	d005      	beq.n	8001b3e <__aeabi_dmul+0x436>
 8001b32:	0022      	movs	r2, r4
 8001b34:	1d14      	adds	r4, r2, #4
 8001b36:	4294      	cmp	r4, r2
 8001b38:	4180      	sbcs	r0, r0
 8001b3a:	4240      	negs	r0, r0
 8001b3c:	181b      	adds	r3, r3, r0
 8001b3e:	021a      	lsls	r2, r3, #8
 8001b40:	d53e      	bpl.n	8001bc0 <__aeabi_dmul+0x4b8>
 8001b42:	2301      	movs	r3, #1
 8001b44:	2700      	movs	r7, #0
 8001b46:	2600      	movs	r6, #0
 8001b48:	e649      	b.n	80017de <__aeabi_dmul+0xd6>
 8001b4a:	2780      	movs	r7, #128	; 0x80
 8001b4c:	9b01      	ldr	r3, [sp, #4]
 8001b4e:	033f      	lsls	r7, r7, #12
 8001b50:	431f      	orrs	r7, r3
 8001b52:	033f      	lsls	r7, r7, #12
 8001b54:	0b3f      	lsrs	r7, r7, #12
 8001b56:	9400      	str	r4, [sp, #0]
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <__aeabi_dmul+0x4d8>)
 8001b5a:	e640      	b.n	80017de <__aeabi_dmul+0xd6>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	465a      	mov	r2, fp
 8001b60:	3b28      	subs	r3, #40	; 0x28
 8001b62:	409a      	lsls	r2, r3
 8001b64:	2600      	movs	r6, #0
 8001b66:	9201      	str	r2, [sp, #4]
 8001b68:	e66d      	b.n	8001846 <__aeabi_dmul+0x13e>
 8001b6a:	4658      	mov	r0, fp
 8001b6c:	f000 fcd0 	bl	8002510 <__clzsi2>
 8001b70:	3020      	adds	r0, #32
 8001b72:	e657      	b.n	8001824 <__aeabi_dmul+0x11c>
 8001b74:	0003      	movs	r3, r0
 8001b76:	4652      	mov	r2, sl
 8001b78:	3b28      	subs	r3, #40	; 0x28
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	e693      	b.n	80018aa <__aeabi_dmul+0x1a2>
 8001b82:	4650      	mov	r0, sl
 8001b84:	f000 fcc4 	bl	8002510 <__clzsi2>
 8001b88:	3020      	adds	r0, #32
 8001b8a:	e67b      	b.n	8001884 <__aeabi_dmul+0x17c>
 8001b8c:	46ca      	mov	sl, r9
 8001b8e:	e750      	b.n	8001a32 <__aeabi_dmul+0x32a>
 8001b90:	201f      	movs	r0, #31
 8001b92:	001e      	movs	r6, r3
 8001b94:	4240      	negs	r0, r0
 8001b96:	1b04      	subs	r4, r0, r4
 8001b98:	40e6      	lsrs	r6, r4
 8001b9a:	2d20      	cmp	r5, #32
 8001b9c:	d003      	beq.n	8001ba6 <__aeabi_dmul+0x49e>
 8001b9e:	4c12      	ldr	r4, [pc, #72]	; (8001be8 <__aeabi_dmul+0x4e0>)
 8001ba0:	4454      	add	r4, sl
 8001ba2:	40a3      	lsls	r3, r4
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	1e50      	subs	r0, r2, #1
 8001ba8:	4182      	sbcs	r2, r0
 8001baa:	4332      	orrs	r2, r6
 8001bac:	2607      	movs	r6, #7
 8001bae:	2700      	movs	r7, #0
 8001bb0:	4016      	ands	r6, r2
 8001bb2:	d009      	beq.n	8001bc8 <__aeabi_dmul+0x4c0>
 8001bb4:	200f      	movs	r0, #15
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	4010      	ands	r0, r2
 8001bba:	0014      	movs	r4, r2
 8001bbc:	2804      	cmp	r0, #4
 8001bbe:	d1b9      	bne.n	8001b34 <__aeabi_dmul+0x42c>
 8001bc0:	0022      	movs	r2, r4
 8001bc2:	075e      	lsls	r6, r3, #29
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	0b1f      	lsrs	r7, r3, #12
 8001bc8:	08d2      	lsrs	r2, r2, #3
 8001bca:	4316      	orrs	r6, r2
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e606      	b.n	80017de <__aeabi_dmul+0xd6>
 8001bd0:	2780      	movs	r7, #128	; 0x80
 8001bd2:	033f      	lsls	r7, r7, #12
 8001bd4:	431f      	orrs	r7, r3
 8001bd6:	033f      	lsls	r7, r7, #12
 8001bd8:	0b3f      	lsrs	r7, r7, #12
 8001bda:	0016      	movs	r6, r2
 8001bdc:	4b00      	ldr	r3, [pc, #0]	; (8001be0 <__aeabi_dmul+0x4d8>)
 8001bde:	e5fe      	b.n	80017de <__aeabi_dmul+0xd6>
 8001be0:	000007ff 	.word	0x000007ff
 8001be4:	0000041e 	.word	0x0000041e
 8001be8:	0000043e 	.word	0x0000043e

08001bec <__aeabi_dsub>:
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bee:	4657      	mov	r7, sl
 8001bf0:	464e      	mov	r6, r9
 8001bf2:	4645      	mov	r5, r8
 8001bf4:	46de      	mov	lr, fp
 8001bf6:	000c      	movs	r4, r1
 8001bf8:	0309      	lsls	r1, r1, #12
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	0a49      	lsrs	r1, r1, #9
 8001bfe:	0f46      	lsrs	r6, r0, #29
 8001c00:	005f      	lsls	r7, r3, #1
 8001c02:	4331      	orrs	r1, r6
 8001c04:	031e      	lsls	r6, r3, #12
 8001c06:	0fdb      	lsrs	r3, r3, #31
 8001c08:	0a76      	lsrs	r6, r6, #9
 8001c0a:	469b      	mov	fp, r3
 8001c0c:	0f53      	lsrs	r3, r2, #29
 8001c0e:	4333      	orrs	r3, r6
 8001c10:	4ec8      	ldr	r6, [pc, #800]	; (8001f34 <__aeabi_dsub+0x348>)
 8001c12:	0065      	lsls	r5, r4, #1
 8001c14:	00c0      	lsls	r0, r0, #3
 8001c16:	0fe4      	lsrs	r4, r4, #31
 8001c18:	00d2      	lsls	r2, r2, #3
 8001c1a:	0d6d      	lsrs	r5, r5, #21
 8001c1c:	46a2      	mov	sl, r4
 8001c1e:	4681      	mov	r9, r0
 8001c20:	0d7f      	lsrs	r7, r7, #21
 8001c22:	469c      	mov	ip, r3
 8001c24:	4690      	mov	r8, r2
 8001c26:	42b7      	cmp	r7, r6
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x40>
 8001c2a:	e0b9      	b.n	8001da0 <__aeabi_dsub+0x1b4>
 8001c2c:	465b      	mov	r3, fp
 8001c2e:	2601      	movs	r6, #1
 8001c30:	4073      	eors	r3, r6
 8001c32:	469b      	mov	fp, r3
 8001c34:	1bee      	subs	r6, r5, r7
 8001c36:	45a3      	cmp	fp, r4
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x50>
 8001c3a:	e083      	b.n	8001d44 <__aeabi_dsub+0x158>
 8001c3c:	2e00      	cmp	r6, #0
 8001c3e:	dd63      	ble.n	8001d08 <__aeabi_dsub+0x11c>
 8001c40:	2f00      	cmp	r7, #0
 8001c42:	d000      	beq.n	8001c46 <__aeabi_dsub+0x5a>
 8001c44:	e0b1      	b.n	8001daa <__aeabi_dsub+0x1be>
 8001c46:	4663      	mov	r3, ip
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x62>
 8001c4c:	e123      	b.n	8001e96 <__aeabi_dsub+0x2aa>
 8001c4e:	1e73      	subs	r3, r6, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d000      	beq.n	8001c56 <__aeabi_dsub+0x6a>
 8001c54:	e1ba      	b.n	8001fcc <__aeabi_dsub+0x3e0>
 8001c56:	1a86      	subs	r6, r0, r2
 8001c58:	4663      	mov	r3, ip
 8001c5a:	42b0      	cmp	r0, r6
 8001c5c:	4180      	sbcs	r0, r0
 8001c5e:	2501      	movs	r5, #1
 8001c60:	1ac9      	subs	r1, r1, r3
 8001c62:	4240      	negs	r0, r0
 8001c64:	1a09      	subs	r1, r1, r0
 8001c66:	020b      	lsls	r3, r1, #8
 8001c68:	d400      	bmi.n	8001c6c <__aeabi_dsub+0x80>
 8001c6a:	e147      	b.n	8001efc <__aeabi_dsub+0x310>
 8001c6c:	0249      	lsls	r1, r1, #9
 8001c6e:	0a4b      	lsrs	r3, r1, #9
 8001c70:	4698      	mov	r8, r3
 8001c72:	4643      	mov	r3, r8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d100      	bne.n	8001c7a <__aeabi_dsub+0x8e>
 8001c78:	e189      	b.n	8001f8e <__aeabi_dsub+0x3a2>
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	f000 fc48 	bl	8002510 <__clzsi2>
 8001c80:	0003      	movs	r3, r0
 8001c82:	3b08      	subs	r3, #8
 8001c84:	2b1f      	cmp	r3, #31
 8001c86:	dd00      	ble.n	8001c8a <__aeabi_dsub+0x9e>
 8001c88:	e17c      	b.n	8001f84 <__aeabi_dsub+0x398>
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	0030      	movs	r0, r6
 8001c8e:	1ad2      	subs	r2, r2, r3
 8001c90:	4641      	mov	r1, r8
 8001c92:	40d0      	lsrs	r0, r2
 8001c94:	4099      	lsls	r1, r3
 8001c96:	0002      	movs	r2, r0
 8001c98:	409e      	lsls	r6, r3
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	429d      	cmp	r5, r3
 8001c9e:	dd00      	ble.n	8001ca2 <__aeabi_dsub+0xb6>
 8001ca0:	e16a      	b.n	8001f78 <__aeabi_dsub+0x38c>
 8001ca2:	1b5d      	subs	r5, r3, r5
 8001ca4:	1c6b      	adds	r3, r5, #1
 8001ca6:	2b1f      	cmp	r3, #31
 8001ca8:	dd00      	ble.n	8001cac <__aeabi_dsub+0xc0>
 8001caa:	e194      	b.n	8001fd6 <__aeabi_dsub+0x3ea>
 8001cac:	2120      	movs	r1, #32
 8001cae:	0010      	movs	r0, r2
 8001cb0:	0035      	movs	r5, r6
 8001cb2:	1ac9      	subs	r1, r1, r3
 8001cb4:	408e      	lsls	r6, r1
 8001cb6:	40da      	lsrs	r2, r3
 8001cb8:	4088      	lsls	r0, r1
 8001cba:	40dd      	lsrs	r5, r3
 8001cbc:	1e71      	subs	r1, r6, #1
 8001cbe:	418e      	sbcs	r6, r1
 8001cc0:	0011      	movs	r1, r2
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	4328      	orrs	r0, r5
 8001cc6:	2500      	movs	r5, #0
 8001cc8:	4306      	orrs	r6, r0
 8001cca:	4032      	ands	r2, r6
 8001ccc:	2a00      	cmp	r2, #0
 8001cce:	d009      	beq.n	8001ce4 <__aeabi_dsub+0xf8>
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	4033      	ands	r3, r6
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d005      	beq.n	8001ce4 <__aeabi_dsub+0xf8>
 8001cd8:	1d33      	adds	r3, r6, #4
 8001cda:	42b3      	cmp	r3, r6
 8001cdc:	41b6      	sbcs	r6, r6
 8001cde:	4276      	negs	r6, r6
 8001ce0:	1989      	adds	r1, r1, r6
 8001ce2:	001e      	movs	r6, r3
 8001ce4:	020b      	lsls	r3, r1, #8
 8001ce6:	d400      	bmi.n	8001cea <__aeabi_dsub+0xfe>
 8001ce8:	e23d      	b.n	8002166 <__aeabi_dsub+0x57a>
 8001cea:	1c6a      	adds	r2, r5, #1
 8001cec:	4b91      	ldr	r3, [pc, #580]	; (8001f34 <__aeabi_dsub+0x348>)
 8001cee:	0555      	lsls	r5, r2, #21
 8001cf0:	0d6d      	lsrs	r5, r5, #21
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x10c>
 8001cf6:	e119      	b.n	8001f2c <__aeabi_dsub+0x340>
 8001cf8:	4a8f      	ldr	r2, [pc, #572]	; (8001f38 <__aeabi_dsub+0x34c>)
 8001cfa:	08f6      	lsrs	r6, r6, #3
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	0757      	lsls	r7, r2, #29
 8001d00:	0252      	lsls	r2, r2, #9
 8001d02:	4337      	orrs	r7, r6
 8001d04:	0b12      	lsrs	r2, r2, #12
 8001d06:	e09b      	b.n	8001e40 <__aeabi_dsub+0x254>
 8001d08:	2e00      	cmp	r6, #0
 8001d0a:	d000      	beq.n	8001d0e <__aeabi_dsub+0x122>
 8001d0c:	e0c5      	b.n	8001e9a <__aeabi_dsub+0x2ae>
 8001d0e:	1c6e      	adds	r6, r5, #1
 8001d10:	0576      	lsls	r6, r6, #21
 8001d12:	0d76      	lsrs	r6, r6, #21
 8001d14:	2e01      	cmp	r6, #1
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dsub+0x12e>
 8001d18:	e148      	b.n	8001fac <__aeabi_dsub+0x3c0>
 8001d1a:	4667      	mov	r7, ip
 8001d1c:	1a86      	subs	r6, r0, r2
 8001d1e:	1bcb      	subs	r3, r1, r7
 8001d20:	42b0      	cmp	r0, r6
 8001d22:	41bf      	sbcs	r7, r7
 8001d24:	427f      	negs	r7, r7
 8001d26:	46b8      	mov	r8, r7
 8001d28:	001f      	movs	r7, r3
 8001d2a:	4643      	mov	r3, r8
 8001d2c:	1aff      	subs	r7, r7, r3
 8001d2e:	003b      	movs	r3, r7
 8001d30:	46b8      	mov	r8, r7
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	d500      	bpl.n	8001d38 <__aeabi_dsub+0x14c>
 8001d36:	e15f      	b.n	8001ff8 <__aeabi_dsub+0x40c>
 8001d38:	4337      	orrs	r7, r6
 8001d3a:	d19a      	bne.n	8001c72 <__aeabi_dsub+0x86>
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2400      	movs	r4, #0
 8001d40:	2500      	movs	r5, #0
 8001d42:	e079      	b.n	8001e38 <__aeabi_dsub+0x24c>
 8001d44:	2e00      	cmp	r6, #0
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_dsub+0x15e>
 8001d48:	e0fa      	b.n	8001f40 <__aeabi_dsub+0x354>
 8001d4a:	2f00      	cmp	r7, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x164>
 8001d4e:	e08d      	b.n	8001e6c <__aeabi_dsub+0x280>
 8001d50:	4b78      	ldr	r3, [pc, #480]	; (8001f34 <__aeabi_dsub+0x348>)
 8001d52:	429d      	cmp	r5, r3
 8001d54:	d067      	beq.n	8001e26 <__aeabi_dsub+0x23a>
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	4667      	mov	r7, ip
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	431f      	orrs	r7, r3
 8001d5e:	46bc      	mov	ip, r7
 8001d60:	2e38      	cmp	r6, #56	; 0x38
 8001d62:	dc00      	bgt.n	8001d66 <__aeabi_dsub+0x17a>
 8001d64:	e152      	b.n	800200c <__aeabi_dsub+0x420>
 8001d66:	4663      	mov	r3, ip
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	4193      	sbcs	r3, r2
 8001d6e:	181e      	adds	r6, r3, r0
 8001d70:	4286      	cmp	r6, r0
 8001d72:	4180      	sbcs	r0, r0
 8001d74:	4240      	negs	r0, r0
 8001d76:	1809      	adds	r1, r1, r0
 8001d78:	020b      	lsls	r3, r1, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x192>
 8001d7c:	e0be      	b.n	8001efc <__aeabi_dsub+0x310>
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <__aeabi_dsub+0x348>)
 8001d80:	3501      	adds	r5, #1
 8001d82:	429d      	cmp	r5, r3
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x19c>
 8001d86:	e0d2      	b.n	8001f2e <__aeabi_dsub+0x342>
 8001d88:	4a6b      	ldr	r2, [pc, #428]	; (8001f38 <__aeabi_dsub+0x34c>)
 8001d8a:	0873      	lsrs	r3, r6, #1
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	2101      	movs	r1, #1
 8001d90:	400e      	ands	r6, r1
 8001d92:	431e      	orrs	r6, r3
 8001d94:	0851      	lsrs	r1, r2, #1
 8001d96:	07d3      	lsls	r3, r2, #31
 8001d98:	2207      	movs	r2, #7
 8001d9a:	431e      	orrs	r6, r3
 8001d9c:	4032      	ands	r2, r6
 8001d9e:	e795      	b.n	8001ccc <__aeabi_dsub+0xe0>
 8001da0:	001e      	movs	r6, r3
 8001da2:	4316      	orrs	r6, r2
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dsub+0x1bc>
 8001da6:	e745      	b.n	8001c34 <__aeabi_dsub+0x48>
 8001da8:	e740      	b.n	8001c2c <__aeabi_dsub+0x40>
 8001daa:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <__aeabi_dsub+0x348>)
 8001dac:	429d      	cmp	r5, r3
 8001dae:	d03a      	beq.n	8001e26 <__aeabi_dsub+0x23a>
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	4667      	mov	r7, ip
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	431f      	orrs	r7, r3
 8001db8:	46bc      	mov	ip, r7
 8001dba:	2e38      	cmp	r6, #56	; 0x38
 8001dbc:	dd00      	ble.n	8001dc0 <__aeabi_dsub+0x1d4>
 8001dbe:	e0eb      	b.n	8001f98 <__aeabi_dsub+0x3ac>
 8001dc0:	2e1f      	cmp	r6, #31
 8001dc2:	dc00      	bgt.n	8001dc6 <__aeabi_dsub+0x1da>
 8001dc4:	e13a      	b.n	800203c <__aeabi_dsub+0x450>
 8001dc6:	0033      	movs	r3, r6
 8001dc8:	4667      	mov	r7, ip
 8001dca:	3b20      	subs	r3, #32
 8001dcc:	40df      	lsrs	r7, r3
 8001dce:	003b      	movs	r3, r7
 8001dd0:	2e20      	cmp	r6, #32
 8001dd2:	d005      	beq.n	8001de0 <__aeabi_dsub+0x1f4>
 8001dd4:	2740      	movs	r7, #64	; 0x40
 8001dd6:	1bbf      	subs	r7, r7, r6
 8001dd8:	4666      	mov	r6, ip
 8001dda:	40be      	lsls	r6, r7
 8001ddc:	4332      	orrs	r2, r6
 8001dde:	4690      	mov	r8, r2
 8001de0:	4646      	mov	r6, r8
 8001de2:	1e72      	subs	r2, r6, #1
 8001de4:	4196      	sbcs	r6, r2
 8001de6:	4333      	orrs	r3, r6
 8001de8:	e0da      	b.n	8001fa0 <__aeabi_dsub+0x3b4>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d100      	bne.n	8001df0 <__aeabi_dsub+0x204>
 8001dee:	e214      	b.n	800221a <__aeabi_dsub+0x62e>
 8001df0:	4663      	mov	r3, ip
 8001df2:	4313      	orrs	r3, r2
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dsub+0x20c>
 8001df6:	e168      	b.n	80020ca <__aeabi_dsub+0x4de>
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	074e      	lsls	r6, r1, #29
 8001dfc:	08c0      	lsrs	r0, r0, #3
 8001dfe:	08c9      	lsrs	r1, r1, #3
 8001e00:	031b      	lsls	r3, r3, #12
 8001e02:	4306      	orrs	r6, r0
 8001e04:	4219      	tst	r1, r3
 8001e06:	d008      	beq.n	8001e1a <__aeabi_dsub+0x22e>
 8001e08:	4660      	mov	r0, ip
 8001e0a:	08c0      	lsrs	r0, r0, #3
 8001e0c:	4218      	tst	r0, r3
 8001e0e:	d104      	bne.n	8001e1a <__aeabi_dsub+0x22e>
 8001e10:	4663      	mov	r3, ip
 8001e12:	0001      	movs	r1, r0
 8001e14:	08d2      	lsrs	r2, r2, #3
 8001e16:	075e      	lsls	r6, r3, #29
 8001e18:	4316      	orrs	r6, r2
 8001e1a:	00f3      	lsls	r3, r6, #3
 8001e1c:	4699      	mov	r9, r3
 8001e1e:	00c9      	lsls	r1, r1, #3
 8001e20:	0f72      	lsrs	r2, r6, #29
 8001e22:	4d44      	ldr	r5, [pc, #272]	; (8001f34 <__aeabi_dsub+0x348>)
 8001e24:	4311      	orrs	r1, r2
 8001e26:	464b      	mov	r3, r9
 8001e28:	08de      	lsrs	r6, r3, #3
 8001e2a:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <__aeabi_dsub+0x348>)
 8001e2c:	074f      	lsls	r7, r1, #29
 8001e2e:	4337      	orrs	r7, r6
 8001e30:	08ca      	lsrs	r2, r1, #3
 8001e32:	429d      	cmp	r5, r3
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x24c>
 8001e36:	e06e      	b.n	8001f16 <__aeabi_dsub+0x32a>
 8001e38:	0312      	lsls	r2, r2, #12
 8001e3a:	056d      	lsls	r5, r5, #21
 8001e3c:	0b12      	lsrs	r2, r2, #12
 8001e3e:	0d6d      	lsrs	r5, r5, #21
 8001e40:	2100      	movs	r1, #0
 8001e42:	0312      	lsls	r2, r2, #12
 8001e44:	0b13      	lsrs	r3, r2, #12
 8001e46:	0d0a      	lsrs	r2, r1, #20
 8001e48:	0512      	lsls	r2, r2, #20
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <__aeabi_dsub+0x350>)
 8001e4e:	052d      	lsls	r5, r5, #20
 8001e50:	4013      	ands	r3, r2
 8001e52:	432b      	orrs	r3, r5
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	07e4      	lsls	r4, r4, #31
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	4323      	orrs	r3, r4
 8001e5c:	0038      	movs	r0, r7
 8001e5e:	0019      	movs	r1, r3
 8001e60:	bc3c      	pop	{r2, r3, r4, r5}
 8001e62:	4690      	mov	r8, r2
 8001e64:	4699      	mov	r9, r3
 8001e66:	46a2      	mov	sl, r4
 8001e68:	46ab      	mov	fp, r5
 8001e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e6c:	4663      	mov	r3, ip
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	d011      	beq.n	8001e96 <__aeabi_dsub+0x2aa>
 8001e72:	1e73      	subs	r3, r6, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d000      	beq.n	8001e7a <__aeabi_dsub+0x28e>
 8001e78:	e107      	b.n	800208a <__aeabi_dsub+0x49e>
 8001e7a:	1886      	adds	r6, r0, r2
 8001e7c:	4286      	cmp	r6, r0
 8001e7e:	4180      	sbcs	r0, r0
 8001e80:	4461      	add	r1, ip
 8001e82:	4240      	negs	r0, r0
 8001e84:	1809      	adds	r1, r1, r0
 8001e86:	2501      	movs	r5, #1
 8001e88:	020b      	lsls	r3, r1, #8
 8001e8a:	d537      	bpl.n	8001efc <__aeabi_dsub+0x310>
 8001e8c:	2502      	movs	r5, #2
 8001e8e:	e77b      	b.n	8001d88 <__aeabi_dsub+0x19c>
 8001e90:	003e      	movs	r6, r7
 8001e92:	4661      	mov	r1, ip
 8001e94:	4691      	mov	r9, r2
 8001e96:	0035      	movs	r5, r6
 8001e98:	e7c5      	b.n	8001e26 <__aeabi_dsub+0x23a>
 8001e9a:	465c      	mov	r4, fp
 8001e9c:	2d00      	cmp	r5, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x2b6>
 8001ea0:	e0e1      	b.n	8002066 <__aeabi_dsub+0x47a>
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	4303      	orrs	r3, r0
 8001ea6:	d0f3      	beq.n	8001e90 <__aeabi_dsub+0x2a4>
 8001ea8:	1c73      	adds	r3, r6, #1
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dsub+0x2c2>
 8001eac:	e1ac      	b.n	8002208 <__aeabi_dsub+0x61c>
 8001eae:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <__aeabi_dsub+0x348>)
 8001eb0:	429f      	cmp	r7, r3
 8001eb2:	d100      	bne.n	8001eb6 <__aeabi_dsub+0x2ca>
 8001eb4:	e13a      	b.n	800212c <__aeabi_dsub+0x540>
 8001eb6:	43f3      	mvns	r3, r6
 8001eb8:	2b38      	cmp	r3, #56	; 0x38
 8001eba:	dd00      	ble.n	8001ebe <__aeabi_dsub+0x2d2>
 8001ebc:	e16f      	b.n	800219e <__aeabi_dsub+0x5b2>
 8001ebe:	2b1f      	cmp	r3, #31
 8001ec0:	dd00      	ble.n	8001ec4 <__aeabi_dsub+0x2d8>
 8001ec2:	e18c      	b.n	80021de <__aeabi_dsub+0x5f2>
 8001ec4:	2520      	movs	r5, #32
 8001ec6:	000e      	movs	r6, r1
 8001ec8:	1aed      	subs	r5, r5, r3
 8001eca:	40ae      	lsls	r6, r5
 8001ecc:	46b0      	mov	r8, r6
 8001ece:	0006      	movs	r6, r0
 8001ed0:	46aa      	mov	sl, r5
 8001ed2:	40de      	lsrs	r6, r3
 8001ed4:	4645      	mov	r5, r8
 8001ed6:	4335      	orrs	r5, r6
 8001ed8:	002e      	movs	r6, r5
 8001eda:	4655      	mov	r5, sl
 8001edc:	40d9      	lsrs	r1, r3
 8001ede:	40a8      	lsls	r0, r5
 8001ee0:	4663      	mov	r3, ip
 8001ee2:	1e45      	subs	r5, r0, #1
 8001ee4:	41a8      	sbcs	r0, r5
 8001ee6:	1a5b      	subs	r3, r3, r1
 8001ee8:	469c      	mov	ip, r3
 8001eea:	4330      	orrs	r0, r6
 8001eec:	1a16      	subs	r6, r2, r0
 8001eee:	42b2      	cmp	r2, r6
 8001ef0:	4192      	sbcs	r2, r2
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	4252      	negs	r2, r2
 8001ef6:	1a99      	subs	r1, r3, r2
 8001ef8:	003d      	movs	r5, r7
 8001efa:	e6b4      	b.n	8001c66 <__aeabi_dsub+0x7a>
 8001efc:	2207      	movs	r2, #7
 8001efe:	4032      	ands	r2, r6
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	d000      	beq.n	8001f06 <__aeabi_dsub+0x31a>
 8001f04:	e6e4      	b.n	8001cd0 <__aeabi_dsub+0xe4>
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <__aeabi_dsub+0x348>)
 8001f08:	08f6      	lsrs	r6, r6, #3
 8001f0a:	074f      	lsls	r7, r1, #29
 8001f0c:	4337      	orrs	r7, r6
 8001f0e:	08ca      	lsrs	r2, r1, #3
 8001f10:	429d      	cmp	r5, r3
 8001f12:	d000      	beq.n	8001f16 <__aeabi_dsub+0x32a>
 8001f14:	e790      	b.n	8001e38 <__aeabi_dsub+0x24c>
 8001f16:	003b      	movs	r3, r7
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dsub+0x332>
 8001f1c:	e1a6      	b.n	800226c <__aeabi_dsub+0x680>
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	031b      	lsls	r3, r3, #12
 8001f22:	431a      	orrs	r2, r3
 8001f24:	0312      	lsls	r2, r2, #12
 8001f26:	0b12      	lsrs	r2, r2, #12
 8001f28:	4d02      	ldr	r5, [pc, #8]	; (8001f34 <__aeabi_dsub+0x348>)
 8001f2a:	e789      	b.n	8001e40 <__aeabi_dsub+0x254>
 8001f2c:	0015      	movs	r5, r2
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2700      	movs	r7, #0
 8001f32:	e785      	b.n	8001e40 <__aeabi_dsub+0x254>
 8001f34:	000007ff 	.word	0x000007ff
 8001f38:	ff7fffff 	.word	0xff7fffff
 8001f3c:	800fffff 	.word	0x800fffff
 8001f40:	2e00      	cmp	r6, #0
 8001f42:	d000      	beq.n	8001f46 <__aeabi_dsub+0x35a>
 8001f44:	e0c7      	b.n	80020d6 <__aeabi_dsub+0x4ea>
 8001f46:	1c6b      	adds	r3, r5, #1
 8001f48:	055e      	lsls	r6, r3, #21
 8001f4a:	0d76      	lsrs	r6, r6, #21
 8001f4c:	2e01      	cmp	r6, #1
 8001f4e:	dc00      	bgt.n	8001f52 <__aeabi_dsub+0x366>
 8001f50:	e0f0      	b.n	8002134 <__aeabi_dsub+0x548>
 8001f52:	4dc8      	ldr	r5, [pc, #800]	; (8002274 <__aeabi_dsub+0x688>)
 8001f54:	42ab      	cmp	r3, r5
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x36e>
 8001f58:	e0b9      	b.n	80020ce <__aeabi_dsub+0x4e2>
 8001f5a:	1885      	adds	r5, r0, r2
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	4285      	cmp	r5, r0
 8001f60:	4189      	sbcs	r1, r1
 8001f62:	4462      	add	r2, ip
 8001f64:	4249      	negs	r1, r1
 8001f66:	1851      	adds	r1, r2, r1
 8001f68:	2207      	movs	r2, #7
 8001f6a:	07ce      	lsls	r6, r1, #31
 8001f6c:	086d      	lsrs	r5, r5, #1
 8001f6e:	432e      	orrs	r6, r5
 8001f70:	0849      	lsrs	r1, r1, #1
 8001f72:	4032      	ands	r2, r6
 8001f74:	001d      	movs	r5, r3
 8001f76:	e6a9      	b.n	8001ccc <__aeabi_dsub+0xe0>
 8001f78:	49bf      	ldr	r1, [pc, #764]	; (8002278 <__aeabi_dsub+0x68c>)
 8001f7a:	1aed      	subs	r5, r5, r3
 8001f7c:	4011      	ands	r1, r2
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4032      	ands	r2, r6
 8001f82:	e6a3      	b.n	8001ccc <__aeabi_dsub+0xe0>
 8001f84:	0032      	movs	r2, r6
 8001f86:	3828      	subs	r0, #40	; 0x28
 8001f88:	4082      	lsls	r2, r0
 8001f8a:	2600      	movs	r6, #0
 8001f8c:	e686      	b.n	8001c9c <__aeabi_dsub+0xb0>
 8001f8e:	0030      	movs	r0, r6
 8001f90:	f000 fabe 	bl	8002510 <__clzsi2>
 8001f94:	3020      	adds	r0, #32
 8001f96:	e673      	b.n	8001c80 <__aeabi_dsub+0x94>
 8001f98:	4663      	mov	r3, ip
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	1e5a      	subs	r2, r3, #1
 8001f9e:	4193      	sbcs	r3, r2
 8001fa0:	1ac6      	subs	r6, r0, r3
 8001fa2:	42b0      	cmp	r0, r6
 8001fa4:	4180      	sbcs	r0, r0
 8001fa6:	4240      	negs	r0, r0
 8001fa8:	1a09      	subs	r1, r1, r0
 8001faa:	e65c      	b.n	8001c66 <__aeabi_dsub+0x7a>
 8001fac:	000e      	movs	r6, r1
 8001fae:	4667      	mov	r7, ip
 8001fb0:	4306      	orrs	r6, r0
 8001fb2:	4317      	orrs	r7, r2
 8001fb4:	2d00      	cmp	r5, #0
 8001fb6:	d15e      	bne.n	8002076 <__aeabi_dsub+0x48a>
 8001fb8:	2e00      	cmp	r6, #0
 8001fba:	d000      	beq.n	8001fbe <__aeabi_dsub+0x3d2>
 8001fbc:	e0f3      	b.n	80021a6 <__aeabi_dsub+0x5ba>
 8001fbe:	2f00      	cmp	r7, #0
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x3d8>
 8001fc2:	e11e      	b.n	8002202 <__aeabi_dsub+0x616>
 8001fc4:	465c      	mov	r4, fp
 8001fc6:	4661      	mov	r1, ip
 8001fc8:	4691      	mov	r9, r2
 8001fca:	e72c      	b.n	8001e26 <__aeabi_dsub+0x23a>
 8001fcc:	4fa9      	ldr	r7, [pc, #676]	; (8002274 <__aeabi_dsub+0x688>)
 8001fce:	42be      	cmp	r6, r7
 8001fd0:	d07b      	beq.n	80020ca <__aeabi_dsub+0x4de>
 8001fd2:	001e      	movs	r6, r3
 8001fd4:	e6f1      	b.n	8001dba <__aeabi_dsub+0x1ce>
 8001fd6:	0010      	movs	r0, r2
 8001fd8:	3d1f      	subs	r5, #31
 8001fda:	40e8      	lsrs	r0, r5
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d003      	beq.n	8001fe8 <__aeabi_dsub+0x3fc>
 8001fe0:	2140      	movs	r1, #64	; 0x40
 8001fe2:	1acb      	subs	r3, r1, r3
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	4316      	orrs	r6, r2
 8001fe8:	1e73      	subs	r3, r6, #1
 8001fea:	419e      	sbcs	r6, r3
 8001fec:	2207      	movs	r2, #7
 8001fee:	4306      	orrs	r6, r0
 8001ff0:	4032      	ands	r2, r6
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	2500      	movs	r5, #0
 8001ff6:	e783      	b.n	8001f00 <__aeabi_dsub+0x314>
 8001ff8:	1a16      	subs	r6, r2, r0
 8001ffa:	4663      	mov	r3, ip
 8001ffc:	42b2      	cmp	r2, r6
 8001ffe:	4180      	sbcs	r0, r0
 8002000:	1a59      	subs	r1, r3, r1
 8002002:	4240      	negs	r0, r0
 8002004:	1a0b      	subs	r3, r1, r0
 8002006:	4698      	mov	r8, r3
 8002008:	465c      	mov	r4, fp
 800200a:	e632      	b.n	8001c72 <__aeabi_dsub+0x86>
 800200c:	2e1f      	cmp	r6, #31
 800200e:	dd00      	ble.n	8002012 <__aeabi_dsub+0x426>
 8002010:	e0ab      	b.n	800216a <__aeabi_dsub+0x57e>
 8002012:	2720      	movs	r7, #32
 8002014:	1bbb      	subs	r3, r7, r6
 8002016:	469a      	mov	sl, r3
 8002018:	4663      	mov	r3, ip
 800201a:	4657      	mov	r7, sl
 800201c:	40bb      	lsls	r3, r7
 800201e:	4699      	mov	r9, r3
 8002020:	0013      	movs	r3, r2
 8002022:	464f      	mov	r7, r9
 8002024:	40f3      	lsrs	r3, r6
 8002026:	431f      	orrs	r7, r3
 8002028:	003b      	movs	r3, r7
 800202a:	4657      	mov	r7, sl
 800202c:	40ba      	lsls	r2, r7
 800202e:	1e57      	subs	r7, r2, #1
 8002030:	41ba      	sbcs	r2, r7
 8002032:	4313      	orrs	r3, r2
 8002034:	4662      	mov	r2, ip
 8002036:	40f2      	lsrs	r2, r6
 8002038:	1889      	adds	r1, r1, r2
 800203a:	e698      	b.n	8001d6e <__aeabi_dsub+0x182>
 800203c:	2720      	movs	r7, #32
 800203e:	1bbb      	subs	r3, r7, r6
 8002040:	469a      	mov	sl, r3
 8002042:	4663      	mov	r3, ip
 8002044:	4657      	mov	r7, sl
 8002046:	40bb      	lsls	r3, r7
 8002048:	4699      	mov	r9, r3
 800204a:	0013      	movs	r3, r2
 800204c:	464f      	mov	r7, r9
 800204e:	40f3      	lsrs	r3, r6
 8002050:	431f      	orrs	r7, r3
 8002052:	003b      	movs	r3, r7
 8002054:	4657      	mov	r7, sl
 8002056:	40ba      	lsls	r2, r7
 8002058:	1e57      	subs	r7, r2, #1
 800205a:	41ba      	sbcs	r2, r7
 800205c:	4313      	orrs	r3, r2
 800205e:	4662      	mov	r2, ip
 8002060:	40f2      	lsrs	r2, r6
 8002062:	1a89      	subs	r1, r1, r2
 8002064:	e79c      	b.n	8001fa0 <__aeabi_dsub+0x3b4>
 8002066:	4b83      	ldr	r3, [pc, #524]	; (8002274 <__aeabi_dsub+0x688>)
 8002068:	429f      	cmp	r7, r3
 800206a:	d05f      	beq.n	800212c <__aeabi_dsub+0x540>
 800206c:	2580      	movs	r5, #128	; 0x80
 800206e:	042d      	lsls	r5, r5, #16
 8002070:	4273      	negs	r3, r6
 8002072:	4329      	orrs	r1, r5
 8002074:	e720      	b.n	8001eb8 <__aeabi_dsub+0x2cc>
 8002076:	2e00      	cmp	r6, #0
 8002078:	d10c      	bne.n	8002094 <__aeabi_dsub+0x4a8>
 800207a:	2f00      	cmp	r7, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_dsub+0x494>
 800207e:	e0d0      	b.n	8002222 <__aeabi_dsub+0x636>
 8002080:	465c      	mov	r4, fp
 8002082:	4661      	mov	r1, ip
 8002084:	4691      	mov	r9, r2
 8002086:	4d7b      	ldr	r5, [pc, #492]	; (8002274 <__aeabi_dsub+0x688>)
 8002088:	e6cd      	b.n	8001e26 <__aeabi_dsub+0x23a>
 800208a:	4f7a      	ldr	r7, [pc, #488]	; (8002274 <__aeabi_dsub+0x688>)
 800208c:	42be      	cmp	r6, r7
 800208e:	d01c      	beq.n	80020ca <__aeabi_dsub+0x4de>
 8002090:	001e      	movs	r6, r3
 8002092:	e665      	b.n	8001d60 <__aeabi_dsub+0x174>
 8002094:	2f00      	cmp	r7, #0
 8002096:	d018      	beq.n	80020ca <__aeabi_dsub+0x4de>
 8002098:	08c0      	lsrs	r0, r0, #3
 800209a:	074e      	lsls	r6, r1, #29
 800209c:	4306      	orrs	r6, r0
 800209e:	2080      	movs	r0, #128	; 0x80
 80020a0:	08c9      	lsrs	r1, r1, #3
 80020a2:	0300      	lsls	r0, r0, #12
 80020a4:	4201      	tst	r1, r0
 80020a6:	d008      	beq.n	80020ba <__aeabi_dsub+0x4ce>
 80020a8:	4663      	mov	r3, ip
 80020aa:	08dc      	lsrs	r4, r3, #3
 80020ac:	4204      	tst	r4, r0
 80020ae:	d104      	bne.n	80020ba <__aeabi_dsub+0x4ce>
 80020b0:	0021      	movs	r1, r4
 80020b2:	46da      	mov	sl, fp
 80020b4:	08d2      	lsrs	r2, r2, #3
 80020b6:	075e      	lsls	r6, r3, #29
 80020b8:	4316      	orrs	r6, r2
 80020ba:	00f3      	lsls	r3, r6, #3
 80020bc:	4699      	mov	r9, r3
 80020be:	2401      	movs	r4, #1
 80020c0:	4653      	mov	r3, sl
 80020c2:	00c9      	lsls	r1, r1, #3
 80020c4:	0f72      	lsrs	r2, r6, #29
 80020c6:	4311      	orrs	r1, r2
 80020c8:	401c      	ands	r4, r3
 80020ca:	4d6a      	ldr	r5, [pc, #424]	; (8002274 <__aeabi_dsub+0x688>)
 80020cc:	e6ab      	b.n	8001e26 <__aeabi_dsub+0x23a>
 80020ce:	001d      	movs	r5, r3
 80020d0:	2200      	movs	r2, #0
 80020d2:	2700      	movs	r7, #0
 80020d4:	e6b4      	b.n	8001e40 <__aeabi_dsub+0x254>
 80020d6:	2d00      	cmp	r5, #0
 80020d8:	d159      	bne.n	800218e <__aeabi_dsub+0x5a2>
 80020da:	000b      	movs	r3, r1
 80020dc:	4303      	orrs	r3, r0
 80020de:	d100      	bne.n	80020e2 <__aeabi_dsub+0x4f6>
 80020e0:	e6d6      	b.n	8001e90 <__aeabi_dsub+0x2a4>
 80020e2:	1c73      	adds	r3, r6, #1
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dsub+0x4fc>
 80020e6:	e0b2      	b.n	800224e <__aeabi_dsub+0x662>
 80020e8:	4b62      	ldr	r3, [pc, #392]	; (8002274 <__aeabi_dsub+0x688>)
 80020ea:	429f      	cmp	r7, r3
 80020ec:	d01e      	beq.n	800212c <__aeabi_dsub+0x540>
 80020ee:	43f3      	mvns	r3, r6
 80020f0:	2b38      	cmp	r3, #56	; 0x38
 80020f2:	dc6f      	bgt.n	80021d4 <__aeabi_dsub+0x5e8>
 80020f4:	2b1f      	cmp	r3, #31
 80020f6:	dd00      	ble.n	80020fa <__aeabi_dsub+0x50e>
 80020f8:	e097      	b.n	800222a <__aeabi_dsub+0x63e>
 80020fa:	2520      	movs	r5, #32
 80020fc:	000e      	movs	r6, r1
 80020fe:	1aed      	subs	r5, r5, r3
 8002100:	40ae      	lsls	r6, r5
 8002102:	46b0      	mov	r8, r6
 8002104:	0006      	movs	r6, r0
 8002106:	46aa      	mov	sl, r5
 8002108:	40de      	lsrs	r6, r3
 800210a:	4645      	mov	r5, r8
 800210c:	4335      	orrs	r5, r6
 800210e:	002e      	movs	r6, r5
 8002110:	4655      	mov	r5, sl
 8002112:	40a8      	lsls	r0, r5
 8002114:	40d9      	lsrs	r1, r3
 8002116:	1e45      	subs	r5, r0, #1
 8002118:	41a8      	sbcs	r0, r5
 800211a:	448c      	add	ip, r1
 800211c:	4306      	orrs	r6, r0
 800211e:	18b6      	adds	r6, r6, r2
 8002120:	4296      	cmp	r6, r2
 8002122:	4192      	sbcs	r2, r2
 8002124:	4251      	negs	r1, r2
 8002126:	4461      	add	r1, ip
 8002128:	003d      	movs	r5, r7
 800212a:	e625      	b.n	8001d78 <__aeabi_dsub+0x18c>
 800212c:	003d      	movs	r5, r7
 800212e:	4661      	mov	r1, ip
 8002130:	4691      	mov	r9, r2
 8002132:	e678      	b.n	8001e26 <__aeabi_dsub+0x23a>
 8002134:	000b      	movs	r3, r1
 8002136:	4303      	orrs	r3, r0
 8002138:	2d00      	cmp	r5, #0
 800213a:	d000      	beq.n	800213e <__aeabi_dsub+0x552>
 800213c:	e655      	b.n	8001dea <__aeabi_dsub+0x1fe>
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f5      	beq.n	800212e <__aeabi_dsub+0x542>
 8002142:	4663      	mov	r3, ip
 8002144:	4313      	orrs	r3, r2
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x55e>
 8002148:	e66d      	b.n	8001e26 <__aeabi_dsub+0x23a>
 800214a:	1886      	adds	r6, r0, r2
 800214c:	4286      	cmp	r6, r0
 800214e:	4180      	sbcs	r0, r0
 8002150:	4461      	add	r1, ip
 8002152:	4240      	negs	r0, r0
 8002154:	1809      	adds	r1, r1, r0
 8002156:	2200      	movs	r2, #0
 8002158:	020b      	lsls	r3, r1, #8
 800215a:	d400      	bmi.n	800215e <__aeabi_dsub+0x572>
 800215c:	e6d0      	b.n	8001f00 <__aeabi_dsub+0x314>
 800215e:	4b46      	ldr	r3, [pc, #280]	; (8002278 <__aeabi_dsub+0x68c>)
 8002160:	3501      	adds	r5, #1
 8002162:	4019      	ands	r1, r3
 8002164:	e5b2      	b.n	8001ccc <__aeabi_dsub+0xe0>
 8002166:	46b1      	mov	r9, r6
 8002168:	e65d      	b.n	8001e26 <__aeabi_dsub+0x23a>
 800216a:	0033      	movs	r3, r6
 800216c:	4667      	mov	r7, ip
 800216e:	3b20      	subs	r3, #32
 8002170:	40df      	lsrs	r7, r3
 8002172:	003b      	movs	r3, r7
 8002174:	2e20      	cmp	r6, #32
 8002176:	d005      	beq.n	8002184 <__aeabi_dsub+0x598>
 8002178:	2740      	movs	r7, #64	; 0x40
 800217a:	1bbf      	subs	r7, r7, r6
 800217c:	4666      	mov	r6, ip
 800217e:	40be      	lsls	r6, r7
 8002180:	4332      	orrs	r2, r6
 8002182:	4690      	mov	r8, r2
 8002184:	4646      	mov	r6, r8
 8002186:	1e72      	subs	r2, r6, #1
 8002188:	4196      	sbcs	r6, r2
 800218a:	4333      	orrs	r3, r6
 800218c:	e5ef      	b.n	8001d6e <__aeabi_dsub+0x182>
 800218e:	4b39      	ldr	r3, [pc, #228]	; (8002274 <__aeabi_dsub+0x688>)
 8002190:	429f      	cmp	r7, r3
 8002192:	d0cb      	beq.n	800212c <__aeabi_dsub+0x540>
 8002194:	2580      	movs	r5, #128	; 0x80
 8002196:	042d      	lsls	r5, r5, #16
 8002198:	4273      	negs	r3, r6
 800219a:	4329      	orrs	r1, r5
 800219c:	e7a8      	b.n	80020f0 <__aeabi_dsub+0x504>
 800219e:	4308      	orrs	r0, r1
 80021a0:	1e41      	subs	r1, r0, #1
 80021a2:	4188      	sbcs	r0, r1
 80021a4:	e6a2      	b.n	8001eec <__aeabi_dsub+0x300>
 80021a6:	2f00      	cmp	r7, #0
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x5c0>
 80021aa:	e63c      	b.n	8001e26 <__aeabi_dsub+0x23a>
 80021ac:	4663      	mov	r3, ip
 80021ae:	1a86      	subs	r6, r0, r2
 80021b0:	1acf      	subs	r7, r1, r3
 80021b2:	42b0      	cmp	r0, r6
 80021b4:	419b      	sbcs	r3, r3
 80021b6:	425b      	negs	r3, r3
 80021b8:	1afb      	subs	r3, r7, r3
 80021ba:	4698      	mov	r8, r3
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	d54e      	bpl.n	800225e <__aeabi_dsub+0x672>
 80021c0:	1a16      	subs	r6, r2, r0
 80021c2:	4663      	mov	r3, ip
 80021c4:	42b2      	cmp	r2, r6
 80021c6:	4192      	sbcs	r2, r2
 80021c8:	1a59      	subs	r1, r3, r1
 80021ca:	4252      	negs	r2, r2
 80021cc:	1a89      	subs	r1, r1, r2
 80021ce:	465c      	mov	r4, fp
 80021d0:	2200      	movs	r2, #0
 80021d2:	e57b      	b.n	8001ccc <__aeabi_dsub+0xe0>
 80021d4:	4301      	orrs	r1, r0
 80021d6:	000e      	movs	r6, r1
 80021d8:	1e71      	subs	r1, r6, #1
 80021da:	418e      	sbcs	r6, r1
 80021dc:	e79f      	b.n	800211e <__aeabi_dsub+0x532>
 80021de:	001d      	movs	r5, r3
 80021e0:	000e      	movs	r6, r1
 80021e2:	3d20      	subs	r5, #32
 80021e4:	40ee      	lsrs	r6, r5
 80021e6:	46b0      	mov	r8, r6
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d004      	beq.n	80021f6 <__aeabi_dsub+0x60a>
 80021ec:	2540      	movs	r5, #64	; 0x40
 80021ee:	1aeb      	subs	r3, r5, r3
 80021f0:	4099      	lsls	r1, r3
 80021f2:	4308      	orrs	r0, r1
 80021f4:	4681      	mov	r9, r0
 80021f6:	4648      	mov	r0, r9
 80021f8:	4643      	mov	r3, r8
 80021fa:	1e41      	subs	r1, r0, #1
 80021fc:	4188      	sbcs	r0, r1
 80021fe:	4318      	orrs	r0, r3
 8002200:	e674      	b.n	8001eec <__aeabi_dsub+0x300>
 8002202:	2200      	movs	r2, #0
 8002204:	2400      	movs	r4, #0
 8002206:	e617      	b.n	8001e38 <__aeabi_dsub+0x24c>
 8002208:	1a16      	subs	r6, r2, r0
 800220a:	4663      	mov	r3, ip
 800220c:	42b2      	cmp	r2, r6
 800220e:	4192      	sbcs	r2, r2
 8002210:	1a59      	subs	r1, r3, r1
 8002212:	4252      	negs	r2, r2
 8002214:	1a89      	subs	r1, r1, r2
 8002216:	003d      	movs	r5, r7
 8002218:	e525      	b.n	8001c66 <__aeabi_dsub+0x7a>
 800221a:	4661      	mov	r1, ip
 800221c:	4691      	mov	r9, r2
 800221e:	4d15      	ldr	r5, [pc, #84]	; (8002274 <__aeabi_dsub+0x688>)
 8002220:	e601      	b.n	8001e26 <__aeabi_dsub+0x23a>
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	2400      	movs	r4, #0
 8002226:	0312      	lsls	r2, r2, #12
 8002228:	e679      	b.n	8001f1e <__aeabi_dsub+0x332>
 800222a:	001d      	movs	r5, r3
 800222c:	000e      	movs	r6, r1
 800222e:	3d20      	subs	r5, #32
 8002230:	40ee      	lsrs	r6, r5
 8002232:	46b0      	mov	r8, r6
 8002234:	2b20      	cmp	r3, #32
 8002236:	d004      	beq.n	8002242 <__aeabi_dsub+0x656>
 8002238:	2540      	movs	r5, #64	; 0x40
 800223a:	1aeb      	subs	r3, r5, r3
 800223c:	4099      	lsls	r1, r3
 800223e:	4308      	orrs	r0, r1
 8002240:	4681      	mov	r9, r0
 8002242:	464e      	mov	r6, r9
 8002244:	4643      	mov	r3, r8
 8002246:	1e71      	subs	r1, r6, #1
 8002248:	418e      	sbcs	r6, r1
 800224a:	431e      	orrs	r6, r3
 800224c:	e767      	b.n	800211e <__aeabi_dsub+0x532>
 800224e:	1886      	adds	r6, r0, r2
 8002250:	4296      	cmp	r6, r2
 8002252:	419b      	sbcs	r3, r3
 8002254:	4461      	add	r1, ip
 8002256:	425b      	negs	r3, r3
 8002258:	18c9      	adds	r1, r1, r3
 800225a:	003d      	movs	r5, r7
 800225c:	e58c      	b.n	8001d78 <__aeabi_dsub+0x18c>
 800225e:	4647      	mov	r7, r8
 8002260:	4337      	orrs	r7, r6
 8002262:	d0ce      	beq.n	8002202 <__aeabi_dsub+0x616>
 8002264:	2207      	movs	r2, #7
 8002266:	4641      	mov	r1, r8
 8002268:	4032      	ands	r2, r6
 800226a:	e649      	b.n	8001f00 <__aeabi_dsub+0x314>
 800226c:	2700      	movs	r7, #0
 800226e:	003a      	movs	r2, r7
 8002270:	e5e6      	b.n	8001e40 <__aeabi_dsub+0x254>
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	000007ff 	.word	0x000007ff
 8002278:	ff7fffff 	.word	0xff7fffff

0800227c <__aeabi_d2iz>:
 800227c:	b530      	push	{r4, r5, lr}
 800227e:	4d14      	ldr	r5, [pc, #80]	; (80022d0 <__aeabi_d2iz+0x54>)
 8002280:	030a      	lsls	r2, r1, #12
 8002282:	004b      	lsls	r3, r1, #1
 8002284:	0b12      	lsrs	r2, r2, #12
 8002286:	0d5b      	lsrs	r3, r3, #21
 8002288:	0fc9      	lsrs	r1, r1, #31
 800228a:	2400      	movs	r4, #0
 800228c:	42ab      	cmp	r3, r5
 800228e:	dd11      	ble.n	80022b4 <__aeabi_d2iz+0x38>
 8002290:	4c10      	ldr	r4, [pc, #64]	; (80022d4 <__aeabi_d2iz+0x58>)
 8002292:	42a3      	cmp	r3, r4
 8002294:	dc10      	bgt.n	80022b8 <__aeabi_d2iz+0x3c>
 8002296:	2480      	movs	r4, #128	; 0x80
 8002298:	0364      	lsls	r4, r4, #13
 800229a:	4322      	orrs	r2, r4
 800229c:	4c0e      	ldr	r4, [pc, #56]	; (80022d8 <__aeabi_d2iz+0x5c>)
 800229e:	1ae4      	subs	r4, r4, r3
 80022a0:	2c1f      	cmp	r4, #31
 80022a2:	dd0c      	ble.n	80022be <__aeabi_d2iz+0x42>
 80022a4:	480d      	ldr	r0, [pc, #52]	; (80022dc <__aeabi_d2iz+0x60>)
 80022a6:	1ac3      	subs	r3, r0, r3
 80022a8:	40da      	lsrs	r2, r3
 80022aa:	0013      	movs	r3, r2
 80022ac:	425c      	negs	r4, r3
 80022ae:	2900      	cmp	r1, #0
 80022b0:	d100      	bne.n	80022b4 <__aeabi_d2iz+0x38>
 80022b2:	001c      	movs	r4, r3
 80022b4:	0020      	movs	r0, r4
 80022b6:	bd30      	pop	{r4, r5, pc}
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <__aeabi_d2iz+0x64>)
 80022ba:	18cc      	adds	r4, r1, r3
 80022bc:	e7fa      	b.n	80022b4 <__aeabi_d2iz+0x38>
 80022be:	4d09      	ldr	r5, [pc, #36]	; (80022e4 <__aeabi_d2iz+0x68>)
 80022c0:	40e0      	lsrs	r0, r4
 80022c2:	46ac      	mov	ip, r5
 80022c4:	4463      	add	r3, ip
 80022c6:	409a      	lsls	r2, r3
 80022c8:	0013      	movs	r3, r2
 80022ca:	4303      	orrs	r3, r0
 80022cc:	e7ee      	b.n	80022ac <__aeabi_d2iz+0x30>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	000003fe 	.word	0x000003fe
 80022d4:	0000041d 	.word	0x0000041d
 80022d8:	00000433 	.word	0x00000433
 80022dc:	00000413 	.word	0x00000413
 80022e0:	7fffffff 	.word	0x7fffffff
 80022e4:	fffffbed 	.word	0xfffffbed

080022e8 <__aeabi_f2d>:
 80022e8:	0041      	lsls	r1, r0, #1
 80022ea:	0e09      	lsrs	r1, r1, #24
 80022ec:	1c4b      	adds	r3, r1, #1
 80022ee:	b570      	push	{r4, r5, r6, lr}
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	0246      	lsls	r6, r0, #9
 80022f4:	0a75      	lsrs	r5, r6, #9
 80022f6:	0fc4      	lsrs	r4, r0, #31
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	dd14      	ble.n	8002326 <__aeabi_f2d+0x3e>
 80022fc:	23e0      	movs	r3, #224	; 0xe0
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	076d      	lsls	r5, r5, #29
 8002302:	0b36      	lsrs	r6, r6, #12
 8002304:	18cb      	adds	r3, r1, r3
 8002306:	2100      	movs	r1, #0
 8002308:	0d0a      	lsrs	r2, r1, #20
 800230a:	0028      	movs	r0, r5
 800230c:	0512      	lsls	r2, r2, #20
 800230e:	4d1c      	ldr	r5, [pc, #112]	; (8002380 <__aeabi_f2d+0x98>)
 8002310:	4332      	orrs	r2, r6
 8002312:	055b      	lsls	r3, r3, #21
 8002314:	402a      	ands	r2, r5
 8002316:	085b      	lsrs	r3, r3, #1
 8002318:	4313      	orrs	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	07e4      	lsls	r4, r4, #31
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	4323      	orrs	r3, r4
 8002322:	0019      	movs	r1, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	2900      	cmp	r1, #0
 8002328:	d114      	bne.n	8002354 <__aeabi_f2d+0x6c>
 800232a:	2d00      	cmp	r5, #0
 800232c:	d01e      	beq.n	800236c <__aeabi_f2d+0x84>
 800232e:	0028      	movs	r0, r5
 8002330:	f000 f8ee 	bl	8002510 <__clzsi2>
 8002334:	280a      	cmp	r0, #10
 8002336:	dc1c      	bgt.n	8002372 <__aeabi_f2d+0x8a>
 8002338:	230b      	movs	r3, #11
 800233a:	002a      	movs	r2, r5
 800233c:	1a1b      	subs	r3, r3, r0
 800233e:	40da      	lsrs	r2, r3
 8002340:	0003      	movs	r3, r0
 8002342:	3315      	adds	r3, #21
 8002344:	409d      	lsls	r5, r3
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <__aeabi_f2d+0x9c>)
 8002348:	0312      	lsls	r2, r2, #12
 800234a:	1a1b      	subs	r3, r3, r0
 800234c:	055b      	lsls	r3, r3, #21
 800234e:	0b16      	lsrs	r6, r2, #12
 8002350:	0d5b      	lsrs	r3, r3, #21
 8002352:	e7d8      	b.n	8002306 <__aeabi_f2d+0x1e>
 8002354:	2d00      	cmp	r5, #0
 8002356:	d006      	beq.n	8002366 <__aeabi_f2d+0x7e>
 8002358:	0b32      	lsrs	r2, r6, #12
 800235a:	2680      	movs	r6, #128	; 0x80
 800235c:	0336      	lsls	r6, r6, #12
 800235e:	076d      	lsls	r5, r5, #29
 8002360:	4316      	orrs	r6, r2
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <__aeabi_f2d+0xa0>)
 8002364:	e7cf      	b.n	8002306 <__aeabi_f2d+0x1e>
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <__aeabi_f2d+0xa0>)
 8002368:	2600      	movs	r6, #0
 800236a:	e7cc      	b.n	8002306 <__aeabi_f2d+0x1e>
 800236c:	2300      	movs	r3, #0
 800236e:	2600      	movs	r6, #0
 8002370:	e7c9      	b.n	8002306 <__aeabi_f2d+0x1e>
 8002372:	0003      	movs	r3, r0
 8002374:	002a      	movs	r2, r5
 8002376:	3b0b      	subs	r3, #11
 8002378:	409a      	lsls	r2, r3
 800237a:	2500      	movs	r5, #0
 800237c:	e7e3      	b.n	8002346 <__aeabi_f2d+0x5e>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	800fffff 	.word	0x800fffff
 8002384:	00000389 	.word	0x00000389
 8002388:	000007ff 	.word	0x000007ff

0800238c <__aeabi_d2f>:
 800238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238e:	004c      	lsls	r4, r1, #1
 8002390:	0d64      	lsrs	r4, r4, #21
 8002392:	030b      	lsls	r3, r1, #12
 8002394:	1c62      	adds	r2, r4, #1
 8002396:	0a5b      	lsrs	r3, r3, #9
 8002398:	0f46      	lsrs	r6, r0, #29
 800239a:	0552      	lsls	r2, r2, #21
 800239c:	0fc9      	lsrs	r1, r1, #31
 800239e:	431e      	orrs	r6, r3
 80023a0:	00c5      	lsls	r5, r0, #3
 80023a2:	0d52      	lsrs	r2, r2, #21
 80023a4:	2a01      	cmp	r2, #1
 80023a6:	dd29      	ble.n	80023fc <__aeabi_d2f+0x70>
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <__aeabi_d2f+0xfc>)
 80023aa:	18e7      	adds	r7, r4, r3
 80023ac:	2ffe      	cmp	r7, #254	; 0xfe
 80023ae:	dc1c      	bgt.n	80023ea <__aeabi_d2f+0x5e>
 80023b0:	2f00      	cmp	r7, #0
 80023b2:	dd3b      	ble.n	800242c <__aeabi_d2f+0xa0>
 80023b4:	0180      	lsls	r0, r0, #6
 80023b6:	1e43      	subs	r3, r0, #1
 80023b8:	4198      	sbcs	r0, r3
 80023ba:	2207      	movs	r2, #7
 80023bc:	00f3      	lsls	r3, r6, #3
 80023be:	0f6d      	lsrs	r5, r5, #29
 80023c0:	4303      	orrs	r3, r0
 80023c2:	432b      	orrs	r3, r5
 80023c4:	401a      	ands	r2, r3
 80023c6:	2a00      	cmp	r2, #0
 80023c8:	d004      	beq.n	80023d4 <__aeabi_d2f+0x48>
 80023ca:	220f      	movs	r2, #15
 80023cc:	401a      	ands	r2, r3
 80023ce:	2a04      	cmp	r2, #4
 80023d0:	d000      	beq.n	80023d4 <__aeabi_d2f+0x48>
 80023d2:	3304      	adds	r3, #4
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	04d2      	lsls	r2, r2, #19
 80023d8:	401a      	ands	r2, r3
 80023da:	d024      	beq.n	8002426 <__aeabi_d2f+0x9a>
 80023dc:	3701      	adds	r7, #1
 80023de:	b2fa      	uxtb	r2, r7
 80023e0:	2fff      	cmp	r7, #255	; 0xff
 80023e2:	d002      	beq.n	80023ea <__aeabi_d2f+0x5e>
 80023e4:	019b      	lsls	r3, r3, #6
 80023e6:	0a58      	lsrs	r0, r3, #9
 80023e8:	e001      	b.n	80023ee <__aeabi_d2f+0x62>
 80023ea:	22ff      	movs	r2, #255	; 0xff
 80023ec:	2000      	movs	r0, #0
 80023ee:	0240      	lsls	r0, r0, #9
 80023f0:	05d2      	lsls	r2, r2, #23
 80023f2:	0a40      	lsrs	r0, r0, #9
 80023f4:	07c9      	lsls	r1, r1, #31
 80023f6:	4310      	orrs	r0, r2
 80023f8:	4308      	orrs	r0, r1
 80023fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fc:	4335      	orrs	r5, r6
 80023fe:	2c00      	cmp	r4, #0
 8002400:	d104      	bne.n	800240c <__aeabi_d2f+0x80>
 8002402:	2d00      	cmp	r5, #0
 8002404:	d10a      	bne.n	800241c <__aeabi_d2f+0x90>
 8002406:	2200      	movs	r2, #0
 8002408:	2000      	movs	r0, #0
 800240a:	e7f0      	b.n	80023ee <__aeabi_d2f+0x62>
 800240c:	2d00      	cmp	r5, #0
 800240e:	d0ec      	beq.n	80023ea <__aeabi_d2f+0x5e>
 8002410:	2080      	movs	r0, #128	; 0x80
 8002412:	03c0      	lsls	r0, r0, #15
 8002414:	4330      	orrs	r0, r6
 8002416:	22ff      	movs	r2, #255	; 0xff
 8002418:	e7e9      	b.n	80023ee <__aeabi_d2f+0x62>
 800241a:	2400      	movs	r4, #0
 800241c:	2300      	movs	r3, #0
 800241e:	025b      	lsls	r3, r3, #9
 8002420:	0a58      	lsrs	r0, r3, #9
 8002422:	b2e2      	uxtb	r2, r4
 8002424:	e7e3      	b.n	80023ee <__aeabi_d2f+0x62>
 8002426:	08db      	lsrs	r3, r3, #3
 8002428:	003c      	movs	r4, r7
 800242a:	e7f8      	b.n	800241e <__aeabi_d2f+0x92>
 800242c:	003b      	movs	r3, r7
 800242e:	3317      	adds	r3, #23
 8002430:	dbf3      	blt.n	800241a <__aeabi_d2f+0x8e>
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	4333      	orrs	r3, r6
 8002438:	261e      	movs	r6, #30
 800243a:	1bf6      	subs	r6, r6, r7
 800243c:	2e1f      	cmp	r6, #31
 800243e:	dd14      	ble.n	800246a <__aeabi_d2f+0xde>
 8002440:	2202      	movs	r2, #2
 8002442:	4252      	negs	r2, r2
 8002444:	1bd7      	subs	r7, r2, r7
 8002446:	001a      	movs	r2, r3
 8002448:	40fa      	lsrs	r2, r7
 800244a:	0017      	movs	r7, r2
 800244c:	2e20      	cmp	r6, #32
 800244e:	d004      	beq.n	800245a <__aeabi_d2f+0xce>
 8002450:	4a0e      	ldr	r2, [pc, #56]	; (800248c <__aeabi_d2f+0x100>)
 8002452:	4694      	mov	ip, r2
 8002454:	4464      	add	r4, ip
 8002456:	40a3      	lsls	r3, r4
 8002458:	431d      	orrs	r5, r3
 800245a:	002b      	movs	r3, r5
 800245c:	1e5d      	subs	r5, r3, #1
 800245e:	41ab      	sbcs	r3, r5
 8002460:	2207      	movs	r2, #7
 8002462:	433b      	orrs	r3, r7
 8002464:	401a      	ands	r2, r3
 8002466:	2700      	movs	r7, #0
 8002468:	e7ad      	b.n	80023c6 <__aeabi_d2f+0x3a>
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <__aeabi_d2f+0x104>)
 800246c:	0028      	movs	r0, r5
 800246e:	18a2      	adds	r2, r4, r2
 8002470:	4095      	lsls	r5, r2
 8002472:	4093      	lsls	r3, r2
 8002474:	1e6c      	subs	r4, r5, #1
 8002476:	41a5      	sbcs	r5, r4
 8002478:	40f0      	lsrs	r0, r6
 800247a:	2207      	movs	r2, #7
 800247c:	432b      	orrs	r3, r5
 800247e:	4303      	orrs	r3, r0
 8002480:	401a      	ands	r2, r3
 8002482:	2700      	movs	r7, #0
 8002484:	e79f      	b.n	80023c6 <__aeabi_d2f+0x3a>
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	fffffc80 	.word	0xfffffc80
 800248c:	fffffca2 	.word	0xfffffca2
 8002490:	fffffc82 	.word	0xfffffc82

08002494 <__aeabi_cdrcmple>:
 8002494:	4684      	mov	ip, r0
 8002496:	1c10      	adds	r0, r2, #0
 8002498:	4662      	mov	r2, ip
 800249a:	468c      	mov	ip, r1
 800249c:	1c19      	adds	r1, r3, #0
 800249e:	4663      	mov	r3, ip
 80024a0:	e000      	b.n	80024a4 <__aeabi_cdcmpeq>
 80024a2:	46c0      	nop			; (mov r8, r8)

080024a4 <__aeabi_cdcmpeq>:
 80024a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80024a6:	f000 f8f1 	bl	800268c <__ledf2>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d401      	bmi.n	80024b2 <__aeabi_cdcmpeq+0xe>
 80024ae:	2100      	movs	r1, #0
 80024b0:	42c8      	cmn	r0, r1
 80024b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080024b4 <__aeabi_dcmpeq>:
 80024b4:	b510      	push	{r4, lr}
 80024b6:	f000 f849 	bl	800254c <__eqdf2>
 80024ba:	4240      	negs	r0, r0
 80024bc:	3001      	adds	r0, #1
 80024be:	bd10      	pop	{r4, pc}

080024c0 <__aeabi_dcmplt>:
 80024c0:	b510      	push	{r4, lr}
 80024c2:	f000 f8e3 	bl	800268c <__ledf2>
 80024c6:	2800      	cmp	r0, #0
 80024c8:	db01      	blt.n	80024ce <__aeabi_dcmplt+0xe>
 80024ca:	2000      	movs	r0, #0
 80024cc:	bd10      	pop	{r4, pc}
 80024ce:	2001      	movs	r0, #1
 80024d0:	bd10      	pop	{r4, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)

080024d4 <__aeabi_dcmple>:
 80024d4:	b510      	push	{r4, lr}
 80024d6:	f000 f8d9 	bl	800268c <__ledf2>
 80024da:	2800      	cmp	r0, #0
 80024dc:	dd01      	ble.n	80024e2 <__aeabi_dcmple+0xe>
 80024de:	2000      	movs	r0, #0
 80024e0:	bd10      	pop	{r4, pc}
 80024e2:	2001      	movs	r0, #1
 80024e4:	bd10      	pop	{r4, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)

080024e8 <__aeabi_dcmpgt>:
 80024e8:	b510      	push	{r4, lr}
 80024ea:	f000 f86b 	bl	80025c4 <__gedf2>
 80024ee:	2800      	cmp	r0, #0
 80024f0:	dc01      	bgt.n	80024f6 <__aeabi_dcmpgt+0xe>
 80024f2:	2000      	movs	r0, #0
 80024f4:	bd10      	pop	{r4, pc}
 80024f6:	2001      	movs	r0, #1
 80024f8:	bd10      	pop	{r4, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)

080024fc <__aeabi_dcmpge>:
 80024fc:	b510      	push	{r4, lr}
 80024fe:	f000 f861 	bl	80025c4 <__gedf2>
 8002502:	2800      	cmp	r0, #0
 8002504:	da01      	bge.n	800250a <__aeabi_dcmpge+0xe>
 8002506:	2000      	movs	r0, #0
 8002508:	bd10      	pop	{r4, pc}
 800250a:	2001      	movs	r0, #1
 800250c:	bd10      	pop	{r4, pc}
 800250e:	46c0      	nop			; (mov r8, r8)

08002510 <__clzsi2>:
 8002510:	211c      	movs	r1, #28
 8002512:	2301      	movs	r3, #1
 8002514:	041b      	lsls	r3, r3, #16
 8002516:	4298      	cmp	r0, r3
 8002518:	d301      	bcc.n	800251e <__clzsi2+0xe>
 800251a:	0c00      	lsrs	r0, r0, #16
 800251c:	3910      	subs	r1, #16
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	4298      	cmp	r0, r3
 8002522:	d301      	bcc.n	8002528 <__clzsi2+0x18>
 8002524:	0a00      	lsrs	r0, r0, #8
 8002526:	3908      	subs	r1, #8
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	4298      	cmp	r0, r3
 800252c:	d301      	bcc.n	8002532 <__clzsi2+0x22>
 800252e:	0900      	lsrs	r0, r0, #4
 8002530:	3904      	subs	r1, #4
 8002532:	a202      	add	r2, pc, #8	; (adr r2, 800253c <__clzsi2+0x2c>)
 8002534:	5c10      	ldrb	r0, [r2, r0]
 8002536:	1840      	adds	r0, r0, r1
 8002538:	4770      	bx	lr
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	02020304 	.word	0x02020304
 8002540:	01010101 	.word	0x01010101
	...

0800254c <__eqdf2>:
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	464f      	mov	r7, r9
 8002550:	4646      	mov	r6, r8
 8002552:	46d6      	mov	lr, sl
 8002554:	4684      	mov	ip, r0
 8002556:	b5c0      	push	{r6, r7, lr}
 8002558:	4680      	mov	r8, r0
 800255a:	4e19      	ldr	r6, [pc, #100]	; (80025c0 <__eqdf2+0x74>)
 800255c:	0318      	lsls	r0, r3, #12
 800255e:	030f      	lsls	r7, r1, #12
 8002560:	004d      	lsls	r5, r1, #1
 8002562:	0b00      	lsrs	r0, r0, #12
 8002564:	005c      	lsls	r4, r3, #1
 8002566:	4682      	mov	sl, r0
 8002568:	0b3f      	lsrs	r7, r7, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	0fc9      	lsrs	r1, r1, #31
 800256e:	4691      	mov	r9, r2
 8002570:	0d64      	lsrs	r4, r4, #21
 8002572:	0fdb      	lsrs	r3, r3, #31
 8002574:	2001      	movs	r0, #1
 8002576:	42b5      	cmp	r5, r6
 8002578:	d00a      	beq.n	8002590 <__eqdf2+0x44>
 800257a:	42b4      	cmp	r4, r6
 800257c:	d003      	beq.n	8002586 <__eqdf2+0x3a>
 800257e:	42a5      	cmp	r5, r4
 8002580:	d101      	bne.n	8002586 <__eqdf2+0x3a>
 8002582:	4557      	cmp	r7, sl
 8002584:	d00c      	beq.n	80025a0 <__eqdf2+0x54>
 8002586:	bc1c      	pop	{r2, r3, r4}
 8002588:	4690      	mov	r8, r2
 800258a:	4699      	mov	r9, r3
 800258c:	46a2      	mov	sl, r4
 800258e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002590:	4666      	mov	r6, ip
 8002592:	433e      	orrs	r6, r7
 8002594:	d1f7      	bne.n	8002586 <__eqdf2+0x3a>
 8002596:	42ac      	cmp	r4, r5
 8002598:	d1f5      	bne.n	8002586 <__eqdf2+0x3a>
 800259a:	4654      	mov	r4, sl
 800259c:	4314      	orrs	r4, r2
 800259e:	d1f2      	bne.n	8002586 <__eqdf2+0x3a>
 80025a0:	2001      	movs	r0, #1
 80025a2:	45c8      	cmp	r8, r9
 80025a4:	d1ef      	bne.n	8002586 <__eqdf2+0x3a>
 80025a6:	4299      	cmp	r1, r3
 80025a8:	d007      	beq.n	80025ba <__eqdf2+0x6e>
 80025aa:	2d00      	cmp	r5, #0
 80025ac:	d1eb      	bne.n	8002586 <__eqdf2+0x3a>
 80025ae:	4663      	mov	r3, ip
 80025b0:	431f      	orrs	r7, r3
 80025b2:	0038      	movs	r0, r7
 80025b4:	1e47      	subs	r7, r0, #1
 80025b6:	41b8      	sbcs	r0, r7
 80025b8:	e7e5      	b.n	8002586 <__eqdf2+0x3a>
 80025ba:	2000      	movs	r0, #0
 80025bc:	e7e3      	b.n	8002586 <__eqdf2+0x3a>
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	000007ff 	.word	0x000007ff

080025c4 <__gedf2>:
 80025c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c6:	464f      	mov	r7, r9
 80025c8:	4646      	mov	r6, r8
 80025ca:	46d6      	mov	lr, sl
 80025cc:	004d      	lsls	r5, r1, #1
 80025ce:	b5c0      	push	{r6, r7, lr}
 80025d0:	030e      	lsls	r6, r1, #12
 80025d2:	0fc9      	lsrs	r1, r1, #31
 80025d4:	468a      	mov	sl, r1
 80025d6:	492c      	ldr	r1, [pc, #176]	; (8002688 <__gedf2+0xc4>)
 80025d8:	031f      	lsls	r7, r3, #12
 80025da:	005c      	lsls	r4, r3, #1
 80025dc:	4680      	mov	r8, r0
 80025de:	0b36      	lsrs	r6, r6, #12
 80025e0:	0d6d      	lsrs	r5, r5, #21
 80025e2:	4691      	mov	r9, r2
 80025e4:	0b3f      	lsrs	r7, r7, #12
 80025e6:	0d64      	lsrs	r4, r4, #21
 80025e8:	0fdb      	lsrs	r3, r3, #31
 80025ea:	428d      	cmp	r5, r1
 80025ec:	d01e      	beq.n	800262c <__gedf2+0x68>
 80025ee:	428c      	cmp	r4, r1
 80025f0:	d016      	beq.n	8002620 <__gedf2+0x5c>
 80025f2:	2d00      	cmp	r5, #0
 80025f4:	d11e      	bne.n	8002634 <__gedf2+0x70>
 80025f6:	4330      	orrs	r0, r6
 80025f8:	4684      	mov	ip, r0
 80025fa:	2c00      	cmp	r4, #0
 80025fc:	d101      	bne.n	8002602 <__gedf2+0x3e>
 80025fe:	433a      	orrs	r2, r7
 8002600:	d023      	beq.n	800264a <__gedf2+0x86>
 8002602:	4662      	mov	r2, ip
 8002604:	2a00      	cmp	r2, #0
 8002606:	d01a      	beq.n	800263e <__gedf2+0x7a>
 8002608:	459a      	cmp	sl, r3
 800260a:	d029      	beq.n	8002660 <__gedf2+0x9c>
 800260c:	4651      	mov	r1, sl
 800260e:	2002      	movs	r0, #2
 8002610:	3901      	subs	r1, #1
 8002612:	4008      	ands	r0, r1
 8002614:	3801      	subs	r0, #1
 8002616:	bc1c      	pop	{r2, r3, r4}
 8002618:	4690      	mov	r8, r2
 800261a:	4699      	mov	r9, r3
 800261c:	46a2      	mov	sl, r4
 800261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002620:	0039      	movs	r1, r7
 8002622:	4311      	orrs	r1, r2
 8002624:	d0e5      	beq.n	80025f2 <__gedf2+0x2e>
 8002626:	2002      	movs	r0, #2
 8002628:	4240      	negs	r0, r0
 800262a:	e7f4      	b.n	8002616 <__gedf2+0x52>
 800262c:	4330      	orrs	r0, r6
 800262e:	d1fa      	bne.n	8002626 <__gedf2+0x62>
 8002630:	42ac      	cmp	r4, r5
 8002632:	d00f      	beq.n	8002654 <__gedf2+0x90>
 8002634:	2c00      	cmp	r4, #0
 8002636:	d10f      	bne.n	8002658 <__gedf2+0x94>
 8002638:	433a      	orrs	r2, r7
 800263a:	d0e7      	beq.n	800260c <__gedf2+0x48>
 800263c:	e00c      	b.n	8002658 <__gedf2+0x94>
 800263e:	2201      	movs	r2, #1
 8002640:	3b01      	subs	r3, #1
 8002642:	4393      	bics	r3, r2
 8002644:	0018      	movs	r0, r3
 8002646:	3001      	adds	r0, #1
 8002648:	e7e5      	b.n	8002616 <__gedf2+0x52>
 800264a:	4663      	mov	r3, ip
 800264c:	2000      	movs	r0, #0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0e1      	beq.n	8002616 <__gedf2+0x52>
 8002652:	e7db      	b.n	800260c <__gedf2+0x48>
 8002654:	433a      	orrs	r2, r7
 8002656:	d1e6      	bne.n	8002626 <__gedf2+0x62>
 8002658:	459a      	cmp	sl, r3
 800265a:	d1d7      	bne.n	800260c <__gedf2+0x48>
 800265c:	42a5      	cmp	r5, r4
 800265e:	dcd5      	bgt.n	800260c <__gedf2+0x48>
 8002660:	42a5      	cmp	r5, r4
 8002662:	db05      	blt.n	8002670 <__gedf2+0xac>
 8002664:	42be      	cmp	r6, r7
 8002666:	d8d1      	bhi.n	800260c <__gedf2+0x48>
 8002668:	d008      	beq.n	800267c <__gedf2+0xb8>
 800266a:	2000      	movs	r0, #0
 800266c:	42be      	cmp	r6, r7
 800266e:	d2d2      	bcs.n	8002616 <__gedf2+0x52>
 8002670:	4650      	mov	r0, sl
 8002672:	2301      	movs	r3, #1
 8002674:	3801      	subs	r0, #1
 8002676:	4398      	bics	r0, r3
 8002678:	3001      	adds	r0, #1
 800267a:	e7cc      	b.n	8002616 <__gedf2+0x52>
 800267c:	45c8      	cmp	r8, r9
 800267e:	d8c5      	bhi.n	800260c <__gedf2+0x48>
 8002680:	2000      	movs	r0, #0
 8002682:	45c8      	cmp	r8, r9
 8002684:	d3f4      	bcc.n	8002670 <__gedf2+0xac>
 8002686:	e7c6      	b.n	8002616 <__gedf2+0x52>
 8002688:	000007ff 	.word	0x000007ff

0800268c <__ledf2>:
 800268c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268e:	464f      	mov	r7, r9
 8002690:	4646      	mov	r6, r8
 8002692:	46d6      	mov	lr, sl
 8002694:	004d      	lsls	r5, r1, #1
 8002696:	b5c0      	push	{r6, r7, lr}
 8002698:	030e      	lsls	r6, r1, #12
 800269a:	0fc9      	lsrs	r1, r1, #31
 800269c:	468a      	mov	sl, r1
 800269e:	492e      	ldr	r1, [pc, #184]	; (8002758 <__ledf2+0xcc>)
 80026a0:	031f      	lsls	r7, r3, #12
 80026a2:	005c      	lsls	r4, r3, #1
 80026a4:	4680      	mov	r8, r0
 80026a6:	0b36      	lsrs	r6, r6, #12
 80026a8:	0d6d      	lsrs	r5, r5, #21
 80026aa:	4691      	mov	r9, r2
 80026ac:	0b3f      	lsrs	r7, r7, #12
 80026ae:	0d64      	lsrs	r4, r4, #21
 80026b0:	0fdb      	lsrs	r3, r3, #31
 80026b2:	428d      	cmp	r5, r1
 80026b4:	d018      	beq.n	80026e8 <__ledf2+0x5c>
 80026b6:	428c      	cmp	r4, r1
 80026b8:	d011      	beq.n	80026de <__ledf2+0x52>
 80026ba:	2d00      	cmp	r5, #0
 80026bc:	d118      	bne.n	80026f0 <__ledf2+0x64>
 80026be:	4330      	orrs	r0, r6
 80026c0:	4684      	mov	ip, r0
 80026c2:	2c00      	cmp	r4, #0
 80026c4:	d11e      	bne.n	8002704 <__ledf2+0x78>
 80026c6:	433a      	orrs	r2, r7
 80026c8:	d11c      	bne.n	8002704 <__ledf2+0x78>
 80026ca:	4663      	mov	r3, ip
 80026cc:	2000      	movs	r0, #0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d030      	beq.n	8002734 <__ledf2+0xa8>
 80026d2:	4651      	mov	r1, sl
 80026d4:	2002      	movs	r0, #2
 80026d6:	3901      	subs	r1, #1
 80026d8:	4008      	ands	r0, r1
 80026da:	3801      	subs	r0, #1
 80026dc:	e02a      	b.n	8002734 <__ledf2+0xa8>
 80026de:	0039      	movs	r1, r7
 80026e0:	4311      	orrs	r1, r2
 80026e2:	d0ea      	beq.n	80026ba <__ledf2+0x2e>
 80026e4:	2002      	movs	r0, #2
 80026e6:	e025      	b.n	8002734 <__ledf2+0xa8>
 80026e8:	4330      	orrs	r0, r6
 80026ea:	d1fb      	bne.n	80026e4 <__ledf2+0x58>
 80026ec:	42ac      	cmp	r4, r5
 80026ee:	d026      	beq.n	800273e <__ledf2+0xb2>
 80026f0:	2c00      	cmp	r4, #0
 80026f2:	d126      	bne.n	8002742 <__ledf2+0xb6>
 80026f4:	433a      	orrs	r2, r7
 80026f6:	d124      	bne.n	8002742 <__ledf2+0xb6>
 80026f8:	4651      	mov	r1, sl
 80026fa:	2002      	movs	r0, #2
 80026fc:	3901      	subs	r1, #1
 80026fe:	4008      	ands	r0, r1
 8002700:	3801      	subs	r0, #1
 8002702:	e017      	b.n	8002734 <__ledf2+0xa8>
 8002704:	4662      	mov	r2, ip
 8002706:	2a00      	cmp	r2, #0
 8002708:	d00f      	beq.n	800272a <__ledf2+0x9e>
 800270a:	459a      	cmp	sl, r3
 800270c:	d1e1      	bne.n	80026d2 <__ledf2+0x46>
 800270e:	42a5      	cmp	r5, r4
 8002710:	db05      	blt.n	800271e <__ledf2+0x92>
 8002712:	42be      	cmp	r6, r7
 8002714:	d8dd      	bhi.n	80026d2 <__ledf2+0x46>
 8002716:	d019      	beq.n	800274c <__ledf2+0xc0>
 8002718:	2000      	movs	r0, #0
 800271a:	42be      	cmp	r6, r7
 800271c:	d20a      	bcs.n	8002734 <__ledf2+0xa8>
 800271e:	4650      	mov	r0, sl
 8002720:	2301      	movs	r3, #1
 8002722:	3801      	subs	r0, #1
 8002724:	4398      	bics	r0, r3
 8002726:	3001      	adds	r0, #1
 8002728:	e004      	b.n	8002734 <__ledf2+0xa8>
 800272a:	2201      	movs	r2, #1
 800272c:	3b01      	subs	r3, #1
 800272e:	4393      	bics	r3, r2
 8002730:	0018      	movs	r0, r3
 8002732:	3001      	adds	r0, #1
 8002734:	bc1c      	pop	{r2, r3, r4}
 8002736:	4690      	mov	r8, r2
 8002738:	4699      	mov	r9, r3
 800273a:	46a2      	mov	sl, r4
 800273c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800273e:	433a      	orrs	r2, r7
 8002740:	d1d0      	bne.n	80026e4 <__ledf2+0x58>
 8002742:	459a      	cmp	sl, r3
 8002744:	d1c5      	bne.n	80026d2 <__ledf2+0x46>
 8002746:	42a5      	cmp	r5, r4
 8002748:	dcc3      	bgt.n	80026d2 <__ledf2+0x46>
 800274a:	e7e0      	b.n	800270e <__ledf2+0x82>
 800274c:	45c8      	cmp	r8, r9
 800274e:	d8c0      	bhi.n	80026d2 <__ledf2+0x46>
 8002750:	2000      	movs	r0, #0
 8002752:	45c8      	cmp	r8, r9
 8002754:	d3e3      	bcc.n	800271e <__ledf2+0x92>
 8002756:	e7ed      	b.n	8002734 <__ledf2+0xa8>
 8002758:	000007ff 	.word	0x000007ff

0800275c <_Z12FAN_PWM_Initv>:
extern TIM_HandleTypeDef htim17;



void FAN_PWM_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	//Set duty cycle to 100% for testing
	FAN_PWM_SetDutyCycle(1000);
 8002760:	23fa      	movs	r3, #250	; 0xfa
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	0018      	movs	r0, r3
 8002766:	f000 f813 	bl	8002790 <_Z20FAN_PWM_SetDutyCyclet>

	//Start FAN PWM
	HAL_TIM_PWM_Start(&FAN_PWM_TIMER, TIM_CHANNEL_1);
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <_Z12FAN_PWM_Initv+0x30>)
 800276c:	2100      	movs	r1, #0
 800276e:	0018      	movs	r0, r3
 8002770:	f004 ffe4 	bl	800773c <HAL_TIM_PWM_Start>

	//Let fan ramp up shortly for testing
	HAL_Delay(4000);
 8002774:	23fa      	movs	r3, #250	; 0xfa
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	0018      	movs	r0, r3
 800277a:	f003 fa55 	bl	8005c28 <HAL_Delay>

	//Set duty cycle to zero
	FAN_PWM_SetDutyCycle(0);
 800277e:	2000      	movs	r0, #0
 8002780:	f000 f806 	bl	8002790 <_Z20FAN_PWM_SetDutyCyclet>
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	20000288 	.word	0x20000288

08002790 <_Z20FAN_PWM_SetDutyCyclet>:



void FAN_PWM_SetDutyCycle(uint16_t dc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	0002      	movs	r2, r0
 8002798:	1dbb      	adds	r3, r7, #6
 800279a:	801a      	strh	r2, [r3, #0]
	if(dc > 1000)
 800279c:	1dbb      	adds	r3, r7, #6
 800279e:	881a      	ldrh	r2, [r3, #0]
 80027a0:	23fa      	movs	r3, #250	; 0xfa
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d903      	bls.n	80027b0 <_Z20FAN_PWM_SetDutyCyclet+0x20>
	{
		dc = 1000;
 80027a8:	1dbb      	adds	r3, r7, #6
 80027aa:	22fa      	movs	r2, #250	; 0xfa
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	801a      	strh	r2, [r3, #0]
	}

	dc = (uint16_t)((((uint32_t)dc) * 1920) / 1000);
 80027b0:	1dbb      	adds	r3, r7, #6
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	001a      	movs	r2, r3
 80027b6:	0013      	movs	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	01db      	lsls	r3, r3, #7
 80027be:	001a      	movs	r2, r3
 80027c0:	23fa      	movs	r3, #250	; 0xfa
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	0010      	movs	r0, r2
 80027c6:	f7fd fc9f 	bl	8000108 <__udivsi3>
 80027ca:	0003      	movs	r3, r0
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	1dbb      	adds	r3, r7, #6
 80027d0:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&FAN_PWM_TIMER, TIM_CHANNEL_1, dc);
 80027d2:	1dbb      	adds	r3, r7, #6
 80027d4:	881a      	ldrh	r2, [r3, #0]
 80027d6:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <_Z20FAN_PWM_SetDutyCyclet+0x54>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000288 	.word	0x20000288

080027e8 <_Z17LED_NRF24L01_Initv>:
const char* timestamp = __TIMESTAMP__;



void LED_NRF24L01_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
	//Wrapper to char array containing the compilation timestamp
	uint32_t *wrapper = (uint32_t*)timestamp;
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <_Z17LED_NRF24L01_Initv+0xa4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	607b      	str	r3, [r7, #4]

	OwnGroup = 0;
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <_Z17LED_NRF24L01_Initv+0xa8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]

	//Init SPI interface
	NRF24L01_SPI_Send(0x55);
 80027fa:	2055      	movs	r0, #85	; 0x55
 80027fc:	f002 fd52 	bl	80052a4 <NRF24L01_SPI_Send>

	NRF24L01_Init(LED_NRF24L01_CHANNEL, LED_NRF24L01_PAYLOAD); // Do basic init
 8002800:	210c      	movs	r1, #12
 8002802:	2073      	movs	r0, #115	; 0x73
 8002804:	f002 fa18 	bl	8004c38 <NRF24L01_Init>

	NRF24L01_SetRF(LED_NRF24L01_DATARATE, LED_NRF24L01_OUTPUT_POWER); /* Set RF settings */
 8002808:	2103      	movs	r1, #3
 800280a:	2001      	movs	r0, #1
 800280c:	f002 fce4 	bl	80051d8 <NRF24L01_SetRF>

	NRF24L01_CE_LOW;
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	481f      	ldr	r0, [pc, #124]	; (8002894 <_Z17LED_NRF24L01_Initv+0xac>)
 8002816:	2200      	movs	r2, #0
 8002818:	0019      	movs	r1, r3
 800281a:	f004 f91f 	bl	8006a5c <HAL_GPIO_WritePin>
	OwnAddress = LED_NRF24L01_BASE_ADDR;
 800281e:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <_Z17LED_NRF24L01_Initv+0xb0>)
 8002820:	4a1e      	ldr	r2, [pc, #120]	; (800289c <_Z17LED_NRF24L01_Initv+0xb4>)
 8002822:	601a      	str	r2, [r3, #0]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_TX_ADDR, (uint8_t*)&OwnAddress, 4);	//Setup transmit address
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <_Z17LED_NRF24L01_Initv+0xb0>)
 8002826:	2204      	movs	r2, #4
 8002828:	0019      	movs	r1, r3
 800282a:	2010      	movs	r0, #16
 800282c:	f002 fad8 	bl	8004de0 <NRF24L01_WriteRegisterMulti>
	OwnAddress = LED_NRF24L01_BROADCAST_ADDR;	//Setup pipe 0 for RX
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <_Z17LED_NRF24L01_Initv+0xb0>)
 8002832:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <_Z17LED_NRF24L01_Initv+0xb8>)
 8002834:	601a      	str	r2, [r3, #0]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P0, (uint8_t*)&OwnAddress, 4); //Store main broadcast receive address
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <_Z17LED_NRF24L01_Initv+0xb0>)
 8002838:	2204      	movs	r2, #4
 800283a:	0019      	movs	r1, r3
 800283c:	200a      	movs	r0, #10
 800283e:	f002 facf 	bl	8004de0 <NRF24L01_WriteRegisterMulti>
	//NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P1, (uint8_t*)&OwnAddress, 4); //Store main broadcast receive address
	NRF24L01_CE_HIGH;
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4813      	ldr	r0, [pc, #76]	; (8002894 <_Z17LED_NRF24L01_Initv+0xac>)
 8002848:	2201      	movs	r2, #1
 800284a:	0019      	movs	r1, r3
 800284c:	f004 f906 	bl	8006a5c <HAL_GPIO_WritePin>

	/* Go to RX mode */
	NRF24L01_PowerUpRx();
 8002850:	f002 fb22 	bl	8004e98 <NRF24L01_PowerUpRx>

	//Calculate own unique address
	OwnAddress = wrapper[0] ^ wrapper[1] ^ wrapper[2] ^ wrapper[3] ^ wrapper[4] ^ wrapper[5];	//Calculate own address
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3304      	adds	r3, #4
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	405a      	eors	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3308      	adds	r3, #8
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	405a      	eors	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	330c      	adds	r3, #12
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	405a      	eors	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3310      	adds	r3, #16
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	405a      	eors	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3314      	adds	r3, #20
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	405a      	eors	r2, r3
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <_Z17LED_NRF24L01_Initv+0xb0>)
 8002882:	601a      	str	r2, [r3, #0]
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	b002      	add	sp, #8
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000000 	.word	0x20000000
 8002890:	20000098 	.word	0x20000098
 8002894:	48000400 	.word	0x48000400
 8002898:	20000094 	.word	0x20000094
 800289c:	87654321 	.word	0x87654321
 80028a0:	12345678 	.word	0x12345678

080028a4 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	0002      	movs	r2, r0
 80028ac:	1dbb      	adds	r3, r7, #6
 80028ae:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == NRF_IRQ_Pin)
 80028b0:	1dbb      	adds	r3, r7, #6
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d101      	bne.n	80028bc <HAL_GPIO_EXTI_Callback+0x18>
	{
		LED_NRF24L01_IRQ();
 80028b8:	f000 f804 	bl	80028c4 <_Z16LED_NRF24L01_IRQv>
	}
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b002      	add	sp, #8
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <_Z16LED_NRF24L01_IRQv>:


void LED_NRF24L01_IRQ(void)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
	union NRF24L01_DataPacket packet = {0};
 80028ca:	003b      	movs	r3, r7
 80028cc:	0018      	movs	r0, r3
 80028ce:	230c      	movs	r3, #12
 80028d0:	001a      	movs	r2, r3
 80028d2:	2100      	movs	r1, #0
 80028d4:	f006 f9e6 	bl	8008ca4 <memset>
	uint8_t status;

	/* Read interrupts, If data is ready on NRF24L01+ */
	status = NRF24L01_Clear_Interrupts(); //Reads status register and then clears it
 80028d8:	230f      	movs	r3, #15
 80028da:	18fc      	adds	r4, r7, r3
 80028dc:	f002 fcd8 	bl	8005290 <NRF24L01_Clear_Interrupts>
 80028e0:	0003      	movs	r3, r0
 80028e2:	7023      	strb	r3, [r4, #0]
	while (status & (1 << NRF24L01_RX_DR))
 80028e4:	230f      	movs	r3, #15
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2240      	movs	r2, #64	; 0x40
 80028ec:	4013      	ands	r3, r2
 80028ee:	d055      	beq.n	800299c <_Z16LED_NRF24L01_IRQv+0xd8>
	{
		/* Get data from NRF24L01+ */
		NRF24L01_GetData(packet.Data);
 80028f0:	003b      	movs	r3, r7
 80028f2:	0018      	movs	r0, r3
 80028f4:	f002 fb40 	bl	8004f78 <NRF24L01_GetData>

		//Handle data
		switch(packet.CMD)
 80028f8:	003b      	movs	r3, r7
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b10      	cmp	r3, #16
 80028fe:	d845      	bhi.n	800298c <_Z16LED_NRF24L01_IRQv+0xc8>
 8002900:	009a      	lsls	r2, r3, #2
 8002902:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <_Z16LED_NRF24L01_IRQv+0xe0>)
 8002904:	18d3      	adds	r3, r2, r3
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	469f      	mov	pc, r3
		{
			case CMD_PINGREQUEST: // Answer with own address for four times with "random" delays in between
				Exec_PingRequest(packet.PingRequest);
 800290a:	003b      	movs	r3, r7
 800290c:	0018      	movs	r0, r3
 800290e:	f000 f885 	bl	8002a1c <_Z16Exec_PingRequestR20NRF24L01_PingRequest>
				break;
 8002912:	e03c      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_SETGROUP:
				Exec_SetGroup(packet.SetGroup);
 8002914:	003b      	movs	r3, r7
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f8e2 	bl	8002ae0 <_Z13Exec_SetGroupR17NRF24L01_SetGroup>
				break;
 800291c:	e037      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_SETTIMEBASE:
				Exec_SetTimebase(packet.SetTimebase);
 800291e:	003b      	movs	r3, r7
 8002920:	0018      	movs	r0, r3
 8002922:	f000 f8fd 	bl	8002b20 <_Z16Exec_SetTimebaseR20NRF24L01_SetTimebase>
				break;
 8002926:	e032      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_SETRGB:
				Exec_SetRGB(packet.SetRGB);
 8002928:	003b      	movs	r3, r7
 800292a:	0018      	movs	r0, r3
 800292c:	f000 f90e 	bl	8002b4c <_Z11Exec_SetRGBR15NRF24L01_SetRGB>
				break;
 8002930:	e02d      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_SETRGBW:
				Exec_SetRGBW(packet.SetRGBW);
 8002932:	003b      	movs	r3, r7
 8002934:	0018      	movs	r0, r3
 8002936:	f000 f933 	bl	8002ba0 <_Z12Exec_SetRGBWR16NRF24L01_SetRGBW>
				break;
 800293a:	e028      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_SETHSV:
				Exec_SetHSV(packet.SetHSV);
 800293c:	003b      	movs	r3, r7
 800293e:	0018      	movs	r0, r3
 8002940:	f000 f95e 	bl	8002c00 <_Z11Exec_SetHSVR15NRF24L01_SetHSV>
				break;
 8002944:	e023      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_STROBERGB:
				Exec_StrobeRGB(packet.StrobeRGB);
 8002946:	003b      	movs	r3, r7
 8002948:	0018      	movs	r0, r3
 800294a:	f000 f983 	bl	8002c54 <_Z14Exec_StrobeRGBR18NRF24L01_StrobeRGB>
				break;
 800294e:	e01e      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_STROBERGBW:
				Exec_StrobeRGBW(packet.StrobeRGBW);
 8002950:	003b      	movs	r3, r7
 8002952:	0018      	movs	r0, r3
 8002954:	f000 f9ae 	bl	8002cb4 <_Z15Exec_StrobeRGBWR19NRF24L01_StrobeRGBW>
				break;
 8002958:	e019      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_STROBEHSV:
				Exec_StrobeHSV(packet.StrobeHSV);
 800295a:	003b      	movs	r3, r7
 800295c:	0018      	movs	r0, r3
 800295e:	f000 f9e1 	bl	8002d24 <_Z14Exec_StrobeHSVR18NRF24L01_StrobeHSV>
				break;
 8002962:	e014      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_FADEHUE:
				Exec_FadeHue(packet.FadeHue);
 8002964:	003b      	movs	r3, r7
 8002966:	0018      	movs	r0, r3
 8002968:	f000 fa0c 	bl	8002d84 <_Z12Exec_FadeHueR16NRF24L01_FadeHue>
				break;
 800296c:	e00f      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_FADESATURATION:
				Exec_FadeSaturation(packet.FadeSaturation);
 800296e:	003b      	movs	r3, r7
 8002970:	0018      	movs	r0, r3
 8002972:	f000 fa3f 	bl	8002df4 <_Z19Exec_FadeSaturationR23NRF24L01_FadeSaturation>
				break;
 8002976:	e00a      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_FADEVALUE:
				Exec_FadeValue(packet.FadeValue);
 8002978:	003b      	movs	r3, r7
 800297a:	0018      	movs	r0, r3
 800297c:	f000 fa72 	bl	8002e64 <_Z14Exec_FadeValueR18NRF24L01_FadeValue>
				break;
 8002980:	e005      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			case CMD_GETTEMPERATURE:
				Exec_GetTempertaure(packet.GetTemperature);
 8002982:	003b      	movs	r3, r7
 8002984:	0018      	movs	r0, r3
 8002986:	f000 faa5 	bl	8002ed4 <_Z19Exec_GetTempertaureR23NRF24L01_GetTemperature>
				break;
 800298a:	e000      	b.n	800298e <_Z16LED_NRF24L01_IRQv+0xca>

			default:
				break;
 800298c:	46c0      	nop			; (mov r8, r8)
		}
		status = NRF24L01_Clear_Interrupts(); //Reads status register and then clears it
 800298e:	230f      	movs	r3, #15
 8002990:	18fc      	adds	r4, r7, r3
 8002992:	f002 fc7d 	bl	8005290 <NRF24L01_Clear_Interrupts>
 8002996:	0003      	movs	r3, r0
 8002998:	7023      	strb	r3, [r4, #0]
	while (status & (1 << NRF24L01_RX_DR))
 800299a:	e7a3      	b.n	80028e4 <_Z16LED_NRF24L01_IRQv+0x20>
	}
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b005      	add	sp, #20
 80029a2:	bd90      	pop	{r4, r7, pc}
 80029a4:	08008f00 	.word	0x08008f00

080029a8 <_Z19LED_NRF24L01_WaitTxh>:


void LED_NRF24L01_WaitTx(uint8_t timeout)
{
 80029a8:	b5b0      	push	{r4, r5, r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	0002      	movs	r2, r0
 80029b0:	1dfb      	adds	r3, r7, #7
 80029b2:	701a      	strb	r2, [r3, #0]
	uint32_t starttime;
	uint8_t status;

	//Wait for previous transfer to finish or timeout
	starttime = HAL_GetTick();
 80029b4:	f003 f92e 	bl	8005c14 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	60fb      	str	r3, [r7, #12]
	while((HAL_GetTick() - starttime) < timeout)
 80029bc:	f003 f92a 	bl	8005c14 <HAL_GetTick>
 80029c0:	0002      	movs	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad2      	subs	r2, r2, r3
 80029c6:	1dfb      	adds	r3, r7, #7
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	419b      	sbcs	r3, r3
 80029ce:	425b      	negs	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <_Z19LED_NRF24L01_WaitTxh+0x48>
	{
		status = NRF24L01_GetStatus();
 80029d6:	250b      	movs	r5, #11
 80029d8:	197c      	adds	r4, r7, r5
 80029da:	f002 faf1 	bl	8004fc0 <NRF24L01_GetStatus>
 80029de:	0003      	movs	r3, r0
 80029e0:	7023      	strb	r3, [r4, #0]
		if (!NRF24L01_CHECK_BIT(status, NRF24L01_TX_FULL))
 80029e2:	197b      	adds	r3, r7, r5
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2201      	movs	r2, #1
 80029e8:	4013      	ands	r3, r2
 80029ea:	d000      	beq.n	80029ee <_Z19LED_NRF24L01_WaitTxh+0x46>
	while((HAL_GetTick() - starttime) < timeout)
 80029ec:	e7e6      	b.n	80029bc <_Z19LED_NRF24L01_WaitTxh+0x14>
		{
			break; //New data can be sent once there is some free room in the TX FIFO :)
 80029ee:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b004      	add	sp, #16
 80029f6:	bdb0      	pop	{r4, r5, r7, pc}

080029f8 <_Z17LED_NRF24L01_SendPh>:


void LED_NRF24L01_Send(uint8_t* data)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	//Wait for previous transfer to finish or timeout
	LED_NRF24L01_WaitTx(5);
 8002a00:	2005      	movs	r0, #5
 8002a02:	f7ff ffd1 	bl	80029a8 <_Z19LED_NRF24L01_WaitTxh>
	//Send new data
	NRF24L01_Transmit(data);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f002 fa71 	bl	8004ef0 <NRF24L01_Transmit>
	//Delay after sending so that data is acutally send (don't know why this is neccessary)
	HAL_Delay(2);
 8002a0e:	2002      	movs	r0, #2
 8002a10:	f003 f90a 	bl	8005c28 <HAL_Delay>
}
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b002      	add	sp, #8
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_Z16Exec_PingRequestR20NRF24L01_PingRequest>:



inline void Exec_PingRequest(struct NRF24L01_PingRequest &packet)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	((struct NRF24L01_PingAnswer*)&packet)->CMD = CMD_PINGREQUESTANSWER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	701a      	strb	r2, [r3, #0]
	((struct NRF24L01_PingAnswer*)&packet)->SlaveAddress = OwnAddress;
 8002a2a:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <_Z16Exec_PingRequestR20NRF24L01_PingRequest+0xc0>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3301      	adds	r3, #1
 8002a32:	21ff      	movs	r1, #255	; 0xff
 8002a34:	4011      	ands	r1, r2
 8002a36:	000c      	movs	r4, r1
 8002a38:	7819      	ldrb	r1, [r3, #0]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	4001      	ands	r1, r0
 8002a3e:	1c08      	adds	r0, r1, #0
 8002a40:	1c21      	adds	r1, r4, #0
 8002a42:	4301      	orrs	r1, r0
 8002a44:	7019      	strb	r1, [r3, #0]
 8002a46:	0a11      	lsrs	r1, r2, #8
 8002a48:	20ff      	movs	r0, #255	; 0xff
 8002a4a:	4001      	ands	r1, r0
 8002a4c:	000c      	movs	r4, r1
 8002a4e:	7859      	ldrb	r1, [r3, #1]
 8002a50:	2000      	movs	r0, #0
 8002a52:	4001      	ands	r1, r0
 8002a54:	1c08      	adds	r0, r1, #0
 8002a56:	1c21      	adds	r1, r4, #0
 8002a58:	4301      	orrs	r1, r0
 8002a5a:	7059      	strb	r1, [r3, #1]
 8002a5c:	0c11      	lsrs	r1, r2, #16
 8002a5e:	20ff      	movs	r0, #255	; 0xff
 8002a60:	4001      	ands	r1, r0
 8002a62:	000c      	movs	r4, r1
 8002a64:	7899      	ldrb	r1, [r3, #2]
 8002a66:	2000      	movs	r0, #0
 8002a68:	4001      	ands	r1, r0
 8002a6a:	1c08      	adds	r0, r1, #0
 8002a6c:	1c21      	adds	r1, r4, #0
 8002a6e:	4301      	orrs	r1, r0
 8002a70:	7099      	strb	r1, [r3, #2]
 8002a72:	0e10      	lsrs	r0, r2, #24
 8002a74:	78da      	ldrb	r2, [r3, #3]
 8002a76:	2100      	movs	r1, #0
 8002a78:	400a      	ands	r2, r1
 8002a7a:	1c11      	adds	r1, r2, #0
 8002a7c:	1c02      	adds	r2, r0, #0
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	70da      	strb	r2, [r3, #3]
	//Wait for a random time before answering
	HAL_Delay(((NRF24L01_DataPacket*)&packet)->Data[1]);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	785b      	ldrb	r3, [r3, #1]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f003 f8ce 	bl	8005c28 <HAL_Delay>
	LED_NRF24L01_Send(((NRF24L01_DataPacket*)&packet)->Data);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7ff ffb2 	bl	80029f8 <_Z17LED_NRF24L01_SendPh>
	//Wait again for a random time before answering
	HAL_Delay(((NRF24L01_DataPacket*)&packet)->Data[2]);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	789b      	ldrb	r3, [r3, #2]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f003 f8c5 	bl	8005c28 <HAL_Delay>
	LED_NRF24L01_Send(((NRF24L01_DataPacket*)&packet)->Data);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff ffa9 	bl	80029f8 <_Z17LED_NRF24L01_SendPh>
	//Wait again for a random time before answering
	HAL_Delay(((NRF24L01_DataPacket*)&packet)->Data[3]);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	78db      	ldrb	r3, [r3, #3]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f003 f8bc 	bl	8005c28 <HAL_Delay>
	LED_NRF24L01_Send(((NRF24L01_DataPacket*)&packet)->Data);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f7ff ffa0 	bl	80029f8 <_Z17LED_NRF24L01_SendPh>
	//Wait again for a random time before answering
	HAL_Delay(((NRF24L01_DataPacket*)&packet)->Data[4]);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	791b      	ldrb	r3, [r3, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f003 f8b3 	bl	8005c28 <HAL_Delay>
	LED_NRF24L01_Send(((NRF24L01_DataPacket*)&packet)->Data);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7ff ff97 	bl	80029f8 <_Z17LED_NRF24L01_SendPh>
	LED_NRF24L01_WaitTx(5);
 8002aca:	2005      	movs	r0, #5
 8002acc:	f7ff ff6c 	bl	80029a8 <_Z19LED_NRF24L01_WaitTxh>
	NRF24L01_PowerUpRx();
 8002ad0:	f002 f9e2 	bl	8004e98 <NRF24L01_PowerUpRx>
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b003      	add	sp, #12
 8002ada:	bd90      	pop	{r4, r7, pc}
 8002adc:	20000094 	.word	0x20000094

08002ae0 <_Z13Exec_SetGroupR17NRF24L01_SetGroup>:



inline void Exec_SetGroup(struct NRF24L01_SetGroup &packet)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	if(packet.SlaveAddress == OwnAddress)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	785a      	ldrb	r2, [r3, #1]
 8002aec:	7899      	ldrb	r1, [r3, #2]
 8002aee:	0209      	lsls	r1, r1, #8
 8002af0:	430a      	orrs	r2, r1
 8002af2:	78d9      	ldrb	r1, [r3, #3]
 8002af4:	0409      	lsls	r1, r1, #16
 8002af6:	430a      	orrs	r2, r1
 8002af8:	791b      	ldrb	r3, [r3, #4]
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	4313      	orrs	r3, r2
 8002afe:	001a      	movs	r2, r3
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <_Z13Exec_SetGroupR17NRF24L01_SetGroup+0x38>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d103      	bne.n	8002b10 <_Z13Exec_SetGroupR17NRF24L01_SetGroup+0x30>
	{
		OwnGroup = packet.GroupID;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	795a      	ldrb	r2, [r3, #5]
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <_Z13Exec_SetGroupR17NRF24L01_SetGroup+0x3c>)
 8002b0e:	701a      	strb	r2, [r3, #0]
	}
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000094 	.word	0x20000094
 8002b1c:	20000098 	.word	0x20000098

08002b20 <_Z16Exec_SetTimebaseR20NRF24L01_SetTimebase>:



inline void Exec_SetTimebase(struct NRF24L01_SetTimebase &packet)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	LED_UpdateTimebase(packet.Timebase);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	785a      	ldrb	r2, [r3, #1]
 8002b2c:	7899      	ldrb	r1, [r3, #2]
 8002b2e:	0209      	lsls	r1, r1, #8
 8002b30:	430a      	orrs	r2, r1
 8002b32:	78d9      	ldrb	r1, [r3, #3]
 8002b34:	0409      	lsls	r1, r1, #16
 8002b36:	430a      	orrs	r2, r1
 8002b38:	791b      	ldrb	r3, [r3, #4]
 8002b3a:	061b      	lsls	r3, r3, #24
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 fedc 	bl	80038fc <_Z18LED_UpdateTimebasem>
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b002      	add	sp, #8
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_Z11Exec_SetRGBR15NRF24L01_SetRGB>:



inline void Exec_SetRGB(struct NRF24L01_SetRGB &packet)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <_Z11Exec_SetRGBR15NRF24L01_SetRGB+0x1c>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	785a      	ldrb	r2, [r3, #1]
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <_Z11Exec_SetRGBR15NRF24L01_SetRGB+0x50>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d114      	bne.n	8002b92 <_Z11Exec_SetRGBR15NRF24L01_SetRGB+0x46>
	{
		LED_SetModeRGB(packet.Red, packet.Green, packet.Blue);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	789a      	ldrb	r2, [r3, #2]
 8002b6c:	78db      	ldrb	r3, [r3, #3]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	4313      	orrs	r3, r2
 8002b72:	b298      	uxth	r0, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	791a      	ldrb	r2, [r3, #4]
 8002b78:	795b      	ldrb	r3, [r3, #5]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b299      	uxth	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	799a      	ldrb	r2, [r3, #6]
 8002b84:	79db      	ldrb	r3, [r3, #7]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	f000 fed1 	bl	8003934 <_Z14LED_SetModeRGBttt>
	}
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b002      	add	sp, #8
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	20000098 	.word	0x20000098

08002ba0 <_Z12Exec_SetRGBWR16NRF24L01_SetRGBW>:



inline void Exec_SetRGBW(struct NRF24L01_SetRGBW &packet)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <_Z12Exec_SetRGBWR16NRF24L01_SetRGBW+0x1c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	785a      	ldrb	r2, [r3, #1]
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <_Z12Exec_SetRGBWR16NRF24L01_SetRGBW+0x5c>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d11a      	bne.n	8002bf2 <_Z12Exec_SetRGBWR16NRF24L01_SetRGBW+0x52>
	{
		LED_SetModeRGBW(packet.Red, packet.Green, packet.Blue, packet.White);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	789a      	ldrb	r2, [r3, #2]
 8002bc0:	78db      	ldrb	r3, [r3, #3]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b298      	uxth	r0, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	791a      	ldrb	r2, [r3, #4]
 8002bcc:	795b      	ldrb	r3, [r3, #5]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b299      	uxth	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	799a      	ldrb	r2, [r3, #6]
 8002bd8:	79db      	ldrb	r3, [r3, #7]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b29c      	uxth	r4, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	7a1a      	ldrb	r2, [r3, #8]
 8002be4:	7a5b      	ldrb	r3, [r3, #9]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	0022      	movs	r2, r4
 8002bee:	f000 fec3 	bl	8003978 <_Z15LED_SetModeRGBWtttt>
	}
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b003      	add	sp, #12
 8002bf8:	bd90      	pop	{r4, r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	20000098 	.word	0x20000098

08002c00 <_Z11Exec_SetHSVR15NRF24L01_SetHSV>:



inline void Exec_SetHSV(struct NRF24L01_SetHSV &packet)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	785b      	ldrb	r3, [r3, #1]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <_Z11Exec_SetHSVR15NRF24L01_SetHSV+0x1c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	785a      	ldrb	r2, [r3, #1]
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <_Z11Exec_SetHSVR15NRF24L01_SetHSV+0x50>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d114      	bne.n	8002c46 <_Z11Exec_SetHSVR15NRF24L01_SetHSV+0x46>
	{
		LED_SetModeHSV(packet.Hue, packet.Saturation, packet.Value);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	789a      	ldrb	r2, [r3, #2]
 8002c20:	78db      	ldrb	r3, [r3, #3]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	4313      	orrs	r3, r2
 8002c26:	b298      	uxth	r0, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	791a      	ldrb	r2, [r3, #4]
 8002c2c:	795b      	ldrb	r3, [r3, #5]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	4313      	orrs	r3, r2
 8002c32:	b299      	uxth	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	799a      	ldrb	r2, [r3, #6]
 8002c38:	79db      	ldrb	r3, [r3, #7]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	001a      	movs	r2, r3
 8002c42:	f000 fec1 	bl	80039c8 <_Z14LED_SetModeHSVttt>
	}
}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b002      	add	sp, #8
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	20000098 	.word	0x20000098

08002c54 <_Z14Exec_StrobeRGBR18NRF24L01_StrobeRGB>:



inline void Exec_StrobeRGB(struct NRF24L01_StrobeRGB &packet)
{
 8002c54:	b5b0      	push	{r4, r5, r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	6078      	str	r0, [r7, #4]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	785b      	ldrb	r3, [r3, #1]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <_Z14Exec_StrobeRGBR18NRF24L01_StrobeRGB+0x1c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	785a      	ldrb	r2, [r3, #1]
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <_Z14Exec_StrobeRGBR18NRF24L01_StrobeRGB+0x5c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d11a      	bne.n	8002ca6 <_Z14Exec_StrobeRGBR18NRF24L01_StrobeRGB+0x52>
	{
		LED_SetModeStrobeRGB(packet.Period, packet.Count, packet.Red, packet.Green, packet.Blue);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7898      	ldrb	r0, [r3, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	78d9      	ldrb	r1, [r3, #3]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	791a      	ldrb	r2, [r3, #4]
 8002c7c:	795b      	ldrb	r3, [r3, #5]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	4313      	orrs	r3, r2
 8002c82:	b29c      	uxth	r4, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	799a      	ldrb	r2, [r3, #6]
 8002c88:	79db      	ldrb	r3, [r3, #7]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	b29d      	uxth	r5, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7a1a      	ldrb	r2, [r3, #8]
 8002c94:	7a5b      	ldrb	r3, [r3, #9]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	002b      	movs	r3, r5
 8002ca0:	0022      	movs	r2, r4
 8002ca2:	f000 fed1 	bl	8003a48 <_Z20LED_SetModeStrobeRGBhhttt>
	}
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bdb0      	pop	{r4, r5, r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000098 	.word	0x20000098

08002cb4 <_Z15Exec_StrobeRGBWR19NRF24L01_StrobeRGBW>:



inline void Exec_StrobeRGBW(struct NRF24L01_StrobeRGBW &packet)
{
 8002cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	6078      	str	r0, [r7, #4]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	785b      	ldrb	r3, [r3, #1]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <_Z15Exec_StrobeRGBWR19NRF24L01_StrobeRGBW+0x1c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	785a      	ldrb	r2, [r3, #1]
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <_Z15Exec_StrobeRGBWR19NRF24L01_StrobeRGBW+0x6c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d122      	bne.n	8002d16 <_Z15Exec_StrobeRGBWR19NRF24L01_StrobeRGBW+0x62>
	{
		LED_SetModeStrobeRGBW(packet.Period, packet.Count, packet.Red, packet.Green, packet.Blue, packet.White);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7898      	ldrb	r0, [r3, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	78dc      	ldrb	r4, [r3, #3]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	791a      	ldrb	r2, [r3, #4]
 8002cdc:	795b      	ldrb	r3, [r3, #5]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	b29d      	uxth	r5, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	799a      	ldrb	r2, [r3, #6]
 8002ce8:	79db      	ldrb	r3, [r3, #7]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	4313      	orrs	r3, r2
 8002cee:	b29e      	uxth	r6, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7a1a      	ldrb	r2, [r3, #8]
 8002cf4:	7a5b      	ldrb	r3, [r3, #9]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7a99      	ldrb	r1, [r3, #10]
 8002d00:	7adb      	ldrb	r3, [r3, #11]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	430b      	orrs	r3, r1
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	9200      	str	r2, [sp, #0]
 8002d0c:	0033      	movs	r3, r6
 8002d0e:	002a      	movs	r2, r5
 8002d10:	0021      	movs	r1, r4
 8002d12:	f000 fed7 	bl	8003ac4 <_Z21LED_SetModeStrobeRGBWhhtttt>
	}
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b003      	add	sp, #12
 8002d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	20000098 	.word	0x20000098

08002d24 <_Z14Exec_StrobeHSVR18NRF24L01_StrobeHSV>:



inline void Exec_StrobeHSV(struct NRF24L01_StrobeHSV &packet)
{
 8002d24:	b5b0      	push	{r4, r5, r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	6078      	str	r0, [r7, #4]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	785b      	ldrb	r3, [r3, #1]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <_Z14Exec_StrobeHSVR18NRF24L01_StrobeHSV+0x1c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	785a      	ldrb	r2, [r3, #1]
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <_Z14Exec_StrobeHSVR18NRF24L01_StrobeHSV+0x5c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d11a      	bne.n	8002d76 <_Z14Exec_StrobeHSVR18NRF24L01_StrobeHSV+0x52>
	{
		LED_SetModeStrobeHSV(packet.Period, packet.Count, packet.Hue, packet.Saturation, packet.Value);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7898      	ldrb	r0, [r3, #2]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	78d9      	ldrb	r1, [r3, #3]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	791a      	ldrb	r2, [r3, #4]
 8002d4c:	795b      	ldrb	r3, [r3, #5]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	4313      	orrs	r3, r2
 8002d52:	b29c      	uxth	r4, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	799a      	ldrb	r2, [r3, #6]
 8002d58:	79db      	ldrb	r3, [r3, #7]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	b29d      	uxth	r5, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7a1a      	ldrb	r2, [r3, #8]
 8002d64:	7a5b      	ldrb	r3, [r3, #9]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	002b      	movs	r3, r5
 8002d70:	0022      	movs	r2, r4
 8002d72:	f000 fee9 	bl	8003b48 <_Z20LED_SetModeStrobeHSVhhttt>
	}
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	20000098 	.word	0x20000098

08002d84 <_Z12Exec_FadeHueR16NRF24L01_FadeHue>:



inline void Exec_FadeHue(struct NRF24L01_FadeHue &packet)
{
 8002d84:	b5b0      	push	{r4, r5, r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	6078      	str	r0, [r7, #4]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	785b      	ldrb	r3, [r3, #1]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <_Z12Exec_FadeHueR16NRF24L01_FadeHue+0x1c>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	785a      	ldrb	r2, [r3, #1]
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <_Z12Exec_FadeHueR16NRF24L01_FadeHue+0x6c>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d122      	bne.n	8002de6 <_Z12Exec_FadeHueR16NRF24L01_FadeHue+0x62>
	{
		LED_SetModeFadeHue(packet.Period, packet.Hue_Max, packet.Hue_Min, packet.Saturation, packet.Value);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	789a      	ldrb	r2, [r3, #2]
 8002da4:	78db      	ldrb	r3, [r3, #3]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	4313      	orrs	r3, r2
 8002daa:	b298      	uxth	r0, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	791a      	ldrb	r2, [r3, #4]
 8002db0:	795b      	ldrb	r3, [r3, #5]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	4313      	orrs	r3, r2
 8002db6:	b299      	uxth	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	799a      	ldrb	r2, [r3, #6]
 8002dbc:	79db      	ldrb	r3, [r3, #7]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	b29c      	uxth	r4, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7a1a      	ldrb	r2, [r3, #8]
 8002dc8:	7a5b      	ldrb	r3, [r3, #9]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	b29d      	uxth	r5, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7a9a      	ldrb	r2, [r3, #10]
 8002dd4:	7adb      	ldrb	r3, [r3, #11]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	002b      	movs	r3, r5
 8002de0:	0022      	movs	r2, r4
 8002de2:	f000 ff0d 	bl	8003c00 <_Z18LED_SetModeFadeHuettttt>
	}
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b002      	add	sp, #8
 8002dec:	bdb0      	pop	{r4, r5, r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	20000098 	.word	0x20000098

08002df4 <_Z19Exec_FadeSaturationR23NRF24L01_FadeSaturation>:



inline void Exec_FadeSaturation(struct NRF24L01_FadeSaturation &packet)
{
 8002df4:	b5b0      	push	{r4, r5, r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	6078      	str	r0, [r7, #4]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	785b      	ldrb	r3, [r3, #1]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <_Z19Exec_FadeSaturationR23NRF24L01_FadeSaturation+0x1c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	785a      	ldrb	r2, [r3, #1]
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <_Z19Exec_FadeSaturationR23NRF24L01_FadeSaturation+0x6c>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d122      	bne.n	8002e56 <_Z19Exec_FadeSaturationR23NRF24L01_FadeSaturation+0x62>
	{
		LED_SetModeFadeSaturation(packet.Period, packet.Hue, packet.Saturation_Max, packet.Saturation_Min, packet.Value);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	789a      	ldrb	r2, [r3, #2]
 8002e14:	78db      	ldrb	r3, [r3, #3]
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	b298      	uxth	r0, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	791a      	ldrb	r2, [r3, #4]
 8002e20:	795b      	ldrb	r3, [r3, #5]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	4313      	orrs	r3, r2
 8002e26:	b299      	uxth	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	799a      	ldrb	r2, [r3, #6]
 8002e2c:	79db      	ldrb	r3, [r3, #7]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b29c      	uxth	r4, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7a1a      	ldrb	r2, [r3, #8]
 8002e38:	7a5b      	ldrb	r3, [r3, #9]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	b29d      	uxth	r5, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7a9a      	ldrb	r2, [r3, #10]
 8002e44:	7adb      	ldrb	r3, [r3, #11]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	002b      	movs	r3, r5
 8002e50:	0022      	movs	r2, r4
 8002e52:	f000 ff17 	bl	8003c84 <_Z25LED_SetModeFadeSaturationttttt>
	}
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b002      	add	sp, #8
 8002e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	20000098 	.word	0x20000098

08002e64 <_Z14Exec_FadeValueR18NRF24L01_FadeValue>:



inline void Exec_FadeValue(struct NRF24L01_FadeValue &packet)
{
 8002e64:	b5b0      	push	{r4, r5, r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	6078      	str	r0, [r7, #4]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <_Z14Exec_FadeValueR18NRF24L01_FadeValue+0x1c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	785a      	ldrb	r2, [r3, #1]
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <_Z14Exec_FadeValueR18NRF24L01_FadeValue+0x6c>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d122      	bne.n	8002ec6 <_Z14Exec_FadeValueR18NRF24L01_FadeValue+0x62>
	{
		LED_SetModeFadeValue(packet.Period, packet.Hue, packet.Saturation, packet.Value_Max, packet.Value_Min);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	789a      	ldrb	r2, [r3, #2]
 8002e84:	78db      	ldrb	r3, [r3, #3]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b298      	uxth	r0, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	791a      	ldrb	r2, [r3, #4]
 8002e90:	795b      	ldrb	r3, [r3, #5]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	4313      	orrs	r3, r2
 8002e96:	b299      	uxth	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	799a      	ldrb	r2, [r3, #6]
 8002e9c:	79db      	ldrb	r3, [r3, #7]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	b29c      	uxth	r4, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7a1a      	ldrb	r2, [r3, #8]
 8002ea8:	7a5b      	ldrb	r3, [r3, #9]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	4313      	orrs	r3, r2
 8002eae:	b29d      	uxth	r5, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7a9a      	ldrb	r2, [r3, #10]
 8002eb4:	7adb      	ldrb	r3, [r3, #11]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	002b      	movs	r3, r5
 8002ec0:	0022      	movs	r2, r4
 8002ec2:	f000 ff21 	bl	8003d08 <_Z20LED_SetModeFadeValuettttt>
	}
}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b002      	add	sp, #8
 8002ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	20000098 	.word	0x20000098

08002ed4 <_Z19Exec_GetTempertaureR23NRF24L01_GetTemperature>:



inline void Exec_GetTempertaure(struct NRF24L01_GetTemperature &packet)
{
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	((struct NRF24L01_GetTemperatureAnswer*)&packet)->CMD = CMD_GETTEMPERATUREANSWER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2290      	movs	r2, #144	; 0x90
 8002ee0:	701a      	strb	r2, [r3, #0]
	((struct NRF24L01_GetTemperatureAnswer*)&packet)->LED_Temperature = LED_Thermomodel_GetTemp();
 8002ee2:	f001 f8dd 	bl	80040a0 <_Z23LED_Thermomodel_GetTempv>
 8002ee6:	1c02      	adds	r2, r0, #0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3301      	adds	r3, #1
 8002eec:	21ff      	movs	r1, #255	; 0xff
 8002eee:	4011      	ands	r1, r2
 8002ef0:	000c      	movs	r4, r1
 8002ef2:	7819      	ldrb	r1, [r3, #0]
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	4001      	ands	r1, r0
 8002ef8:	1c08      	adds	r0, r1, #0
 8002efa:	1c21      	adds	r1, r4, #0
 8002efc:	4301      	orrs	r1, r0
 8002efe:	7019      	strb	r1, [r3, #0]
 8002f00:	0a11      	lsrs	r1, r2, #8
 8002f02:	20ff      	movs	r0, #255	; 0xff
 8002f04:	4001      	ands	r1, r0
 8002f06:	000c      	movs	r4, r1
 8002f08:	7859      	ldrb	r1, [r3, #1]
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	4001      	ands	r1, r0
 8002f0e:	1c08      	adds	r0, r1, #0
 8002f10:	1c21      	adds	r1, r4, #0
 8002f12:	4301      	orrs	r1, r0
 8002f14:	7059      	strb	r1, [r3, #1]
 8002f16:	0c11      	lsrs	r1, r2, #16
 8002f18:	20ff      	movs	r0, #255	; 0xff
 8002f1a:	4001      	ands	r1, r0
 8002f1c:	000c      	movs	r4, r1
 8002f1e:	7899      	ldrb	r1, [r3, #2]
 8002f20:	2000      	movs	r0, #0
 8002f22:	4001      	ands	r1, r0
 8002f24:	1c08      	adds	r0, r1, #0
 8002f26:	1c21      	adds	r1, r4, #0
 8002f28:	4301      	orrs	r1, r0
 8002f2a:	7099      	strb	r1, [r3, #2]
 8002f2c:	0e10      	lsrs	r0, r2, #24
 8002f2e:	78da      	ldrb	r2, [r3, #3]
 8002f30:	2100      	movs	r1, #0
 8002f32:	400a      	ands	r2, r1
 8002f34:	1c11      	adds	r1, r2, #0
 8002f36:	1c02      	adds	r2, r0, #0
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	70da      	strb	r2, [r3, #3]
	//Transmit answer once
	LED_NRF24L01_Send((uint8_t*)&packet);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f7ff fd5a 	bl	80029f8 <_Z17LED_NRF24L01_SendPh>
	LED_NRF24L01_WaitTx(5);
 8002f44:	2005      	movs	r0, #5
 8002f46:	f7ff fd2f 	bl	80029a8 <_Z19LED_NRF24L01_WaitTxh>
	NRF24L01_PowerUpRx();
 8002f4a:	f001 ffa5 	bl	8004e98 <NRF24L01_PowerUpRx>
}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b003      	add	sp, #12
 8002f54:	bd90      	pop	{r4, r7, pc}
	...

08002f58 <_Z12LED_PWM_Initv>:
uint16_t _led_red, _led_green, _led_blue, _led_white = 0;



void LED_PWM_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
	//Disable PWM boost
	PWMboost = 0;
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <_Z12LED_PWM_Initv+0x6c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]

	//Set duty cycles to 0
	LED_PWM_SetRGBW(0, 0, 0, 0);
 8002f62:	2300      	movs	r3, #0
 8002f64:	2200      	movs	r2, #0
 8002f66:	2100      	movs	r1, #0
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f000 f831 	bl	8002fd0 <_Z15LED_PWM_SetRGBWtttt>

	//Enable PWM output
	HAL_TIM_PWM_Start(&htim1, LED_R_CH_SLOW);
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <_Z12LED_PWM_Initv+0x70>)
 8002f70:	2108      	movs	r1, #8
 8002f72:	0018      	movs	r0, r3
 8002f74:	f004 fbe2 	bl	800773c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, LED_G_CH_SLOW);
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <_Z12LED_PWM_Initv+0x70>)
 8002f7a:	210c      	movs	r1, #12
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f004 fbdd 	bl	800773c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, LED_B_CH_SLOW);
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <_Z12LED_PWM_Initv+0x70>)
 8002f84:	2100      	movs	r1, #0
 8002f86:	0018      	movs	r0, r3
 8002f88:	f004 fbd8 	bl	800773c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, LED_W_CH_SLOW);
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <_Z12LED_PWM_Initv+0x70>)
 8002f8e:	2104      	movs	r1, #4
 8002f90:	0018      	movs	r0, r3
 8002f92:	f004 fbd3 	bl	800773c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, LED_R_CH_FAST);
 8002f96:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <_Z12LED_PWM_Initv+0x74>)
 8002f98:	2100      	movs	r1, #0
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f004 fbce 	bl	800773c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, LED_G_CH_FAST);
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <_Z12LED_PWM_Initv+0x74>)
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f004 fbc9 	bl	800773c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, LED_B_CH_FAST);
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <_Z12LED_PWM_Initv+0x74>)
 8002fac:	2108      	movs	r1, #8
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f004 fbc4 	bl	800773c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, LED_W_CH_FAST);
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <_Z12LED_PWM_Initv+0x74>)
 8002fb6:	210c      	movs	r1, #12
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f004 fbbf 	bl	800773c <HAL_TIM_PWM_Start>
}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000099 	.word	0x20000099
 8002fc8:	20000208 	.word	0x20000208
 8002fcc:	20000248 	.word	0x20000248

08002fd0 <_Z15LED_PWM_SetRGBWtttt>:



void LED_PWM_SetRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{
 8002fd0:	b5b0      	push	{r4, r5, r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	0005      	movs	r5, r0
 8002fd8:	000c      	movs	r4, r1
 8002fda:	0010      	movs	r0, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	1dbb      	adds	r3, r7, #6
 8002fe0:	1c2a      	adds	r2, r5, #0
 8002fe2:	801a      	strh	r2, [r3, #0]
 8002fe4:	1d3b      	adds	r3, r7, #4
 8002fe6:	1c22      	adds	r2, r4, #0
 8002fe8:	801a      	strh	r2, [r3, #0]
 8002fea:	1cbb      	adds	r3, r7, #2
 8002fec:	1c02      	adds	r2, r0, #0
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	003b      	movs	r3, r7
 8002ff2:	1c0a      	adds	r2, r1, #0
 8002ff4:	801a      	strh	r2, [r3, #0]
	_led_red = red;
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <_Z15LED_PWM_SetRGBWtttt+0x78>)
 8002ff8:	1dba      	adds	r2, r7, #6
 8002ffa:	8812      	ldrh	r2, [r2, #0]
 8002ffc:	801a      	strh	r2, [r3, #0]
	_led_green = green;
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <_Z15LED_PWM_SetRGBWtttt+0x7c>)
 8003000:	1d3a      	adds	r2, r7, #4
 8003002:	8812      	ldrh	r2, [r2, #0]
 8003004:	801a      	strh	r2, [r3, #0]
	_led_blue = blue;
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <_Z15LED_PWM_SetRGBWtttt+0x80>)
 8003008:	1cba      	adds	r2, r7, #2
 800300a:	8812      	ldrh	r2, [r2, #0]
 800300c:	801a      	strh	r2, [r3, #0]
	_led_white = white;
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <_Z15LED_PWM_SetRGBWtttt+0x84>)
 8003010:	003a      	movs	r2, r7
 8003012:	8812      	ldrh	r2, [r2, #0]
 8003014:	801a      	strh	r2, [r3, #0]
		LED_PWM_SetPWM_TIM(LED_R_CH_SLOW, LED_R_CH_FAST, red);
		LED_PWM_SetPWM_TIM(LED_G_CH_SLOW, LED_G_CH_FAST, green);
		LED_PWM_SetPWM_TIM(LED_B_CH_SLOW, LED_B_CH_FAST, blue);
		LED_PWM_SetPWM_TIM(LED_W_CH_SLOW, LED_W_CH_FAST, white);
	#else
		LED_PWM_SetPWM_TIM(LED_R_CH_SLOW, LED_R_CH_FAST, blue);
 8003016:	1cbb      	adds	r3, r7, #2
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	001a      	movs	r2, r3
 800301c:	2100      	movs	r1, #0
 800301e:	2008      	movs	r0, #8
 8003020:	f000 f81a 	bl	8003058 <_Z18LED_PWM_SetPWM_TIMmmt>
		LED_PWM_SetPWM_TIM(LED_G_CH_SLOW, LED_G_CH_FAST, green);
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	001a      	movs	r2, r3
 800302a:	2104      	movs	r1, #4
 800302c:	200c      	movs	r0, #12
 800302e:	f000 f813 	bl	8003058 <_Z18LED_PWM_SetPWM_TIMmmt>
		LED_PWM_SetPWM_TIM(LED_B_CH_SLOW, LED_B_CH_FAST, red);
 8003032:	1dbb      	adds	r3, r7, #6
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	001a      	movs	r2, r3
 8003038:	2108      	movs	r1, #8
 800303a:	2000      	movs	r0, #0
 800303c:	f000 f80c 	bl	8003058 <_Z18LED_PWM_SetPWM_TIMmmt>
	#endif
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b002      	add	sp, #8
 8003046:	bdb0      	pop	{r4, r5, r7, pc}
 8003048:	200000a0 	.word	0x200000a0
 800304c:	200000a2 	.word	0x200000a2
 8003050:	200000a4 	.word	0x200000a4
 8003054:	200000a6 	.word	0x200000a6

08003058 <_Z18LED_PWM_SetPWM_TIMmmt>:



void LED_PWM_SetPWM_TIM(uint32_t channel_slow, uint32_t channel_fast, uint16_t value)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	1dbb      	adds	r3, r7, #6
 8003064:	801a      	strh	r2, [r3, #0]
	uint16_t val_Slow = 65535; //Translates to 100%
 8003066:	2316      	movs	r3, #22
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	2201      	movs	r2, #1
 800306c:	4252      	negs	r2, r2
 800306e:	801a      	strh	r2, [r3, #0]
	uint16_t val_Fast = 0; //Translates to 0%
 8003070:	2314      	movs	r3, #20
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2200      	movs	r2, #0
 8003076:	801a      	strh	r2, [r3, #0]

	if(PWMboost == 0) // Limit max. output current while not boosting
 8003078:	4b48      	ldr	r3, [pc, #288]	; (800319c <_Z18LED_PWM_SetPWM_TIMmmt+0x144>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d111      	bne.n	80030a4 <_Z18LED_PWM_SetPWM_TIMmmt+0x4c>
	{
		value = (value * LED_PWM_STD_PEAK_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT;
 8003080:	1dbb      	adds	r3, r7, #6
 8003082:	881a      	ldrh	r2, [r3, #0]
 8003084:	0013      	movs	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	189b      	adds	r3, r3, r2
 800308a:	011a      	lsls	r2, r3, #4
 800308c:	1ad2      	subs	r2, r2, r3
 800308e:	00d3      	lsls	r3, r2, #3
 8003090:	001a      	movs	r2, r3
 8003092:	23fa      	movs	r3, #250	; 0xfa
 8003094:	0099      	lsls	r1, r3, #2
 8003096:	0010      	movs	r0, r2
 8003098:	f7fd f8c0 	bl	800021c <__divsi3>
 800309c:	0003      	movs	r3, r0
 800309e:	001a      	movs	r2, r3
 80030a0:	1dbb      	adds	r3, r7, #6
 80030a2:	801a      	strh	r2, [r3, #0]
	}

	if(value >= ((65535 * LED_PWM_ANALOG_MIN_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT))
 80030a4:	1dbb      	adds	r3, r7, #6
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	4a3d      	ldr	r2, [pc, #244]	; (80031a0 <_Z18LED_PWM_SetPWM_TIMmmt+0x148>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d90e      	bls.n	80030cc <_Z18LED_PWM_SetPWM_TIMmmt+0x74>
	{ //Only analog dimming
		val_Fast = MapRounded(value, 0, 65535, (1000*LED_PWM_ANALOG_VOLT_MIN)/3300, (1000*LED_PWM_ANALOG_VOLT_MAX)/3300);
 80030ae:	4a3d      	ldr	r2, [pc, #244]	; (80031a4 <_Z18LED_PWM_SetPWM_TIMmmt+0x14c>)
 80030b0:	1dbb      	adds	r3, r7, #6
 80030b2:	8818      	ldrh	r0, [r3, #0]
 80030b4:	4b3c      	ldr	r3, [pc, #240]	; (80031a8 <_Z18LED_PWM_SetPWM_TIMmmt+0x150>)
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	234b      	movs	r3, #75	; 0x4b
 80030ba:	2100      	movs	r1, #0
 80030bc:	f000 f910 	bl	80032e0 <_Z10MapRoundedttttt>
 80030c0:	0003      	movs	r3, r0
 80030c2:	001a      	movs	r2, r3
 80030c4:	2314      	movs	r3, #20
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	e01a      	b.n	8003102 <_Z18LED_PWM_SetPWM_TIMmmt+0xaa>
	}
	else
	{ //Mixed analog and PWM dimming
		val_Fast = MapRounded(((65535 * LED_PWM_ANALOG_MIN_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT), 0, 65535, (1000*LED_PWM_ANALOG_VOLT_MIN)/3300, (1000*LED_PWM_ANALOG_VOLT_MAX)/3300);
 80030cc:	4a35      	ldr	r2, [pc, #212]	; (80031a4 <_Z18LED_PWM_SetPWM_TIMmmt+0x14c>)
 80030ce:	4837      	ldr	r0, [pc, #220]	; (80031ac <_Z18LED_PWM_SetPWM_TIMmmt+0x154>)
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <_Z18LED_PWM_SetPWM_TIMmmt+0x150>)
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	234b      	movs	r3, #75	; 0x4b
 80030d6:	2100      	movs	r1, #0
 80030d8:	f000 f902 	bl	80032e0 <_Z10MapRoundedttttt>
 80030dc:	0003      	movs	r3, r0
 80030de:	001a      	movs	r2, r3
 80030e0:	2314      	movs	r3, #20
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	801a      	strh	r2, [r3, #0]
		val_Slow = MapRounded(value, 0, ((65535 * LED_PWM_ANALOG_MIN_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT), 0, 65535);
 80030e6:	4a31      	ldr	r2, [pc, #196]	; (80031ac <_Z18LED_PWM_SetPWM_TIMmmt+0x154>)
 80030e8:	1dbb      	adds	r3, r7, #6
 80030ea:	8818      	ldrh	r0, [r3, #0]
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <_Z18LED_PWM_SetPWM_TIMmmt+0x14c>)
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2300      	movs	r3, #0
 80030f2:	2100      	movs	r1, #0
 80030f4:	f000 f8f4 	bl	80032e0 <_Z10MapRoundedttttt>
 80030f8:	0003      	movs	r3, r0
 80030fa:	001a      	movs	r2, r3
 80030fc:	2316      	movs	r3, #22
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	801a      	strh	r2, [r3, #0]
	}

	__HAL_TIM_SET_COMPARE(&LED_PWM_FAST_TIMER, channel_fast, val_Fast);
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d106      	bne.n	8003116 <_Z18LED_PWM_SetPWM_TIMmmt+0xbe>
 8003108:	2314      	movs	r3, #20
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	881a      	ldrh	r2, [r3, #0]
 800310e:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <_Z18LED_PWM_SetPWM_TIMmmt+0x158>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	635a      	str	r2, [r3, #52]	; 0x34
 8003114:	e019      	b.n	800314a <_Z18LED_PWM_SetPWM_TIMmmt+0xf2>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d106      	bne.n	800312a <_Z18LED_PWM_SetPWM_TIMmmt+0xd2>
 800311c:	2314      	movs	r3, #20
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	881a      	ldrh	r2, [r3, #0]
 8003122:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <_Z18LED_PWM_SetPWM_TIMmmt+0x158>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	639a      	str	r2, [r3, #56]	; 0x38
 8003128:	e00f      	b.n	800314a <_Z18LED_PWM_SetPWM_TIMmmt+0xf2>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d106      	bne.n	800313e <_Z18LED_PWM_SetPWM_TIMmmt+0xe6>
 8003130:	2314      	movs	r3, #20
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <_Z18LED_PWM_SetPWM_TIMmmt+0x158>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	63da      	str	r2, [r3, #60]	; 0x3c
 800313c:	e005      	b.n	800314a <_Z18LED_PWM_SetPWM_TIMmmt+0xf2>
 800313e:	2314      	movs	r3, #20
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	881a      	ldrh	r2, [r3, #0]
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <_Z18LED_PWM_SetPWM_TIMmmt+0x158>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&LED_PWM_SLOW_TIMER, channel_slow, val_Slow);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <_Z18LED_PWM_SetPWM_TIMmmt+0x106>
 8003150:	2316      	movs	r3, #22
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	881a      	ldrh	r2, [r3, #0]
 8003156:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <_Z18LED_PWM_SetPWM_TIMmmt+0x15c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800315c:	e019      	b.n	8003192 <_Z18LED_PWM_SetPWM_TIMmmt+0x13a>
	__HAL_TIM_SET_COMPARE(&LED_PWM_SLOW_TIMER, channel_slow, val_Slow);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b04      	cmp	r3, #4
 8003162:	d106      	bne.n	8003172 <_Z18LED_PWM_SetPWM_TIMmmt+0x11a>
 8003164:	2316      	movs	r3, #22
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	881a      	ldrh	r2, [r3, #0]
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <_Z18LED_PWM_SetPWM_TIMmmt+0x15c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003170:	e00f      	b.n	8003192 <_Z18LED_PWM_SetPWM_TIMmmt+0x13a>
	__HAL_TIM_SET_COMPARE(&LED_PWM_SLOW_TIMER, channel_slow, val_Slow);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d106      	bne.n	8003186 <_Z18LED_PWM_SetPWM_TIMmmt+0x12e>
 8003178:	2316      	movs	r3, #22
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	881a      	ldrh	r2, [r3, #0]
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <_Z18LED_PWM_SetPWM_TIMmmt+0x15c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003184:	e005      	b.n	8003192 <_Z18LED_PWM_SetPWM_TIMmmt+0x13a>
	__HAL_TIM_SET_COMPARE(&LED_PWM_SLOW_TIMER, channel_slow, val_Slow);
 8003186:	2316      	movs	r3, #22
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	881a      	ldrh	r2, [r3, #0]
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <_Z18LED_PWM_SetPWM_TIMmmt+0x15c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b006      	add	sp, #24
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	20000099 	.word	0x20000099
 80031a0:	00004ccb 	.word	0x00004ccb
 80031a4:	0000ffff 	.word	0x0000ffff
 80031a8:	000002f5 	.word	0x000002f5
 80031ac:	00004ccc 	.word	0x00004ccc
 80031b0:	20000208 	.word	0x20000208
 80031b4:	20000248 	.word	0x20000248

080031b8 <_Z16LED_PWM_SetBoosth>:



void LED_PWM_SetBoost(uint8_t active)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	0002      	movs	r2, r0
 80031c0:	1dfb      	adds	r3, r7, #7
 80031c2:	701a      	strb	r2, [r3, #0]
	PWMboost = active;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <_Z16LED_PWM_SetBoosth+0x28>)
 80031c6:	1dfa      	adds	r2, r7, #7
 80031c8:	7812      	ldrb	r2, [r2, #0]
 80031ca:	701a      	strb	r2, [r3, #0]
	PWMboostTime = HAL_GetTick();
 80031cc:	f002 fd22 	bl	8005c14 <HAL_GetTick>
 80031d0:	0002      	movs	r2, r0
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <_Z16LED_PWM_SetBoosth+0x2c>)
 80031d4:	601a      	str	r2, [r3, #0]
}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	20000099 	.word	0x20000099
 80031e4:	2000009c 	.word	0x2000009c

080031e8 <_Z18LED_PWM_CheckBoostv>:



void LED_PWM_CheckBoost(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
	if((PWMboost != 0) && ((HAL_GetTick() - PWMboostTime) > LED_PWM_BOOST_TIMEOUT))
 80031ec:	4b36      	ldr	r3, [pc, #216]	; (80032c8 <_Z18LED_PWM_CheckBoostv+0xe0>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <_Z18LED_PWM_CheckBoostv+0x20>
 80031f4:	f002 fd0e 	bl	8005c14 <HAL_GetTick>
 80031f8:	0002      	movs	r2, r0
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <_Z18LED_PWM_CheckBoostv+0xe4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b64      	cmp	r3, #100	; 0x64
 8003202:	d901      	bls.n	8003208 <_Z18LED_PWM_CheckBoostv+0x20>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <_Z18LED_PWM_CheckBoostv+0x22>
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d058      	beq.n	80032c0 <_Z18LED_PWM_CheckBoostv+0xd8>
	{
		//Disable boost and DIM LEDs
		PWMboost = 0;
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <_Z18LED_PWM_CheckBoostv+0xe0>)
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
		_led_red = (_led_red * LED_PWM_STD_PEAK_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT;
 8003214:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <_Z18LED_PWM_CheckBoostv+0xe8>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	001a      	movs	r2, r3
 800321a:	0013      	movs	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	189b      	adds	r3, r3, r2
 8003220:	011a      	lsls	r2, r3, #4
 8003222:	1ad2      	subs	r2, r2, r3
 8003224:	00d3      	lsls	r3, r2, #3
 8003226:	001a      	movs	r2, r3
 8003228:	23fa      	movs	r3, #250	; 0xfa
 800322a:	0099      	lsls	r1, r3, #2
 800322c:	0010      	movs	r0, r2
 800322e:	f7fc fff5 	bl	800021c <__divsi3>
 8003232:	0003      	movs	r3, r0
 8003234:	b29a      	uxth	r2, r3
 8003236:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <_Z18LED_PWM_CheckBoostv+0xe8>)
 8003238:	801a      	strh	r2, [r3, #0]
		_led_green = (_led_green * LED_PWM_STD_PEAK_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT;
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <_Z18LED_PWM_CheckBoostv+0xec>)
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	001a      	movs	r2, r3
 8003240:	0013      	movs	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	189b      	adds	r3, r3, r2
 8003246:	011a      	lsls	r2, r3, #4
 8003248:	1ad2      	subs	r2, r2, r3
 800324a:	00d3      	lsls	r3, r2, #3
 800324c:	001a      	movs	r2, r3
 800324e:	23fa      	movs	r3, #250	; 0xfa
 8003250:	0099      	lsls	r1, r3, #2
 8003252:	0010      	movs	r0, r2
 8003254:	f7fc ffe2 	bl	800021c <__divsi3>
 8003258:	0003      	movs	r3, r0
 800325a:	b29a      	uxth	r2, r3
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <_Z18LED_PWM_CheckBoostv+0xec>)
 800325e:	801a      	strh	r2, [r3, #0]
		_led_blue = (_led_blue * LED_PWM_STD_PEAK_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT;
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <_Z18LED_PWM_CheckBoostv+0xf0>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	001a      	movs	r2, r3
 8003266:	0013      	movs	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	189b      	adds	r3, r3, r2
 800326c:	011a      	lsls	r2, r3, #4
 800326e:	1ad2      	subs	r2, r2, r3
 8003270:	00d3      	lsls	r3, r2, #3
 8003272:	001a      	movs	r2, r3
 8003274:	23fa      	movs	r3, #250	; 0xfa
 8003276:	0099      	lsls	r1, r3, #2
 8003278:	0010      	movs	r0, r2
 800327a:	f7fc ffcf 	bl	800021c <__divsi3>
 800327e:	0003      	movs	r3, r0
 8003280:	b29a      	uxth	r2, r3
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <_Z18LED_PWM_CheckBoostv+0xf0>)
 8003284:	801a      	strh	r2, [r3, #0]
		_led_white = (_led_white * LED_PWM_STD_PEAK_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT;
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <_Z18LED_PWM_CheckBoostv+0xf4>)
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	001a      	movs	r2, r3
 800328c:	0013      	movs	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	189b      	adds	r3, r3, r2
 8003292:	011a      	lsls	r2, r3, #4
 8003294:	1ad2      	subs	r2, r2, r3
 8003296:	00d3      	lsls	r3, r2, #3
 8003298:	001a      	movs	r2, r3
 800329a:	23fa      	movs	r3, #250	; 0xfa
 800329c:	0099      	lsls	r1, r3, #2
 800329e:	0010      	movs	r0, r2
 80032a0:	f7fc ffbc 	bl	800021c <__divsi3>
 80032a4:	0003      	movs	r3, r0
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <_Z18LED_PWM_CheckBoostv+0xf4>)
 80032aa:	801a      	strh	r2, [r3, #0]
		LED_PWM_SetRGBW(_led_red, _led_green, _led_blue, _led_white);
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <_Z18LED_PWM_CheckBoostv+0xe8>)
 80032ae:	8818      	ldrh	r0, [r3, #0]
 80032b0:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <_Z18LED_PWM_CheckBoostv+0xec>)
 80032b2:	8819      	ldrh	r1, [r3, #0]
 80032b4:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <_Z18LED_PWM_CheckBoostv+0xf0>)
 80032b6:	881a      	ldrh	r2, [r3, #0]
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <_Z18LED_PWM_CheckBoostv+0xf4>)
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	f7ff fe88 	bl	8002fd0 <_Z15LED_PWM_SetRGBWtttt>
	}
}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	20000099 	.word	0x20000099
 80032cc:	2000009c 	.word	0x2000009c
 80032d0:	200000a0 	.word	0x200000a0
 80032d4:	200000a2 	.word	0x200000a2
 80032d8:	200000a4 	.word	0x200000a4
 80032dc:	200000a6 	.word	0x200000a6

080032e0 <_Z10MapRoundedttttt>:
}



inline uint16_t MapRounded(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 80032e0:	b5b0      	push	{r4, r5, r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	0005      	movs	r5, r0
 80032e8:	000c      	movs	r4, r1
 80032ea:	0010      	movs	r0, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	1dbb      	adds	r3, r7, #6
 80032f0:	1c2a      	adds	r2, r5, #0
 80032f2:	801a      	strh	r2, [r3, #0]
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	1c22      	adds	r2, r4, #0
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	1cbb      	adds	r3, r7, #2
 80032fc:	1c02      	adds	r2, r0, #0
 80032fe:	801a      	strh	r2, [r3, #0]
 8003300:	003b      	movs	r3, r7
 8003302:	1c0a      	adds	r2, r1, #0
 8003304:	801a      	strh	r2, [r3, #0]
	return (uint16_t)(((uint32_t)(x - in_min) * (uint32_t)(out_max - out_min) + (uint32_t)((in_max - in_min) >> 1)) / (uint32_t)(in_max - in_min)) + out_min;
 8003306:	1dbb      	adds	r3, r7, #6
 8003308:	881a      	ldrh	r2, [r3, #0]
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	0019      	movs	r1, r3
 8003312:	2318      	movs	r3, #24
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	881a      	ldrh	r2, [r3, #0]
 8003318:	003b      	movs	r3, r7
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	434b      	muls	r3, r1
 8003320:	1cba      	adds	r2, r7, #2
 8003322:	8811      	ldrh	r1, [r2, #0]
 8003324:	1d3a      	adds	r2, r7, #4
 8003326:	8812      	ldrh	r2, [r2, #0]
 8003328:	1a8a      	subs	r2, r1, r2
 800332a:	1052      	asrs	r2, r2, #1
 800332c:	1898      	adds	r0, r3, r2
 800332e:	1cbb      	adds	r3, r7, #2
 8003330:	881a      	ldrh	r2, [r3, #0]
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	0019      	movs	r1, r3
 800333a:	f7fc fee5 	bl	8000108 <__udivsi3>
 800333e:	0003      	movs	r3, r0
 8003340:	b29a      	uxth	r2, r3
 8003342:	003b      	movs	r3, r7
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	18d3      	adds	r3, r2, r3
 8003348:	b29b      	uxth	r3, r3
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b002      	add	sp, #8
 8003350:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003354 <_Z21LED_StateMachine_Initv>:
char buf[32];



void LED_StateMachine_Init(void)
{
 8003354:	b5b0      	push	{r4, r5, r7, lr}
 8003356:	af00      	add	r7, sp, #0
	Serial = new USART_Handler(huart2);
 8003358:	2388      	movs	r3, #136	; 0x88
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	0018      	movs	r0, r3
 800335e:	f005 fc4d 	bl	8008bfc <_Znwj>
 8003362:	0003      	movs	r3, r0
 8003364:	001c      	movs	r4, r3
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <_Z21LED_StateMachine_Initv+0x38>)
 8003368:	0019      	movs	r1, r3
 800336a:	0020      	movs	r0, r4
 800336c:	f000 ff66 	bl	800423c <_ZN13USART_HandlerC1ER20__UART_HandleTypeDef>
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <_Z21LED_StateMachine_Initv+0x3c>)
 8003372:	601c      	str	r4, [r3, #0]
	LED_Timebase = HAL_GetTick();
 8003374:	f002 fc4e 	bl	8005c14 <HAL_GetTick>
 8003378:	0002      	movs	r2, r0
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <_Z21LED_StateMachine_Initv+0x40>)
 800337c:	601a      	str	r2, [r3, #0]

	LED_PWM_Init();
 800337e:	f7ff fdeb 	bl	8002f58 <_Z12LED_PWM_Initv>

	LED_NRF24L01_Init(); //Setup RF-Interface
 8003382:	f7ff fa31 	bl	80027e8 <_Z17LED_NRF24L01_Initv>
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	bdb0      	pop	{r4, r5, r7, pc}
 800338c:	20000348 	.word	0x20000348
 8003390:	200000c8 	.word	0x200000c8
 8003394:	200000bc 	.word	0x200000bc

08003398 <_Z23LED_StateMachine_Handlev>:



void LED_StateMachine_Handle(void)
{
 8003398:	b5b0      	push	{r4, r5, r7, lr}
 800339a:	af00      	add	r7, sp, #0
	LED_PWM_CheckBoost();
 800339c:	f7ff ff24 	bl	80031e8 <_Z18LED_PWM_CheckBoostv>

	if((HAL_GetTick() - LED_Timebase) > STATEMACHINE_PERIOD_MS)
 80033a0:	f002 fc38 	bl	8005c14 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	4bc2      	ldr	r3, [pc, #776]	; (80036b0 <_Z23LED_StateMachine_Handlev+0x318>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	220a      	movs	r2, #10
 80033ae:	429a      	cmp	r2, r3
 80033b0:	419b      	sbcs	r3, r3
 80033b2:	425b      	negs	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d100      	bne.n	80033bc <_Z23LED_StateMachine_Handlev+0x24>
 80033ba:	e1fd      	b.n	80037b8 <_Z23LED_StateMachine_Handlev+0x420>
	{
		LED_Timebase += STATEMACHINE_PERIOD_MS;
 80033bc:	4bbc      	ldr	r3, [pc, #752]	; (80036b0 <_Z23LED_StateMachine_Handlev+0x318>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330a      	adds	r3, #10
 80033c2:	001a      	movs	r2, r3
 80033c4:	4bba      	ldr	r3, [pc, #744]	; (80036b0 <_Z23LED_StateMachine_Handlev+0x318>)
 80033c6:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033c8:	b672      	cpsid	i

		//Disable interrupts
		__disable_irq();

		//LED statemachine
		switch(LED_mode)
 80033ca:	4bba      	ldr	r3, [pc, #744]	; (80036b4 <_Z23LED_StateMachine_Handlev+0x31c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d900      	bls.n	80033d4 <_Z23LED_StateMachine_Handlev+0x3c>
 80033d2:	e1df      	b.n	8003794 <_Z23LED_StateMachine_Handlev+0x3fc>
 80033d4:	009a      	lsls	r2, r3, #2
 80033d6:	4bb8      	ldr	r3, [pc, #736]	; (80036b8 <_Z23LED_StateMachine_Handlev+0x320>)
 80033d8:	18d3      	adds	r3, r2, r3
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	469f      	mov	pc, r3
		{
		case LED_Mode_Constant:
			LED_PWM_SetBoost(0); //Deactivate boost
 80033de:	2000      	movs	r0, #0
 80033e0:	f7ff feea 	bl	80031b8 <_Z16LED_PWM_SetBoosth>
			LED_PWM_SetRGBW(LED_Red, LED_Green, LED_Blue, LED_White);
 80033e4:	4bb5      	ldr	r3, [pc, #724]	; (80036bc <_Z23LED_StateMachine_Handlev+0x324>)
 80033e6:	8818      	ldrh	r0, [r3, #0]
 80033e8:	4bb5      	ldr	r3, [pc, #724]	; (80036c0 <_Z23LED_StateMachine_Handlev+0x328>)
 80033ea:	8819      	ldrh	r1, [r3, #0]
 80033ec:	4bb5      	ldr	r3, [pc, #724]	; (80036c4 <_Z23LED_StateMachine_Handlev+0x32c>)
 80033ee:	881a      	ldrh	r2, [r3, #0]
 80033f0:	4bb5      	ldr	r3, [pc, #724]	; (80036c8 <_Z23LED_StateMachine_Handlev+0x330>)
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	f7ff fdec 	bl	8002fd0 <_Z15LED_PWM_SetRGBWtttt>
			LED_mode = LED_Mode_Idle;
 80033f8:	4bae      	ldr	r3, [pc, #696]	; (80036b4 <_Z23LED_StateMachine_Handlev+0x31c>)
 80033fa:	2205      	movs	r2, #5
 80033fc:	701a      	strb	r2, [r3, #0]
			break;
 80033fe:	e1da      	b.n	80037b6 <_Z23LED_StateMachine_Handlev+0x41e>

		case LED_Mode_Strobe:
			LED_PWM_SetBoost(1); //Activate boost
 8003400:	2001      	movs	r0, #1
 8003402:	f7ff fed9 	bl	80031b8 <_Z16LED_PWM_SetBoosth>
			if(Strobe_Count == 0) //Check if no more strobes should be output
 8003406:	4bb1      	ldr	r3, [pc, #708]	; (80036cc <_Z23LED_StateMachine_Handlev+0x334>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <_Z23LED_StateMachine_Handlev+0x8a>
			{
				LED_PWM_SetRGBW(0, 0, 0, 0);
 800340e:	2300      	movs	r3, #0
 8003410:	2200      	movs	r2, #0
 8003412:	2100      	movs	r1, #0
 8003414:	2000      	movs	r0, #0
 8003416:	f7ff fddb 	bl	8002fd0 <_Z15LED_PWM_SetRGBWtttt>
				LED_mode = LED_Mode_Idle;
 800341a:	4ba6      	ldr	r3, [pc, #664]	; (80036b4 <_Z23LED_StateMachine_Handlev+0x31c>)
 800341c:	2205      	movs	r2, #5
 800341e:	701a      	strb	r2, [r3, #0]
				else
				{
					Strobe_State++;
				}
			}
			break;
 8003420:	e1c9      	b.n	80037b6 <_Z23LED_StateMachine_Handlev+0x41e>
				if(Strobe_State < STROBE_ACTIVE_TICKS)
 8003422:	4bab      	ldr	r3, [pc, #684]	; (80036d0 <_Z23LED_StateMachine_Handlev+0x338>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d80a      	bhi.n	8003440 <_Z23LED_StateMachine_Handlev+0xa8>
					LED_PWM_SetRGBW(LED_Red, LED_Green, LED_Blue, LED_White);
 800342a:	4ba4      	ldr	r3, [pc, #656]	; (80036bc <_Z23LED_StateMachine_Handlev+0x324>)
 800342c:	8818      	ldrh	r0, [r3, #0]
 800342e:	4ba4      	ldr	r3, [pc, #656]	; (80036c0 <_Z23LED_StateMachine_Handlev+0x328>)
 8003430:	8819      	ldrh	r1, [r3, #0]
 8003432:	4ba4      	ldr	r3, [pc, #656]	; (80036c4 <_Z23LED_StateMachine_Handlev+0x32c>)
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	4ba4      	ldr	r3, [pc, #656]	; (80036c8 <_Z23LED_StateMachine_Handlev+0x330>)
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	f7ff fdc9 	bl	8002fd0 <_Z15LED_PWM_SetRGBWtttt>
 800343e:	e00b      	b.n	8003458 <_Z23LED_StateMachine_Handlev+0xc0>
				else if(Strobe_State < Strobe_Period)
 8003440:	4ba3      	ldr	r3, [pc, #652]	; (80036d0 <_Z23LED_StateMachine_Handlev+0x338>)
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	4ba3      	ldr	r3, [pc, #652]	; (80036d4 <_Z23LED_StateMachine_Handlev+0x33c>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d205      	bcs.n	8003458 <_Z23LED_StateMachine_Handlev+0xc0>
					LED_PWM_SetRGBW(0, 0, 0, 0);
 800344c:	2300      	movs	r3, #0
 800344e:	2200      	movs	r2, #0
 8003450:	2100      	movs	r1, #0
 8003452:	2000      	movs	r0, #0
 8003454:	f7ff fdbc 	bl	8002fd0 <_Z15LED_PWM_SetRGBWtttt>
				if(Strobe_State >= Strobe_Period)
 8003458:	4b9d      	ldr	r3, [pc, #628]	; (80036d0 <_Z23LED_StateMachine_Handlev+0x338>)
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	4b9d      	ldr	r3, [pc, #628]	; (80036d4 <_Z23LED_StateMachine_Handlev+0x33c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d30b      	bcc.n	800347c <_Z23LED_StateMachine_Handlev+0xe4>
					Strobe_Count--;
 8003464:	4b99      	ldr	r3, [pc, #612]	; (80036cc <_Z23LED_StateMachine_Handlev+0x334>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	3b01      	subs	r3, #1
 800346a:	b2da      	uxtb	r2, r3
 800346c:	4b97      	ldr	r3, [pc, #604]	; (80036cc <_Z23LED_StateMachine_Handlev+0x334>)
 800346e:	701a      	strb	r2, [r3, #0]
					Strobe_State = 0;
 8003470:	4b97      	ldr	r3, [pc, #604]	; (80036d0 <_Z23LED_StateMachine_Handlev+0x338>)
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
					LED_StateMachine_Handle();
 8003476:	f7ff ff8f 	bl	8003398 <_Z23LED_StateMachine_Handlev>
			break;
 800347a:	e19c      	b.n	80037b6 <_Z23LED_StateMachine_Handlev+0x41e>
					Strobe_State++;
 800347c:	4b94      	ldr	r3, [pc, #592]	; (80036d0 <_Z23LED_StateMachine_Handlev+0x338>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	b2da      	uxtb	r2, r3
 8003484:	4b92      	ldr	r3, [pc, #584]	; (80036d0 <_Z23LED_StateMachine_Handlev+0x338>)
 8003486:	701a      	strb	r2, [r3, #0]
			break;
 8003488:	e195      	b.n	80037b6 <_Z23LED_StateMachine_Handlev+0x41e>

		case LED_Mode_FadeHue:
			LED_PWM_SetBoost(0); //Deactivate boost
 800348a:	2000      	movs	r0, #0
 800348c:	f7ff fe94 	bl	80031b8 <_Z16LED_PWM_SetBoosth>
			if((LED_Fade_Min == 0) && (LED_Fade_Max == 65535))
 8003490:	4b91      	ldr	r3, [pc, #580]	; (80036d8 <_Z23LED_StateMachine_Handlev+0x340>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d115      	bne.n	80034c4 <_Z23LED_StateMachine_Handlev+0x12c>
 8003498:	4b90      	ldr	r3, [pc, #576]	; (80036dc <_Z23LED_StateMachine_Handlev+0x344>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	4a90      	ldr	r2, [pc, #576]	; (80036e0 <_Z23LED_StateMachine_Handlev+0x348>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d110      	bne.n	80034c4 <_Z23LED_StateMachine_Handlev+0x12c>
			{
				LED_Hue = (uint16_t)((65535 * (uint32_t)Fade_State)/(uint32_t)Fade_Period);
 80034a2:	4b90      	ldr	r3, [pc, #576]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	001a      	movs	r2, r3
 80034a8:	0013      	movs	r3, r2
 80034aa:	041b      	lsls	r3, r3, #16
 80034ac:	1a9a      	subs	r2, r3, r2
 80034ae:	4b8e      	ldr	r3, [pc, #568]	; (80036e8 <_Z23LED_StateMachine_Handlev+0x350>)
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	0019      	movs	r1, r3
 80034b4:	0010      	movs	r0, r2
 80034b6:	f7fc fe27 	bl	8000108 <__udivsi3>
 80034ba:	0003      	movs	r3, r0
 80034bc:	b29a      	uxth	r2, r3
 80034be:	4b8b      	ldr	r3, [pc, #556]	; (80036ec <_Z23LED_StateMachine_Handlev+0x354>)
 80034c0:	801a      	strh	r2, [r3, #0]
 80034c2:	e034      	b.n	800352e <_Z23LED_StateMachine_Handlev+0x196>
			}
			else
			{
				if(FadeUp == true)
 80034c4:	4b8a      	ldr	r3, [pc, #552]	; (80036f0 <_Z23LED_StateMachine_Handlev+0x358>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d018      	beq.n	80034fe <_Z23LED_StateMachine_Handlev+0x166>
				{
					LED_Hue = LED_Fade_Min + (uint16_t)(((uint32_t)(LED_Fade_Max - LED_Fade_Min) * (uint32_t)Fade_State)/(uint32_t)Fade_Period);
 80034cc:	4b83      	ldr	r3, [pc, #524]	; (80036dc <_Z23LED_StateMachine_Handlev+0x344>)
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	001a      	movs	r2, r3
 80034d2:	4b81      	ldr	r3, [pc, #516]	; (80036d8 <_Z23LED_StateMachine_Handlev+0x340>)
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	001a      	movs	r2, r3
 80034da:	4b82      	ldr	r3, [pc, #520]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	435a      	muls	r2, r3
 80034e0:	4b81      	ldr	r3, [pc, #516]	; (80036e8 <_Z23LED_StateMachine_Handlev+0x350>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	0019      	movs	r1, r3
 80034e6:	0010      	movs	r0, r2
 80034e8:	f7fc fe0e 	bl	8000108 <__udivsi3>
 80034ec:	0003      	movs	r3, r0
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	4b79      	ldr	r3, [pc, #484]	; (80036d8 <_Z23LED_StateMachine_Handlev+0x340>)
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	18d3      	adds	r3, r2, r3
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	4b7c      	ldr	r3, [pc, #496]	; (80036ec <_Z23LED_StateMachine_Handlev+0x354>)
 80034fa:	801a      	strh	r2, [r3, #0]
 80034fc:	e017      	b.n	800352e <_Z23LED_StateMachine_Handlev+0x196>
				}
				else
				{
					LED_Hue = LED_Fade_Max - (uint16_t)(((uint32_t)(LED_Fade_Max - LED_Fade_Min) * (uint32_t)Fade_State)/(uint32_t)Fade_Period);
 80034fe:	4b77      	ldr	r3, [pc, #476]	; (80036dc <_Z23LED_StateMachine_Handlev+0x344>)
 8003500:	881c      	ldrh	r4, [r3, #0]
 8003502:	4b76      	ldr	r3, [pc, #472]	; (80036dc <_Z23LED_StateMachine_Handlev+0x344>)
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	001a      	movs	r2, r3
 8003508:	4b73      	ldr	r3, [pc, #460]	; (80036d8 <_Z23LED_StateMachine_Handlev+0x340>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	001a      	movs	r2, r3
 8003510:	4b74      	ldr	r3, [pc, #464]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	435a      	muls	r2, r3
 8003516:	4b74      	ldr	r3, [pc, #464]	; (80036e8 <_Z23LED_StateMachine_Handlev+0x350>)
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	0019      	movs	r1, r3
 800351c:	0010      	movs	r0, r2
 800351e:	f7fc fdf3 	bl	8000108 <__udivsi3>
 8003522:	0003      	movs	r3, r0
 8003524:	b29b      	uxth	r3, r3
 8003526:	1ae3      	subs	r3, r4, r3
 8003528:	b29a      	uxth	r2, r3
 800352a:	4b70      	ldr	r3, [pc, #448]	; (80036ec <_Z23LED_StateMachine_Handlev+0x354>)
 800352c:	801a      	strh	r2, [r3, #0]
				}
			}
			SetHSV(LED_Hue, LED_Saturation, LED_Value); //Calculate RGB from HSV
 800352e:	4b6f      	ldr	r3, [pc, #444]	; (80036ec <_Z23LED_StateMachine_Handlev+0x354>)
 8003530:	8818      	ldrh	r0, [r3, #0]
 8003532:	4b70      	ldr	r3, [pc, #448]	; (80036f4 <_Z23LED_StateMachine_Handlev+0x35c>)
 8003534:	8819      	ldrh	r1, [r3, #0]
 8003536:	4b70      	ldr	r3, [pc, #448]	; (80036f8 <_Z23LED_StateMachine_Handlev+0x360>)
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	001a      	movs	r2, r3
 800353c:	f000 fc26 	bl	8003d8c <_Z6SetHSVttt>
			LED_CopyRGB(LED_Red, LED_Green, LED_Blue); //Convert RGB to RGBW
 8003540:	4b5e      	ldr	r3, [pc, #376]	; (80036bc <_Z23LED_StateMachine_Handlev+0x324>)
 8003542:	8818      	ldrh	r0, [r3, #0]
 8003544:	4b5e      	ldr	r3, [pc, #376]	; (80036c0 <_Z23LED_StateMachine_Handlev+0x328>)
 8003546:	8819      	ldrh	r1, [r3, #0]
 8003548:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <_Z23LED_StateMachine_Handlev+0x32c>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	001a      	movs	r2, r3
 800354e:	f000 f951 	bl	80037f4 <_Z11LED_CopyRGBttt>
			LED_PWM_SetRGBW(LED_Red, LED_Green, LED_Blue, LED_White); //Calculate
 8003552:	4b5a      	ldr	r3, [pc, #360]	; (80036bc <_Z23LED_StateMachine_Handlev+0x324>)
 8003554:	8818      	ldrh	r0, [r3, #0]
 8003556:	4b5a      	ldr	r3, [pc, #360]	; (80036c0 <_Z23LED_StateMachine_Handlev+0x328>)
 8003558:	8819      	ldrh	r1, [r3, #0]
 800355a:	4b5a      	ldr	r3, [pc, #360]	; (80036c4 <_Z23LED_StateMachine_Handlev+0x32c>)
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	4b5a      	ldr	r3, [pc, #360]	; (80036c8 <_Z23LED_StateMachine_Handlev+0x330>)
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	f7ff fd35 	bl	8002fd0 <_Z15LED_PWM_SetRGBWtttt>
			if(Fade_State >= Fade_Period)
 8003566:	4b5f      	ldr	r3, [pc, #380]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 8003568:	881a      	ldrh	r2, [r3, #0]
 800356a:	4b5f      	ldr	r3, [pc, #380]	; (80036e8 <_Z23LED_StateMachine_Handlev+0x350>)
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d30a      	bcc.n	8003588 <_Z23LED_StateMachine_Handlev+0x1f0>
			{
				Fade_State = 0;
 8003572:	4b5c      	ldr	r3, [pc, #368]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 8003574:	2200      	movs	r2, #0
 8003576:	801a      	strh	r2, [r3, #0]
				FadeUp = !FadeUp;
 8003578:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <_Z23LED_StateMachine_Handlev+0x358>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2201      	movs	r2, #1
 800357e:	4053      	eors	r3, r2
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4b5b      	ldr	r3, [pc, #364]	; (80036f0 <_Z23LED_StateMachine_Handlev+0x358>)
 8003584:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Fade_State++;
			}
			break;
 8003586:	e116      	b.n	80037b6 <_Z23LED_StateMachine_Handlev+0x41e>
				Fade_State++;
 8003588:	4b56      	ldr	r3, [pc, #344]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	4b54      	ldr	r3, [pc, #336]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 8003592:	801a      	strh	r2, [r3, #0]
			break;
 8003594:	e10f      	b.n	80037b6 <_Z23LED_StateMachine_Handlev+0x41e>

		case LED_Mode_FadeSaturation:
			LED_PWM_SetBoost(0); //Deactivate boost
 8003596:	2000      	movs	r0, #0
 8003598:	f7ff fe0e 	bl	80031b8 <_Z16LED_PWM_SetBoosth>
			if(FadeUp == true)
 800359c:	4b54      	ldr	r3, [pc, #336]	; (80036f0 <_Z23LED_StateMachine_Handlev+0x358>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d018      	beq.n	80035d6 <_Z23LED_StateMachine_Handlev+0x23e>
			{
				LED_Saturation = LED_Fade_Min + (uint16_t)(((uint32_t)(LED_Fade_Max - LED_Fade_Min) * (uint32_t)Fade_State)/(uint32_t)Fade_Period);
 80035a4:	4b4d      	ldr	r3, [pc, #308]	; (80036dc <_Z23LED_StateMachine_Handlev+0x344>)
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	001a      	movs	r2, r3
 80035aa:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <_Z23LED_StateMachine_Handlev+0x340>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	001a      	movs	r2, r3
 80035b2:	4b4c      	ldr	r3, [pc, #304]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	435a      	muls	r2, r3
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <_Z23LED_StateMachine_Handlev+0x350>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	0019      	movs	r1, r3
 80035be:	0010      	movs	r0, r2
 80035c0:	f7fc fda2 	bl	8000108 <__udivsi3>
 80035c4:	0003      	movs	r3, r0
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <_Z23LED_StateMachine_Handlev+0x340>)
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	18d3      	adds	r3, r2, r3
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	4b48      	ldr	r3, [pc, #288]	; (80036f4 <_Z23LED_StateMachine_Handlev+0x35c>)
 80035d2:	801a      	strh	r2, [r3, #0]
 80035d4:	e017      	b.n	8003606 <_Z23LED_StateMachine_Handlev+0x26e>
			}
			else
			{
				LED_Saturation = LED_Fade_Max - (uint16_t)(((uint32_t)(LED_Fade_Max - LED_Fade_Min) * (uint32_t)Fade_State)/(uint32_t)Fade_Period);
 80035d6:	4b41      	ldr	r3, [pc, #260]	; (80036dc <_Z23LED_StateMachine_Handlev+0x344>)
 80035d8:	881c      	ldrh	r4, [r3, #0]
 80035da:	4b40      	ldr	r3, [pc, #256]	; (80036dc <_Z23LED_StateMachine_Handlev+0x344>)
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	001a      	movs	r2, r3
 80035e0:	4b3d      	ldr	r3, [pc, #244]	; (80036d8 <_Z23LED_StateMachine_Handlev+0x340>)
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	001a      	movs	r2, r3
 80035e8:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	435a      	muls	r2, r3
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <_Z23LED_StateMachine_Handlev+0x350>)
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	0019      	movs	r1, r3
 80035f4:	0010      	movs	r0, r2
 80035f6:	f7fc fd87 	bl	8000108 <__udivsi3>
 80035fa:	0003      	movs	r3, r0
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	1ae3      	subs	r3, r4, r3
 8003600:	b29a      	uxth	r2, r3
 8003602:	4b3c      	ldr	r3, [pc, #240]	; (80036f4 <_Z23LED_StateMachine_Handlev+0x35c>)
 8003604:	801a      	strh	r2, [r3, #0]
			}
			SetHSV(LED_Hue, LED_Saturation, LED_Value); //Calculate RGB from HSV
 8003606:	4b39      	ldr	r3, [pc, #228]	; (80036ec <_Z23LED_StateMachine_Handlev+0x354>)
 8003608:	8818      	ldrh	r0, [r3, #0]
 800360a:	4b3a      	ldr	r3, [pc, #232]	; (80036f4 <_Z23LED_StateMachine_Handlev+0x35c>)
 800360c:	8819      	ldrh	r1, [r3, #0]
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <_Z23LED_StateMachine_Handlev+0x360>)
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	001a      	movs	r2, r3
 8003614:	f000 fbba 	bl	8003d8c <_Z6SetHSVttt>
			LED_CopyRGB(LED_Red, LED_Green, LED_Blue); //Convert RGB to RGBW
 8003618:	4b28      	ldr	r3, [pc, #160]	; (80036bc <_Z23LED_StateMachine_Handlev+0x324>)
 800361a:	8818      	ldrh	r0, [r3, #0]
 800361c:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <_Z23LED_StateMachine_Handlev+0x328>)
 800361e:	8819      	ldrh	r1, [r3, #0]
 8003620:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <_Z23LED_StateMachine_Handlev+0x32c>)
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	001a      	movs	r2, r3
 8003626:	f000 f8e5 	bl	80037f4 <_Z11LED_CopyRGBttt>
			LED_PWM_SetRGBW(LED_Red, LED_Green, LED_Blue, LED_White); //Calculate
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <_Z23LED_StateMachine_Handlev+0x324>)
 800362c:	8818      	ldrh	r0, [r3, #0]
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <_Z23LED_StateMachine_Handlev+0x328>)
 8003630:	8819      	ldrh	r1, [r3, #0]
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <_Z23LED_StateMachine_Handlev+0x32c>)
 8003634:	881a      	ldrh	r2, [r3, #0]
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <_Z23LED_StateMachine_Handlev+0x330>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	f7ff fcc9 	bl	8002fd0 <_Z15LED_PWM_SetRGBWtttt>
			if(Fade_State >= Fade_Period)
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 8003640:	881a      	ldrh	r2, [r3, #0]
 8003642:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <_Z23LED_StateMachine_Handlev+0x350>)
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d30a      	bcc.n	8003660 <_Z23LED_StateMachine_Handlev+0x2c8>
			{
				Fade_State = 0;
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 800364c:	2200      	movs	r2, #0
 800364e:	801a      	strh	r2, [r3, #0]
				FadeUp = !FadeUp;
 8003650:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <_Z23LED_StateMachine_Handlev+0x358>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2201      	movs	r2, #1
 8003656:	4053      	eors	r3, r2
 8003658:	b2da      	uxtb	r2, r3
 800365a:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <_Z23LED_StateMachine_Handlev+0x358>)
 800365c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Fade_State++;
			}
			break;
 800365e:	e0aa      	b.n	80037b6 <_Z23LED_StateMachine_Handlev+0x41e>
				Fade_State++;
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	3301      	adds	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 800366a:	801a      	strh	r2, [r3, #0]
			break;
 800366c:	e0a3      	b.n	80037b6 <_Z23LED_StateMachine_Handlev+0x41e>

		case LED_Mode_FadeValue:
			LED_PWM_SetBoost(0); //Deactivate boost
 800366e:	2000      	movs	r0, #0
 8003670:	f7ff fda2 	bl	80031b8 <_Z16LED_PWM_SetBoosth>
			if(FadeUp == true)
 8003674:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <_Z23LED_StateMachine_Handlev+0x358>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d03f      	beq.n	80036fc <_Z23LED_StateMachine_Handlev+0x364>
			{
				LED_Value = LED_Fade_Min + (uint16_t)(((uint32_t)(LED_Fade_Max - LED_Fade_Min) * (uint32_t)Fade_State)/(uint32_t)Fade_Period);
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <_Z23LED_StateMachine_Handlev+0x344>)
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	001a      	movs	r2, r3
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <_Z23LED_StateMachine_Handlev+0x340>)
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	001a      	movs	r2, r3
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <_Z23LED_StateMachine_Handlev+0x34c>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	435a      	muls	r2, r3
 8003690:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <_Z23LED_StateMachine_Handlev+0x350>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	0019      	movs	r1, r3
 8003696:	0010      	movs	r0, r2
 8003698:	f7fc fd36 	bl	8000108 <__udivsi3>
 800369c:	0003      	movs	r3, r0
 800369e:	b29a      	uxth	r2, r3
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <_Z23LED_StateMachine_Handlev+0x340>)
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	18d3      	adds	r3, r2, r3
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <_Z23LED_StateMachine_Handlev+0x360>)
 80036aa:	801a      	strh	r2, [r3, #0]
 80036ac:	e03e      	b.n	800372c <_Z23LED_StateMachine_Handlev+0x394>
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	200000bc 	.word	0x200000bc
 80036b4:	20000004 	.word	0x20000004
 80036b8:	08008f44 	.word	0x08008f44
 80036bc:	200000ae 	.word	0x200000ae
 80036c0:	200000b0 	.word	0x200000b0
 80036c4:	200000b2 	.word	0x200000b2
 80036c8:	200000b4 	.word	0x200000b4
 80036cc:	200000c2 	.word	0x200000c2
 80036d0:	200000c1 	.word	0x200000c1
 80036d4:	200000c0 	.word	0x200000c0
 80036d8:	200000b6 	.word	0x200000b6
 80036dc:	200000b8 	.word	0x200000b8
 80036e0:	0000ffff 	.word	0x0000ffff
 80036e4:	200000c6 	.word	0x200000c6
 80036e8:	200000c4 	.word	0x200000c4
 80036ec:	200000a8 	.word	0x200000a8
 80036f0:	20000005 	.word	0x20000005
 80036f4:	200000aa 	.word	0x200000aa
 80036f8:	200000ac 	.word	0x200000ac
			}
			else
			{
				LED_Value = LED_Fade_Max - (uint16_t)(((uint32_t)(LED_Fade_Max - LED_Fade_Min) * (uint32_t)Fade_State)/(uint32_t)Fade_Period);
 80036fc:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <_Z23LED_StateMachine_Handlev+0x428>)
 80036fe:	881c      	ldrh	r4, [r3, #0]
 8003700:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <_Z23LED_StateMachine_Handlev+0x428>)
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	001a      	movs	r2, r3
 8003706:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <_Z23LED_StateMachine_Handlev+0x42c>)
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	001a      	movs	r2, r3
 800370e:	4b2e      	ldr	r3, [pc, #184]	; (80037c8 <_Z23LED_StateMachine_Handlev+0x430>)
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	435a      	muls	r2, r3
 8003714:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <_Z23LED_StateMachine_Handlev+0x434>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	0019      	movs	r1, r3
 800371a:	0010      	movs	r0, r2
 800371c:	f7fc fcf4 	bl	8000108 <__udivsi3>
 8003720:	0003      	movs	r3, r0
 8003722:	b29b      	uxth	r3, r3
 8003724:	1ae3      	subs	r3, r4, r3
 8003726:	b29a      	uxth	r2, r3
 8003728:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <_Z23LED_StateMachine_Handlev+0x438>)
 800372a:	801a      	strh	r2, [r3, #0]
			}
			SetHSV(LED_Hue, LED_Saturation, LED_Value); //Calculate RGB from HSV
 800372c:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <_Z23LED_StateMachine_Handlev+0x43c>)
 800372e:	8818      	ldrh	r0, [r3, #0]
 8003730:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <_Z23LED_StateMachine_Handlev+0x440>)
 8003732:	8819      	ldrh	r1, [r3, #0]
 8003734:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <_Z23LED_StateMachine_Handlev+0x438>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	001a      	movs	r2, r3
 800373a:	f000 fb27 	bl	8003d8c <_Z6SetHSVttt>
			LED_CopyRGB(LED_Red, LED_Green, LED_Blue); //Convert RGB to RGBW
 800373e:	4b27      	ldr	r3, [pc, #156]	; (80037dc <_Z23LED_StateMachine_Handlev+0x444>)
 8003740:	8818      	ldrh	r0, [r3, #0]
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <_Z23LED_StateMachine_Handlev+0x448>)
 8003744:	8819      	ldrh	r1, [r3, #0]
 8003746:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <_Z23LED_StateMachine_Handlev+0x44c>)
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	001a      	movs	r2, r3
 800374c:	f000 f852 	bl	80037f4 <_Z11LED_CopyRGBttt>
			LED_PWM_SetRGBW(LED_Red, LED_Green, LED_Blue, LED_White); //Calculate
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <_Z23LED_StateMachine_Handlev+0x444>)
 8003752:	8818      	ldrh	r0, [r3, #0]
 8003754:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <_Z23LED_StateMachine_Handlev+0x448>)
 8003756:	8819      	ldrh	r1, [r3, #0]
 8003758:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <_Z23LED_StateMachine_Handlev+0x44c>)
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <_Z23LED_StateMachine_Handlev+0x450>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	f7ff fc36 	bl	8002fd0 <_Z15LED_PWM_SetRGBWtttt>
			if(Fade_State >= Fade_Period)
 8003764:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <_Z23LED_StateMachine_Handlev+0x430>)
 8003766:	881a      	ldrh	r2, [r3, #0]
 8003768:	4b18      	ldr	r3, [pc, #96]	; (80037cc <_Z23LED_StateMachine_Handlev+0x434>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d30a      	bcc.n	8003786 <_Z23LED_StateMachine_Handlev+0x3ee>
			{
				Fade_State = 0;
 8003770:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <_Z23LED_StateMachine_Handlev+0x430>)
 8003772:	2200      	movs	r2, #0
 8003774:	801a      	strh	r2, [r3, #0]
				FadeUp = !FadeUp;
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <_Z23LED_StateMachine_Handlev+0x454>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2201      	movs	r2, #1
 800377c:	4053      	eors	r3, r2
 800377e:	b2da      	uxtb	r2, r3
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <_Z23LED_StateMachine_Handlev+0x454>)
 8003782:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Fade_State++;
			}
			break;
 8003784:	e017      	b.n	80037b6 <_Z23LED_StateMachine_Handlev+0x41e>
				Fade_State++;
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <_Z23LED_StateMachine_Handlev+0x430>)
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	3301      	adds	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <_Z23LED_StateMachine_Handlev+0x430>)
 8003790:	801a      	strh	r2, [r3, #0]
			break;
 8003792:	e010      	b.n	80037b6 <_Z23LED_StateMachine_Handlev+0x41e>
		case LED_Mode_Idle:
			//Do nothing
			break;

		default: //Unknown state! disable lights and go to idle mode
			LED_CopyRGBW(0, 0, 0, 0);
 8003794:	2300      	movs	r3, #0
 8003796:	2200      	movs	r2, #0
 8003798:	2100      	movs	r1, #0
 800379a:	2000      	movs	r0, #0
 800379c:	f000 f850 	bl	8003840 <_Z12LED_CopyRGBWtttt>
			LED_PWM_SetRGBW(0, 0, 0, 0);
 80037a0:	2300      	movs	r3, #0
 80037a2:	2200      	movs	r2, #0
 80037a4:	2100      	movs	r1, #0
 80037a6:	2000      	movs	r0, #0
 80037a8:	f7ff fc12 	bl	8002fd0 <_Z15LED_PWM_SetRGBWtttt>
			LED_mode = LED_Mode_Idle;
 80037ac:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <_Z23LED_StateMachine_Handlev+0x458>)
 80037ae:	2205      	movs	r2, #5
 80037b0:	701a      	strb	r2, [r3, #0]
			break;
 80037b2:	e000      	b.n	80037b6 <_Z23LED_StateMachine_Handlev+0x41e>
			break;
 80037b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 80037b6:	b662      	cpsie	i
		}

		//Reenable interrupts
		__enable_irq();
	}
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bdb0      	pop	{r4, r5, r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	200000b8 	.word	0x200000b8
 80037c4:	200000b6 	.word	0x200000b6
 80037c8:	200000c6 	.word	0x200000c6
 80037cc:	200000c4 	.word	0x200000c4
 80037d0:	200000ac 	.word	0x200000ac
 80037d4:	200000a8 	.word	0x200000a8
 80037d8:	200000aa 	.word	0x200000aa
 80037dc:	200000ae 	.word	0x200000ae
 80037e0:	200000b0 	.word	0x200000b0
 80037e4:	200000b2 	.word	0x200000b2
 80037e8:	200000b4 	.word	0x200000b4
 80037ec:	20000005 	.word	0x20000005
 80037f0:	20000004 	.word	0x20000004

080037f4 <_Z11LED_CopyRGBttt>:



void LED_CopyRGB(uint16_t red, uint16_t green, uint16_t blue)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	0004      	movs	r4, r0
 80037fc:	0008      	movs	r0, r1
 80037fe:	0011      	movs	r1, r2
 8003800:	1dbb      	adds	r3, r7, #6
 8003802:	1c22      	adds	r2, r4, #0
 8003804:	801a      	strh	r2, [r3, #0]
 8003806:	1d3b      	adds	r3, r7, #4
 8003808:	1c02      	adds	r2, r0, #0
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	1cbb      	adds	r3, r7, #2
 800380e:	1c0a      	adds	r2, r1, #0
 8003810:	801a      	strh	r2, [r3, #0]

		LED_Red   -= LED_White;
		LED_Green -= LED_White;
		LED_Blue  -= LED_White;
	#elif defined(RGB_LED)
		LED_Red = red;
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <_Z11LED_CopyRGBttt+0x40>)
 8003814:	1dba      	adds	r2, r7, #6
 8003816:	8812      	ldrh	r2, [r2, #0]
 8003818:	801a      	strh	r2, [r3, #0]
		LED_Green = green;
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <_Z11LED_CopyRGBttt+0x44>)
 800381c:	1d3a      	adds	r2, r7, #4
 800381e:	8812      	ldrh	r2, [r2, #0]
 8003820:	801a      	strh	r2, [r3, #0]
		LED_Blue = blue;
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <_Z11LED_CopyRGBttt+0x48>)
 8003824:	1cba      	adds	r2, r7, #2
 8003826:	8812      	ldrh	r2, [r2, #0]
 8003828:	801a      	strh	r2, [r3, #0]
	#endif
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b003      	add	sp, #12
 8003830:	bd90      	pop	{r4, r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	200000ae 	.word	0x200000ae
 8003838:	200000b0 	.word	0x200000b0
 800383c:	200000b2 	.word	0x200000b2

08003840 <_Z12LED_CopyRGBWtttt>:



inline void LED_CopyRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{
 8003840:	b5b0      	push	{r4, r5, r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	0005      	movs	r5, r0
 8003848:	000c      	movs	r4, r1
 800384a:	0010      	movs	r0, r2
 800384c:	0019      	movs	r1, r3
 800384e:	1dbb      	adds	r3, r7, #6
 8003850:	1c2a      	adds	r2, r5, #0
 8003852:	801a      	strh	r2, [r3, #0]
 8003854:	1d3b      	adds	r3, r7, #4
 8003856:	1c22      	adds	r2, r4, #0
 8003858:	801a      	strh	r2, [r3, #0]
 800385a:	1cbb      	adds	r3, r7, #2
 800385c:	1c02      	adds	r2, r0, #0
 800385e:	801a      	strh	r2, [r3, #0]
 8003860:	003b      	movs	r3, r7
 8003862:	1c0a      	adds	r2, r1, #0
 8003864:	801a      	strh	r2, [r3, #0]
		LED_Red = red;
		LED_Green = green;
		LED_Blue = blue;
		LED_White = white;
	#elif defined(RGB_LED)
		LED_Red = ((((uint32_t)red) + (uint32_t)white) >> 1);
 8003866:	1dbb      	adds	r3, r7, #6
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	003b      	movs	r3, r7
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	18d3      	adds	r3, r2, r3
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <_Z12LED_CopyRGBWtttt+0x64>)
 8003876:	801a      	strh	r2, [r3, #0]
		LED_Green = ((((uint32_t)green) + (uint32_t)white) >> 1);
 8003878:	1d3b      	adds	r3, r7, #4
 800387a:	881a      	ldrh	r2, [r3, #0]
 800387c:	003b      	movs	r3, r7
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	18d3      	adds	r3, r2, r3
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <_Z12LED_CopyRGBWtttt+0x68>)
 8003888:	801a      	strh	r2, [r3, #0]
		LED_Blue = ((((uint32_t)blue) + (uint32_t)white) >> 1);
 800388a:	1cbb      	adds	r3, r7, #2
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	003b      	movs	r3, r7
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	18d3      	adds	r3, r2, r3
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <_Z12LED_CopyRGBWtttt+0x6c>)
 800389a:	801a      	strh	r2, [r3, #0]
	#endif
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bdb0      	pop	{r4, r5, r7, pc}
 80038a4:	200000ae 	.word	0x200000ae
 80038a8:	200000b0 	.word	0x200000b0
 80038ac:	200000b2 	.word	0x200000b2

080038b0 <_Z11LED_CopyHSVttt>:



inline void LED_CopyHSV(uint16_t hue, uint16_t saturation, uint16_t value)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	0004      	movs	r4, r0
 80038b8:	0008      	movs	r0, r1
 80038ba:	0011      	movs	r1, r2
 80038bc:	1dbb      	adds	r3, r7, #6
 80038be:	1c22      	adds	r2, r4, #0
 80038c0:	801a      	strh	r2, [r3, #0]
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	1c02      	adds	r2, r0, #0
 80038c6:	801a      	strh	r2, [r3, #0]
 80038c8:	1cbb      	adds	r3, r7, #2
 80038ca:	1c0a      	adds	r2, r1, #0
 80038cc:	801a      	strh	r2, [r3, #0]
	LED_Hue = hue;
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <_Z11LED_CopyHSVttt+0x40>)
 80038d0:	1dba      	adds	r2, r7, #6
 80038d2:	8812      	ldrh	r2, [r2, #0]
 80038d4:	801a      	strh	r2, [r3, #0]
	LED_Saturation = saturation;
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <_Z11LED_CopyHSVttt+0x44>)
 80038d8:	1d3a      	adds	r2, r7, #4
 80038da:	8812      	ldrh	r2, [r2, #0]
 80038dc:	801a      	strh	r2, [r3, #0]
	LED_Value = value;
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <_Z11LED_CopyHSVttt+0x48>)
 80038e0:	1cba      	adds	r2, r7, #2
 80038e2:	8812      	ldrh	r2, [r2, #0]
 80038e4:	801a      	strh	r2, [r3, #0]
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b003      	add	sp, #12
 80038ec:	bd90      	pop	{r4, r7, pc}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	200000a8 	.word	0x200000a8
 80038f4:	200000aa 	.word	0x200000aa
 80038f8:	200000ac 	.word	0x200000ac

080038fc <_Z18LED_UpdateTimebasem>:



void LED_UpdateTimebase(uint32_t time)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	uint32_t tmp = LED_Timebase - uwTick;
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <_Z18LED_UpdateTimebasem+0x30>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <_Z18LED_UpdateTimebasem+0x34>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	60fb      	str	r3, [r7, #12]
	uwTick = time;
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <_Z18LED_UpdateTimebasem+0x34>)
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	601a      	str	r2, [r3, #0]
	LED_Timebase = uwTick + tmp;
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <_Z18LED_UpdateTimebasem+0x34>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	18d2      	adds	r2, r2, r3
 800391e:	4b03      	ldr	r3, [pc, #12]	; (800392c <_Z18LED_UpdateTimebasem+0x30>)
 8003920:	601a      	str	r2, [r3, #0]
}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b004      	add	sp, #16
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	200000bc 	.word	0x200000bc
 8003930:	20000464 	.word	0x20000464

08003934 <_Z14LED_SetModeRGBttt>:



void LED_SetModeRGB(uint16_t red, uint16_t green, uint16_t blue)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	0004      	movs	r4, r0
 800393c:	0008      	movs	r0, r1
 800393e:	0011      	movs	r1, r2
 8003940:	1dbb      	adds	r3, r7, #6
 8003942:	1c22      	adds	r2, r4, #0
 8003944:	801a      	strh	r2, [r3, #0]
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	1c02      	adds	r2, r0, #0
 800394a:	801a      	strh	r2, [r3, #0]
 800394c:	1cbb      	adds	r3, r7, #2
 800394e:	1c0a      	adds	r2, r1, #0
 8003950:	801a      	strh	r2, [r3, #0]
	LED_CopyRGB(red, green, blue);
 8003952:	1cbb      	adds	r3, r7, #2
 8003954:	881a      	ldrh	r2, [r3, #0]
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	8819      	ldrh	r1, [r3, #0]
 800395a:	1dbb      	adds	r3, r7, #6
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	0018      	movs	r0, r3
 8003960:	f7ff ff48 	bl	80037f4 <_Z11LED_CopyRGBttt>
	LED_mode = LED_Mode_Constant;
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <_Z14LED_SetModeRGBttt+0x40>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
	//Serial->Println("Set RGB...");
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	b003      	add	sp, #12
 8003970:	bd90      	pop	{r4, r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	20000004 	.word	0x20000004

08003978 <_Z15LED_SetModeRGBWtttt>:



void LED_SetModeRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{
 8003978:	b5b0      	push	{r4, r5, r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	0005      	movs	r5, r0
 8003980:	000c      	movs	r4, r1
 8003982:	0010      	movs	r0, r2
 8003984:	0019      	movs	r1, r3
 8003986:	1dbb      	adds	r3, r7, #6
 8003988:	1c2a      	adds	r2, r5, #0
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	1c22      	adds	r2, r4, #0
 8003990:	801a      	strh	r2, [r3, #0]
 8003992:	1cbb      	adds	r3, r7, #2
 8003994:	1c02      	adds	r2, r0, #0
 8003996:	801a      	strh	r2, [r3, #0]
 8003998:	003b      	movs	r3, r7
 800399a:	1c0a      	adds	r2, r1, #0
 800399c:	801a      	strh	r2, [r3, #0]
	LED_CopyRGBW(red, green, blue, white);
 800399e:	003b      	movs	r3, r7
 80039a0:	881c      	ldrh	r4, [r3, #0]
 80039a2:	1cbb      	adds	r3, r7, #2
 80039a4:	881a      	ldrh	r2, [r3, #0]
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	8819      	ldrh	r1, [r3, #0]
 80039aa:	1dbb      	adds	r3, r7, #6
 80039ac:	8818      	ldrh	r0, [r3, #0]
 80039ae:	0023      	movs	r3, r4
 80039b0:	f7ff ff46 	bl	8003840 <_Z12LED_CopyRGBWtttt>
	LED_mode = LED_Mode_Constant;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <_Z15LED_SetModeRGBWtttt+0x4c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
	//Serial->Println("Set RGBW...");
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bdb0      	pop	{r4, r5, r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20000004 	.word	0x20000004

080039c8 <_Z14LED_SetModeHSVttt>:



void LED_SetModeHSV(uint16_t hue, uint16_t saturation, uint16_t value)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	0004      	movs	r4, r0
 80039d0:	0008      	movs	r0, r1
 80039d2:	0011      	movs	r1, r2
 80039d4:	1dbb      	adds	r3, r7, #6
 80039d6:	1c22      	adds	r2, r4, #0
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	1d3b      	adds	r3, r7, #4
 80039dc:	1c02      	adds	r2, r0, #0
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	1cbb      	adds	r3, r7, #2
 80039e2:	1c0a      	adds	r2, r1, #0
 80039e4:	801a      	strh	r2, [r3, #0]
	LED_CopyHSV(hue, saturation, value);
 80039e6:	1cbb      	adds	r3, r7, #2
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	8819      	ldrh	r1, [r3, #0]
 80039ee:	1dbb      	adds	r3, r7, #6
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7ff ff5c 	bl	80038b0 <_Z11LED_CopyHSVttt>
	SetHSV(LED_Hue, LED_Saturation, LED_Value);
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <_Z14LED_SetModeHSVttt+0x64>)
 80039fa:	8818      	ldrh	r0, [r3, #0]
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <_Z14LED_SetModeHSVttt+0x68>)
 80039fe:	8819      	ldrh	r1, [r3, #0]
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <_Z14LED_SetModeHSVttt+0x6c>)
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	001a      	movs	r2, r3
 8003a06:	f000 f9c1 	bl	8003d8c <_Z6SetHSVttt>
	LED_CopyRGB(LED_Red, LED_Green, LED_Blue); //Convert RGB to RGBW
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <_Z14LED_SetModeHSVttt+0x70>)
 8003a0c:	8818      	ldrh	r0, [r3, #0]
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <_Z14LED_SetModeHSVttt+0x74>)
 8003a10:	8819      	ldrh	r1, [r3, #0]
 8003a12:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <_Z14LED_SetModeHSVttt+0x78>)
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	001a      	movs	r2, r3
 8003a18:	f7ff feec 	bl	80037f4 <_Z11LED_CopyRGBttt>
	LED_mode = LED_Mode_Constant;
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <_Z14LED_SetModeHSVttt+0x7c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
	//Serial->Println("Set HSV...");
}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b003      	add	sp, #12
 8003a28:	bd90      	pop	{r4, r7, pc}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	200000a8 	.word	0x200000a8
 8003a30:	200000aa 	.word	0x200000aa
 8003a34:	200000ac 	.word	0x200000ac
 8003a38:	200000ae 	.word	0x200000ae
 8003a3c:	200000b0 	.word	0x200000b0
 8003a40:	200000b2 	.word	0x200000b2
 8003a44:	20000004 	.word	0x20000004

08003a48 <_Z20LED_SetModeStrobeRGBhhttt>:



void LED_SetModeStrobeRGB(uint8_t period, uint8_t count, uint16_t red, uint16_t green, uint16_t blue)
{
 8003a48:	b5b0      	push	{r4, r5, r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	0005      	movs	r5, r0
 8003a50:	000c      	movs	r4, r1
 8003a52:	0010      	movs	r0, r2
 8003a54:	0019      	movs	r1, r3
 8003a56:	1dfb      	adds	r3, r7, #7
 8003a58:	1c2a      	adds	r2, r5, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	1dbb      	adds	r3, r7, #6
 8003a5e:	1c22      	adds	r2, r4, #0
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	1c02      	adds	r2, r0, #0
 8003a66:	801a      	strh	r2, [r3, #0]
 8003a68:	1cbb      	adds	r3, r7, #2
 8003a6a:	1c0a      	adds	r2, r1, #0
 8003a6c:	801a      	strh	r2, [r3, #0]
	if(period < 2*STROBE_ACTIVE_TICKS)
 8003a6e:	1dfb      	adds	r3, r7, #7
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d802      	bhi.n	8003a7c <_Z20LED_SetModeStrobeRGBhhttt+0x34>
	{
		period = 2*STROBE_ACTIVE_TICKS;
 8003a76:	1dfb      	adds	r3, r7, #7
 8003a78:	2204      	movs	r2, #4
 8003a7a:	701a      	strb	r2, [r3, #0]
	}
	Strobe_Period = period;
 8003a7c:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <_Z20LED_SetModeStrobeRGBhhttt+0x6c>)
 8003a7e:	1dfa      	adds	r2, r7, #7
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	701a      	strb	r2, [r3, #0]
	Strobe_Count = count;
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <_Z20LED_SetModeStrobeRGBhhttt+0x70>)
 8003a86:	1dba      	adds	r2, r7, #6
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	701a      	strb	r2, [r3, #0]
	LED_CopyRGB(red, green, blue);
 8003a8c:	2318      	movs	r3, #24
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	881a      	ldrh	r2, [r3, #0]
 8003a92:	1cbb      	adds	r3, r7, #2
 8003a94:	8819      	ldrh	r1, [r3, #0]
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f7ff feaa 	bl	80037f4 <_Z11LED_CopyRGBttt>
	Strobe_State = 0;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <_Z20LED_SetModeStrobeRGBhhttt+0x74>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
	LED_mode = LED_Mode_Strobe;
 8003aa6:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <_Z20LED_SetModeStrobeRGBhhttt+0x78>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
	//Serial->Println("Strobing RGB...");
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b002      	add	sp, #8
 8003ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab4:	200000c0 	.word	0x200000c0
 8003ab8:	200000c2 	.word	0x200000c2
 8003abc:	200000c1 	.word	0x200000c1
 8003ac0:	20000004 	.word	0x20000004

08003ac4 <_Z21LED_SetModeStrobeRGBWhhtttt>:



void LED_SetModeStrobeRGBW(uint8_t period, uint8_t count, uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{
 8003ac4:	b5b0      	push	{r4, r5, r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	0005      	movs	r5, r0
 8003acc:	000c      	movs	r4, r1
 8003ace:	0010      	movs	r0, r2
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	1dfb      	adds	r3, r7, #7
 8003ad4:	1c2a      	adds	r2, r5, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	1c22      	adds	r2, r4, #0
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	1c02      	adds	r2, r0, #0
 8003ae2:	801a      	strh	r2, [r3, #0]
 8003ae4:	1cbb      	adds	r3, r7, #2
 8003ae6:	1c0a      	adds	r2, r1, #0
 8003ae8:	801a      	strh	r2, [r3, #0]
	if(period < 2*STROBE_ACTIVE_TICKS)
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d802      	bhi.n	8003af8 <_Z21LED_SetModeStrobeRGBWhhtttt+0x34>
	{
		period = 2*STROBE_ACTIVE_TICKS;
 8003af2:	1dfb      	adds	r3, r7, #7
 8003af4:	2204      	movs	r2, #4
 8003af6:	701a      	strb	r2, [r3, #0]
	}
	Strobe_Period = period;
 8003af8:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <_Z21LED_SetModeStrobeRGBWhhtttt+0x74>)
 8003afa:	1dfa      	adds	r2, r7, #7
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	701a      	strb	r2, [r3, #0]
	Strobe_Count = count;
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <_Z21LED_SetModeStrobeRGBWhhtttt+0x78>)
 8003b02:	1dba      	adds	r2, r7, #6
 8003b04:	7812      	ldrb	r2, [r2, #0]
 8003b06:	701a      	strb	r2, [r3, #0]
	LED_CopyRGBW(red, green, blue, white);
 8003b08:	231c      	movs	r3, #28
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	881c      	ldrh	r4, [r3, #0]
 8003b0e:	2318      	movs	r3, #24
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	881a      	ldrh	r2, [r3, #0]
 8003b14:	1cbb      	adds	r3, r7, #2
 8003b16:	8819      	ldrh	r1, [r3, #0]
 8003b18:	1d3b      	adds	r3, r7, #4
 8003b1a:	8818      	ldrh	r0, [r3, #0]
 8003b1c:	0023      	movs	r3, r4
 8003b1e:	f7ff fe8f 	bl	8003840 <_Z12LED_CopyRGBWtttt>
	Strobe_State = 0;
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <_Z21LED_SetModeStrobeRGBWhhtttt+0x7c>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
	LED_mode = LED_Mode_Strobe;
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <_Z21LED_SetModeStrobeRGBWhhtttt+0x80>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
	//Serial->Println("Strobing RGBW...");
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b002      	add	sp, #8
 8003b34:	bdb0      	pop	{r4, r5, r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	200000c0 	.word	0x200000c0
 8003b3c:	200000c2 	.word	0x200000c2
 8003b40:	200000c1 	.word	0x200000c1
 8003b44:	20000004 	.word	0x20000004

08003b48 <_Z20LED_SetModeStrobeHSVhhttt>:



void LED_SetModeStrobeHSV(uint8_t period, uint8_t count, uint16_t hue, uint16_t saturation, uint16_t value)
{
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	0005      	movs	r5, r0
 8003b50:	000c      	movs	r4, r1
 8003b52:	0010      	movs	r0, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	1dfb      	adds	r3, r7, #7
 8003b58:	1c2a      	adds	r2, r5, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	1dbb      	adds	r3, r7, #6
 8003b5e:	1c22      	adds	r2, r4, #0
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	1d3b      	adds	r3, r7, #4
 8003b64:	1c02      	adds	r2, r0, #0
 8003b66:	801a      	strh	r2, [r3, #0]
 8003b68:	1cbb      	adds	r3, r7, #2
 8003b6a:	1c0a      	adds	r2, r1, #0
 8003b6c:	801a      	strh	r2, [r3, #0]
	if(period < 2*STROBE_ACTIVE_TICKS)
 8003b6e:	1dfb      	adds	r3, r7, #7
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d802      	bhi.n	8003b7c <_Z20LED_SetModeStrobeHSVhhttt+0x34>
	{
		period = 2*STROBE_ACTIVE_TICKS;
 8003b76:	1dfb      	adds	r3, r7, #7
 8003b78:	2204      	movs	r2, #4
 8003b7a:	701a      	strb	r2, [r3, #0]
	}
	Strobe_Period = period;
 8003b7c:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <_Z20LED_SetModeStrobeHSVhhttt+0x90>)
 8003b7e:	1dfa      	adds	r2, r7, #7
 8003b80:	7812      	ldrb	r2, [r2, #0]
 8003b82:	701a      	strb	r2, [r3, #0]
	Strobe_Count = count;
 8003b84:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <_Z20LED_SetModeStrobeHSVhhttt+0x94>)
 8003b86:	1dba      	adds	r2, r7, #6
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	701a      	strb	r2, [r3, #0]
	LED_CopyHSV(hue, saturation, value);
 8003b8c:	2318      	movs	r3, #24
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	1cbb      	adds	r3, r7, #2
 8003b94:	8819      	ldrh	r1, [r3, #0]
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f7ff fe88 	bl	80038b0 <_Z11LED_CopyHSVttt>
	SetHSV(LED_Hue, LED_Saturation, LED_Value);
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <_Z20LED_SetModeStrobeHSVhhttt+0x98>)
 8003ba2:	8818      	ldrh	r0, [r3, #0]
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <_Z20LED_SetModeStrobeHSVhhttt+0x9c>)
 8003ba6:	8819      	ldrh	r1, [r3, #0]
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <_Z20LED_SetModeStrobeHSVhhttt+0xa0>)
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	001a      	movs	r2, r3
 8003bae:	f000 f8ed 	bl	8003d8c <_Z6SetHSVttt>
	LED_CopyRGB(LED_Red, LED_Green, LED_Blue); //Convert RGB to RGBW
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <_Z20LED_SetModeStrobeHSVhhttt+0xa4>)
 8003bb4:	8818      	ldrh	r0, [r3, #0]
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <_Z20LED_SetModeStrobeHSVhhttt+0xa8>)
 8003bb8:	8819      	ldrh	r1, [r3, #0]
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <_Z20LED_SetModeStrobeHSVhhttt+0xac>)
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	f7ff fe18 	bl	80037f4 <_Z11LED_CopyRGBttt>
	Strobe_State = 0;
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <_Z20LED_SetModeStrobeHSVhhttt+0xb0>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
	LED_mode = LED_Mode_Strobe;
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <_Z20LED_SetModeStrobeHSVhhttt+0xb4>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
	//Serial->Println("Strobing HSV...");
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd8:	200000c0 	.word	0x200000c0
 8003bdc:	200000c2 	.word	0x200000c2
 8003be0:	200000a8 	.word	0x200000a8
 8003be4:	200000aa 	.word	0x200000aa
 8003be8:	200000ac 	.word	0x200000ac
 8003bec:	200000ae 	.word	0x200000ae
 8003bf0:	200000b0 	.word	0x200000b0
 8003bf4:	200000b2 	.word	0x200000b2
 8003bf8:	200000c1 	.word	0x200000c1
 8003bfc:	20000004 	.word	0x20000004

08003c00 <_Z18LED_SetModeFadeHuettttt>:



void LED_SetModeFadeHue(uint16_t period, uint16_t hue_max, uint16_t hue_min, uint16_t saturation, uint16_t value)
{
 8003c00:	b5b0      	push	{r4, r5, r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	0005      	movs	r5, r0
 8003c08:	000c      	movs	r4, r1
 8003c0a:	0010      	movs	r0, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	1dbb      	adds	r3, r7, #6
 8003c10:	1c2a      	adds	r2, r5, #0
 8003c12:	801a      	strh	r2, [r3, #0]
 8003c14:	1d3b      	adds	r3, r7, #4
 8003c16:	1c22      	adds	r2, r4, #0
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	1cbb      	adds	r3, r7, #2
 8003c1c:	1c02      	adds	r2, r0, #0
 8003c1e:	801a      	strh	r2, [r3, #0]
 8003c20:	003b      	movs	r3, r7
 8003c22:	1c0a      	adds	r2, r1, #0
 8003c24:	801a      	strh	r2, [r3, #0]
	LED_CopyHSV(hue_max, saturation, value);
 8003c26:	2318      	movs	r3, #24
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	881a      	ldrh	r2, [r3, #0]
 8003c2c:	003b      	movs	r3, r7
 8003c2e:	8819      	ldrh	r1, [r3, #0]
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7ff fe3b 	bl	80038b0 <_Z11LED_CopyHSVttt>
	LED_Fade_Max = hue_max;
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <_Z18LED_SetModeFadeHuettttt+0x6c>)
 8003c3c:	1d3a      	adds	r2, r7, #4
 8003c3e:	8812      	ldrh	r2, [r2, #0]
 8003c40:	801a      	strh	r2, [r3, #0]
	LED_Fade_Min = hue_min;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <_Z18LED_SetModeFadeHuettttt+0x70>)
 8003c44:	1cba      	adds	r2, r7, #2
 8003c46:	8812      	ldrh	r2, [r2, #0]
 8003c48:	801a      	strh	r2, [r3, #0]
	Fade_Period = period;
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <_Z18LED_SetModeFadeHuettttt+0x74>)
 8003c4c:	1dba      	adds	r2, r7, #6
 8003c4e:	8812      	ldrh	r2, [r2, #0]
 8003c50:	801a      	strh	r2, [r3, #0]
	Fade_State = 0;
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <_Z18LED_SetModeFadeHuettttt+0x78>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	801a      	strh	r2, [r3, #0]
	LED_mode = LED_Mode_FadeHue;
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <_Z18LED_SetModeFadeHuettttt+0x7c>)
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	701a      	strb	r2, [r3, #0]
	FadeUp = true;
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <_Z18LED_SetModeFadeHuettttt+0x80>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
	//Serial->Println("Fading hue...");
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6c:	200000b8 	.word	0x200000b8
 8003c70:	200000b6 	.word	0x200000b6
 8003c74:	200000c4 	.word	0x200000c4
 8003c78:	200000c6 	.word	0x200000c6
 8003c7c:	20000004 	.word	0x20000004
 8003c80:	20000005 	.word	0x20000005

08003c84 <_Z25LED_SetModeFadeSaturationttttt>:



void LED_SetModeFadeSaturation(uint16_t period, uint16_t hue, uint16_t saturation_max, uint16_t saturation_min, uint16_t value)
{
 8003c84:	b5b0      	push	{r4, r5, r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	0005      	movs	r5, r0
 8003c8c:	000c      	movs	r4, r1
 8003c8e:	0010      	movs	r0, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	1dbb      	adds	r3, r7, #6
 8003c94:	1c2a      	adds	r2, r5, #0
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	1c22      	adds	r2, r4, #0
 8003c9c:	801a      	strh	r2, [r3, #0]
 8003c9e:	1cbb      	adds	r3, r7, #2
 8003ca0:	1c02      	adds	r2, r0, #0
 8003ca2:	801a      	strh	r2, [r3, #0]
 8003ca4:	003b      	movs	r3, r7
 8003ca6:	1c0a      	adds	r2, r1, #0
 8003ca8:	801a      	strh	r2, [r3, #0]
	LED_CopyHSV(hue, saturation_max, value);
 8003caa:	2318      	movs	r3, #24
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	881a      	ldrh	r2, [r3, #0]
 8003cb0:	1cbb      	adds	r3, r7, #2
 8003cb2:	8819      	ldrh	r1, [r3, #0]
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f7ff fdf9 	bl	80038b0 <_Z11LED_CopyHSVttt>
	LED_Fade_Max = saturation_max;
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <_Z25LED_SetModeFadeSaturationttttt+0x6c>)
 8003cc0:	1cba      	adds	r2, r7, #2
 8003cc2:	8812      	ldrh	r2, [r2, #0]
 8003cc4:	801a      	strh	r2, [r3, #0]
	LED_Fade_Min = saturation_min;
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <_Z25LED_SetModeFadeSaturationttttt+0x70>)
 8003cc8:	003a      	movs	r2, r7
 8003cca:	8812      	ldrh	r2, [r2, #0]
 8003ccc:	801a      	strh	r2, [r3, #0]
	Fade_Period = period;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <_Z25LED_SetModeFadeSaturationttttt+0x74>)
 8003cd0:	1dba      	adds	r2, r7, #6
 8003cd2:	8812      	ldrh	r2, [r2, #0]
 8003cd4:	801a      	strh	r2, [r3, #0]
	Fade_State = 0;
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <_Z25LED_SetModeFadeSaturationttttt+0x78>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	801a      	strh	r2, [r3, #0]
	LED_mode = LED_Mode_FadeSaturation;
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <_Z25LED_SetModeFadeSaturationttttt+0x7c>)
 8003cde:	2203      	movs	r2, #3
 8003ce0:	701a      	strb	r2, [r3, #0]
	FadeUp = true;
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <_Z25LED_SetModeFadeSaturationttttt+0x80>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
	//Serial->Println("Fading saturation...");
}
 8003ce8:	46c0      	nop			; (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b002      	add	sp, #8
 8003cee:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf0:	200000b8 	.word	0x200000b8
 8003cf4:	200000b6 	.word	0x200000b6
 8003cf8:	200000c4 	.word	0x200000c4
 8003cfc:	200000c6 	.word	0x200000c6
 8003d00:	20000004 	.word	0x20000004
 8003d04:	20000005 	.word	0x20000005

08003d08 <_Z20LED_SetModeFadeValuettttt>:



void LED_SetModeFadeValue(uint16_t period, uint16_t hue, uint16_t saturation, uint16_t value_max, uint16_t value_min)
{
 8003d08:	b5b0      	push	{r4, r5, r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	0005      	movs	r5, r0
 8003d10:	000c      	movs	r4, r1
 8003d12:	0010      	movs	r0, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	1dbb      	adds	r3, r7, #6
 8003d18:	1c2a      	adds	r2, r5, #0
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	1d3b      	adds	r3, r7, #4
 8003d1e:	1c22      	adds	r2, r4, #0
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	1cbb      	adds	r3, r7, #2
 8003d24:	1c02      	adds	r2, r0, #0
 8003d26:	801a      	strh	r2, [r3, #0]
 8003d28:	003b      	movs	r3, r7
 8003d2a:	1c0a      	adds	r2, r1, #0
 8003d2c:	801a      	strh	r2, [r3, #0]
	LED_CopyHSV(hue, saturation, value_max);
 8003d2e:	003b      	movs	r3, r7
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	1cbb      	adds	r3, r7, #2
 8003d34:	8819      	ldrh	r1, [r3, #0]
 8003d36:	1d3b      	adds	r3, r7, #4
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7ff fdb8 	bl	80038b0 <_Z11LED_CopyHSVttt>
	LED_Fade_Max = value_max;
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <_Z20LED_SetModeFadeValuettttt+0x6c>)
 8003d42:	003a      	movs	r2, r7
 8003d44:	8812      	ldrh	r2, [r2, #0]
 8003d46:	801a      	strh	r2, [r3, #0]
	LED_Fade_Min = value_min;
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <_Z20LED_SetModeFadeValuettttt+0x70>)
 8003d4a:	2218      	movs	r2, #24
 8003d4c:	18ba      	adds	r2, r7, r2
 8003d4e:	8812      	ldrh	r2, [r2, #0]
 8003d50:	801a      	strh	r2, [r3, #0]
	Fade_Period = period;
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <_Z20LED_SetModeFadeValuettttt+0x74>)
 8003d54:	1dba      	adds	r2, r7, #6
 8003d56:	8812      	ldrh	r2, [r2, #0]
 8003d58:	801a      	strh	r2, [r3, #0]
	Fade_State = 0;
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <_Z20LED_SetModeFadeValuettttt+0x78>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	801a      	strh	r2, [r3, #0]
	LED_mode = LED_Mode_FadeValue;
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <_Z20LED_SetModeFadeValuettttt+0x7c>)
 8003d62:	2204      	movs	r2, #4
 8003d64:	701a      	strb	r2, [r3, #0]
	FadeUp = true;
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <_Z20LED_SetModeFadeValuettttt+0x80>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
	//Serial->Println("Fading value...");
}
 8003d6c:	46c0      	nop			; (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b002      	add	sp, #8
 8003d72:	bdb0      	pop	{r4, r5, r7, pc}
 8003d74:	200000b8 	.word	0x200000b8
 8003d78:	200000b6 	.word	0x200000b6
 8003d7c:	200000c4 	.word	0x200000c4
 8003d80:	200000c6 	.word	0x200000c6
 8003d84:	20000004 	.word	0x20000004
 8003d88:	20000005 	.word	0x20000005

08003d8c <_Z6SetHSVttt>:



void SetHSV(uint16_t H, uint16_t S, uint16_t V)
{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	0004      	movs	r4, r0
 8003d94:	0008      	movs	r0, r1
 8003d96:	0011      	movs	r1, r2
 8003d98:	1dbb      	adds	r3, r7, #6
 8003d9a:	1c22      	adds	r2, r4, #0
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	1d3b      	adds	r3, r7, #4
 8003da0:	1c02      	adds	r2, r0, #0
 8003da2:	801a      	strh	r2, [r3, #0]
 8003da4:	1cbb      	adds	r3, r7, #2
 8003da6:	1c0a      	adds	r2, r1, #0
 8003da8:	801a      	strh	r2, [r3, #0]
	uint32_t region, remainder;
	uint16_t p, q, t;

	region = H / 10923;
 8003daa:	1dbb      	adds	r3, r7, #6
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	4951      	ldr	r1, [pc, #324]	; (8003ef4 <_Z6SetHSVttt+0x168>)
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7fc f9a9 	bl	8000108 <__udivsi3>
 8003db6:	0003      	movs	r3, r0
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	617b      	str	r3, [r7, #20]
	remainder = (H - (region * 10923)) * 6;
 8003dbc:	1dbb      	adds	r3, r7, #6
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	494c      	ldr	r1, [pc, #304]	; (8003ef4 <_Z6SetHSVttt+0x168>)
 8003dc4:	434b      	muls	r3, r1
 8003dc6:	1ad2      	subs	r2, r2, r3
 8003dc8:	0013      	movs	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	613b      	str	r3, [r7, #16]

	p = ((uint32_t)V * (uint32_t)(65535 - S)) >> 16;
 8003dd2:	1cbb      	adds	r3, r7, #2
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	1d3a      	adds	r2, r7, #4
 8003dd8:	8812      	ldrh	r2, [r2, #0]
 8003dda:	4947      	ldr	r1, [pc, #284]	; (8003ef8 <_Z6SetHSVttt+0x16c>)
 8003ddc:	1a8a      	subs	r2, r1, r2
 8003dde:	4353      	muls	r3, r2
 8003de0:	0c1a      	lsrs	r2, r3, #16
 8003de2:	230e      	movs	r3, #14
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	801a      	strh	r2, [r3, #0]
	q = ((uint32_t)V * (65535 - (((uint32_t)S * remainder) >> 16))) >> 16;
 8003de8:	1cbb      	adds	r3, r7, #2
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	1d3a      	adds	r2, r7, #4
 8003dee:	8812      	ldrh	r2, [r2, #0]
 8003df0:	6939      	ldr	r1, [r7, #16]
 8003df2:	434a      	muls	r2, r1
 8003df4:	0c12      	lsrs	r2, r2, #16
 8003df6:	4940      	ldr	r1, [pc, #256]	; (8003ef8 <_Z6SetHSVttt+0x16c>)
 8003df8:	1a8a      	subs	r2, r1, r2
 8003dfa:	4353      	muls	r3, r2
 8003dfc:	0c1a      	lsrs	r2, r3, #16
 8003dfe:	230c      	movs	r3, #12
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	801a      	strh	r2, [r3, #0]
	t = ((uint32_t)V * (65535 - (((uint32_t)S * (65535 - remainder)) >> 16))) >> 16;
 8003e04:	1cbb      	adds	r3, r7, #2
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	1d3a      	adds	r2, r7, #4
 8003e0a:	8812      	ldrh	r2, [r2, #0]
 8003e0c:	6939      	ldr	r1, [r7, #16]
 8003e0e:	483a      	ldr	r0, [pc, #232]	; (8003ef8 <_Z6SetHSVttt+0x16c>)
 8003e10:	1a41      	subs	r1, r0, r1
 8003e12:	434a      	muls	r2, r1
 8003e14:	0c12      	lsrs	r2, r2, #16
 8003e16:	4938      	ldr	r1, [pc, #224]	; (8003ef8 <_Z6SetHSVttt+0x16c>)
 8003e18:	1a8a      	subs	r2, r1, r2
 8003e1a:	4353      	muls	r3, r2
 8003e1c:	0c1a      	lsrs	r2, r3, #16
 8003e1e:	230a      	movs	r3, #10
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	801a      	strh	r2, [r3, #0]

	switch (region)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d850      	bhi.n	8003ecc <_Z6SetHSVttt+0x140>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	009a      	lsls	r2, r3, #2
 8003e2e:	4b33      	ldr	r3, [pc, #204]	; (8003efc <_Z6SetHSVttt+0x170>)
 8003e30:	18d3      	adds	r3, r2, r3
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	469f      	mov	pc, r3
	{
		case 0:
			LED_Red = V;
 8003e36:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <_Z6SetHSVttt+0x174>)
 8003e38:	1cba      	adds	r2, r7, #2
 8003e3a:	8812      	ldrh	r2, [r2, #0]
 8003e3c:	801a      	strh	r2, [r3, #0]
			LED_Green = t;
 8003e3e:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <_Z6SetHSVttt+0x178>)
 8003e40:	220a      	movs	r2, #10
 8003e42:	18ba      	adds	r2, r7, r2
 8003e44:	8812      	ldrh	r2, [r2, #0]
 8003e46:	801a      	strh	r2, [r3, #0]
			LED_Blue = p;
 8003e48:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <_Z6SetHSVttt+0x17c>)
 8003e4a:	220e      	movs	r2, #14
 8003e4c:	18ba      	adds	r2, r7, r2
 8003e4e:	8812      	ldrh	r2, [r2, #0]
 8003e50:	801a      	strh	r2, [r3, #0]
			break;
 8003e52:	e04a      	b.n	8003eea <_Z6SetHSVttt+0x15e>

		case 1:
			LED_Red = q;
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <_Z6SetHSVttt+0x174>)
 8003e56:	220c      	movs	r2, #12
 8003e58:	18ba      	adds	r2, r7, r2
 8003e5a:	8812      	ldrh	r2, [r2, #0]
 8003e5c:	801a      	strh	r2, [r3, #0]
			LED_Green = V;
 8003e5e:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <_Z6SetHSVttt+0x178>)
 8003e60:	1cba      	adds	r2, r7, #2
 8003e62:	8812      	ldrh	r2, [r2, #0]
 8003e64:	801a      	strh	r2, [r3, #0]
			LED_Blue = p;
 8003e66:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <_Z6SetHSVttt+0x17c>)
 8003e68:	220e      	movs	r2, #14
 8003e6a:	18ba      	adds	r2, r7, r2
 8003e6c:	8812      	ldrh	r2, [r2, #0]
 8003e6e:	801a      	strh	r2, [r3, #0]
			break;
 8003e70:	e03b      	b.n	8003eea <_Z6SetHSVttt+0x15e>

		case 2:
			LED_Red = p;
 8003e72:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <_Z6SetHSVttt+0x174>)
 8003e74:	220e      	movs	r2, #14
 8003e76:	18ba      	adds	r2, r7, r2
 8003e78:	8812      	ldrh	r2, [r2, #0]
 8003e7a:	801a      	strh	r2, [r3, #0]
			LED_Green = V;
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <_Z6SetHSVttt+0x178>)
 8003e7e:	1cba      	adds	r2, r7, #2
 8003e80:	8812      	ldrh	r2, [r2, #0]
 8003e82:	801a      	strh	r2, [r3, #0]
			LED_Blue = t;
 8003e84:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <_Z6SetHSVttt+0x17c>)
 8003e86:	220a      	movs	r2, #10
 8003e88:	18ba      	adds	r2, r7, r2
 8003e8a:	8812      	ldrh	r2, [r2, #0]
 8003e8c:	801a      	strh	r2, [r3, #0]
			break;
 8003e8e:	e02c      	b.n	8003eea <_Z6SetHSVttt+0x15e>

		case 3:
			LED_Red = p;
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <_Z6SetHSVttt+0x174>)
 8003e92:	220e      	movs	r2, #14
 8003e94:	18ba      	adds	r2, r7, r2
 8003e96:	8812      	ldrh	r2, [r2, #0]
 8003e98:	801a      	strh	r2, [r3, #0]
			LED_Green = q;
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <_Z6SetHSVttt+0x178>)
 8003e9c:	220c      	movs	r2, #12
 8003e9e:	18ba      	adds	r2, r7, r2
 8003ea0:	8812      	ldrh	r2, [r2, #0]
 8003ea2:	801a      	strh	r2, [r3, #0]
			LED_Blue = V;
 8003ea4:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <_Z6SetHSVttt+0x17c>)
 8003ea6:	1cba      	adds	r2, r7, #2
 8003ea8:	8812      	ldrh	r2, [r2, #0]
 8003eaa:	801a      	strh	r2, [r3, #0]
			break;
 8003eac:	e01d      	b.n	8003eea <_Z6SetHSVttt+0x15e>

		case 4:
			LED_Red = t;
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <_Z6SetHSVttt+0x174>)
 8003eb0:	220a      	movs	r2, #10
 8003eb2:	18ba      	adds	r2, r7, r2
 8003eb4:	8812      	ldrh	r2, [r2, #0]
 8003eb6:	801a      	strh	r2, [r3, #0]
			LED_Green = p;
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <_Z6SetHSVttt+0x178>)
 8003eba:	220e      	movs	r2, #14
 8003ebc:	18ba      	adds	r2, r7, r2
 8003ebe:	8812      	ldrh	r2, [r2, #0]
 8003ec0:	801a      	strh	r2, [r3, #0]
			LED_Blue = V;
 8003ec2:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <_Z6SetHSVttt+0x17c>)
 8003ec4:	1cba      	adds	r2, r7, #2
 8003ec6:	8812      	ldrh	r2, [r2, #0]
 8003ec8:	801a      	strh	r2, [r3, #0]
			break;
 8003eca:	e00e      	b.n	8003eea <_Z6SetHSVttt+0x15e>

		default:
			LED_Red = V;
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <_Z6SetHSVttt+0x174>)
 8003ece:	1cba      	adds	r2, r7, #2
 8003ed0:	8812      	ldrh	r2, [r2, #0]
 8003ed2:	801a      	strh	r2, [r3, #0]
			LED_Green = p;
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <_Z6SetHSVttt+0x178>)
 8003ed6:	220e      	movs	r2, #14
 8003ed8:	18ba      	adds	r2, r7, r2
 8003eda:	8812      	ldrh	r2, [r2, #0]
 8003edc:	801a      	strh	r2, [r3, #0]
			LED_Blue = q;
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <_Z6SetHSVttt+0x17c>)
 8003ee0:	220c      	movs	r2, #12
 8003ee2:	18ba      	adds	r2, r7, r2
 8003ee4:	8812      	ldrh	r2, [r2, #0]
 8003ee6:	801a      	strh	r2, [r3, #0]
			break;
 8003ee8:	46c0      	nop			; (mov r8, r8)
	}
}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b007      	add	sp, #28
 8003ef0:	bd90      	pop	{r4, r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	00002aab 	.word	0x00002aab
 8003ef8:	0000ffff 	.word	0x0000ffff
 8003efc:	08008f5c 	.word	0x08008f5c
 8003f00:	200000ae 	.word	0x200000ae
 8003f04:	200000b0 	.word	0x200000b0
 8003f08:	200000b2 	.word	0x200000b2

08003f0c <_Z20LED_Thermomodel_Initv>:
uint32_t Thermomodel_Timebase = 0;
uint16_t Fan_PWM = 0;


void LED_Thermomodel_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
	//Init FAN PWM
	FAN_PWM_Init();
 8003f10:	f7fe fc24 	bl	800275c <_Z12FAN_PWM_Initv>
	Fan_PWM = 0;
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <_Z20LED_Thermomodel_Initv+0x34>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	801a      	strh	r2, [r3, #0]

	//Initialize ADC
	NTC_Init();
 8003f1a:	f000 f8cb 	bl	80040b4 <_Z8NTC_Initv>

	//Get initial temperature values
	NTC_Temp = NTC_Get_Temp();
 8003f1e:	f000 f8d7 	bl	80040d0 <_Z12NTC_Get_Tempv>
 8003f22:	1c02      	adds	r2, r0, #0
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <_Z20LED_Thermomodel_Initv+0x38>)
 8003f26:	601a      	str	r2, [r3, #0]
	LED_Temp = NTC_Temp;
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <_Z20LED_Thermomodel_Initv+0x38>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <_Z20LED_Thermomodel_Initv+0x3c>)
 8003f2e:	601a      	str	r2, [r3, #0]

	//Setup timebase
	Thermomodel_Timebase = HAL_GetTick();
 8003f30:	f001 fe70 	bl	8005c14 <HAL_GetTick>
 8003f34:	0002      	movs	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <_Z20LED_Thermomodel_Initv+0x40>)
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	200000d8 	.word	0x200000d8
 8003f44:	200000d0 	.word	0x200000d0
 8003f48:	200000cc 	.word	0x200000cc
 8003f4c:	200000d4 	.word	0x200000d4

08003f50 <_Z22LED_Thermomodel_Handlev>:



void LED_Thermomodel_Handle(void)
{
 8003f50:	b5b0      	push	{r4, r5, r7, lr}
 8003f52:	af00      	add	r7, sp, #0
	if((HAL_GetTick() - Thermomodel_Timebase) > THERMOMODEL_PERIOD)
 8003f54:	f001 fe5e 	bl	8005c14 <HAL_GetTick>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <_Z22LED_Thermomodel_Handlev+0x128>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2264      	movs	r2, #100	; 0x64
 8003f62:	429a      	cmp	r2, r3
 8003f64:	419b      	sbcs	r3, r3
 8003f66:	425b      	negs	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d100      	bne.n	8003f70 <_Z22LED_Thermomodel_Handlev+0x20>
 8003f6e:	e07f      	b.n	8004070 <_Z22LED_Thermomodel_Handlev+0x120>
	{
		//Update and filter NTC temperature
		NTC_Temp = NTC_Temp + (0.125 * (NTC_Get_Temp() - NTC_Temp));
 8003f70:	4b42      	ldr	r3, [pc, #264]	; (800407c <_Z22LED_Thermomodel_Handlev+0x12c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	1c18      	adds	r0, r3, #0
 8003f76:	f7fe f9b7 	bl	80022e8 <__aeabi_f2d>
 8003f7a:	0004      	movs	r4, r0
 8003f7c:	000d      	movs	r5, r1
 8003f7e:	f000 f8a7 	bl	80040d0 <_Z12NTC_Get_Tempv>
 8003f82:	1c02      	adds	r2, r0, #0
 8003f84:	4b3d      	ldr	r3, [pc, #244]	; (800407c <_Z22LED_Thermomodel_Handlev+0x12c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	1c19      	adds	r1, r3, #0
 8003f8a:	1c10      	adds	r0, r2, #0
 8003f8c:	f7fc fb50 	bl	8000630 <__aeabi_fsub>
 8003f90:	1c03      	adds	r3, r0, #0
 8003f92:	1c18      	adds	r0, r3, #0
 8003f94:	f7fe f9a8 	bl	80022e8 <__aeabi_f2d>
 8003f98:	2200      	movs	r2, #0
 8003f9a:	23ff      	movs	r3, #255	; 0xff
 8003f9c:	059b      	lsls	r3, r3, #22
 8003f9e:	f7fd fbb3 	bl	8001708 <__aeabi_dmul>
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	000b      	movs	r3, r1
 8003fa6:	0020      	movs	r0, r4
 8003fa8:	0029      	movs	r1, r5
 8003faa:	f7fc fd8f 	bl	8000acc <__aeabi_dadd>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	000c      	movs	r4, r1
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	0021      	movs	r1, r4
 8003fb6:	f7fe f9e9 	bl	800238c <__aeabi_d2f>
 8003fba:	1c02      	adds	r2, r0, #0
 8003fbc:	4b2f      	ldr	r3, [pc, #188]	; (800407c <_Z22LED_Thermomodel_Handlev+0x12c>)
 8003fbe:	601a      	str	r2, [r3, #0]

		//Calculate LED temperature based on thermal model (currently not implemented)
		LED_Temp = NTC_Temp;
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	; (800407c <_Z22LED_Thermomodel_Handlev+0x12c>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <_Z22LED_Thermomodel_Handlev+0x130>)
 8003fc6:	601a      	str	r2, [r3, #0]

		//Control FAN speed
		if(((Fan_PWM == 0) && (LED_Temp > THERMOMODEL_FAN_MIN_ON_TEMP)) || ((Fan_PWM != 0) && (LED_Temp > THERMOMODEL_FAN_MIN_TEMP)))
 8003fc8:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <_Z22LED_Thermomodel_Handlev+0x134>)
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <_Z22LED_Thermomodel_Handlev+0x90>
 8003fd0:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <_Z22LED_Thermomodel_Handlev+0x130>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	492c      	ldr	r1, [pc, #176]	; (8004088 <_Z22LED_Thermomodel_Handlev+0x138>)
 8003fd6:	1c18      	adds	r0, r3, #0
 8003fd8:	f7fc fa32 	bl	8000440 <__aeabi_fcmpgt>
 8003fdc:	1e03      	subs	r3, r0, #0
 8003fde:	d10b      	bne.n	8003ff8 <_Z22LED_Thermomodel_Handlev+0xa8>
 8003fe0:	4b28      	ldr	r3, [pc, #160]	; (8004084 <_Z22LED_Thermomodel_Handlev+0x134>)
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d03b      	beq.n	8004060 <_Z22LED_Thermomodel_Handlev+0x110>
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <_Z22LED_Thermomodel_Handlev+0x130>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4927      	ldr	r1, [pc, #156]	; (800408c <_Z22LED_Thermomodel_Handlev+0x13c>)
 8003fee:	1c18      	adds	r0, r3, #0
 8003ff0:	f7fc fa26 	bl	8000440 <__aeabi_fcmpgt>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d033      	beq.n	8004060 <_Z22LED_Thermomodel_Handlev+0x110>
		{
			if(LED_Temp > THERMOMODEL_FAN_MAX_TEMP)
 8003ff8:	4b21      	ldr	r3, [pc, #132]	; (8004080 <_Z22LED_Thermomodel_Handlev+0x130>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4924      	ldr	r1, [pc, #144]	; (8004090 <_Z22LED_Thermomodel_Handlev+0x140>)
 8003ffe:	1c18      	adds	r0, r3, #0
 8004000:	f7fc fa1e 	bl	8000440 <__aeabi_fcmpgt>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d004      	beq.n	8004012 <_Z22LED_Thermomodel_Handlev+0xc2>
			{
				Fan_PWM = 1000;
 8004008:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <_Z22LED_Thermomodel_Handlev+0x134>)
 800400a:	22fa      	movs	r2, #250	; 0xfa
 800400c:	0092      	lsls	r2, r2, #2
 800400e:	801a      	strh	r2, [r3, #0]
			if(LED_Temp > THERMOMODEL_FAN_MAX_TEMP)
 8004010:	e029      	b.n	8004066 <_Z22LED_Thermomodel_Handlev+0x116>
			}
			else
			{
				Fan_PWM = (uint16_t)(((LED_Temp - THERMOMODEL_FAN_MIN_TEMP)*(float)(FAN_MAX_PWM - FAN_MIN_PWM)) / (THERMOMODEL_FAN_MAX_TEMP - THERMOMODEL_FAN_MIN_TEMP)) + FAN_MIN_PWM;
 8004012:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <_Z22LED_Thermomodel_Handlev+0x130>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	1c18      	adds	r0, r3, #0
 8004018:	f7fe f966 	bl	80022e8 <__aeabi_f2d>
 800401c:	2200      	movs	r2, #0
 800401e:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <_Z22LED_Thermomodel_Handlev+0x144>)
 8004020:	f7fd fde4 	bl	8001bec <__aeabi_dsub>
 8004024:	0003      	movs	r3, r0
 8004026:	000c      	movs	r4, r1
 8004028:	0018      	movs	r0, r3
 800402a:	0021      	movs	r1, r4
 800402c:	2200      	movs	r2, #0
 800402e:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <_Z22LED_Thermomodel_Handlev+0x148>)
 8004030:	f7fd fb6a 	bl	8001708 <__aeabi_dmul>
 8004034:	0003      	movs	r3, r0
 8004036:	000c      	movs	r4, r1
 8004038:	0018      	movs	r0, r3
 800403a:	0021      	movs	r1, r4
 800403c:	2200      	movs	r2, #0
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <_Z22LED_Thermomodel_Handlev+0x14c>)
 8004040:	f7fd f860 	bl	8001104 <__aeabi_ddiv>
 8004044:	0003      	movs	r3, r0
 8004046:	000c      	movs	r4, r1
 8004048:	0018      	movs	r0, r3
 800404a:	0021      	movs	r1, r4
 800404c:	f7fc fa0c 	bl	8000468 <__aeabi_d2uiz>
 8004050:	0003      	movs	r3, r0
 8004052:	b29b      	uxth	r3, r3
 8004054:	332d      	adds	r3, #45	; 0x2d
 8004056:	33ff      	adds	r3, #255	; 0xff
 8004058:	b29a      	uxth	r2, r3
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <_Z22LED_Thermomodel_Handlev+0x134>)
 800405c:	801a      	strh	r2, [r3, #0]
			if(LED_Temp > THERMOMODEL_FAN_MAX_TEMP)
 800405e:	e002      	b.n	8004066 <_Z22LED_Thermomodel_Handlev+0x116>
			}
		}
		else
		{
			Fan_PWM = 0;
 8004060:	4b08      	ldr	r3, [pc, #32]	; (8004084 <_Z22LED_Thermomodel_Handlev+0x134>)
 8004062:	2200      	movs	r2, #0
 8004064:	801a      	strh	r2, [r3, #0]
		}
		FAN_PWM_SetDutyCycle(Fan_PWM);
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <_Z22LED_Thermomodel_Handlev+0x134>)
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	0018      	movs	r0, r3
 800406c:	f7fe fb90 	bl	8002790 <_Z20FAN_PWM_SetDutyCyclet>
	}
}
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	bdb0      	pop	{r4, r5, r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	200000d4 	.word	0x200000d4
 800407c:	200000d0 	.word	0x200000d0
 8004080:	200000cc 	.word	0x200000cc
 8004084:	200000d8 	.word	0x200000d8
 8004088:	41f00000 	.word	0x41f00000
 800408c:	41e80000 	.word	0x41e80000
 8004090:	42180000 	.word	0x42180000
 8004094:	403d0000 	.word	0x403d0000
 8004098:	4085e000 	.word	0x4085e000
 800409c:	40220000 	.word	0x40220000

080040a0 <_Z23LED_Thermomodel_GetTempv>:



float LED_Thermomodel_GetTemp(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
	return LED_Temp;
 80040a4:	4b02      	ldr	r3, [pc, #8]	; (80040b0 <_Z23LED_Thermomodel_GetTempv+0x10>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	1c18      	adds	r0, r3, #0
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	200000cc 	.word	0x200000cc

080040b4 <_Z8NTC_Initv>:
};



void NTC_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&NTC_ADC_HANDLE);
 80040b8:	4b04      	ldr	r3, [pc, #16]	; (80040cc <_Z8NTC_Initv+0x18>)
 80040ba:	0018      	movs	r0, r3
 80040bc:	f001 ff16 	bl	8005eec <HAL_ADC_Start>
	HAL_Delay(2); //Give ADC some time to get at least one sample
 80040c0:	2002      	movs	r0, #2
 80040c2:	f001 fdb1 	bl	8005c28 <HAL_Delay>
}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	200000dc 	.word	0x200000dc

080040d0 <_Z12NTC_Get_Tempv>:



float NTC_Get_Temp(void)
{
 80040d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t adc_val = (uint16_t)HAL_ADC_GetValue(&NTC_ADC_HANDLE);
 80040d6:	4b54      	ldr	r3, [pc, #336]	; (8004228 <_Z12NTC_Get_Tempv+0x158>)
 80040d8:	0018      	movs	r0, r3
 80040da:	f001 ff5b 	bl	8005f94 <HAL_ADC_GetValue>
 80040de:	0002      	movs	r2, r0
 80040e0:	230c      	movs	r3, #12
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	801a      	strh	r2, [r3, #0]

	for(i = 0; i < (sizeof(NTC_Lookup)/sizeof(uint16_t)); i++)
 80040e6:	230f      	movs	r3, #15
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	230f      	movs	r3, #15
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b21      	cmp	r3, #33	; 0x21
 80040f6:	d812      	bhi.n	800411e <_Z12NTC_Get_Tempv+0x4e>
	{
		if(adc_val > NTC_Lookup[i])
 80040f8:	230f      	movs	r3, #15
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	4b4b      	ldr	r3, [pc, #300]	; (800422c <_Z12NTC_Get_Tempv+0x15c>)
 8004100:	0052      	lsls	r2, r2, #1
 8004102:	5ad3      	ldrh	r3, [r2, r3]
 8004104:	220c      	movs	r2, #12
 8004106:	18ba      	adds	r2, r7, r2
 8004108:	8812      	ldrh	r2, [r2, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d806      	bhi.n	800411c <_Z12NTC_Get_Tempv+0x4c>
	for(i = 0; i < (sizeof(NTC_Lookup)/sizeof(uint16_t)); i++)
 800410e:	210f      	movs	r1, #15
 8004110:	187b      	adds	r3, r7, r1
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	187b      	adds	r3, r7, r1
 8004116:	3201      	adds	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	e7e8      	b.n	80040ee <_Z12NTC_Get_Tempv+0x1e>
		{
			break;
 800411c:	46c0      	nop			; (mov r8, r8)
		}
	}

	if((i == 0) || (i == sizeof(NTC_Lookup)/sizeof(uint16_t)))
 800411e:	230f      	movs	r3, #15
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <_Z12NTC_Get_Tempv+0x62>
 8004128:	230f      	movs	r3, #15
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b22      	cmp	r3, #34	; 0x22
 8004130:	d11d      	bne.n	800416e <_Z12NTC_Get_Tempv+0x9e>
	{
		return ((((float)i) * 5.0) - 40.0);
 8004132:	230f      	movs	r3, #15
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	0018      	movs	r0, r3
 800413a:	f7fc fc87 	bl	8000a4c <__aeabi_ui2f>
 800413e:	1c03      	adds	r3, r0, #0
 8004140:	1c18      	adds	r0, r3, #0
 8004142:	f7fe f8d1 	bl	80022e8 <__aeabi_f2d>
 8004146:	2200      	movs	r2, #0
 8004148:	4b39      	ldr	r3, [pc, #228]	; (8004230 <_Z12NTC_Get_Tempv+0x160>)
 800414a:	f7fd fadd 	bl	8001708 <__aeabi_dmul>
 800414e:	0003      	movs	r3, r0
 8004150:	000c      	movs	r4, r1
 8004152:	0018      	movs	r0, r3
 8004154:	0021      	movs	r1, r4
 8004156:	2200      	movs	r2, #0
 8004158:	4b36      	ldr	r3, [pc, #216]	; (8004234 <_Z12NTC_Get_Tempv+0x164>)
 800415a:	f7fd fd47 	bl	8001bec <__aeabi_dsub>
 800415e:	0003      	movs	r3, r0
 8004160:	000c      	movs	r4, r1
 8004162:	0018      	movs	r0, r3
 8004164:	0021      	movs	r1, r4
 8004166:	f7fe f911 	bl	800238c <__aeabi_d2f>
 800416a:	1c03      	adds	r3, r0, #0
 800416c:	e058      	b.n	8004220 <_Z12NTC_Get_Tempv+0x150>
	}

	return ((((float)i) * 5.0) - 45.0 - (5.0 * ((float)(adc_val - NTC_Lookup[i])) / ((float)(NTC_Lookup[i - 1] - NTC_Lookup[i]))));
 800416e:	260f      	movs	r6, #15
 8004170:	19bb      	adds	r3, r7, r6
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	0018      	movs	r0, r3
 8004176:	f7fc fc69 	bl	8000a4c <__aeabi_ui2f>
 800417a:	1c03      	adds	r3, r0, #0
 800417c:	1c18      	adds	r0, r3, #0
 800417e:	f7fe f8b3 	bl	80022e8 <__aeabi_f2d>
 8004182:	2200      	movs	r2, #0
 8004184:	4b2a      	ldr	r3, [pc, #168]	; (8004230 <_Z12NTC_Get_Tempv+0x160>)
 8004186:	f7fd fabf 	bl	8001708 <__aeabi_dmul>
 800418a:	0003      	movs	r3, r0
 800418c:	000c      	movs	r4, r1
 800418e:	0018      	movs	r0, r3
 8004190:	0021      	movs	r1, r4
 8004192:	2200      	movs	r2, #0
 8004194:	4b28      	ldr	r3, [pc, #160]	; (8004238 <_Z12NTC_Get_Tempv+0x168>)
 8004196:	f7fd fd29 	bl	8001bec <__aeabi_dsub>
 800419a:	0003      	movs	r3, r0
 800419c:	000c      	movs	r4, r1
 800419e:	0025      	movs	r5, r4
 80041a0:	001c      	movs	r4, r3
 80041a2:	230c      	movs	r3, #12
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	19ba      	adds	r2, r7, r6
 80041aa:	7811      	ldrb	r1, [r2, #0]
 80041ac:	4a1f      	ldr	r2, [pc, #124]	; (800422c <_Z12NTC_Get_Tempv+0x15c>)
 80041ae:	0049      	lsls	r1, r1, #1
 80041b0:	5a8a      	ldrh	r2, [r1, r2]
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7fc fbff 	bl	80009b8 <__aeabi_i2f>
 80041ba:	1c03      	adds	r3, r0, #0
 80041bc:	1c18      	adds	r0, r3, #0
 80041be:	f7fe f893 	bl	80022e8 <__aeabi_f2d>
 80041c2:	2200      	movs	r2, #0
 80041c4:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <_Z12NTC_Get_Tempv+0x160>)
 80041c6:	f7fd fa9f 	bl	8001708 <__aeabi_dmul>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	603a      	str	r2, [r7, #0]
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	19bb      	adds	r3, r7, r6
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	1e5a      	subs	r2, r3, #1
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <_Z12NTC_Get_Tempv+0x15c>)
 80041da:	0052      	lsls	r2, r2, #1
 80041dc:	5ad3      	ldrh	r3, [r2, r3]
 80041de:	0019      	movs	r1, r3
 80041e0:	19bb      	adds	r3, r7, r6
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <_Z12NTC_Get_Tempv+0x15c>)
 80041e6:	0052      	lsls	r2, r2, #1
 80041e8:	5ad3      	ldrh	r3, [r2, r3]
 80041ea:	1acb      	subs	r3, r1, r3
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7fc fbe3 	bl	80009b8 <__aeabi_i2f>
 80041f2:	1c03      	adds	r3, r0, #0
 80041f4:	1c18      	adds	r0, r3, #0
 80041f6:	f7fe f877 	bl	80022e8 <__aeabi_f2d>
 80041fa:	0002      	movs	r2, r0
 80041fc:	000b      	movs	r3, r1
 80041fe:	6838      	ldr	r0, [r7, #0]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	f7fc ff7f 	bl	8001104 <__aeabi_ddiv>
 8004206:	0002      	movs	r2, r0
 8004208:	000b      	movs	r3, r1
 800420a:	0020      	movs	r0, r4
 800420c:	0029      	movs	r1, r5
 800420e:	f7fd fced 	bl	8001bec <__aeabi_dsub>
 8004212:	0003      	movs	r3, r0
 8004214:	000c      	movs	r4, r1
 8004216:	0018      	movs	r0, r3
 8004218:	0021      	movs	r1, r4
 800421a:	f7fe f8b7 	bl	800238c <__aeabi_d2f>
 800421e:	1c03      	adds	r3, r0, #0
}
 8004220:	1c18      	adds	r0, r3, #0
 8004222:	46bd      	mov	sp, r7
 8004224:	b005      	add	sp, #20
 8004226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004228:	200000dc 	.word	0x200000dc
 800422c:	08008f70 	.word	0x08008f70
 8004230:	40140000 	.word	0x40140000
 8004234:	40440000 	.word	0x40440000
 8004238:	40468000 	.word	0x40468000

0800423c <_ZN13USART_HandlerC1ER20__UART_HandleTypeDef>:
#include "USART_Handler.h"




USART_Handler::USART_Handler(UART_HandleTypeDef &_huart)
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
{
	this->huart = &_huart;
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	2384      	movs	r3, #132	; 0x84
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	50d1      	str	r1, [r2, r3]

	//Register UART RX buffers
	HAL_UART_Receive_DMA(this->huart, this->rx_buffer, UART_RX_BUFFER_SIZE);
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	2384      	movs	r3, #132	; 0x84
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	58d3      	ldr	r3, [r2, r3]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	2208      	movs	r2, #8
 800425c:	0018      	movs	r0, r3
 800425e:	f004 f869 	bl	8008334 <HAL_UART_Receive_DMA>
	rx_ptr = UART_RX_BUFFER_SIZE;
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	2386      	movs	r3, #134	; 0x86
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	2108      	movs	r1, #8
 800426a:	52d1      	strh	r1, [r2, r3]
}
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b002      	add	sp, #8
 8004274:	bd80      	pop	{r7, pc}

08004276 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800427a:	f001 fc71 	bl	8005b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800427e:	f000 f81b 	bl	80042b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004282:	f000 fc1f 	bl	8004ac4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8004286:	f000 fbf7 	bl	8004a78 <_ZL11MX_DMA_Initv>
  MX_ADC_Init();
 800428a:	f000 f887 	bl	800439c <_ZL11MX_ADC_Initv>
  MX_SPI1_Init();
 800428e:	f000 f8e9 	bl	8004464 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 8004292:	f000 f93b 	bl	800450c <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8004296:	f000 fa33 	bl	8004700 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 800429a:	f000 fb83 	bl	80049a4 <_ZL19MX_USART1_UART_Initv>
  MX_TIM17_Init();
 800429e:	f000 faed 	bl	800487c <_ZL13MX_TIM17_Initv>
  MX_USART2_UART_Init();
 80042a2:	f000 fbb5 	bl	8004a10 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  LED_Thermomodel_Init();
 80042a6:	f7ff fe31 	bl	8003f0c <_Z20LED_Thermomodel_Initv>
  LED_StateMachine_Init();
 80042aa:	f7ff f853 	bl	8003354 <_Z21LED_StateMachine_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		LED_StateMachine_Handle();
 80042ae:	f7ff f873 	bl	8003398 <_Z23LED_StateMachine_Handlev>
		LED_Thermomodel_Handle();
 80042b2:	f7ff fe4d 	bl	8003f50 <_Z22LED_Thermomodel_Handlev>
		LED_StateMachine_Handle();
 80042b6:	e7fa      	b.n	80042ae <main+0x38>

080042b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042b8:	b590      	push	{r4, r7, lr}
 80042ba:	b095      	sub	sp, #84	; 0x54
 80042bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042be:	2420      	movs	r4, #32
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	0018      	movs	r0, r3
 80042c4:	2330      	movs	r3, #48	; 0x30
 80042c6:	001a      	movs	r2, r3
 80042c8:	2100      	movs	r1, #0
 80042ca:	f004 fceb 	bl	8008ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042ce:	2310      	movs	r3, #16
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	0018      	movs	r0, r3
 80042d4:	2310      	movs	r3, #16
 80042d6:	001a      	movs	r2, r3
 80042d8:	2100      	movs	r1, #0
 80042da:	f004 fce3 	bl	8008ca4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042de:	003b      	movs	r3, r7
 80042e0:	0018      	movs	r0, r3
 80042e2:	2310      	movs	r3, #16
 80042e4:	001a      	movs	r2, r3
 80042e6:	2100      	movs	r1, #0
 80042e8:	f004 fcdc 	bl	8008ca4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80042ec:	0021      	movs	r1, r4
 80042ee:	187b      	adds	r3, r7, r1
 80042f0:	2211      	movs	r2, #17
 80042f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	2201      	movs	r2, #1
 80042f8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80042fa:	187b      	adds	r3, r7, r1
 80042fc:	2201      	movs	r2, #1
 80042fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004300:	187b      	adds	r3, r7, r1
 8004302:	2210      	movs	r2, #16
 8004304:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004306:	187b      	adds	r3, r7, r1
 8004308:	2202      	movs	r2, #2
 800430a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800430c:	187b      	adds	r3, r7, r1
 800430e:	2280      	movs	r2, #128	; 0x80
 8004310:	0252      	lsls	r2, r2, #9
 8004312:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004314:	187b      	adds	r3, r7, r1
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	0352      	lsls	r2, r2, #13
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800431c:	187b      	adds	r3, r7, r1
 800431e:	2200      	movs	r2, #0
 8004320:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004322:	187b      	adds	r3, r7, r1
 8004324:	0018      	movs	r0, r3
 8004326:	f002 fbd3 	bl	8006ad0 <HAL_RCC_OscConfig>
 800432a:	0003      	movs	r3, r0
 800432c:	1e5a      	subs	r2, r3, #1
 800432e:	4193      	sbcs	r3, r2
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8004336:	f000 fc63 	bl	8004c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800433a:	2110      	movs	r1, #16
 800433c:	187b      	adds	r3, r7, r1
 800433e:	2207      	movs	r2, #7
 8004340:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004342:	187b      	adds	r3, r7, r1
 8004344:	2202      	movs	r2, #2
 8004346:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004348:	187b      	adds	r3, r7, r1
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800434e:	187b      	adds	r3, r7, r1
 8004350:	2200      	movs	r2, #0
 8004352:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004354:	187b      	adds	r3, r7, r1
 8004356:	2101      	movs	r1, #1
 8004358:	0018      	movs	r0, r3
 800435a:	f002 fed5 	bl	8007108 <HAL_RCC_ClockConfig>
 800435e:	0003      	movs	r3, r0
 8004360:	1e5a      	subs	r2, r3, #1
 8004362:	4193      	sbcs	r3, r2
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800436a:	f000 fc49 	bl	8004c00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800436e:	003b      	movs	r3, r7
 8004370:	2201      	movs	r2, #1
 8004372:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004374:	003b      	movs	r3, r7
 8004376:	2200      	movs	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800437a:	003b      	movs	r3, r7
 800437c:	0018      	movs	r0, r3
 800437e:	f003 f815 	bl	80073ac <HAL_RCCEx_PeriphCLKConfig>
 8004382:	0003      	movs	r3, r0
 8004384:	1e5a      	subs	r2, r3, #1
 8004386:	4193      	sbcs	r3, r2
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800438e:	f000 fc37 	bl	8004c00 <Error_Handler>
  }
}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	46bd      	mov	sp, r7
 8004396:	b015      	add	sp, #84	; 0x54
 8004398:	bd90      	pop	{r4, r7, pc}
	...

0800439c <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	0018      	movs	r0, r3
 80043a6:	230c      	movs	r3, #12
 80043a8:	001a      	movs	r2, r3
 80043aa:	2100      	movs	r1, #0
 80043ac:	f004 fc7a 	bl	8008ca4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80043b0:	4b2a      	ldr	r3, [pc, #168]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043b2:	4a2b      	ldr	r2, [pc, #172]	; (8004460 <_ZL11MX_ADC_Initv+0xc4>)
 80043b4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80043bc:	4b27      	ldr	r3, [pc, #156]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043be:	2200      	movs	r2, #0
 80043c0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80043c2:	4b26      	ldr	r3, [pc, #152]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80043c8:	4b24      	ldr	r3, [pc, #144]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80043ce:	4b23      	ldr	r3, [pc, #140]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043d0:	2204      	movs	r2, #4
 80043d2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80043d4:	4b21      	ldr	r3, [pc, #132]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043dc:	2200      	movs	r2, #0
 80043de:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80043e0:	4b1e      	ldr	r3, [pc, #120]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043ee:	22c2      	movs	r2, #194	; 0xc2
 80043f0:	32ff      	adds	r2, #255	; 0xff
 80043f2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80043f4:	4b19      	ldr	r3, [pc, #100]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80043fa:	4b18      	ldr	r3, [pc, #96]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 80043fc:	2224      	movs	r2, #36	; 0x24
 80043fe:	2100      	movs	r1, #0
 8004400:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004402:	4b16      	ldr	r3, [pc, #88]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 8004404:	2201      	movs	r2, #1
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004408:	4b14      	ldr	r3, [pc, #80]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 800440a:	0018      	movs	r0, r3
 800440c:	f001 fc2e 	bl	8005c6c <HAL_ADC_Init>
 8004410:	0003      	movs	r3, r0
 8004412:	1e5a      	subs	r2, r3, #1
 8004414:	4193      	sbcs	r3, r2
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <_ZL11MX_ADC_Initv+0x84>
  {
    Error_Handler();
 800441c:	f000 fbf0 	bl	8004c00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004420:	1d3b      	adds	r3, r7, #4
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004426:	1d3b      	adds	r3, r7, #4
 8004428:	2280      	movs	r2, #128	; 0x80
 800442a:	0152      	lsls	r2, r2, #5
 800442c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	2280      	movs	r2, #128	; 0x80
 8004432:	0552      	lsls	r2, r2, #21
 8004434:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004436:	1d3a      	adds	r2, r7, #4
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <_ZL11MX_ADC_Initv+0xc0>)
 800443a:	0011      	movs	r1, r2
 800443c:	0018      	movs	r0, r3
 800443e:	f001 fdb5 	bl	8005fac <HAL_ADC_ConfigChannel>
 8004442:	0003      	movs	r3, r0
 8004444:	1e5a      	subs	r2, r3, #1
 8004446:	4193      	sbcs	r3, r2
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <_ZL11MX_ADC_Initv+0xb6>
  {
    Error_Handler();
 800444e:	f000 fbd7 	bl	8004c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	b004      	add	sp, #16
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	200000dc 	.word	0x200000dc
 8004460:	40012400 	.word	0x40012400

08004464 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004468:	4b26      	ldr	r3, [pc, #152]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 800446a:	4a27      	ldr	r2, [pc, #156]	; (8004508 <_ZL12MX_SPI1_Initv+0xa4>)
 800446c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800446e:	4b25      	ldr	r3, [pc, #148]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 8004470:	2282      	movs	r2, #130	; 0x82
 8004472:	0052      	lsls	r2, r2, #1
 8004474:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004476:	4b23      	ldr	r3, [pc, #140]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 8004478:	2200      	movs	r2, #0
 800447a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800447c:	4b21      	ldr	r3, [pc, #132]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 800447e:	22e0      	movs	r2, #224	; 0xe0
 8004480:	00d2      	lsls	r2, r2, #3
 8004482:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004484:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 8004486:	2200      	movs	r2, #0
 8004488:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 800448c:	2200      	movs	r2, #0
 800448e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	0092      	lsls	r2, r2, #2
 8004496:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004498:	4b1a      	ldr	r3, [pc, #104]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 800449a:	2220      	movs	r2, #32
 800449c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800449e:	4b19      	ldr	r3, [pc, #100]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80044a4:	4b17      	ldr	r3, [pc, #92]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044aa:	4b16      	ldr	r3, [pc, #88]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80044b0:	4b14      	ldr	r3, [pc, #80]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 80044b2:	2207      	movs	r2, #7
 80044b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80044b6:	4b13      	ldr	r3, [pc, #76]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80044bc:	4b11      	ldr	r3, [pc, #68]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 80044be:	2200      	movs	r2, #0
 80044c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80044c2:	4b10      	ldr	r3, [pc, #64]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 80044c4:	0018      	movs	r0, r3
 80044c6:	f003 f83f 	bl	8007548 <HAL_SPI_Init>
 80044ca:	0003      	movs	r3, r0
 80044cc:	1e5a      	subs	r2, r3, #1
 80044ce:	4193      	sbcs	r3, r2
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 80044d6:	f000 fb93 	bl	8004c00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* full duplex master, 8 bit transfer, default phase and polarity */
  hspi1.Instance->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI;
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b08      	ldr	r3, [pc, #32]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	21d1      	movs	r1, #209	; 0xd1
 80044e6:	0089      	lsls	r1, r1, #2
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]
  /* Disable receive FIFO, it'd complicate things when there is an odd number of bytes to transfer */
  hspi1.Instance->CR2 |= SPI_CR2_FRXTH;
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	4b04      	ldr	r3, [pc, #16]	; (8004504 <_ZL12MX_SPI1_Initv+0xa0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2180      	movs	r1, #128	; 0x80
 80044f8:	0149      	lsls	r1, r1, #5
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI1_Init 2 */

}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	2000011c 	.word	0x2000011c
 8004508:	40013000 	.word	0x40013000

0800450c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b096      	sub	sp, #88	; 0x58
 8004510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004512:	2348      	movs	r3, #72	; 0x48
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	0018      	movs	r0, r3
 8004518:	2310      	movs	r3, #16
 800451a:	001a      	movs	r2, r3
 800451c:	2100      	movs	r1, #0
 800451e:	f004 fbc1 	bl	8008ca4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004522:	2340      	movs	r3, #64	; 0x40
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	0018      	movs	r0, r3
 8004528:	2308      	movs	r3, #8
 800452a:	001a      	movs	r2, r3
 800452c:	2100      	movs	r1, #0
 800452e:	f004 fbb9 	bl	8008ca4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004532:	2324      	movs	r3, #36	; 0x24
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	0018      	movs	r0, r3
 8004538:	231c      	movs	r3, #28
 800453a:	001a      	movs	r2, r3
 800453c:	2100      	movs	r1, #0
 800453e:	f004 fbb1 	bl	8008ca4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004542:	1d3b      	adds	r3, r7, #4
 8004544:	0018      	movs	r0, r3
 8004546:	2320      	movs	r3, #32
 8004548:	001a      	movs	r2, r3
 800454a:	2100      	movs	r1, #0
 800454c:	f004 fbaa 	bl	8008ca4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004550:	4b69      	ldr	r3, [pc, #420]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004552:	4a6a      	ldr	r2, [pc, #424]	; (80046fc <_ZL12MX_TIM1_Initv+0x1f0>)
 8004554:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004556:	4b68      	ldr	r3, [pc, #416]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004558:	2200      	movs	r2, #0
 800455a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800455c:	4b66      	ldr	r3, [pc, #408]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8004562:	4b65      	ldr	r3, [pc, #404]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004564:	22fa      	movs	r2, #250	; 0xfa
 8004566:	0092      	lsls	r2, r2, #2
 8004568:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800456a:	4b63      	ldr	r3, [pc, #396]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004570:	4b61      	ldr	r3, [pc, #388]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004572:	2200      	movs	r2, #0
 8004574:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004576:	4b60      	ldr	r3, [pc, #384]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004578:	2280      	movs	r2, #128	; 0x80
 800457a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800457c:	4b5e      	ldr	r3, [pc, #376]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 800457e:	0018      	movs	r0, r3
 8004580:	f003 f87c 	bl	800767c <HAL_TIM_Base_Init>
 8004584:	0003      	movs	r3, r0
 8004586:	1e5a      	subs	r2, r3, #1
 8004588:	4193      	sbcs	r3, r2
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8004590:	f000 fb36 	bl	8004c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004594:	2148      	movs	r1, #72	; 0x48
 8004596:	187b      	adds	r3, r7, r1
 8004598:	2280      	movs	r2, #128	; 0x80
 800459a:	0152      	lsls	r2, r2, #5
 800459c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800459e:	187a      	adds	r2, r7, r1
 80045a0:	4b55      	ldr	r3, [pc, #340]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 80045a2:	0011      	movs	r1, r2
 80045a4:	0018      	movs	r0, r3
 80045a6:	f003 f9cd 	bl	8007944 <HAL_TIM_ConfigClockSource>
 80045aa:	0003      	movs	r3, r0
 80045ac:	1e5a      	subs	r2, r3, #1
 80045ae:	4193      	sbcs	r3, r2
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 80045b6:	f000 fb23 	bl	8004c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80045ba:	4b4f      	ldr	r3, [pc, #316]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 80045bc:	0018      	movs	r0, r3
 80045be:	f003 f889 	bl	80076d4 <HAL_TIM_PWM_Init>
 80045c2:	0003      	movs	r3, r0
 80045c4:	1e5a      	subs	r2, r3, #1
 80045c6:	4193      	sbcs	r3, r2
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 80045ce:	f000 fb17 	bl	8004c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045d2:	2140      	movs	r1, #64	; 0x40
 80045d4:	187b      	adds	r3, r7, r1
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045da:	187b      	adds	r3, r7, r1
 80045dc:	2200      	movs	r2, #0
 80045de:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80045e0:	187a      	adds	r2, r7, r1
 80045e2:	4b45      	ldr	r3, [pc, #276]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 80045e4:	0011      	movs	r1, r2
 80045e6:	0018      	movs	r0, r3
 80045e8:	f003 fd9a 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 80045ec:	0003      	movs	r3, r0
 80045ee:	1e5a      	subs	r2, r3, #1
 80045f0:	4193      	sbcs	r3, r2
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <_ZL12MX_TIM1_Initv+0xf0>
  {
    Error_Handler();
 80045f8:	f000 fb02 	bl	8004c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045fc:	2124      	movs	r1, #36	; 0x24
 80045fe:	187b      	adds	r3, r7, r1
 8004600:	2260      	movs	r2, #96	; 0x60
 8004602:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004604:	187b      	adds	r3, r7, r1
 8004606:	2200      	movs	r2, #0
 8004608:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800460a:	187b      	adds	r3, r7, r1
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004610:	187b      	adds	r3, r7, r1
 8004612:	2200      	movs	r2, #0
 8004614:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004616:	187b      	adds	r3, r7, r1
 8004618:	2200      	movs	r2, #0
 800461a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800461c:	187b      	adds	r3, r7, r1
 800461e:	2200      	movs	r2, #0
 8004620:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004622:	187b      	adds	r3, r7, r1
 8004624:	2200      	movs	r2, #0
 8004626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004628:	1879      	adds	r1, r7, r1
 800462a:	4b33      	ldr	r3, [pc, #204]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 800462c:	2200      	movs	r2, #0
 800462e:	0018      	movs	r0, r3
 8004630:	f003 f8d0 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 8004634:	0003      	movs	r3, r0
 8004636:	1e5a      	subs	r2, r3, #1
 8004638:	4193      	sbcs	r3, r2
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <_ZL12MX_TIM1_Initv+0x138>
  {
    Error_Handler();
 8004640:	f000 fade 	bl	8004c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004644:	2324      	movs	r3, #36	; 0x24
 8004646:	18f9      	adds	r1, r7, r3
 8004648:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 800464a:	2204      	movs	r2, #4
 800464c:	0018      	movs	r0, r3
 800464e:	f003 f8c1 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 8004652:	0003      	movs	r3, r0
 8004654:	1e5a      	subs	r2, r3, #1
 8004656:	4193      	sbcs	r3, r2
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <_ZL12MX_TIM1_Initv+0x156>
  {
    Error_Handler();
 800465e:	f000 facf 	bl	8004c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004662:	2324      	movs	r3, #36	; 0x24
 8004664:	18f9      	adds	r1, r7, r3
 8004666:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004668:	2208      	movs	r2, #8
 800466a:	0018      	movs	r0, r3
 800466c:	f003 f8b2 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 8004670:	0003      	movs	r3, r0
 8004672:	1e5a      	subs	r2, r3, #1
 8004674:	4193      	sbcs	r3, r2
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <_ZL12MX_TIM1_Initv+0x174>
  {
    Error_Handler();
 800467c:	f000 fac0 	bl	8004c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004680:	2324      	movs	r3, #36	; 0x24
 8004682:	18f9      	adds	r1, r7, r3
 8004684:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004686:	220c      	movs	r2, #12
 8004688:	0018      	movs	r0, r3
 800468a:	f003 f8a3 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 800468e:	0003      	movs	r3, r0
 8004690:	1e5a      	subs	r2, r3, #1
 8004692:	4193      	sbcs	r3, r2
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <_ZL12MX_TIM1_Initv+0x192>
  {
    Error_Handler();
 800469a:	f000 fab1 	bl	8004c00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800469e:	1d3b      	adds	r3, r7, #4
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80046a4:	1d3b      	adds	r3, r7, #4
 80046a6:	2200      	movs	r2, #0
 80046a8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80046b0:	1d3b      	adds	r3, r7, #4
 80046b2:	2200      	movs	r2, #0
 80046b4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	2200      	movs	r2, #0
 80046ba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80046bc:	1d3b      	adds	r3, r7, #4
 80046be:	2280      	movs	r2, #128	; 0x80
 80046c0:	0192      	lsls	r2, r2, #6
 80046c2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046c4:	1d3b      	adds	r3, r7, #4
 80046c6:	2200      	movs	r2, #0
 80046c8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80046ca:	1d3a      	adds	r2, r7, #4
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 80046ce:	0011      	movs	r1, r2
 80046d0:	0018      	movs	r0, r3
 80046d2:	f003 fd7d 	bl	80081d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80046d6:	0003      	movs	r3, r0
 80046d8:	1e5a      	subs	r2, r3, #1
 80046da:	4193      	sbcs	r3, r2
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <_ZL12MX_TIM1_Initv+0x1da>
  {
    Error_Handler();
 80046e2:	f000 fa8d 	bl	8004c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80046e6:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <_ZL12MX_TIM1_Initv+0x1ec>)
 80046e8:	0018      	movs	r0, r3
 80046ea:	f000 ffbd 	bl	8005668 <HAL_TIM_MspPostInit>

}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b016      	add	sp, #88	; 0x58
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	20000208 	.word	0x20000208
 80046fc:	40012c00 	.word	0x40012c00

08004700 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08e      	sub	sp, #56	; 0x38
 8004704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004706:	2328      	movs	r3, #40	; 0x28
 8004708:	18fb      	adds	r3, r7, r3
 800470a:	0018      	movs	r0, r3
 800470c:	2310      	movs	r3, #16
 800470e:	001a      	movs	r2, r3
 8004710:	2100      	movs	r1, #0
 8004712:	f004 fac7 	bl	8008ca4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004716:	2320      	movs	r3, #32
 8004718:	18fb      	adds	r3, r7, r3
 800471a:	0018      	movs	r0, r3
 800471c:	2308      	movs	r3, #8
 800471e:	001a      	movs	r2, r3
 8004720:	2100      	movs	r1, #0
 8004722:	f004 fabf 	bl	8008ca4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004726:	1d3b      	adds	r3, r7, #4
 8004728:	0018      	movs	r0, r3
 800472a:	231c      	movs	r3, #28
 800472c:	001a      	movs	r2, r3
 800472e:	2100      	movs	r1, #0
 8004730:	f004 fab8 	bl	8008ca4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004734:	4b4e      	ldr	r3, [pc, #312]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 8004736:	4a4f      	ldr	r2, [pc, #316]	; (8004874 <_ZL12MX_TIM3_Initv+0x174>)
 8004738:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800473a:	4b4d      	ldr	r3, [pc, #308]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 800473c:	2200      	movs	r2, #0
 800473e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004740:	4b4b      	ldr	r3, [pc, #300]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 8004742:	2200      	movs	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004746:	4b4a      	ldr	r3, [pc, #296]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 8004748:	4a4b      	ldr	r2, [pc, #300]	; (8004878 <_ZL12MX_TIM3_Initv+0x178>)
 800474a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800474c:	4b48      	ldr	r3, [pc, #288]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 800474e:	2200      	movs	r2, #0
 8004750:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004752:	4b47      	ldr	r3, [pc, #284]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 8004754:	2280      	movs	r2, #128	; 0x80
 8004756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004758:	4b45      	ldr	r3, [pc, #276]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 800475a:	0018      	movs	r0, r3
 800475c:	f002 ff8e 	bl	800767c <HAL_TIM_Base_Init>
 8004760:	0003      	movs	r3, r0
 8004762:	1e5a      	subs	r2, r3, #1
 8004764:	4193      	sbcs	r3, r2
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 800476c:	f000 fa48 	bl	8004c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004770:	2128      	movs	r1, #40	; 0x28
 8004772:	187b      	adds	r3, r7, r1
 8004774:	2280      	movs	r2, #128	; 0x80
 8004776:	0152      	lsls	r2, r2, #5
 8004778:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800477a:	187a      	adds	r2, r7, r1
 800477c:	4b3c      	ldr	r3, [pc, #240]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 800477e:	0011      	movs	r1, r2
 8004780:	0018      	movs	r0, r3
 8004782:	f003 f8df 	bl	8007944 <HAL_TIM_ConfigClockSource>
 8004786:	0003      	movs	r3, r0
 8004788:	1e5a      	subs	r2, r3, #1
 800478a:	4193      	sbcs	r3, r2
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8004792:	f000 fa35 	bl	8004c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004796:	4b36      	ldr	r3, [pc, #216]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 8004798:	0018      	movs	r0, r3
 800479a:	f002 ff9b 	bl	80076d4 <HAL_TIM_PWM_Init>
 800479e:	0003      	movs	r3, r0
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	4193      	sbcs	r3, r2
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80047aa:	f000 fa29 	bl	8004c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047ae:	2120      	movs	r1, #32
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047b6:	187b      	adds	r3, r7, r1
 80047b8:	2200      	movs	r2, #0
 80047ba:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80047bc:	187a      	adds	r2, r7, r1
 80047be:	4b2c      	ldr	r3, [pc, #176]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 80047c0:	0011      	movs	r1, r2
 80047c2:	0018      	movs	r0, r3
 80047c4:	f003 fcac 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 80047c8:	0003      	movs	r3, r0
 80047ca:	1e5a      	subs	r2, r3, #1
 80047cc:	4193      	sbcs	r3, r2
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80047d4:	f000 fa14 	bl	8004c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047d8:	1d3b      	adds	r3, r7, #4
 80047da:	2260      	movs	r2, #96	; 0x60
 80047dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	2200      	movs	r2, #0
 80047e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	2200      	movs	r2, #0
 80047e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	2200      	movs	r2, #0
 80047ee:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047f0:	1d39      	adds	r1, r7, #4
 80047f2:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	0018      	movs	r0, r3
 80047f8:	f002 ffec 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 80047fc:	0003      	movs	r3, r0
 80047fe:	1e5a      	subs	r2, r3, #1
 8004800:	4193      	sbcs	r3, r2
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8004808:	f000 f9fa 	bl	8004c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800480c:	1d39      	adds	r1, r7, #4
 800480e:	4b18      	ldr	r3, [pc, #96]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 8004810:	2204      	movs	r2, #4
 8004812:	0018      	movs	r0, r3
 8004814:	f002 ffde 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 8004818:	0003      	movs	r3, r0
 800481a:	1e5a      	subs	r2, r3, #1
 800481c:	4193      	sbcs	r3, r2
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8004824:	f000 f9ec 	bl	8004c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004828:	1d39      	adds	r1, r7, #4
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 800482c:	2208      	movs	r2, #8
 800482e:	0018      	movs	r0, r3
 8004830:	f002 ffd0 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 8004834:	0003      	movs	r3, r0
 8004836:	1e5a      	subs	r2, r3, #1
 8004838:	4193      	sbcs	r3, r2
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <_ZL12MX_TIM3_Initv+0x144>
  {
    Error_Handler();
 8004840:	f000 f9de 	bl	8004c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004844:	1d39      	adds	r1, r7, #4
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 8004848:	220c      	movs	r2, #12
 800484a:	0018      	movs	r0, r3
 800484c:	f002 ffc2 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 8004850:	0003      	movs	r3, r0
 8004852:	1e5a      	subs	r2, r3, #1
 8004854:	4193      	sbcs	r3, r2
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <_ZL12MX_TIM3_Initv+0x160>
  {
    Error_Handler();
 800485c:	f000 f9d0 	bl	8004c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004860:	4b03      	ldr	r3, [pc, #12]	; (8004870 <_ZL12MX_TIM3_Initv+0x170>)
 8004862:	0018      	movs	r0, r3
 8004864:	f000 ff00 	bl	8005668 <HAL_TIM_MspPostInit>

}
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	b00e      	add	sp, #56	; 0x38
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000248 	.word	0x20000248
 8004874:	40000400 	.word	0x40000400
 8004878:	0000ffff 	.word	0x0000ffff

0800487c <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b090      	sub	sp, #64	; 0x40
 8004880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004882:	2324      	movs	r3, #36	; 0x24
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	0018      	movs	r0, r3
 8004888:	231c      	movs	r3, #28
 800488a:	001a      	movs	r2, r3
 800488c:	2100      	movs	r1, #0
 800488e:	f004 fa09 	bl	8008ca4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004892:	1d3b      	adds	r3, r7, #4
 8004894:	0018      	movs	r0, r3
 8004896:	2320      	movs	r3, #32
 8004898:	001a      	movs	r2, r3
 800489a:	2100      	movs	r1, #0
 800489c:	f004 fa02 	bl	8008ca4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80048a0:	4b3e      	ldr	r3, [pc, #248]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 80048a2:	4a3f      	ldr	r2, [pc, #252]	; (80049a0 <_ZL13MX_TIM17_Initv+0x124>)
 80048a4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80048a6:	4b3d      	ldr	r3, [pc, #244]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048ac:	4b3b      	ldr	r3, [pc, #236]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1920;
 80048b2:	4b3a      	ldr	r3, [pc, #232]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 80048b4:	22f0      	movs	r2, #240	; 0xf0
 80048b6:	00d2      	lsls	r2, r2, #3
 80048b8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048ba:	4b38      	ldr	r3, [pc, #224]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 80048bc:	2200      	movs	r2, #0
 80048be:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80048c0:	4b36      	ldr	r3, [pc, #216]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048c6:	4b35      	ldr	r3, [pc, #212]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 80048c8:	2280      	movs	r2, #128	; 0x80
 80048ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80048cc:	4b33      	ldr	r3, [pc, #204]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 80048ce:	0018      	movs	r0, r3
 80048d0:	f002 fed4 	bl	800767c <HAL_TIM_Base_Init>
 80048d4:	0003      	movs	r3, r0
 80048d6:	1e5a      	subs	r2, r3, #1
 80048d8:	4193      	sbcs	r3, r2
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <_ZL13MX_TIM17_Initv+0x68>
  {
    Error_Handler();
 80048e0:	f000 f98e 	bl	8004c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80048e4:	4b2d      	ldr	r3, [pc, #180]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 80048e6:	0018      	movs	r0, r3
 80048e8:	f002 fef4 	bl	80076d4 <HAL_TIM_PWM_Init>
 80048ec:	0003      	movs	r3, r0
 80048ee:	1e5a      	subs	r2, r3, #1
 80048f0:	4193      	sbcs	r3, r2
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <_ZL13MX_TIM17_Initv+0x80>
  {
    Error_Handler();
 80048f8:	f000 f982 	bl	8004c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048fc:	2124      	movs	r1, #36	; 0x24
 80048fe:	187b      	adds	r3, r7, r1
 8004900:	2260      	movs	r2, #96	; 0x60
 8004902:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004904:	187b      	adds	r3, r7, r1
 8004906:	2200      	movs	r2, #0
 8004908:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800490a:	187b      	adds	r3, r7, r1
 800490c:	2200      	movs	r2, #0
 800490e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004910:	187b      	adds	r3, r7, r1
 8004912:	2200      	movs	r2, #0
 8004914:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004916:	187b      	adds	r3, r7, r1
 8004918:	2204      	movs	r2, #4
 800491a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800491c:	187b      	adds	r3, r7, r1
 800491e:	2200      	movs	r2, #0
 8004920:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004922:	187b      	adds	r3, r7, r1
 8004924:	2200      	movs	r2, #0
 8004926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004928:	1879      	adds	r1, r7, r1
 800492a:	4b1c      	ldr	r3, [pc, #112]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 800492c:	2200      	movs	r2, #0
 800492e:	0018      	movs	r0, r3
 8004930:	f002 ff50 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 8004934:	0003      	movs	r3, r0
 8004936:	1e5a      	subs	r2, r3, #1
 8004938:	4193      	sbcs	r3, r2
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <_ZL13MX_TIM17_Initv+0xc8>
  {
    Error_Handler();
 8004940:	f000 f95e 	bl	8004c00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004944:	1d3b      	adds	r3, r7, #4
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800494a:	1d3b      	adds	r3, r7, #4
 800494c:	2200      	movs	r2, #0
 800494e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004950:	1d3b      	adds	r3, r7, #4
 8004952:	2200      	movs	r2, #0
 8004954:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004956:	1d3b      	adds	r3, r7, #4
 8004958:	2200      	movs	r2, #0
 800495a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800495c:	1d3b      	adds	r3, r7, #4
 800495e:	2200      	movs	r2, #0
 8004960:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004962:	1d3b      	adds	r3, r7, #4
 8004964:	2280      	movs	r2, #128	; 0x80
 8004966:	0192      	lsls	r2, r2, #6
 8004968:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	2200      	movs	r2, #0
 800496e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004970:	1d3a      	adds	r2, r7, #4
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 8004974:	0011      	movs	r1, r2
 8004976:	0018      	movs	r0, r3
 8004978:	f003 fc2a 	bl	80081d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800497c:	0003      	movs	r3, r0
 800497e:	1e5a      	subs	r2, r3, #1
 8004980:	4193      	sbcs	r3, r2
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <_ZL13MX_TIM17_Initv+0x110>
  {
    Error_Handler();
 8004988:	f000 f93a 	bl	8004c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800498c:	4b03      	ldr	r3, [pc, #12]	; (800499c <_ZL13MX_TIM17_Initv+0x120>)
 800498e:	0018      	movs	r0, r3
 8004990:	f000 fe6a 	bl	8005668 <HAL_TIM_MspPostInit>

}
 8004994:	46c0      	nop			; (mov r8, r8)
 8004996:	46bd      	mov	sp, r7
 8004998:	b010      	add	sp, #64	; 0x40
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000288 	.word	0x20000288
 80049a0:	40014800 	.word	0x40014800

080049a4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80049a8:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80049aa:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <_ZL19MX_USART1_UART_Initv+0x64>)
 80049ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 80049ae:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80049b0:	4a16      	ldr	r2, [pc, #88]	; (8004a0c <_ZL19MX_USART1_UART_Initv+0x68>)
 80049b2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049b4:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80049bc:	2200      	movs	r2, #0
 80049be:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049c0:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049c6:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80049c8:	220c      	movs	r2, #12
 80049ca:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049cc:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80049da:	2200      	movs	r2, #0
 80049dc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049e4:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <_ZL19MX_USART1_UART_Initv+0x60>)
 80049e6:	0018      	movs	r0, r3
 80049e8:	f003 fc50 	bl	800828c <HAL_UART_Init>
 80049ec:	0003      	movs	r3, r0
 80049ee:	1e5a      	subs	r2, r3, #1
 80049f0:	4193      	sbcs	r3, r2
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <_ZL19MX_USART1_UART_Initv+0x58>
  {
    Error_Handler();
 80049f8:	f000 f902 	bl	8004c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	200002c8 	.word	0x200002c8
 8004a08:	40013800 	.word	0x40013800
 8004a0c:	0003d090 	.word	0x0003d090

08004a10 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a14:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <_ZL19MX_USART2_UART_Initv+0x64>)
 8004a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004a1c:	2296      	movs	r2, #150	; 0x96
 8004a1e:	0212      	lsls	r2, r2, #8
 8004a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a22:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a34:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004a36:	220c      	movs	r2, #12
 8004a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004a54:	0018      	movs	r0, r3
 8004a56:	f003 fc19 	bl	800828c <HAL_UART_Init>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	1e5a      	subs	r2, r3, #1
 8004a5e:	4193      	sbcs	r3, r2
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8004a66:	f000 f8cb 	bl	8004c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000348 	.word	0x20000348
 8004a74:	40004400 	.word	0x40004400

08004a78 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004a7e:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <_ZL11MX_DMA_Initv+0x48>)
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <_ZL11MX_DMA_Initv+0x48>)
 8004a84:	2101      	movs	r1, #1
 8004a86:	430a      	orrs	r2, r1
 8004a88:	615a      	str	r2, [r3, #20]
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <_ZL11MX_DMA_Initv+0x48>)
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	4013      	ands	r3, r2
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004a96:	2200      	movs	r2, #0
 8004a98:	2100      	movs	r1, #0
 8004a9a:	200a      	movs	r0, #10
 8004a9c:	f001 fca4 	bl	80063e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004aa0:	200a      	movs	r0, #10
 8004aa2:	f001 fcb6 	bl	8006412 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	200b      	movs	r0, #11
 8004aac:	f001 fc9c 	bl	80063e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8004ab0:	200b      	movs	r0, #11
 8004ab2:	f001 fcae 	bl	8006412 <HAL_NVIC_EnableIRQ>

}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b002      	add	sp, #8
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	40021000 	.word	0x40021000

08004ac4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b089      	sub	sp, #36	; 0x24
 8004ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aca:	240c      	movs	r4, #12
 8004acc:	193b      	adds	r3, r7, r4
 8004ace:	0018      	movs	r0, r3
 8004ad0:	2314      	movs	r3, #20
 8004ad2:	001a      	movs	r2, r3
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f004 f8e5 	bl	8008ca4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ada:	4b46      	ldr	r3, [pc, #280]	; (8004bf4 <_ZL12MX_GPIO_Initv+0x130>)
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	4b45      	ldr	r3, [pc, #276]	; (8004bf4 <_ZL12MX_GPIO_Initv+0x130>)
 8004ae0:	2180      	movs	r1, #128	; 0x80
 8004ae2:	03c9      	lsls	r1, r1, #15
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	615a      	str	r2, [r3, #20]
 8004ae8:	4b42      	ldr	r3, [pc, #264]	; (8004bf4 <_ZL12MX_GPIO_Initv+0x130>)
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	03db      	lsls	r3, r3, #15
 8004af0:	4013      	ands	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af6:	4b3f      	ldr	r3, [pc, #252]	; (8004bf4 <_ZL12MX_GPIO_Initv+0x130>)
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	4b3e      	ldr	r3, [pc, #248]	; (8004bf4 <_ZL12MX_GPIO_Initv+0x130>)
 8004afc:	2180      	movs	r1, #128	; 0x80
 8004afe:	0289      	lsls	r1, r1, #10
 8004b00:	430a      	orrs	r2, r1
 8004b02:	615a      	str	r2, [r3, #20]
 8004b04:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <_ZL12MX_GPIO_Initv+0x130>)
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	029b      	lsls	r3, r3, #10
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	607b      	str	r3, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b12:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <_ZL12MX_GPIO_Initv+0x130>)
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <_ZL12MX_GPIO_Initv+0x130>)
 8004b18:	2180      	movs	r1, #128	; 0x80
 8004b1a:	02c9      	lsls	r1, r1, #11
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	615a      	str	r2, [r3, #20]
 8004b20:	4b34      	ldr	r3, [pc, #208]	; (8004bf4 <_ZL12MX_GPIO_Initv+0x130>)
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	02db      	lsls	r3, r3, #11
 8004b28:	4013      	ands	r3, r2
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8004b2e:	2390      	movs	r3, #144	; 0x90
 8004b30:	05db      	lsls	r3, r3, #23
 8004b32:	2201      	movs	r2, #1
 8004b34:	2110      	movs	r1, #16
 8004b36:	0018      	movs	r0, r3
 8004b38:	f001 ff90 	bl	8006a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004b3c:	2380      	movs	r3, #128	; 0x80
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	482d      	ldr	r0, [pc, #180]	; (8004bf8 <_ZL12MX_GPIO_Initv+0x134>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	0019      	movs	r1, r3
 8004b46:	f001 ff89 	bl	8006a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8004b4a:	193b      	adds	r3, r7, r4
 8004b4c:	2210      	movs	r2, #16
 8004b4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b50:	193b      	adds	r3, r7, r4
 8004b52:	2201      	movs	r2, #1
 8004b54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b56:	193b      	adds	r3, r7, r4
 8004b58:	2200      	movs	r2, #0
 8004b5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004b5c:	193b      	adds	r3, r7, r4
 8004b5e:	2201      	movs	r2, #1
 8004b60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8004b62:	193a      	adds	r2, r7, r4
 8004b64:	2390      	movs	r3, #144	; 0x90
 8004b66:	05db      	lsls	r3, r3, #23
 8004b68:	0011      	movs	r1, r2
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f001 fe06 	bl	800677c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8004b70:	193b      	adds	r3, r7, r4
 8004b72:	2204      	movs	r2, #4
 8004b74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b76:	193b      	adds	r3, r7, r4
 8004b78:	4a20      	ldr	r2, [pc, #128]	; (8004bfc <_ZL12MX_GPIO_Initv+0x138>)
 8004b7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b7c:	193b      	adds	r3, r7, r4
 8004b7e:	2201      	movs	r2, #1
 8004b80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004b82:	193b      	adds	r3, r7, r4
 8004b84:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <_ZL12MX_GPIO_Initv+0x134>)
 8004b86:	0019      	movs	r1, r3
 8004b88:	0010      	movs	r0, r2
 8004b8a:	f001 fdf7 	bl	800677c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8004b8e:	0021      	movs	r1, r4
 8004b90:	187b      	adds	r3, r7, r1
 8004b92:	2280      	movs	r2, #128	; 0x80
 8004b94:	00d2      	lsls	r2, r2, #3
 8004b96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b98:	187b      	adds	r3, r7, r1
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9e:	187b      	adds	r3, r7, r1
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004ba4:	187b      	adds	r3, r7, r1
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8004baa:	000c      	movs	r4, r1
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <_ZL12MX_GPIO_Initv+0x134>)
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	0010      	movs	r0, r2
 8004bb4:	f001 fde2 	bl	800677c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_2_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 8004bb8:	0021      	movs	r1, r4
 8004bba:	187b      	adds	r3, r7, r1
 8004bbc:	22c0      	movs	r2, #192	; 0xc0
 8004bbe:	0192      	lsls	r2, r2, #6
 8004bc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bc2:	187b      	adds	r3, r7, r1
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bc8:	187b      	adds	r3, r7, r1
 8004bca:	2201      	movs	r2, #1
 8004bcc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bce:	187b      	adds	r3, r7, r1
 8004bd0:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <_ZL12MX_GPIO_Initv+0x134>)
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	0010      	movs	r0, r2
 8004bd6:	f001 fdd1 	bl	800677c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2101      	movs	r1, #1
 8004bde:	2006      	movs	r0, #6
 8004be0:	f001 fc02 	bl	80063e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004be4:	2006      	movs	r0, #6
 8004be6:	f001 fc14 	bl	8006412 <HAL_NVIC_EnableIRQ>

}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b009      	add	sp, #36	; 0x24
 8004bf0:	bd90      	pop	{r4, r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	48000400 	.word	0x48000400
 8004bfc:	10210000 	.word	0x10210000

08004c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <NRF24L01_InitPins>:
uint8_t NRF24L01_RxFifoEmpty(void);

/* NRF structure */
static NRF24L01_t NRF24L01_Struct;

void NRF24L01_InitPins(void) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
	/* CSN high = disable SPI */
	NRF24L01_CSN_HIGH;
 8004c10:	2390      	movs	r3, #144	; 0x90
 8004c12:	05db      	lsls	r3, r3, #23
 8004c14:	2201      	movs	r2, #1
 8004c16:	2110      	movs	r1, #16
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f001 ff1f 	bl	8006a5c <HAL_GPIO_WritePin>
	
	/* CE low = disable TX/RX */
	NRF24L01_CE_LOW;
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	4804      	ldr	r0, [pc, #16]	; (8004c34 <NRF24L01_InitPins+0x28>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	0019      	movs	r1, r3
 8004c28:	f001 ff18 	bl	8006a5c <HAL_GPIO_WritePin>
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	48000400 	.word	0x48000400

08004c38 <NRF24L01_Init>:

uint8_t NRF24L01_Init(uint8_t channel, uint8_t payload_size) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	0002      	movs	r2, r0
 8004c40:	1dfb      	adds	r3, r7, #7
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	1dbb      	adds	r3, r7, #6
 8004c46:	1c0a      	adds	r2, r1, #0
 8004c48:	701a      	strb	r2, [r3, #0]
	/* Initialize CE and CSN pins */
	NRF24L01_InitPins();
 8004c4a:	f7ff ffdf 	bl	8004c0c <NRF24L01_InitPins>
	
	/* Max payload is 32bytes */
	if (payload_size > 32) {
 8004c4e:	1dbb      	adds	r3, r7, #6
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d902      	bls.n	8004c5c <NRF24L01_Init+0x24>
		payload_size = 32;
 8004c56:	1dbb      	adds	r3, r7, #6
 8004c58:	2220      	movs	r2, #32
 8004c5a:	701a      	strb	r2, [r3, #0]
	}
	
	/* Fill structure */
	NRF24L01_Struct.Channel = !channel; /* Set channel to some different value for NRF24L01_SetChannel() function */
 8004c5c:	1dfb      	adds	r3, r7, #7
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	425a      	negs	r2, r3
 8004c62:	4153      	adcs	r3, r2
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	001a      	movs	r2, r3
 8004c68:	4b43      	ldr	r3, [pc, #268]	; (8004d78 <NRF24L01_Init+0x140>)
 8004c6a:	705a      	strb	r2, [r3, #1]
	NRF24L01_Struct.PayloadSize = payload_size;
 8004c6c:	4b42      	ldr	r3, [pc, #264]	; (8004d78 <NRF24L01_Init+0x140>)
 8004c6e:	1dba      	adds	r2, r7, #6
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	701a      	strb	r2, [r3, #0]
	NRF24L01_Struct.OutPwr = NRF24L01_OutputPower_0dBm;
 8004c74:	4b40      	ldr	r3, [pc, #256]	; (8004d78 <NRF24L01_Init+0x140>)
 8004c76:	2203      	movs	r2, #3
 8004c78:	709a      	strb	r2, [r3, #2]
	NRF24L01_Struct.DataRate = NRF24L01_DataRate_1M;
 8004c7a:	4b3f      	ldr	r3, [pc, #252]	; (8004d78 <NRF24L01_Init+0x140>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	70da      	strb	r2, [r3, #3]
	
	/* Reset nRF24L01+ to power on registers values */
	NRF24L01_SoftwareReset();
 8004c80:	f000 f9bc 	bl	8004ffc <NRF24L01_SoftwareReset>
 
	NRF24L01_GetStatus();
 8004c84:	f000 f99c 	bl	8004fc0 <NRF24L01_GetStatus>

	/* Channel select */
	NRF24L01_SetChannel(channel);
 8004c88:	1dfb      	adds	r3, r7, #7
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 fa83 	bl	8005198 <NRF24L01_SetChannel>
	
	/* Set pipeline to max possible 32 bytes */
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P0, NRF24L01_Struct.PayloadSize); // Auto-ACK pipe
 8004c92:	4b39      	ldr	r3, [pc, #228]	; (8004d78 <NRF24L01_Init+0x140>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	0019      	movs	r1, r3
 8004c98:	2011      	movs	r0, #17
 8004c9a:	f000 f86f 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P1, NRF24L01_Struct.PayloadSize); // Data payload pipe
 8004c9e:	4b36      	ldr	r3, [pc, #216]	; (8004d78 <NRF24L01_Init+0x140>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	0019      	movs	r1, r3
 8004ca4:	2012      	movs	r0, #18
 8004ca6:	f000 f869 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P2, NRF24L01_Struct.PayloadSize);
 8004caa:	4b33      	ldr	r3, [pc, #204]	; (8004d78 <NRF24L01_Init+0x140>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	0019      	movs	r1, r3
 8004cb0:	2013      	movs	r0, #19
 8004cb2:	f000 f863 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P3, NRF24L01_Struct.PayloadSize);
 8004cb6:	4b30      	ldr	r3, [pc, #192]	; (8004d78 <NRF24L01_Init+0x140>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	0019      	movs	r1, r3
 8004cbc:	2014      	movs	r0, #20
 8004cbe:	f000 f85d 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P4, NRF24L01_Struct.PayloadSize);
 8004cc2:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <NRF24L01_Init+0x140>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	2015      	movs	r0, #21
 8004cca:	f000 f857 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P5, NRF24L01_Struct.PayloadSize);
 8004cce:	4b2a      	ldr	r3, [pc, #168]	; (8004d78 <NRF24L01_Init+0x140>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	2016      	movs	r0, #22
 8004cd6:	f000 f851 	bl	8004d7c <NRF24L01_WriteRegister>
	
	/* Set RF settings (1mbps, output power) */
	NRF24L01_SetRF(NRF24L01_Struct.DataRate, NRF24L01_Struct.OutPwr);
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <NRF24L01_Init+0x140>)
 8004cdc:	78da      	ldrb	r2, [r3, #3]
 8004cde:	4b26      	ldr	r3, [pc, #152]	; (8004d78 <NRF24L01_Init+0x140>)
 8004ce0:	789b      	ldrb	r3, [r3, #2]
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	0010      	movs	r0, r2
 8004ce6:	f000 fa77 	bl	80051d8 <NRF24L01_SetRF>
	
	/* Config register */
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG);
 8004cea:	210c      	movs	r1, #12
 8004cec:	2000      	movs	r0, #0
 8004cee:	f000 f845 	bl	8004d7c <NRF24L01_WriteRegister>
	
	/* Enable auto-acknowledgment for all pipes */
	//NRF24L01_WriteRegister(NRF24L01_REG_EN_AA, 0x3F);

	/* Disable auto-acknowledgment for all pipes */
	NRF24L01_WriteRegister(NRF24L01_REG_EN_AA, 0x00);
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	f000 f841 	bl	8004d7c <NRF24L01_WriteRegister>
	
	/* Enable RX addresses */
	//NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, 0x3F);

	/* Disable RX addresses beside pipelines 0 and 1 */
	NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, ((1 << NRF24L01_ERX_P0) | (1 << NRF24L01_ERX_P1)));
 8004cfa:	2103      	movs	r1, #3
 8004cfc:	2002      	movs	r0, #2
 8004cfe:	f000 f83d 	bl	8004d7c <NRF24L01_WriteRegister>

	/* Auto retransmit delay: 1000 (4x250) us and Up to 15 retransmit trials */
	//NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, 0x4F);
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, 0x00);
 8004d02:	2100      	movs	r1, #0
 8004d04:	2004      	movs	r0, #4
 8004d06:	f000 f839 	bl	8004d7c <NRF24L01_WriteRegister>
	
	/* Dynamic length configurations: No dynamic length */
	NRF24L01_WriteRegister(NRF24L01_REG_DYNPD, (0 << NRF24L01_DPL_P0) | (0 << NRF24L01_DPL_P1) | (0 << NRF24L01_DPL_P2) | (0 << NRF24L01_DPL_P3) | (0 << NRF24L01_DPL_P4) | (0 << NRF24L01_DPL_P5));
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	201c      	movs	r0, #28
 8004d0e:	f000 f835 	bl	8004d7c <NRF24L01_WriteRegister>
	
	// Set address length to 4 bytes
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_AW, (0x02 << NRF24L01_AW));
 8004d12:	2102      	movs	r1, #2
 8004d14:	2003      	movs	r0, #3
 8004d16:	f000 f831 	bl	8004d7c <NRF24L01_WriteRegister>

	//Enable dynamic ACK
	NRF24L01_WriteRegister(NRF24L01_REG_FEATURE, 0x01);
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	201d      	movs	r0, #29
 8004d1e:	f000 f82d 	bl	8004d7c <NRF24L01_WriteRegister>

	/* Clear FIFOs */
	NRF24L01_FLUSH_TX;
 8004d22:	2390      	movs	r3, #144	; 0x90
 8004d24:	05db      	lsls	r3, r3, #23
 8004d26:	2200      	movs	r2, #0
 8004d28:	2110      	movs	r1, #16
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f001 fe96 	bl	8006a5c <HAL_GPIO_WritePin>
 8004d30:	20e1      	movs	r0, #225	; 0xe1
 8004d32:	f000 fab7 	bl	80052a4 <NRF24L01_SPI_Send>
 8004d36:	2390      	movs	r3, #144	; 0x90
 8004d38:	05db      	lsls	r3, r3, #23
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	2110      	movs	r1, #16
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f001 fe8c 	bl	8006a5c <HAL_GPIO_WritePin>
	NRF24L01_FLUSH_RX;
 8004d44:	2390      	movs	r3, #144	; 0x90
 8004d46:	05db      	lsls	r3, r3, #23
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2110      	movs	r1, #16
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f001 fe85 	bl	8006a5c <HAL_GPIO_WritePin>
 8004d52:	20e2      	movs	r0, #226	; 0xe2
 8004d54:	f000 faa6 	bl	80052a4 <NRF24L01_SPI_Send>
 8004d58:	2390      	movs	r3, #144	; 0x90
 8004d5a:	05db      	lsls	r3, r3, #23
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	2110      	movs	r1, #16
 8004d60:	0018      	movs	r0, r3
 8004d62:	f001 fe7b 	bl	8006a5c <HAL_GPIO_WritePin>
	
	/* Clear interrupts */
	NRF24L01_Clear_Interrupts();
 8004d66:	f000 fa93 	bl	8005290 <NRF24L01_Clear_Interrupts>
	
	/* Go to RX mode */
	NRF24L01_PowerUpRx();
 8004d6a:	f000 f895 	bl	8004e98 <NRF24L01_PowerUpRx>
	
	/* Return OK */
	return 1;
 8004d6e:	2301      	movs	r3, #1
}
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b002      	add	sp, #8
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000450 	.word	0x20000450

08004d7c <NRF24L01_WriteRegister>:
	NRF24L01_SPI_ReadMulti(data, NRF24L01_NOP_MASK, count);
	NRF24L01_CSN_HIGH;
}

uint8_t NRF24L01_WriteRegister(uint8_t reg, uint8_t value)
{
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	0002      	movs	r2, r0
 8004d84:	1dfb      	adds	r3, r7, #7
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	1dbb      	adds	r3, r7, #6
 8004d8a:	1c0a      	adds	r2, r1, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
	uint8_t Data[2];
	Data[0] = NRF24L01_WRITE_REGISTER_MASK(reg);
 8004d8e:	1dfb      	adds	r3, r7, #7
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	221f      	movs	r2, #31
 8004d94:	4013      	ands	r3, r2
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2220      	movs	r2, #32
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	240c      	movs	r4, #12
 8004da0:	193b      	adds	r3, r7, r4
 8004da2:	701a      	strb	r2, [r3, #0]
	Data[1] = value;
 8004da4:	193b      	adds	r3, r7, r4
 8004da6:	1dba      	adds	r2, r7, #6
 8004da8:	7812      	ldrb	r2, [r2, #0]
 8004daa:	705a      	strb	r2, [r3, #1]
	NRF24L01_CSN_LOW;
 8004dac:	2390      	movs	r3, #144	; 0x90
 8004dae:	05db      	lsls	r3, r3, #23
 8004db0:	2200      	movs	r2, #0
 8004db2:	2110      	movs	r1, #16
 8004db4:	0018      	movs	r0, r3
 8004db6:	f001 fe51 	bl	8006a5c <HAL_GPIO_WritePin>
	NRF24L01_SPI_SendMulti(Data, Data, 2);
 8004dba:	1939      	adds	r1, r7, r4
 8004dbc:	193b      	adds	r3, r7, r4
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f000 fac7 	bl	8005354 <NRF24L01_SPI_SendMulti>
	NRF24L01_CSN_HIGH;
 8004dc6:	2390      	movs	r3, #144	; 0x90
 8004dc8:	05db      	lsls	r3, r3, #23
 8004dca:	2201      	movs	r2, #1
 8004dcc:	2110      	movs	r1, #16
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f001 fe44 	bl	8006a5c <HAL_GPIO_WritePin>
	return Data[0];
 8004dd4:	193b      	adds	r3, r7, r4
 8004dd6:	781b      	ldrb	r3, [r3, #0]
}
 8004dd8:	0018      	movs	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b005      	add	sp, #20
 8004dde:	bd90      	pop	{r4, r7, pc}

08004de0 <NRF24L01_WriteRegisterMulti>:

void NRF24L01_WriteRegisterMulti(uint8_t reg, uint8_t *data, uint8_t count) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6039      	str	r1, [r7, #0]
 8004de8:	0011      	movs	r1, r2
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	1c02      	adds	r2, r0, #0
 8004dee:	701a      	strb	r2, [r3, #0]
 8004df0:	1dbb      	adds	r3, r7, #6
 8004df2:	1c0a      	adds	r2, r1, #0
 8004df4:	701a      	strb	r2, [r3, #0]
	NRF24L01_CSN_LOW;
 8004df6:	2390      	movs	r3, #144	; 0x90
 8004df8:	05db      	lsls	r3, r3, #23
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2110      	movs	r1, #16
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f001 fe2c 	bl	8006a5c <HAL_GPIO_WritePin>
	NRF24L01_SPI_Send(NRF24L01_WRITE_REGISTER_MASK(reg));
 8004e04:	1dfb      	adds	r3, r7, #7
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	221f      	movs	r2, #31
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2220      	movs	r2, #32
 8004e10:	4313      	orrs	r3, r2
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	0018      	movs	r0, r3
 8004e16:	f000 fa45 	bl	80052a4 <NRF24L01_SPI_Send>
	NRF24L01_SPI_WriteMulti(data, count);
 8004e1a:	1dbb      	adds	r3, r7, #6
 8004e1c:	781a      	ldrb	r2, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	0011      	movs	r1, r2
 8004e22:	0018      	movs	r0, r3
 8004e24:	f000 fa68 	bl	80052f8 <NRF24L01_SPI_WriteMulti>
	NRF24L01_CSN_HIGH;
 8004e28:	2390      	movs	r3, #144	; 0x90
 8004e2a:	05db      	lsls	r3, r3, #23
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2110      	movs	r1, #16
 8004e30:	0018      	movs	r0, r3
 8004e32:	f001 fe13 	bl	8006a5c <HAL_GPIO_WritePin>
}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b002      	add	sp, #8
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <NRF24L01_PowerUpTx>:

void NRF24L01_PowerUpTx(void) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
	/* Disable RX/TX mode */
	NRF24L01_CE_LOW;
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4812      	ldr	r0, [pc, #72]	; (8004e94 <NRF24L01_PowerUpTx+0x54>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	f001 fe05 	bl	8006a5c <HAL_GPIO_WritePin>
	/* Clear RX buffer */
	NRF24L01_FLUSH_TX;
 8004e52:	2390      	movs	r3, #144	; 0x90
 8004e54:	05db      	lsls	r3, r3, #23
 8004e56:	2200      	movs	r2, #0
 8004e58:	2110      	movs	r1, #16
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f001 fdfe 	bl	8006a5c <HAL_GPIO_WritePin>
 8004e60:	20e1      	movs	r0, #225	; 0xe1
 8004e62:	f000 fa1f 	bl	80052a4 <NRF24L01_SPI_Send>
 8004e66:	2390      	movs	r3, #144	; 0x90
 8004e68:	05db      	lsls	r3, r3, #23
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f001 fdf4 	bl	8006a5c <HAL_GPIO_WritePin>
	/* Clear interrupts */
	NRF24L01_Clear_Interrupts();
 8004e74:	f000 fa0c 	bl	8005290 <NRF24L01_Clear_Interrupts>
	/* Setup RX mode */
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG | (0 << NRF24L01_PRIM_RX) | (1 << NRF24L01_PWR_UP));
 8004e78:	210e      	movs	r1, #14
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f7ff ff7e 	bl	8004d7c <NRF24L01_WriteRegister>
	/* Start listening */
	NRF24L01_CE_HIGH;
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4803      	ldr	r0, [pc, #12]	; (8004e94 <NRF24L01_PowerUpTx+0x54>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	0019      	movs	r1, r3
 8004e8a:	f001 fde7 	bl	8006a5c <HAL_GPIO_WritePin>
}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	48000400 	.word	0x48000400

08004e98 <NRF24L01_PowerUpRx>:

void NRF24L01_PowerUpRx(void) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
	/* Disable RX/TX mode */
	NRF24L01_CE_LOW;
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4812      	ldr	r0, [pc, #72]	; (8004eec <NRF24L01_PowerUpRx+0x54>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	f001 fdd9 	bl	8006a5c <HAL_GPIO_WritePin>
	/* Clear RX buffer */
	NRF24L01_FLUSH_RX;
 8004eaa:	2390      	movs	r3, #144	; 0x90
 8004eac:	05db      	lsls	r3, r3, #23
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2110      	movs	r1, #16
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f001 fdd2 	bl	8006a5c <HAL_GPIO_WritePin>
 8004eb8:	20e2      	movs	r0, #226	; 0xe2
 8004eba:	f000 f9f3 	bl	80052a4 <NRF24L01_SPI_Send>
 8004ebe:	2390      	movs	r3, #144	; 0x90
 8004ec0:	05db      	lsls	r3, r3, #23
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	2110      	movs	r1, #16
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f001 fdc8 	bl	8006a5c <HAL_GPIO_WritePin>
	/* Clear interrupts */
	NRF24L01_Clear_Interrupts();
 8004ecc:	f000 f9e0 	bl	8005290 <NRF24L01_Clear_Interrupts>
	/* Setup RX mode */
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG | 1 << NRF24L01_PWR_UP | 1 << NRF24L01_PRIM_RX);
 8004ed0:	210f      	movs	r1, #15
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	f7ff ff52 	bl	8004d7c <NRF24L01_WriteRegister>
	/* Start listening */
	NRF24L01_CE_HIGH;
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	4803      	ldr	r0, [pc, #12]	; (8004eec <NRF24L01_PowerUpRx+0x54>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	f001 fdbb 	bl	8006a5c <HAL_GPIO_WritePin>
}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	48000400 	.word	0x48000400

08004ef0 <NRF24L01_Transmit>:
void NRF24L01_PowerDown(void) {
	NRF24L01_CE_LOW;
	NRF24L01_WriteBit(NRF24L01_REG_CONFIG, NRF24L01_PWR_UP, 0);
}

void NRF24L01_Transmit(uint8_t *data) {
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	uint8_t count = NRF24L01_Struct.PayloadSize;
 8004ef8:	240f      	movs	r4, #15
 8004efa:	193b      	adds	r3, r7, r4
 8004efc:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <NRF24L01_Transmit+0x80>)
 8004efe:	7812      	ldrb	r2, [r2, #0]
 8004f00:	701a      	strb	r2, [r3, #0]

	/* Chip enable put to low, disable it */
	//NRF24L01_CE_LOW;
	
	/* Go to power up tx mode */
	NRF24L01_PowerUpTx();
 8004f02:	f7ff ff9d 	bl	8004e40 <NRF24L01_PowerUpTx>
	
	/* Clear TX FIFO from NRF24L01+ */
	NRF24L01_FLUSH_TX;
 8004f06:	2390      	movs	r3, #144	; 0x90
 8004f08:	05db      	lsls	r3, r3, #23
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2110      	movs	r1, #16
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f001 fda4 	bl	8006a5c <HAL_GPIO_WritePin>
 8004f14:	20e1      	movs	r0, #225	; 0xe1
 8004f16:	f000 f9c5 	bl	80052a4 <NRF24L01_SPI_Send>
 8004f1a:	2390      	movs	r3, #144	; 0x90
 8004f1c:	05db      	lsls	r3, r3, #23
 8004f1e:	2201      	movs	r2, #1
 8004f20:	2110      	movs	r1, #16
 8004f22:	0018      	movs	r0, r3
 8004f24:	f001 fd9a 	bl	8006a5c <HAL_GPIO_WritePin>
	
	/* Send payload to nRF24L01+ */
	NRF24L01_CSN_LOW;
 8004f28:	2390      	movs	r3, #144	; 0x90
 8004f2a:	05db      	lsls	r3, r3, #23
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2110      	movs	r1, #16
 8004f30:	0018      	movs	r0, r3
 8004f32:	f001 fd93 	bl	8006a5c <HAL_GPIO_WritePin>
	/* Send write payload command */
	//NRF24L01_SPI_Send(NRF24L01_W_TX_PAYLOAD_MASK);
	NRF24L01_SPI_Send(NRF24L01_W_TX_PAYLOAD_NOACK_MASK);
 8004f36:	20b0      	movs	r0, #176	; 0xb0
 8004f38:	f000 f9b4 	bl	80052a4 <NRF24L01_SPI_Send>
	/* Fill payload with data*/
	NRF24L01_SPI_WriteMulti(data, count);
 8004f3c:	193b      	adds	r3, r7, r4
 8004f3e:	781a      	ldrb	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	0011      	movs	r1, r2
 8004f44:	0018      	movs	r0, r3
 8004f46:	f000 f9d7 	bl	80052f8 <NRF24L01_SPI_WriteMulti>
	/* Disable SPI */
	NRF24L01_CSN_HIGH;
 8004f4a:	2390      	movs	r3, #144	; 0x90
 8004f4c:	05db      	lsls	r3, r3, #23
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2110      	movs	r1, #16
 8004f52:	0018      	movs	r0, r3
 8004f54:	f001 fd82 	bl	8006a5c <HAL_GPIO_WritePin>
	
	/* Send data! */
	NRF24L01_CE_HIGH;
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4805      	ldr	r0, [pc, #20]	; (8004f74 <NRF24L01_Transmit+0x84>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	0019      	movs	r1, r3
 8004f62:	f001 fd7b 	bl	8006a5c <HAL_GPIO_WritePin>
}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	b005      	add	sp, #20
 8004f6c:	bd90      	pop	{r4, r7, pc}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	20000450 	.word	0x20000450
 8004f74:	48000400 	.word	0x48000400

08004f78 <NRF24L01_GetData>:

void NRF24L01_GetData(uint8_t* data) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	/* Pull down chip select */
	NRF24L01_CSN_LOW;
 8004f80:	2390      	movs	r3, #144	; 0x90
 8004f82:	05db      	lsls	r3, r3, #23
 8004f84:	2200      	movs	r2, #0
 8004f86:	2110      	movs	r1, #16
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f001 fd67 	bl	8006a5c <HAL_GPIO_WritePin>
	/* Send read payload command*/
	NRF24L01_SPI_Send(NRF24L01_R_RX_PAYLOAD_MASK);
 8004f8e:	2061      	movs	r0, #97	; 0x61
 8004f90:	f000 f988 	bl	80052a4 <NRF24L01_SPI_Send>
	/* Read payload */
	NRF24L01_SPI_SendMulti(data, data, NRF24L01_Struct.PayloadSize);
 8004f94:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <NRF24L01_GetData+0x44>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	001a      	movs	r2, r3
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 f9d8 	bl	8005354 <NRF24L01_SPI_SendMulti>
	/* Pull up chip select */
	NRF24L01_CSN_HIGH;
 8004fa4:	2390      	movs	r3, #144	; 0x90
 8004fa6:	05db      	lsls	r3, r3, #23
 8004fa8:	2201      	movs	r2, #1
 8004faa:	2110      	movs	r1, #16
 8004fac:	0018      	movs	r0, r3
 8004fae:	f001 fd55 	bl	8006a5c <HAL_GPIO_WritePin>
	
	/* Reset status register, clear RX_DR interrupt flag */
	//NRF24L01_WriteRegister(NRF24L01_REG_STATUS, (1 << NRF24L01_RX_DR));
}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b002      	add	sp, #8
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	20000450 	.word	0x20000450

08004fc0 <NRF24L01_GetStatus>:
uint8_t NRF24L01_RxFifoEmpty(void) {
	uint8_t reg = NRF24L01_ReadRegister(NRF24L01_REG_FIFO_STATUS);
	return NRF24L01_CHECK_BIT(reg, NRF24L01_RX_EMPTY);
}

uint8_t NRF24L01_GetStatus(void) {
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
	uint8_t Data;
	
	NRF24L01_CSN_LOW;
 8004fc6:	2390      	movs	r3, #144	; 0x90
 8004fc8:	05db      	lsls	r3, r3, #23
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2110      	movs	r1, #16
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f001 fd44 	bl	8006a5c <HAL_GPIO_WritePin>
	/* First received byte is always status register */
	Data = NRF24L01_SPI_Send(NRF24L01_READ_REGISTER_MASK(NRF24L01_REG_STATUS));
 8004fd4:	1dfc      	adds	r4, r7, #7
 8004fd6:	2007      	movs	r0, #7
 8004fd8:	f000 f964 	bl	80052a4 <NRF24L01_SPI_Send>
 8004fdc:	0003      	movs	r3, r0
 8004fde:	7023      	strb	r3, [r4, #0]
	/* Pull up chip select */
	NRF24L01_CSN_HIGH;
 8004fe0:	2390      	movs	r3, #144	; 0x90
 8004fe2:	05db      	lsls	r3, r3, #23
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	2110      	movs	r1, #16
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f001 fd37 	bl	8006a5c <HAL_GPIO_WritePin>
	
	return Data;
 8004fee:	1dfb      	adds	r3, r7, #7
 8004ff0:	781b      	ldrb	r3, [r3, #0]
}
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b003      	add	sp, #12
 8004ff8:	bd90      	pop	{r4, r7, pc}
	...

08004ffc <NRF24L01_SoftwareReset>:
	
	/* Still sending */
	return NRF24L01_Transmit_Status_Sending;
}

void NRF24L01_SoftwareReset(void) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
	uint8_t data[5];
	
	//Disable chip
	NRF24L01_CE_LOW;
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4863      	ldr	r0, [pc, #396]	; (8005194 <NRF24L01_SoftwareReset+0x198>)
 8005008:	2200      	movs	r2, #0
 800500a:	0019      	movs	r1, r3
 800500c:	f001 fd26 	bl	8006a5c <HAL_GPIO_WritePin>
	//Flush rx and Flush tx
	NRF24L01_CSN_LOW;
 8005010:	2390      	movs	r3, #144	; 0x90
 8005012:	05db      	lsls	r3, r3, #23
 8005014:	2200      	movs	r2, #0
 8005016:	2110      	movs	r1, #16
 8005018:	0018      	movs	r0, r3
 800501a:	f001 fd1f 	bl	8006a5c <HAL_GPIO_WritePin>
	NRF24L01_SPI_Send(NRF24L01_FLUSH_TX_MASK);
 800501e:	20e1      	movs	r0, #225	; 0xe1
 8005020:	f000 f940 	bl	80052a4 <NRF24L01_SPI_Send>
	NRF24L01_CSN_HIGH;
 8005024:	2390      	movs	r3, #144	; 0x90
 8005026:	05db      	lsls	r3, r3, #23
 8005028:	2201      	movs	r2, #1
 800502a:	2110      	movs	r1, #16
 800502c:	0018      	movs	r0, r3
 800502e:	f001 fd15 	bl	8006a5c <HAL_GPIO_WritePin>
	NRF24L01_CSN_LOW;
 8005032:	2390      	movs	r3, #144	; 0x90
 8005034:	05db      	lsls	r3, r3, #23
 8005036:	2200      	movs	r2, #0
 8005038:	2110      	movs	r1, #16
 800503a:	0018      	movs	r0, r3
 800503c:	f001 fd0e 	bl	8006a5c <HAL_GPIO_WritePin>
	NRF24L01_SPI_Send(NRF24L01_FLUSH_RX_MASK);
 8005040:	20e2      	movs	r0, #226	; 0xe2
 8005042:	f000 f92f 	bl	80052a4 <NRF24L01_SPI_Send>
	NRF24L01_CSN_HIGH;
 8005046:	2390      	movs	r3, #144	; 0x90
 8005048:	05db      	lsls	r3, r3, #23
 800504a:	2201      	movs	r2, #1
 800504c:	2110      	movs	r1, #16
 800504e:	0018      	movs	r0, r3
 8005050:	f001 fd04 	bl	8006a5c <HAL_GPIO_WritePin>

	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, 		NRF24L01_REG_DEFAULT_VAL_CONFIG);
 8005054:	2108      	movs	r1, #8
 8005056:	2000      	movs	r0, #0
 8005058:	f7ff fe90 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_EN_AA,		NRF24L01_REG_DEFAULT_VAL_EN_AA);
 800505c:	213f      	movs	r1, #63	; 0x3f
 800505e:	2001      	movs	r0, #1
 8005060:	f7ff fe8c 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, 	NRF24L01_REG_DEFAULT_VAL_EN_RXADDR);
 8005064:	2103      	movs	r1, #3
 8005066:	2002      	movs	r0, #2
 8005068:	f7ff fe88 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_AW, 	NRF24L01_REG_DEFAULT_VAL_SETUP_AW);
 800506c:	2103      	movs	r1, #3
 800506e:	2003      	movs	r0, #3
 8005070:	f7ff fe84 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, 	NRF24L01_REG_DEFAULT_VAL_SETUP_RETR);
 8005074:	2103      	movs	r1, #3
 8005076:	2004      	movs	r0, #4
 8005078:	f7ff fe80 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RF_CH, 		NRF24L01_REG_DEFAULT_VAL_RF_CH);
 800507c:	2102      	movs	r1, #2
 800507e:	2005      	movs	r0, #5
 8005080:	f7ff fe7c 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RF_SETUP, 	NRF24L01_REG_DEFAULT_VAL_RF_SETUP);
 8005084:	210e      	movs	r1, #14
 8005086:	2006      	movs	r0, #6
 8005088:	f7ff fe78 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_STATUS, 		NRF24L01_REG_DEFAULT_VAL_STATUS);
 800508c:	210e      	movs	r1, #14
 800508e:	2007      	movs	r0, #7
 8005090:	f7ff fe74 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_OBSERVE_TX, 	NRF24L01_REG_DEFAULT_VAL_OBSERVE_TX);
 8005094:	2100      	movs	r1, #0
 8005096:	2008      	movs	r0, #8
 8005098:	f7ff fe70 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RPD, 		NRF24L01_REG_DEFAULT_VAL_RPD);
 800509c:	2100      	movs	r1, #0
 800509e:	2009      	movs	r0, #9
 80050a0:	f7ff fe6c 	bl	8004d7c <NRF24L01_WriteRegister>
	
	//P0
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_0;
 80050a4:	003b      	movs	r3, r7
 80050a6:	22e7      	movs	r2, #231	; 0xe7
 80050a8:	701a      	strb	r2, [r3, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_1;
 80050aa:	003b      	movs	r3, r7
 80050ac:	22e7      	movs	r2, #231	; 0xe7
 80050ae:	705a      	strb	r2, [r3, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_2;
 80050b0:	003b      	movs	r3, r7
 80050b2:	22e7      	movs	r2, #231	; 0xe7
 80050b4:	709a      	strb	r2, [r3, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_3;
 80050b6:	003b      	movs	r3, r7
 80050b8:	22e7      	movs	r2, #231	; 0xe7
 80050ba:	70da      	strb	r2, [r3, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_4;
 80050bc:	003b      	movs	r3, r7
 80050be:	22e7      	movs	r2, #231	; 0xe7
 80050c0:	711a      	strb	r2, [r3, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P0, data, 5);
 80050c2:	003b      	movs	r3, r7
 80050c4:	2205      	movs	r2, #5
 80050c6:	0019      	movs	r1, r3
 80050c8:	200a      	movs	r0, #10
 80050ca:	f7ff fe89 	bl	8004de0 <NRF24L01_WriteRegisterMulti>
	
	//P1
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_0;
 80050ce:	003b      	movs	r3, r7
 80050d0:	22c2      	movs	r2, #194	; 0xc2
 80050d2:	701a      	strb	r2, [r3, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_1;
 80050d4:	003b      	movs	r3, r7
 80050d6:	22c2      	movs	r2, #194	; 0xc2
 80050d8:	705a      	strb	r2, [r3, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_2;
 80050da:	003b      	movs	r3, r7
 80050dc:	22c2      	movs	r2, #194	; 0xc2
 80050de:	709a      	strb	r2, [r3, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_3;
 80050e0:	003b      	movs	r3, r7
 80050e2:	22c2      	movs	r2, #194	; 0xc2
 80050e4:	70da      	strb	r2, [r3, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_4;
 80050e6:	003b      	movs	r3, r7
 80050e8:	22c2      	movs	r2, #194	; 0xc2
 80050ea:	711a      	strb	r2, [r3, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P1, data, 5);
 80050ec:	003b      	movs	r3, r7
 80050ee:	2205      	movs	r2, #5
 80050f0:	0019      	movs	r1, r3
 80050f2:	200b      	movs	r0, #11
 80050f4:	f7ff fe74 	bl	8004de0 <NRF24L01_WriteRegisterMulti>
	
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P2, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P2);
 80050f8:	21c3      	movs	r1, #195	; 0xc3
 80050fa:	200c      	movs	r0, #12
 80050fc:	f7ff fe3e 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P3, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P3);
 8005100:	21c4      	movs	r1, #196	; 0xc4
 8005102:	200d      	movs	r0, #13
 8005104:	f7ff fe3a 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P4, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P4);
 8005108:	21c5      	movs	r1, #197	; 0xc5
 800510a:	200e      	movs	r0, #14
 800510c:	f7ff fe36 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P5, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P5);
 8005110:	21c6      	movs	r1, #198	; 0xc6
 8005112:	200f      	movs	r0, #15
 8005114:	f7ff fe32 	bl	8004d7c <NRF24L01_WriteRegister>
	
	//TX
	data[0] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_0;
 8005118:	003b      	movs	r3, r7
 800511a:	22e7      	movs	r2, #231	; 0xe7
 800511c:	701a      	strb	r2, [r3, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_1;
 800511e:	003b      	movs	r3, r7
 8005120:	22e7      	movs	r2, #231	; 0xe7
 8005122:	705a      	strb	r2, [r3, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_2;
 8005124:	003b      	movs	r3, r7
 8005126:	22e7      	movs	r2, #231	; 0xe7
 8005128:	709a      	strb	r2, [r3, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_3;
 800512a:	003b      	movs	r3, r7
 800512c:	22e7      	movs	r2, #231	; 0xe7
 800512e:	70da      	strb	r2, [r3, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_4;
 8005130:	003b      	movs	r3, r7
 8005132:	22e7      	movs	r2, #231	; 0xe7
 8005134:	711a      	strb	r2, [r3, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_TX_ADDR, data, 5);
 8005136:	003b      	movs	r3, r7
 8005138:	2205      	movs	r2, #5
 800513a:	0019      	movs	r1, r3
 800513c:	2010      	movs	r0, #16
 800513e:	f7ff fe4f 	bl	8004de0 <NRF24L01_WriteRegisterMulti>
	
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P0, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P0);
 8005142:	2100      	movs	r1, #0
 8005144:	2011      	movs	r0, #17
 8005146:	f7ff fe19 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P1, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P1);
 800514a:	2100      	movs	r1, #0
 800514c:	2012      	movs	r0, #18
 800514e:	f7ff fe15 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P2, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P2);
 8005152:	2100      	movs	r1, #0
 8005154:	2013      	movs	r0, #19
 8005156:	f7ff fe11 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P3, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P3);
 800515a:	2100      	movs	r1, #0
 800515c:	2014      	movs	r0, #20
 800515e:	f7ff fe0d 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P4, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P4);
 8005162:	2100      	movs	r1, #0
 8005164:	2015      	movs	r0, #21
 8005166:	f7ff fe09 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P5, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P5);
 800516a:	2100      	movs	r1, #0
 800516c:	2016      	movs	r0, #22
 800516e:	f7ff fe05 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_FIFO_STATUS, NRF24L01_REG_DEFAULT_VAL_FIFO_STATUS);
 8005172:	2111      	movs	r1, #17
 8005174:	2017      	movs	r0, #23
 8005176:	f7ff fe01 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_DYNPD, 		NRF24L01_REG_DEFAULT_VAL_DYNPD);
 800517a:	2100      	movs	r1, #0
 800517c:	201c      	movs	r0, #28
 800517e:	f7ff fdfd 	bl	8004d7c <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_FEATURE, 	NRF24L01_REG_DEFAULT_VAL_FEATURE);
 8005182:	2100      	movs	r1, #0
 8005184:	201d      	movs	r0, #29
 8005186:	f7ff fdf9 	bl	8004d7c <NRF24L01_WriteRegister>
}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	46bd      	mov	sp, r7
 800518e:	b002      	add	sp, #8
 8005190:	bd80      	pop	{r7, pc}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	48000400 	.word	0x48000400

08005198 <NRF24L01_SetChannel>:
uint8_t NRF24L01_GetRetransmissionsCount(void) {
	/* Low 4 bits */
	return NRF24L01_ReadRegister(NRF24L01_REG_OBSERVE_TX) & 0x0F;
}

void NRF24L01_SetChannel(uint8_t channel) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	0002      	movs	r2, r0
 80051a0:	1dfb      	adds	r3, r7, #7
 80051a2:	701a      	strb	r2, [r3, #0]
	if (channel <= 125 && channel != NRF24L01_Struct.Channel) {
 80051a4:	1dfb      	adds	r3, r7, #7
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b7d      	cmp	r3, #125	; 0x7d
 80051aa:	d80f      	bhi.n	80051cc <NRF24L01_SetChannel+0x34>
 80051ac:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <NRF24L01_SetChannel+0x3c>)
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	1dfa      	adds	r2, r7, #7
 80051b2:	7812      	ldrb	r2, [r2, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d009      	beq.n	80051cc <NRF24L01_SetChannel+0x34>
		/* Store new channel setting */
		NRF24L01_Struct.Channel = channel;
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <NRF24L01_SetChannel+0x3c>)
 80051ba:	1dfa      	adds	r2, r7, #7
 80051bc:	7812      	ldrb	r2, [r2, #0]
 80051be:	705a      	strb	r2, [r3, #1]
		/* Write channel */
		NRF24L01_WriteRegister(NRF24L01_REG_RF_CH, channel);
 80051c0:	1dfb      	adds	r3, r7, #7
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	0019      	movs	r1, r3
 80051c6:	2005      	movs	r0, #5
 80051c8:	f7ff fdd8 	bl	8004d7c <NRF24L01_WriteRegister>
	}
}
 80051cc:	46c0      	nop			; (mov r8, r8)
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b002      	add	sp, #8
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000450 	.word	0x20000450

080051d8 <NRF24L01_SetRF>:

void NRF24L01_SetRF(NRF24L01_DataRate_t DataRate, NRF24L01_OutputPower_t OutPwr) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	0002      	movs	r2, r0
 80051e0:	1dfb      	adds	r3, r7, #7
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	1dbb      	adds	r3, r7, #6
 80051e6:	1c0a      	adds	r2, r1, #0
 80051e8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 80051ea:	230f      	movs	r3, #15
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	2200      	movs	r2, #0
 80051f0:	701a      	strb	r2, [r3, #0]
	NRF24L01_Struct.DataRate = DataRate;
 80051f2:	4b26      	ldr	r3, [pc, #152]	; (800528c <NRF24L01_SetRF+0xb4>)
 80051f4:	1dfa      	adds	r2, r7, #7
 80051f6:	7812      	ldrb	r2, [r2, #0]
 80051f8:	70da      	strb	r2, [r3, #3]
	NRF24L01_Struct.OutPwr = OutPwr;
 80051fa:	4b24      	ldr	r3, [pc, #144]	; (800528c <NRF24L01_SetRF+0xb4>)
 80051fc:	1dba      	adds	r2, r7, #6
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	709a      	strb	r2, [r3, #2]
	
	if (DataRate == NRF24L01_DataRate_2M) {
 8005202:	1dfb      	adds	r3, r7, #7
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <NRF24L01_SetRF+0x42>
		tmp |= 1 << NRF24L01_RF_DR_HIGH;
 800520a:	220f      	movs	r2, #15
 800520c:	18bb      	adds	r3, r7, r2
 800520e:	18ba      	adds	r2, r7, r2
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	2108      	movs	r1, #8
 8005214:	430a      	orrs	r2, r1
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	e00a      	b.n	8005230 <NRF24L01_SetRF+0x58>
	} else if (DataRate == NRF24L01_DataRate_250k) {
 800521a:	1dfb      	adds	r3, r7, #7
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d106      	bne.n	8005230 <NRF24L01_SetRF+0x58>
		tmp |= 1 << NRF24L01_RF_DR_LOW;
 8005222:	220f      	movs	r2, #15
 8005224:	18bb      	adds	r3, r7, r2
 8005226:	18ba      	adds	r2, r7, r2
 8005228:	7812      	ldrb	r2, [r2, #0]
 800522a:	2120      	movs	r1, #32
 800522c:	430a      	orrs	r2, r1
 800522e:	701a      	strb	r2, [r3, #0]
	}
	/* If 1Mbps, all bits set to 0 */
	
	if (OutPwr == NRF24L01_OutputPower_0dBm) {
 8005230:	1dbb      	adds	r3, r7, #6
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b03      	cmp	r3, #3
 8005236:	d107      	bne.n	8005248 <NRF24L01_SetRF+0x70>
		tmp |= 3 << NRF24L01_RF_PWR;
 8005238:	220f      	movs	r2, #15
 800523a:	18bb      	adds	r3, r7, r2
 800523c:	18ba      	adds	r2, r7, r2
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	2106      	movs	r1, #6
 8005242:	430a      	orrs	r2, r1
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e016      	b.n	8005276 <NRF24L01_SetRF+0x9e>
	} else if (OutPwr == NRF24L01_OutputPower_M6dBm) {
 8005248:	1dbb      	adds	r3, r7, #6
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d107      	bne.n	8005260 <NRF24L01_SetRF+0x88>
		tmp |= 2 << NRF24L01_RF_PWR;
 8005250:	220f      	movs	r2, #15
 8005252:	18bb      	adds	r3, r7, r2
 8005254:	18ba      	adds	r2, r7, r2
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	2104      	movs	r1, #4
 800525a:	430a      	orrs	r2, r1
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e00a      	b.n	8005276 <NRF24L01_SetRF+0x9e>
	} else if (OutPwr == NRF24L01_OutputPower_M12dBm) {
 8005260:	1dbb      	adds	r3, r7, #6
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d106      	bne.n	8005276 <NRF24L01_SetRF+0x9e>
		tmp |= 1 << NRF24L01_RF_PWR;
 8005268:	220f      	movs	r2, #15
 800526a:	18bb      	adds	r3, r7, r2
 800526c:	18ba      	adds	r2, r7, r2
 800526e:	7812      	ldrb	r2, [r2, #0]
 8005270:	2102      	movs	r1, #2
 8005272:	430a      	orrs	r2, r1
 8005274:	701a      	strb	r2, [r3, #0]
	}
	
	NRF24L01_WriteRegister(NRF24L01_REG_RF_SETUP, tmp);
 8005276:	230f      	movs	r3, #15
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	0019      	movs	r1, r3
 800527e:	2006      	movs	r0, #6
 8005280:	f7ff fd7c 	bl	8004d7c <NRF24L01_WriteRegister>
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	b004      	add	sp, #16
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20000450 	.word	0x20000450

08005290 <NRF24L01_Clear_Interrupts>:
uint8_t NRF24L01_Read_Interrupts(NRF24L01_IRQ_t* IRQ) {
	IRQ->Status = NRF24L01_GetStatus();
	return IRQ->Status;
}

uint8_t NRF24L01_Clear_Interrupts(void) {
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
	return NRF24L01_WriteRegister(0x07, 0x70);
 8005294:	2170      	movs	r1, #112	; 0x70
 8005296:	2007      	movs	r0, #7
 8005298:	f7ff fd70 	bl	8004d7c <NRF24L01_WriteRegister>
 800529c:	0003      	movs	r3, r0
}
 800529e:	0018      	movs	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <NRF24L01_SPI_Send>:
extern SPI_HandleTypeDef NRF24L01_SPI_HANDLE;



uint8_t NRF24L01_SPI_Send(uint8_t data)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	0002      	movs	r2, r0
 80052ac:	1dfb      	adds	r3, r7, #7
 80052ae:	701a      	strb	r2, [r3, #0]
	while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <NRF24L01_SPI_Send+0x50>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2202      	movs	r2, #2
 80052ba:	4013      	ands	r3, r2
 80052bc:	d0f9      	beq.n	80052b2 <NRF24L01_SPI_Send+0xe>
	*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = data;
 80052be:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <NRF24L01_SPI_Send+0x50>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	1dfa      	adds	r2, r7, #7
 80052c6:	7812      	ldrb	r2, [r2, #0]
 80052c8:	701a      	strb	r2, [r3, #0]
	while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <NRF24L01_SPI_Send+0x50>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2201      	movs	r2, #1
 80052d4:	4013      	ands	r3, r2
 80052d6:	d0f9      	beq.n	80052cc <NRF24L01_SPI_Send+0x28>
	data = *(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <NRF24L01_SPI_Send+0x50>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	001a      	movs	r2, r3
 80052e0:	1dfb      	adds	r3, r7, #7
 80052e2:	7812      	ldrb	r2, [r2, #0]
 80052e4:	701a      	strb	r2, [r3, #0]

	return data;
 80052e6:	1dfb      	adds	r3, r7, #7
 80052e8:	781b      	ldrb	r3, [r3, #0]
}
 80052ea:	0018      	movs	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b002      	add	sp, #8
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	2000011c 	.word	0x2000011c

080052f8 <NRF24L01_SPI_WriteMulti>:



void NRF24L01_SPI_WriteMulti(uint8_t* dataOut, uint32_t count)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
	while(count > 0)
 8005302:	e01d      	b.n	8005340 <NRF24L01_SPI_WriteMulti+0x48>
	{
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 8005304:	46c0      	nop			; (mov r8, r8)
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <NRF24L01_SPI_WriteMulti+0x58>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2202      	movs	r2, #2
 800530e:	4013      	ands	r3, r2
 8005310:	d0f9      	beq.n	8005306 <NRF24L01_SPI_WriteMulti+0xe>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = *dataOut;
 8005312:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <NRF24L01_SPI_WriteMulti+0x58>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	330c      	adds	r3, #12
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	7812      	ldrb	r2, [r2, #0]
 800531c:	701a      	strb	r2, [r3, #0]
		dataOut++;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3301      	adds	r3, #1
 8005322:	607b      	str	r3, [r7, #4]
		count--;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	3b01      	subs	r3, #1
 8005328:	603b      	str	r3, [r7, #0]
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	4b08      	ldr	r3, [pc, #32]	; (8005350 <NRF24L01_SPI_WriteMulti+0x58>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2201      	movs	r2, #1
 8005334:	4013      	ands	r3, r2
 8005336:	d0f9      	beq.n	800532c <NRF24L01_SPI_WriteMulti+0x34>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 8005338:	4b05      	ldr	r3, [pc, #20]	; (8005350 <NRF24L01_SPI_WriteMulti+0x58>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	330c      	adds	r3, #12
 800533e:	781b      	ldrb	r3, [r3, #0]
	while(count > 0)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1de      	bne.n	8005304 <NRF24L01_SPI_WriteMulti+0xc>
	}
}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	46bd      	mov	sp, r7
 800534a:	b002      	add	sp, #8
 800534c:	bd80      	pop	{r7, pc}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	2000011c 	.word	0x2000011c

08005354 <NRF24L01_SPI_SendMulti>:
	}
}


void NRF24L01_SPI_SendMulti(uint8_t* dataOut, uint8_t* dataIn, uint32_t count)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
	while(count > 0)
 8005360:	e023      	b.n	80053aa <NRF24L01_SPI_SendMulti+0x56>
	{
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <NRF24L01_SPI_SendMulti+0x64>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2202      	movs	r2, #2
 800536c:	4013      	ands	r3, r2
 800536e:	d0f9      	beq.n	8005364 <NRF24L01_SPI_SendMulti+0x10>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = *dataOut;
 8005370:	4b11      	ldr	r3, [pc, #68]	; (80053b8 <NRF24L01_SPI_SendMulti+0x64>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	7812      	ldrb	r2, [r2, #0]
 800537a:	701a      	strb	r2, [r3, #0]
		dataOut++;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
		count--;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3b01      	subs	r3, #1
 8005386:	607b      	str	r3, [r7, #4]
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 8005388:	46c0      	nop			; (mov r8, r8)
 800538a:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <NRF24L01_SPI_SendMulti+0x64>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2201      	movs	r2, #1
 8005392:	4013      	ands	r3, r2
 8005394:	d0f9      	beq.n	800538a <NRF24L01_SPI_SendMulti+0x36>
		*dataIn = *(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 8005396:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <NRF24L01_SPI_SendMulti+0x64>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	701a      	strb	r2, [r3, #0]
		dataIn++;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60bb      	str	r3, [r7, #8]
	while(count > 0)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1d8      	bne.n	8005362 <NRF24L01_SPI_SendMulti+0xe>
	}
}
 80053b0:	46c0      	nop			; (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b004      	add	sp, #16
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	2000011c 	.word	0x2000011c

080053bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053c2:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <HAL_MspInit+0x44>)
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <HAL_MspInit+0x44>)
 80053c8:	2101      	movs	r1, #1
 80053ca:	430a      	orrs	r2, r1
 80053cc:	619a      	str	r2, [r3, #24]
 80053ce:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <HAL_MspInit+0x44>)
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2201      	movs	r2, #1
 80053d4:	4013      	ands	r3, r2
 80053d6:	607b      	str	r3, [r7, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <HAL_MspInit+0x44>)
 80053dc:	69da      	ldr	r2, [r3, #28]
 80053de:	4b08      	ldr	r3, [pc, #32]	; (8005400 <HAL_MspInit+0x44>)
 80053e0:	2180      	movs	r1, #128	; 0x80
 80053e2:	0549      	lsls	r1, r1, #21
 80053e4:	430a      	orrs	r2, r1
 80053e6:	61da      	str	r2, [r3, #28]
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <HAL_MspInit+0x44>)
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	055b      	lsls	r3, r3, #21
 80053f0:	4013      	ands	r3, r2
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b002      	add	sp, #8
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	40021000 	.word	0x40021000

08005404 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540c:	2314      	movs	r3, #20
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	0018      	movs	r0, r3
 8005412:	2314      	movs	r3, #20
 8005414:	001a      	movs	r2, r3
 8005416:	2100      	movs	r1, #0
 8005418:	f003 fc44 	bl	8008ca4 <memset>
  if(hadc->Instance==ADC1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a19      	ldr	r2, [pc, #100]	; (8005488 <HAL_ADC_MspInit+0x84>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d12c      	bne.n	8005480 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005426:	4b19      	ldr	r3, [pc, #100]	; (800548c <HAL_ADC_MspInit+0x88>)
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	4b18      	ldr	r3, [pc, #96]	; (800548c <HAL_ADC_MspInit+0x88>)
 800542c:	2180      	movs	r1, #128	; 0x80
 800542e:	0089      	lsls	r1, r1, #2
 8005430:	430a      	orrs	r2, r1
 8005432:	619a      	str	r2, [r3, #24]
 8005434:	4b15      	ldr	r3, [pc, #84]	; (800548c <HAL_ADC_MspInit+0x88>)
 8005436:	699a      	ldr	r2, [r3, #24]
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4013      	ands	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <HAL_ADC_MspInit+0x88>)
 8005444:	695a      	ldr	r2, [r3, #20]
 8005446:	4b11      	ldr	r3, [pc, #68]	; (800548c <HAL_ADC_MspInit+0x88>)
 8005448:	2180      	movs	r1, #128	; 0x80
 800544a:	0289      	lsls	r1, r1, #10
 800544c:	430a      	orrs	r2, r1
 800544e:	615a      	str	r2, [r3, #20]
 8005450:	4b0e      	ldr	r3, [pc, #56]	; (800548c <HAL_ADC_MspInit+0x88>)
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	029b      	lsls	r3, r3, #10
 8005458:	4013      	ands	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = TEMP_Pin;
 800545e:	2114      	movs	r1, #20
 8005460:	187b      	adds	r3, r7, r1
 8005462:	2202      	movs	r2, #2
 8005464:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005466:	187b      	adds	r3, r7, r1
 8005468:	2203      	movs	r2, #3
 800546a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546c:	187b      	adds	r3, r7, r1
 800546e:	2200      	movs	r2, #0
 8005470:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);
 8005472:	187a      	adds	r2, r7, r1
 8005474:	2390      	movs	r3, #144	; 0x90
 8005476:	05db      	lsls	r3, r3, #23
 8005478:	0011      	movs	r1, r2
 800547a:	0018      	movs	r0, r3
 800547c:	f001 f97e 	bl	800677c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005480:	46c0      	nop			; (mov r8, r8)
 8005482:	46bd      	mov	sp, r7
 8005484:	b00a      	add	sp, #40	; 0x28
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40012400 	.word	0x40012400
 800548c:	40021000 	.word	0x40021000

08005490 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005498:	2314      	movs	r3, #20
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	0018      	movs	r0, r3
 800549e:	2314      	movs	r3, #20
 80054a0:	001a      	movs	r2, r3
 80054a2:	2100      	movs	r1, #0
 80054a4:	f003 fbfe 	bl	8008ca4 <memset>
  if(hspi->Instance==SPI1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a43      	ldr	r2, [pc, #268]	; (80055bc <HAL_SPI_MspInit+0x12c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d000      	beq.n	80054b4 <HAL_SPI_MspInit+0x24>
 80054b2:	e07e      	b.n	80055b2 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80054b4:	4b42      	ldr	r3, [pc, #264]	; (80055c0 <HAL_SPI_MspInit+0x130>)
 80054b6:	699a      	ldr	r2, [r3, #24]
 80054b8:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <HAL_SPI_MspInit+0x130>)
 80054ba:	2180      	movs	r1, #128	; 0x80
 80054bc:	0149      	lsls	r1, r1, #5
 80054be:	430a      	orrs	r2, r1
 80054c0:	619a      	str	r2, [r3, #24]
 80054c2:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <HAL_SPI_MspInit+0x130>)
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	2380      	movs	r3, #128	; 0x80
 80054c8:	015b      	lsls	r3, r3, #5
 80054ca:	4013      	ands	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d0:	4b3b      	ldr	r3, [pc, #236]	; (80055c0 <HAL_SPI_MspInit+0x130>)
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	4b3a      	ldr	r3, [pc, #232]	; (80055c0 <HAL_SPI_MspInit+0x130>)
 80054d6:	2180      	movs	r1, #128	; 0x80
 80054d8:	0289      	lsls	r1, r1, #10
 80054da:	430a      	orrs	r2, r1
 80054dc:	615a      	str	r2, [r3, #20]
 80054de:	4b38      	ldr	r3, [pc, #224]	; (80055c0 <HAL_SPI_MspInit+0x130>)
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	029b      	lsls	r3, r3, #10
 80054e6:	4013      	ands	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 80054ec:	2114      	movs	r1, #20
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	22e0      	movs	r2, #224	; 0xe0
 80054f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f4:	187b      	adds	r3, r7, r1
 80054f6:	2202      	movs	r2, #2
 80054f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fa:	187b      	adds	r3, r7, r1
 80054fc:	2200      	movs	r2, #0
 80054fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005500:	187b      	adds	r3, r7, r1
 8005502:	2203      	movs	r2, #3
 8005504:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005506:	187b      	adds	r3, r7, r1
 8005508:	2200      	movs	r2, #0
 800550a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800550c:	187a      	adds	r2, r7, r1
 800550e:	2390      	movs	r3, #144	; 0x90
 8005510:	05db      	lsls	r3, r3, #23
 8005512:	0011      	movs	r1, r2
 8005514:	0018      	movs	r0, r3
 8005516:	f001 f931 	bl	800677c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800551a:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <HAL_SPI_MspInit+0x134>)
 800551c:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <HAL_SPI_MspInit+0x138>)
 800551e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005520:	4b28      	ldr	r3, [pc, #160]	; (80055c4 <HAL_SPI_MspInit+0x134>)
 8005522:	2200      	movs	r2, #0
 8005524:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005526:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <HAL_SPI_MspInit+0x134>)
 8005528:	2200      	movs	r2, #0
 800552a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <HAL_SPI_MspInit+0x134>)
 800552e:	2280      	movs	r2, #128	; 0x80
 8005530:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005532:	4b24      	ldr	r3, [pc, #144]	; (80055c4 <HAL_SPI_MspInit+0x134>)
 8005534:	2200      	movs	r2, #0
 8005536:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005538:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <HAL_SPI_MspInit+0x134>)
 800553a:	2200      	movs	r2, #0
 800553c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800553e:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <HAL_SPI_MspInit+0x134>)
 8005540:	2200      	movs	r2, #0
 8005542:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005544:	4b1f      	ldr	r3, [pc, #124]	; (80055c4 <HAL_SPI_MspInit+0x134>)
 8005546:	2200      	movs	r2, #0
 8005548:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800554a:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <HAL_SPI_MspInit+0x134>)
 800554c:	0018      	movs	r0, r3
 800554e:	f000 ff7d 	bl	800644c <HAL_DMA_Init>
 8005552:	1e03      	subs	r3, r0, #0
 8005554:	d001      	beq.n	800555a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8005556:	f7ff fb53 	bl	8004c00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <HAL_SPI_MspInit+0x134>)
 800555e:	659a      	str	r2, [r3, #88]	; 0x58
 8005560:	4b18      	ldr	r3, [pc, #96]	; (80055c4 <HAL_SPI_MspInit+0x134>)
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8005566:	4b19      	ldr	r3, [pc, #100]	; (80055cc <HAL_SPI_MspInit+0x13c>)
 8005568:	4a19      	ldr	r2, [pc, #100]	; (80055d0 <HAL_SPI_MspInit+0x140>)
 800556a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800556c:	4b17      	ldr	r3, [pc, #92]	; (80055cc <HAL_SPI_MspInit+0x13c>)
 800556e:	2210      	movs	r2, #16
 8005570:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005572:	4b16      	ldr	r3, [pc, #88]	; (80055cc <HAL_SPI_MspInit+0x13c>)
 8005574:	2200      	movs	r2, #0
 8005576:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005578:	4b14      	ldr	r3, [pc, #80]	; (80055cc <HAL_SPI_MspInit+0x13c>)
 800557a:	2280      	movs	r2, #128	; 0x80
 800557c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800557e:	4b13      	ldr	r3, [pc, #76]	; (80055cc <HAL_SPI_MspInit+0x13c>)
 8005580:	2200      	movs	r2, #0
 8005582:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005584:	4b11      	ldr	r3, [pc, #68]	; (80055cc <HAL_SPI_MspInit+0x13c>)
 8005586:	2200      	movs	r2, #0
 8005588:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800558a:	4b10      	ldr	r3, [pc, #64]	; (80055cc <HAL_SPI_MspInit+0x13c>)
 800558c:	2200      	movs	r2, #0
 800558e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005590:	4b0e      	ldr	r3, [pc, #56]	; (80055cc <HAL_SPI_MspInit+0x13c>)
 8005592:	2200      	movs	r2, #0
 8005594:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <HAL_SPI_MspInit+0x13c>)
 8005598:	0018      	movs	r0, r3
 800559a:	f000 ff57 	bl	800644c <HAL_DMA_Init>
 800559e:	1e03      	subs	r3, r0, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 80055a2:	f7ff fb2d 	bl	8004c00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <HAL_SPI_MspInit+0x13c>)
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
 80055ac:	4b07      	ldr	r3, [pc, #28]	; (80055cc <HAL_SPI_MspInit+0x13c>)
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b00a      	add	sp, #40	; 0x28
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	40013000 	.word	0x40013000
 80055c0:	40021000 	.word	0x40021000
 80055c4:	20000180 	.word	0x20000180
 80055c8:	4002001c 	.word	0x4002001c
 80055cc:	200001c4 	.word	0x200001c4
 80055d0:	40020030 	.word	0x40020030

080055d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1d      	ldr	r2, [pc, #116]	; (8005658 <HAL_TIM_Base_MspInit+0x84>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d10e      	bne.n	8005604 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055e6:	4b1d      	ldr	r3, [pc, #116]	; (800565c <HAL_TIM_Base_MspInit+0x88>)
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	4b1c      	ldr	r3, [pc, #112]	; (800565c <HAL_TIM_Base_MspInit+0x88>)
 80055ec:	2180      	movs	r1, #128	; 0x80
 80055ee:	0109      	lsls	r1, r1, #4
 80055f0:	430a      	orrs	r2, r1
 80055f2:	619a      	str	r2, [r3, #24]
 80055f4:	4b19      	ldr	r3, [pc, #100]	; (800565c <HAL_TIM_Base_MspInit+0x88>)
 80055f6:	699a      	ldr	r2, [r3, #24]
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	4013      	ands	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005602:	e024      	b.n	800564e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM3)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a15      	ldr	r2, [pc, #84]	; (8005660 <HAL_TIM_Base_MspInit+0x8c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d10c      	bne.n	8005628 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800560e:	4b13      	ldr	r3, [pc, #76]	; (800565c <HAL_TIM_Base_MspInit+0x88>)
 8005610:	69da      	ldr	r2, [r3, #28]
 8005612:	4b12      	ldr	r3, [pc, #72]	; (800565c <HAL_TIM_Base_MspInit+0x88>)
 8005614:	2102      	movs	r1, #2
 8005616:	430a      	orrs	r2, r1
 8005618:	61da      	str	r2, [r3, #28]
 800561a:	4b10      	ldr	r3, [pc, #64]	; (800565c <HAL_TIM_Base_MspInit+0x88>)
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	2202      	movs	r2, #2
 8005620:	4013      	ands	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	693b      	ldr	r3, [r7, #16]
}
 8005626:	e012      	b.n	800564e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM17)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <HAL_TIM_Base_MspInit+0x90>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d10d      	bne.n	800564e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005632:	4b0a      	ldr	r3, [pc, #40]	; (800565c <HAL_TIM_Base_MspInit+0x88>)
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <HAL_TIM_Base_MspInit+0x88>)
 8005638:	2180      	movs	r1, #128	; 0x80
 800563a:	02c9      	lsls	r1, r1, #11
 800563c:	430a      	orrs	r2, r1
 800563e:	619a      	str	r2, [r3, #24]
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <HAL_TIM_Base_MspInit+0x88>)
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	2380      	movs	r3, #128	; 0x80
 8005646:	02db      	lsls	r3, r3, #11
 8005648:	4013      	ands	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	46bd      	mov	sp, r7
 8005652:	b006      	add	sp, #24
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40021000 	.word	0x40021000
 8005660:	40000400 	.word	0x40000400
 8005664:	40014800 	.word	0x40014800

08005668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005670:	2314      	movs	r3, #20
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	0018      	movs	r0, r3
 8005676:	2314      	movs	r3, #20
 8005678:	001a      	movs	r2, r3
 800567a:	2100      	movs	r1, #0
 800567c:	f003 fb12 	bl	8008ca4 <memset>
  if(htim->Instance==TIM1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a40      	ldr	r2, [pc, #256]	; (8005788 <HAL_TIM_MspPostInit+0x120>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d126      	bne.n	80056d8 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800568a:	4b40      	ldr	r3, [pc, #256]	; (800578c <HAL_TIM_MspPostInit+0x124>)
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	4b3f      	ldr	r3, [pc, #252]	; (800578c <HAL_TIM_MspPostInit+0x124>)
 8005690:	2180      	movs	r1, #128	; 0x80
 8005692:	0289      	lsls	r1, r1, #10
 8005694:	430a      	orrs	r2, r1
 8005696:	615a      	str	r2, [r3, #20]
 8005698:	4b3c      	ldr	r3, [pc, #240]	; (800578c <HAL_TIM_MspPostInit+0x124>)
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	2380      	movs	r3, #128	; 0x80
 800569e:	029b      	lsls	r3, r3, #10
 80056a0:	4013      	ands	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = LED_R_FAST_Pin|LED_G_FAST_Pin|LED_B_FAST_Pin|LED_W_FAST_Pin;
 80056a6:	2114      	movs	r1, #20
 80056a8:	187b      	adds	r3, r7, r1
 80056aa:	22f0      	movs	r2, #240	; 0xf0
 80056ac:	0112      	lsls	r2, r2, #4
 80056ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b0:	187b      	adds	r3, r7, r1
 80056b2:	2202      	movs	r2, #2
 80056b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b6:	187b      	adds	r3, r7, r1
 80056b8:	2200      	movs	r2, #0
 80056ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056bc:	187b      	adds	r3, r7, r1
 80056be:	2203      	movs	r2, #3
 80056c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80056c2:	187b      	adds	r3, r7, r1
 80056c4:	2202      	movs	r2, #2
 80056c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c8:	187a      	adds	r2, r7, r1
 80056ca:	2390      	movs	r3, #144	; 0x90
 80056cc:	05db      	lsls	r3, r3, #23
 80056ce:	0011      	movs	r1, r2
 80056d0:	0018      	movs	r0, r3
 80056d2:	f001 f853 	bl	800677c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80056d6:	e053      	b.n	8005780 <HAL_TIM_MspPostInit+0x118>
  else if(htim->Instance==TIM3)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a2c      	ldr	r2, [pc, #176]	; (8005790 <HAL_TIM_MspPostInit+0x128>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d124      	bne.n	800572c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056e2:	4b2a      	ldr	r3, [pc, #168]	; (800578c <HAL_TIM_MspPostInit+0x124>)
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	4b29      	ldr	r3, [pc, #164]	; (800578c <HAL_TIM_MspPostInit+0x124>)
 80056e8:	2180      	movs	r1, #128	; 0x80
 80056ea:	02c9      	lsls	r1, r1, #11
 80056ec:	430a      	orrs	r2, r1
 80056ee:	615a      	str	r2, [r3, #20]
 80056f0:	4b26      	ldr	r3, [pc, #152]	; (800578c <HAL_TIM_MspPostInit+0x124>)
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	2380      	movs	r3, #128	; 0x80
 80056f6:	02db      	lsls	r3, r3, #11
 80056f8:	4013      	ands	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_R_SLOW_Pin|LED_G_SLOW_Pin|LED_B_SLOW_Pin|LED_W_SLOW_Pin;
 80056fe:	2114      	movs	r1, #20
 8005700:	187b      	adds	r3, r7, r1
 8005702:	2233      	movs	r2, #51	; 0x33
 8005704:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005706:	187b      	adds	r3, r7, r1
 8005708:	2212      	movs	r2, #18
 800570a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800570c:	187b      	adds	r3, r7, r1
 800570e:	2200      	movs	r2, #0
 8005710:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005712:	187b      	adds	r3, r7, r1
 8005714:	2200      	movs	r2, #0
 8005716:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8005718:	187b      	adds	r3, r7, r1
 800571a:	2201      	movs	r2, #1
 800571c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571e:	187b      	adds	r3, r7, r1
 8005720:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <HAL_TIM_MspPostInit+0x12c>)
 8005722:	0019      	movs	r1, r3
 8005724:	0010      	movs	r0, r2
 8005726:	f001 f829 	bl	800677c <HAL_GPIO_Init>
}
 800572a:	e029      	b.n	8005780 <HAL_TIM_MspPostInit+0x118>
  else if(htim->Instance==TIM17)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a19      	ldr	r2, [pc, #100]	; (8005798 <HAL_TIM_MspPostInit+0x130>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d124      	bne.n	8005780 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <HAL_TIM_MspPostInit+0x124>)
 8005738:	695a      	ldr	r2, [r3, #20]
 800573a:	4b14      	ldr	r3, [pc, #80]	; (800578c <HAL_TIM_MspPostInit+0x124>)
 800573c:	2180      	movs	r1, #128	; 0x80
 800573e:	02c9      	lsls	r1, r1, #11
 8005740:	430a      	orrs	r2, r1
 8005742:	615a      	str	r2, [r3, #20]
 8005744:	4b11      	ldr	r3, [pc, #68]	; (800578c <HAL_TIM_MspPostInit+0x124>)
 8005746:	695a      	ldr	r2, [r3, #20]
 8005748:	2380      	movs	r3, #128	; 0x80
 800574a:	02db      	lsls	r3, r3, #11
 800574c:	4013      	ands	r3, r2
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8005752:	2114      	movs	r1, #20
 8005754:	187b      	adds	r3, r7, r1
 8005756:	2280      	movs	r2, #128	; 0x80
 8005758:	0092      	lsls	r2, r2, #2
 800575a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800575c:	187b      	adds	r3, r7, r1
 800575e:	2202      	movs	r2, #2
 8005760:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005762:	187b      	adds	r3, r7, r1
 8005764:	2201      	movs	r2, #1
 8005766:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005768:	187b      	adds	r3, r7, r1
 800576a:	2201      	movs	r2, #1
 800576c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800576e:	187b      	adds	r3, r7, r1
 8005770:	2202      	movs	r2, #2
 8005772:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8005774:	187b      	adds	r3, r7, r1
 8005776:	4a07      	ldr	r2, [pc, #28]	; (8005794 <HAL_TIM_MspPostInit+0x12c>)
 8005778:	0019      	movs	r1, r3
 800577a:	0010      	movs	r0, r2
 800577c:	f000 fffe 	bl	800677c <HAL_GPIO_Init>
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b00a      	add	sp, #40	; 0x28
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40012c00 	.word	0x40012c00
 800578c:	40021000 	.word	0x40021000
 8005790:	40000400 	.word	0x40000400
 8005794:	48000400 	.word	0x48000400
 8005798:	40014800 	.word	0x40014800

0800579c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800579c:	b590      	push	{r4, r7, lr}
 800579e:	b08d      	sub	sp, #52	; 0x34
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a4:	231c      	movs	r3, #28
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	0018      	movs	r0, r3
 80057aa:	2314      	movs	r3, #20
 80057ac:	001a      	movs	r2, r3
 80057ae:	2100      	movs	r1, #0
 80057b0:	f003 fa78 	bl	8008ca4 <memset>
  if(huart->Instance==USART1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a7e      	ldr	r2, [pc, #504]	; (80059b4 <HAL_UART_MspInit+0x218>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d000      	beq.n	80057c0 <HAL_UART_MspInit+0x24>
 80057be:	e0a5      	b.n	800590c <HAL_UART_MspInit+0x170>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057c0:	4b7d      	ldr	r3, [pc, #500]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	4b7c      	ldr	r3, [pc, #496]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	01c9      	lsls	r1, r1, #7
 80057ca:	430a      	orrs	r2, r1
 80057cc:	619a      	str	r2, [r3, #24]
 80057ce:	4b7a      	ldr	r3, [pc, #488]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	2380      	movs	r3, #128	; 0x80
 80057d4:	01db      	lsls	r3, r3, #7
 80057d6:	4013      	ands	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
 80057da:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057dc:	4b76      	ldr	r3, [pc, #472]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	4b75      	ldr	r3, [pc, #468]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 80057e2:	2180      	movs	r1, #128	; 0x80
 80057e4:	02c9      	lsls	r1, r1, #11
 80057e6:	430a      	orrs	r2, r1
 80057e8:	615a      	str	r2, [r3, #20]
 80057ea:	4b73      	ldr	r3, [pc, #460]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	02db      	lsls	r3, r3, #11
 80057f2:	4013      	ands	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = UART_TX_Pin;
 80057f8:	211c      	movs	r1, #28
 80057fa:	187b      	adds	r3, r7, r1
 80057fc:	2240      	movs	r2, #64	; 0x40
 80057fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005800:	187b      	adds	r3, r7, r1
 8005802:	2202      	movs	r2, #2
 8005804:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005806:	187b      	adds	r3, r7, r1
 8005808:	2200      	movs	r2, #0
 800580a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800580c:	187b      	adds	r3, r7, r1
 800580e:	2203      	movs	r2, #3
 8005810:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8005812:	187b      	adds	r3, r7, r1
 8005814:	2200      	movs	r2, #0
 8005816:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8005818:	000c      	movs	r4, r1
 800581a:	187b      	adds	r3, r7, r1
 800581c:	4a67      	ldr	r2, [pc, #412]	; (80059bc <HAL_UART_MspInit+0x220>)
 800581e:	0019      	movs	r1, r3
 8005820:	0010      	movs	r0, r2
 8005822:	f000 ffab 	bl	800677c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_RX_Pin;
 8005826:	0021      	movs	r1, r4
 8005828:	187b      	adds	r3, r7, r1
 800582a:	2280      	movs	r2, #128	; 0x80
 800582c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800582e:	187b      	adds	r3, r7, r1
 8005830:	2212      	movs	r2, #18
 8005832:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005834:	187b      	adds	r3, r7, r1
 8005836:	2201      	movs	r2, #1
 8005838:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800583a:	187b      	adds	r3, r7, r1
 800583c:	2203      	movs	r2, #3
 800583e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8005840:	187b      	adds	r3, r7, r1
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8005846:	187b      	adds	r3, r7, r1
 8005848:	4a5c      	ldr	r2, [pc, #368]	; (80059bc <HAL_UART_MspInit+0x220>)
 800584a:	0019      	movs	r1, r3
 800584c:	0010      	movs	r0, r2
 800584e:	f000 ff95 	bl	800677c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005852:	4b5b      	ldr	r3, [pc, #364]	; (80059c0 <HAL_UART_MspInit+0x224>)
 8005854:	4a5b      	ldr	r2, [pc, #364]	; (80059c4 <HAL_UART_MspInit+0x228>)
 8005856:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005858:	4b59      	ldr	r3, [pc, #356]	; (80059c0 <HAL_UART_MspInit+0x224>)
 800585a:	2200      	movs	r2, #0
 800585c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800585e:	4b58      	ldr	r3, [pc, #352]	; (80059c0 <HAL_UART_MspInit+0x224>)
 8005860:	2200      	movs	r2, #0
 8005862:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005864:	4b56      	ldr	r3, [pc, #344]	; (80059c0 <HAL_UART_MspInit+0x224>)
 8005866:	2280      	movs	r2, #128	; 0x80
 8005868:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800586a:	4b55      	ldr	r3, [pc, #340]	; (80059c0 <HAL_UART_MspInit+0x224>)
 800586c:	2200      	movs	r2, #0
 800586e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005870:	4b53      	ldr	r3, [pc, #332]	; (80059c0 <HAL_UART_MspInit+0x224>)
 8005872:	2200      	movs	r2, #0
 8005874:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005876:	4b52      	ldr	r3, [pc, #328]	; (80059c0 <HAL_UART_MspInit+0x224>)
 8005878:	2220      	movs	r2, #32
 800587a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800587c:	4b50      	ldr	r3, [pc, #320]	; (80059c0 <HAL_UART_MspInit+0x224>)
 800587e:	2280      	movs	r2, #128	; 0x80
 8005880:	0152      	lsls	r2, r2, #5
 8005882:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005884:	4b4e      	ldr	r3, [pc, #312]	; (80059c0 <HAL_UART_MspInit+0x224>)
 8005886:	0018      	movs	r0, r3
 8005888:	f000 fde0 	bl	800644c <HAL_DMA_Init>
 800588c:	1e03      	subs	r3, r0, #0
 800588e:	d001      	beq.n	8005894 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8005890:	f7ff f9b6 	bl	8004c00 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_RX_DMA_CH5);
 8005894:	4b4c      	ldr	r3, [pc, #304]	; (80059c8 <HAL_UART_MspInit+0x22c>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	4b4b      	ldr	r3, [pc, #300]	; (80059c8 <HAL_UART_MspInit+0x22c>)
 800589a:	2180      	movs	r1, #128	; 0x80
 800589c:	00c9      	lsls	r1, r1, #3
 800589e:	430a      	orrs	r2, r1
 80058a0:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a46      	ldr	r2, [pc, #280]	; (80059c0 <HAL_UART_MspInit+0x224>)
 80058a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80058a8:	4b45      	ldr	r3, [pc, #276]	; (80059c0 <HAL_UART_MspInit+0x224>)
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80058ae:	4b47      	ldr	r3, [pc, #284]	; (80059cc <HAL_UART_MspInit+0x230>)
 80058b0:	4a47      	ldr	r2, [pc, #284]	; (80059d0 <HAL_UART_MspInit+0x234>)
 80058b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058b4:	4b45      	ldr	r3, [pc, #276]	; (80059cc <HAL_UART_MspInit+0x230>)
 80058b6:	2210      	movs	r2, #16
 80058b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058ba:	4b44      	ldr	r3, [pc, #272]	; (80059cc <HAL_UART_MspInit+0x230>)
 80058bc:	2200      	movs	r2, #0
 80058be:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80058c0:	4b42      	ldr	r3, [pc, #264]	; (80059cc <HAL_UART_MspInit+0x230>)
 80058c2:	2280      	movs	r2, #128	; 0x80
 80058c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058c6:	4b41      	ldr	r3, [pc, #260]	; (80059cc <HAL_UART_MspInit+0x230>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058cc:	4b3f      	ldr	r3, [pc, #252]	; (80059cc <HAL_UART_MspInit+0x230>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80058d2:	4b3e      	ldr	r3, [pc, #248]	; (80059cc <HAL_UART_MspInit+0x230>)
 80058d4:	2220      	movs	r2, #32
 80058d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80058d8:	4b3c      	ldr	r3, [pc, #240]	; (80059cc <HAL_UART_MspInit+0x230>)
 80058da:	2280      	movs	r2, #128	; 0x80
 80058dc:	0152      	lsls	r2, r2, #5
 80058de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80058e0:	4b3a      	ldr	r3, [pc, #232]	; (80059cc <HAL_UART_MspInit+0x230>)
 80058e2:	0018      	movs	r0, r3
 80058e4:	f000 fdb2 	bl	800644c <HAL_DMA_Init>
 80058e8:	1e03      	subs	r3, r0, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 80058ec:	f7ff f988 	bl	8004c00 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 80058f0:	4b35      	ldr	r3, [pc, #212]	; (80059c8 <HAL_UART_MspInit+0x22c>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	4b34      	ldr	r3, [pc, #208]	; (80059c8 <HAL_UART_MspInit+0x22c>)
 80058f6:	2180      	movs	r1, #128	; 0x80
 80058f8:	0089      	lsls	r1, r1, #2
 80058fa:	430a      	orrs	r2, r1
 80058fc:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a32      	ldr	r2, [pc, #200]	; (80059cc <HAL_UART_MspInit+0x230>)
 8005902:	669a      	str	r2, [r3, #104]	; 0x68
 8005904:	4b31      	ldr	r3, [pc, #196]	; (80059cc <HAL_UART_MspInit+0x230>)
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800590a:	e04e      	b.n	80059aa <HAL_UART_MspInit+0x20e>
  else if(huart->Instance==USART2)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a30      	ldr	r2, [pc, #192]	; (80059d4 <HAL_UART_MspInit+0x238>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d149      	bne.n	80059aa <HAL_UART_MspInit+0x20e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005916:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 8005918:	69da      	ldr	r2, [r3, #28]
 800591a:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 800591c:	2180      	movs	r1, #128	; 0x80
 800591e:	0289      	lsls	r1, r1, #10
 8005920:	430a      	orrs	r2, r1
 8005922:	61da      	str	r2, [r3, #28]
 8005924:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	029b      	lsls	r3, r3, #10
 800592c:	4013      	ands	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005932:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 8005938:	2180      	movs	r1, #128	; 0x80
 800593a:	0289      	lsls	r1, r1, #10
 800593c:	430a      	orrs	r2, r1
 800593e:	615a      	str	r2, [r3, #20]
 8005940:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_UART_MspInit+0x21c>)
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	2380      	movs	r3, #128	; 0x80
 8005946:	029b      	lsls	r3, r3, #10
 8005948:	4013      	ands	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 800594e:	241c      	movs	r4, #28
 8005950:	193b      	adds	r3, r7, r4
 8005952:	2204      	movs	r2, #4
 8005954:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005956:	193b      	adds	r3, r7, r4
 8005958:	2202      	movs	r2, #2
 800595a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595c:	193b      	adds	r3, r7, r4
 800595e:	2200      	movs	r2, #0
 8005960:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005962:	193b      	adds	r3, r7, r4
 8005964:	2203      	movs	r2, #3
 8005966:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005968:	193b      	adds	r3, r7, r4
 800596a:	2201      	movs	r2, #1
 800596c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 800596e:	193a      	adds	r2, r7, r4
 8005970:	2390      	movs	r3, #144	; 0x90
 8005972:	05db      	lsls	r3, r3, #23
 8005974:	0011      	movs	r1, r2
 8005976:	0018      	movs	r0, r3
 8005978:	f000 ff00 	bl	800677c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_RX_Pin;
 800597c:	0021      	movs	r1, r4
 800597e:	187b      	adds	r3, r7, r1
 8005980:	2208      	movs	r2, #8
 8005982:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005984:	187b      	adds	r3, r7, r1
 8005986:	2212      	movs	r2, #18
 8005988:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800598a:	187b      	adds	r3, r7, r1
 800598c:	2201      	movs	r2, #1
 800598e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005990:	187b      	adds	r3, r7, r1
 8005992:	2203      	movs	r2, #3
 8005994:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005996:	187b      	adds	r3, r7, r1
 8005998:	2201      	movs	r2, #1
 800599a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DMX_RX_GPIO_Port, &GPIO_InitStruct);
 800599c:	187a      	adds	r2, r7, r1
 800599e:	2390      	movs	r3, #144	; 0x90
 80059a0:	05db      	lsls	r3, r3, #23
 80059a2:	0011      	movs	r1, r2
 80059a4:	0018      	movs	r0, r3
 80059a6:	f000 fee9 	bl	800677c <HAL_GPIO_Init>
}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b00d      	add	sp, #52	; 0x34
 80059b0:	bd90      	pop	{r4, r7, pc}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	40013800 	.word	0x40013800
 80059b8:	40021000 	.word	0x40021000
 80059bc:	48000400 	.word	0x48000400
 80059c0:	200003c8 	.word	0x200003c8
 80059c4:	40020058 	.word	0x40020058
 80059c8:	40010000 	.word	0x40010000
 80059cc:	2000040c 	.word	0x2000040c
 80059d0:	40020044 	.word	0x40020044
 80059d4:	40004400 	.word	0x40004400

080059d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059e6:	e7fe      	b.n	80059e6 <HardFault_Handler+0x4>

080059e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80059ec:	46c0      	nop			; (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a00:	f000 f8f6 	bl	8005bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a04:	46c0      	nop			; (mov r8, r8)
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005a0e:	2004      	movs	r0, #4
 8005a10:	f001 f842 	bl	8006a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005a22:	0018      	movs	r0, r3
 8005a24:	f000 fdc0 	bl	80065a8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005a28:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <DMA1_Channel2_3_IRQHandler+0x20>)
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f000 fdbc 	bl	80065a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005a30:	46c0      	nop			; (mov r8, r8)
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	20000180 	.word	0x20000180
 8005a3c:	200001c4 	.word	0x200001c4

08005a40 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <DMA1_Channel4_5_IRQHandler+0x1c>)
 8005a46:	0018      	movs	r0, r3
 8005a48:	f000 fdae 	bl	80065a8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005a4c:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <DMA1_Channel4_5_IRQHandler+0x20>)
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f000 fdaa 	bl	80065a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8005a54:	46c0      	nop			; (mov r8, r8)
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	2000040c 	.word	0x2000040c
 8005a60:	200003c8 	.word	0x200003c8

08005a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
	return 1;
 8005a68:	2301      	movs	r3, #1
}
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <_kill>:

int _kill(int pid, int sig)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005a7a:	f003 f8df 	bl	8008c3c <__errno>
 8005a7e:	0003      	movs	r3, r0
 8005a80:	2216      	movs	r2, #22
 8005a82:	601a      	str	r2, [r3, #0]
	return -1;
 8005a84:	2301      	movs	r3, #1
 8005a86:	425b      	negs	r3, r3
}
 8005a88:	0018      	movs	r0, r3
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b002      	add	sp, #8
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <_exit>:

void _exit (int status)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005a98:	2301      	movs	r3, #1
 8005a9a:	425a      	negs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	0011      	movs	r1, r2
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f7ff ffe5 	bl	8005a70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005aa6:	e7fe      	b.n	8005aa6 <_exit+0x16>

08005aa8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005ab0:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <_sbrk+0x50>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <_sbrk+0x16>
		heap_end = &end;
 8005ab8:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <_sbrk+0x50>)
 8005aba:	4a10      	ldr	r2, [pc, #64]	; (8005afc <_sbrk+0x54>)
 8005abc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005abe:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <_sbrk+0x50>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <_sbrk+0x50>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	18d3      	adds	r3, r2, r3
 8005acc:	466a      	mov	r2, sp
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d907      	bls.n	8005ae2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005ad2:	f003 f8b3 	bl	8008c3c <__errno>
 8005ad6:	0003      	movs	r3, r0
 8005ad8:	220c      	movs	r2, #12
 8005ada:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005adc:	2301      	movs	r3, #1
 8005ade:	425b      	negs	r3, r3
 8005ae0:	e006      	b.n	8005af0 <_sbrk+0x48>
	}

	heap_end += incr;
 8005ae2:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <_sbrk+0x50>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	18d2      	adds	r2, r2, r3
 8005aea:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <_sbrk+0x50>)
 8005aec:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005aee:	68fb      	ldr	r3, [r7, #12]
}
 8005af0:	0018      	movs	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b004      	add	sp, #16
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20000454 	.word	0x20000454
 8005afc:	20000470 	.word	0x20000470

08005b00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005b04:	46c0      	nop			; (mov r8, r8)
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005b0c:	480d      	ldr	r0, [pc, #52]	; (8005b44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005b0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b10:	480d      	ldr	r0, [pc, #52]	; (8005b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8005b12:	490e      	ldr	r1, [pc, #56]	; (8005b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005b14:	4a0e      	ldr	r2, [pc, #56]	; (8005b50 <LoopForever+0xe>)
  movs r3, #0
 8005b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b18:	e002      	b.n	8005b20 <LoopCopyDataInit>

08005b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b1e:	3304      	adds	r3, #4

08005b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b24:	d3f9      	bcc.n	8005b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b26:	4a0b      	ldr	r2, [pc, #44]	; (8005b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005b28:	4c0b      	ldr	r4, [pc, #44]	; (8005b58 <LoopForever+0x16>)
  movs r3, #0
 8005b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b2c:	e001      	b.n	8005b32 <LoopFillZerobss>

08005b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b30:	3204      	adds	r2, #4

08005b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b34:	d3fb      	bcc.n	8005b2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005b36:	f7ff ffe3 	bl	8005b00 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005b3a:	f003 f885 	bl	8008c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005b3e:	f7fe fb9a 	bl	8004276 <main>

08005b42 <LoopForever>:

LoopForever:
    b LoopForever
 8005b42:	e7fe      	b.n	8005b42 <LoopForever>
  ldr   r0, =_estack
 8005b44:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b4c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8005b50:	08008fd4 	.word	0x08008fd4
  ldr r2, =_sbss
 8005b54:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8005b58:	2000046c 	.word	0x2000046c

08005b5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b5c:	e7fe      	b.n	8005b5c <ADC1_IRQHandler>
	...

08005b60 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b64:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <HAL_Init+0x24>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <HAL_Init+0x24>)
 8005b6a:	2110      	movs	r1, #16
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8005b70:	2000      	movs	r0, #0
 8005b72:	f000 f809 	bl	8005b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b76:	f7ff fc21 	bl	80053bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	40022000 	.word	0x40022000

08005b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b88:	b590      	push	{r4, r7, lr}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b90:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <HAL_InitTick+0x5c>)
 8005b92:	681c      	ldr	r4, [r3, #0]
 8005b94:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <HAL_InitTick+0x60>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	0019      	movs	r1, r3
 8005b9a:	23fa      	movs	r3, #250	; 0xfa
 8005b9c:	0098      	lsls	r0, r3, #2
 8005b9e:	f7fa fab3 	bl	8000108 <__udivsi3>
 8005ba2:	0003      	movs	r3, r0
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	0020      	movs	r0, r4
 8005ba8:	f7fa faae 	bl	8000108 <__udivsi3>
 8005bac:	0003      	movs	r3, r0
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f000 fc3f 	bl	8006432 <HAL_SYSTICK_Config>
 8005bb4:	1e03      	subs	r3, r0, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e00f      	b.n	8005bdc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d80b      	bhi.n	8005bda <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	425b      	negs	r3, r3
 8005bc8:	2200      	movs	r2, #0
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 fc0c 	bl	80063e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <HAL_InitTick+0x64>)
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e000      	b.n	8005bdc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
}
 8005bdc:	0018      	movs	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	b003      	add	sp, #12
 8005be2:	bd90      	pop	{r4, r7, pc}
 8005be4:	20000008 	.word	0x20000008
 8005be8:	20000010 	.word	0x20000010
 8005bec:	2000000c 	.word	0x2000000c

08005bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_IncTick+0x1c>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	001a      	movs	r2, r3
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_IncTick+0x20>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	18d2      	adds	r2, r2, r3
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <HAL_IncTick+0x20>)
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	20000010 	.word	0x20000010
 8005c10:	20000464 	.word	0x20000464

08005c14 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  return uwTick;
 8005c18:	4b02      	ldr	r3, [pc, #8]	; (8005c24 <HAL_GetTick+0x10>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	20000464 	.word	0x20000464

08005c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c30:	f7ff fff0 	bl	8005c14 <HAL_GetTick>
 8005c34:	0003      	movs	r3, r0
 8005c36:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	d005      	beq.n	8005c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c42:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <HAL_Delay+0x40>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	001a      	movs	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	189b      	adds	r3, r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	f7ff ffe0 	bl	8005c14 <HAL_GetTick>
 8005c54:	0002      	movs	r2, r0
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d8f7      	bhi.n	8005c50 <HAL_Delay+0x28>
  {
  }
}
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b004      	add	sp, #16
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000010 	.word	0x20000010

08005c6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c74:	230f      	movs	r3, #15
 8005c76:	18fb      	adds	r3, r7, r3
 8005c78:	2200      	movs	r2, #0
 8005c7a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e125      	b.n	8005ed6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10a      	bne.n	8005ca8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2234      	movs	r2, #52	; 0x34
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f7ff fbae 	bl	8005404 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	2210      	movs	r2, #16
 8005cae:	4013      	ands	r3, r2
 8005cb0:	d000      	beq.n	8005cb4 <HAL_ADC_Init+0x48>
 8005cb2:	e103      	b.n	8005ebc <HAL_ADC_Init+0x250>
 8005cb4:	230f      	movs	r3, #15
 8005cb6:	18fb      	adds	r3, r7, r3
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d000      	beq.n	8005cc0 <HAL_ADC_Init+0x54>
 8005cbe:	e0fd      	b.n	8005ebc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8005cca:	d000      	beq.n	8005cce <HAL_ADC_Init+0x62>
 8005ccc:	e0f6      	b.n	8005ebc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	4a83      	ldr	r2, [pc, #524]	; (8005ee0 <HAL_ADC_Init+0x274>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d112      	bne.n	8005d12 <HAL_ADC_Init+0xa6>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d009      	beq.n	8005d0e <HAL_ADC_Init+0xa2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	2380      	movs	r3, #128	; 0x80
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	401a      	ands	r2, r3
 8005d06:	2380      	movs	r3, #128	; 0x80
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d101      	bne.n	8005d12 <HAL_ADC_Init+0xa6>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <HAL_ADC_Init+0xa8>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d116      	bne.n	8005d46 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	2218      	movs	r2, #24
 8005d20:	4393      	bics	r3, r2
 8005d22:	0019      	movs	r1, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	0899      	lsrs	r1, r3, #2
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4964      	ldr	r1, [pc, #400]	; (8005ee4 <HAL_ADC_Init+0x278>)
 8005d52:	400a      	ands	r2, r1
 8005d54:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	7e1b      	ldrb	r3, [r3, #24]
 8005d5a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	7e5b      	ldrb	r3, [r3, #25]
 8005d60:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d62:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	7e9b      	ldrb	r3, [r3, #26]
 8005d68:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005d6a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d002      	beq.n	8005d7a <HAL_ADC_Init+0x10e>
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	015b      	lsls	r3, r3, #5
 8005d78:	e000      	b.n	8005d7c <HAL_ADC_Init+0x110>
 8005d7a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005d7c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005d82:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d101      	bne.n	8005d90 <HAL_ADC_Init+0x124>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	e000      	b.n	8005d92 <HAL_ADC_Init+0x126>
 8005d90:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8005d92:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2124      	movs	r1, #36	; 0x24
 8005d98:	5c5b      	ldrb	r3, [r3, r1]
 8005d9a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005d9c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	7edb      	ldrb	r3, [r3, #27]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d115      	bne.n	8005dd8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	7e9b      	ldrb	r3, [r3, #26]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2280      	movs	r2, #128	; 0x80
 8005db8:	0252      	lsls	r2, r2, #9
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	e00b      	b.n	8005dd8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	23c2      	movs	r3, #194	; 0xc2
 8005dde:	33ff      	adds	r3, #255	; 0xff
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d007      	beq.n	8005df4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8005dec:	4313      	orrs	r3, r2
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68d9      	ldr	r1, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	055b      	lsls	r3, r3, #21
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d01b      	beq.n	8005e48 <HAL_ADC_Init+0x1dc>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d017      	beq.n	8005e48 <HAL_ADC_Init+0x1dc>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d013      	beq.n	8005e48 <HAL_ADC_Init+0x1dc>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d00f      	beq.n	8005e48 <HAL_ADC_Init+0x1dc>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d00b      	beq.n	8005e48 <HAL_ADC_Init+0x1dc>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	2b05      	cmp	r3, #5
 8005e36:	d007      	beq.n	8005e48 <HAL_ADC_Init+0x1dc>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	2b06      	cmp	r3, #6
 8005e3e:	d003      	beq.n	8005e48 <HAL_ADC_Init+0x1dc>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	2b07      	cmp	r3, #7
 8005e46:	d112      	bne.n	8005e6e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695a      	ldr	r2, [r3, #20]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2107      	movs	r1, #7
 8005e54:	438a      	bics	r2, r1
 8005e56:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6959      	ldr	r1, [r3, #20]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	2207      	movs	r2, #7
 8005e64:	401a      	ands	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <HAL_ADC_Init+0x27c>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d10b      	bne.n	8005e96 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	2203      	movs	r2, #3
 8005e8a:	4393      	bics	r3, r2
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005e94:	e01c      	b.n	8005ed0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	2212      	movs	r2, #18
 8005e9c:	4393      	bics	r3, r2
 8005e9e:	2210      	movs	r2, #16
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eaa:	2201      	movs	r2, #1
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8005eb2:	230f      	movs	r3, #15
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005eba:	e009      	b.n	8005ed0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8005ec8:	230f      	movs	r3, #15
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	2201      	movs	r2, #1
 8005ece:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005ed0:	230f      	movs	r3, #15
 8005ed2:	18fb      	adds	r3, r7, r3
 8005ed4:	781b      	ldrb	r3, [r3, #0]
}
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b004      	add	sp, #16
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	fffffefd 	.word	0xfffffefd
 8005ee4:	fffe0219 	.word	0xfffe0219
 8005ee8:	833fffe7 	.word	0x833fffe7

08005eec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005eec:	b590      	push	{r4, r7, lr}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ef4:	230f      	movs	r3, #15
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2204      	movs	r2, #4
 8005f04:	4013      	ands	r3, r2
 8005f06:	d138      	bne.n	8005f7a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2234      	movs	r2, #52	; 0x34
 8005f0c:	5c9b      	ldrb	r3, [r3, r2]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_ADC_Start+0x2a>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e038      	b.n	8005f88 <HAL_ADC_Start+0x9c>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2234      	movs	r2, #52	; 0x34
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	7e5b      	ldrb	r3, [r3, #25]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d007      	beq.n	8005f36 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005f26:	230f      	movs	r3, #15
 8005f28:	18fc      	adds	r4, r7, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 f933 	bl	8006198 <ADC_Enable>
 8005f32:	0003      	movs	r3, r0
 8005f34:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005f36:	230f      	movs	r3, #15
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d120      	bne.n	8005f82 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	4a12      	ldr	r2, [pc, #72]	; (8005f90 <HAL_ADC_Start+0xa4>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	2280      	movs	r2, #128	; 0x80
 8005f4a:	0052      	lsls	r2, r2, #1
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2234      	movs	r2, #52	; 0x34
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	221c      	movs	r2, #28
 8005f66:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2104      	movs	r1, #4
 8005f74:	430a      	orrs	r2, r1
 8005f76:	609a      	str	r2, [r3, #8]
 8005f78:	e003      	b.n	8005f82 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005f7a:	230f      	movs	r3, #15
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	2202      	movs	r2, #2
 8005f80:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005f82:	230f      	movs	r3, #15
 8005f84:	18fb      	adds	r3, r7, r3
 8005f86:	781b      	ldrb	r3, [r3, #0]
}
 8005f88:	0018      	movs	r0, r3
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	b005      	add	sp, #20
 8005f8e:	bd90      	pop	{r4, r7, pc}
 8005f90:	fffff0fe 	.word	0xfffff0fe

08005f94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	b002      	add	sp, #8
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fb6:	230f      	movs	r3, #15
 8005fb8:	18fb      	adds	r3, r7, r3
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc6:	2380      	movs	r3, #128	; 0x80
 8005fc8:	055b      	lsls	r3, r3, #21
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d011      	beq.n	8005ff2 <HAL_ADC_ConfigChannel+0x46>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d00d      	beq.n	8005ff2 <HAL_ADC_ConfigChannel+0x46>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d009      	beq.n	8005ff2 <HAL_ADC_ConfigChannel+0x46>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d005      	beq.n	8005ff2 <HAL_ADC_ConfigChannel+0x46>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d001      	beq.n	8005ff2 <HAL_ADC_ConfigChannel+0x46>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2234      	movs	r2, #52	; 0x34
 8005ff6:	5c9b      	ldrb	r3, [r3, r2]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_ADC_ConfigChannel+0x54>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e0bb      	b.n	8006178 <HAL_ADC_ConfigChannel+0x1cc>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2234      	movs	r2, #52	; 0x34
 8006004:	2101      	movs	r1, #1
 8006006:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2204      	movs	r2, #4
 8006010:	4013      	ands	r3, r2
 8006012:	d000      	beq.n	8006016 <HAL_ADC_ConfigChannel+0x6a>
 8006014:	e09f      	b.n	8006156 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4a59      	ldr	r2, [pc, #356]	; (8006180 <HAL_ADC_ConfigChannel+0x1d4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d100      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x76>
 8006020:	e077      	b.n	8006112 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2201      	movs	r2, #1
 800602e:	409a      	lsls	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	055b      	lsls	r3, r3, #21
 8006040:	429a      	cmp	r2, r3
 8006042:	d037      	beq.n	80060b4 <HAL_ADC_ConfigChannel+0x108>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d033      	beq.n	80060b4 <HAL_ADC_ConfigChannel+0x108>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	2b02      	cmp	r3, #2
 8006052:	d02f      	beq.n	80060b4 <HAL_ADC_ConfigChannel+0x108>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	2b03      	cmp	r3, #3
 800605a:	d02b      	beq.n	80060b4 <HAL_ADC_ConfigChannel+0x108>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	2b04      	cmp	r3, #4
 8006062:	d027      	beq.n	80060b4 <HAL_ADC_ConfigChannel+0x108>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	2b05      	cmp	r3, #5
 800606a:	d023      	beq.n	80060b4 <HAL_ADC_ConfigChannel+0x108>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	2b06      	cmp	r3, #6
 8006072:	d01f      	beq.n	80060b4 <HAL_ADC_ConfigChannel+0x108>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	2b07      	cmp	r3, #7
 800607a:	d01b      	beq.n	80060b4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	2107      	movs	r1, #7
 8006088:	400b      	ands	r3, r1
 800608a:	429a      	cmp	r2, r3
 800608c:	d012      	beq.n	80060b4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2107      	movs	r1, #7
 800609a:	438a      	bics	r2, r1
 800609c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6959      	ldr	r1, [r3, #20]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2207      	movs	r2, #7
 80060aa:	401a      	ands	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d003      	beq.n	80060c4 <HAL_ADC_ConfigChannel+0x118>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b11      	cmp	r3, #17
 80060c2:	d152      	bne.n	800616a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80060c4:	4b2f      	ldr	r3, [pc, #188]	; (8006184 <HAL_ADC_ConfigChannel+0x1d8>)
 80060c6:	6819      	ldr	r1, [r3, #0]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d102      	bne.n	80060d6 <HAL_ADC_ConfigChannel+0x12a>
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	e001      	b.n	80060da <HAL_ADC_ConfigChannel+0x12e>
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	03db      	lsls	r3, r3, #15
 80060da:	4a2a      	ldr	r2, [pc, #168]	; (8006184 <HAL_ADC_ConfigChannel+0x1d8>)
 80060dc:	430b      	orrs	r3, r1
 80060de:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b10      	cmp	r3, #16
 80060e6:	d140      	bne.n	800616a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80060e8:	4b27      	ldr	r3, [pc, #156]	; (8006188 <HAL_ADC_ConfigChannel+0x1dc>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4927      	ldr	r1, [pc, #156]	; (800618c <HAL_ADC_ConfigChannel+0x1e0>)
 80060ee:	0018      	movs	r0, r3
 80060f0:	f7fa f80a 	bl	8000108 <__udivsi3>
 80060f4:	0003      	movs	r3, r0
 80060f6:	001a      	movs	r2, r3
 80060f8:	0013      	movs	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	189b      	adds	r3, r3, r2
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006102:	e002      	b.n	800610a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	3b01      	subs	r3, #1
 8006108:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f9      	bne.n	8006104 <HAL_ADC_ConfigChannel+0x158>
 8006110:	e02b      	b.n	800616a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2101      	movs	r1, #1
 800611e:	4099      	lsls	r1, r3
 8006120:	000b      	movs	r3, r1
 8006122:	43d9      	mvns	r1, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	400a      	ands	r2, r1
 800612a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b10      	cmp	r3, #16
 8006132:	d003      	beq.n	800613c <HAL_ADC_ConfigChannel+0x190>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b11      	cmp	r3, #17
 800613a:	d116      	bne.n	800616a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800613c:	4b11      	ldr	r3, [pc, #68]	; (8006184 <HAL_ADC_ConfigChannel+0x1d8>)
 800613e:	6819      	ldr	r1, [r3, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b10      	cmp	r3, #16
 8006146:	d101      	bne.n	800614c <HAL_ADC_ConfigChannel+0x1a0>
 8006148:	4a11      	ldr	r2, [pc, #68]	; (8006190 <HAL_ADC_ConfigChannel+0x1e4>)
 800614a:	e000      	b.n	800614e <HAL_ADC_ConfigChannel+0x1a2>
 800614c:	4a11      	ldr	r2, [pc, #68]	; (8006194 <HAL_ADC_ConfigChannel+0x1e8>)
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <HAL_ADC_ConfigChannel+0x1d8>)
 8006150:	400a      	ands	r2, r1
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	e009      	b.n	800616a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	2220      	movs	r2, #32
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006162:	230f      	movs	r3, #15
 8006164:	18fb      	adds	r3, r7, r3
 8006166:	2201      	movs	r2, #1
 8006168:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2234      	movs	r2, #52	; 0x34
 800616e:	2100      	movs	r1, #0
 8006170:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006172:	230f      	movs	r3, #15
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	781b      	ldrb	r3, [r3, #0]
}
 8006178:	0018      	movs	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	b004      	add	sp, #16
 800617e:	bd80      	pop	{r7, pc}
 8006180:	00001001 	.word	0x00001001
 8006184:	40012708 	.word	0x40012708
 8006188:	20000008 	.word	0x20000008
 800618c:	000f4240 	.word	0x000f4240
 8006190:	ff7fffff 	.word	0xff7fffff
 8006194:	ffbfffff 	.word	0xffbfffff

08006198 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2203      	movs	r2, #3
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d112      	bne.n	80061dc <ADC_Enable+0x44>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2201      	movs	r2, #1
 80061be:	4013      	ands	r3, r2
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d009      	beq.n	80061d8 <ADC_Enable+0x40>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	2380      	movs	r3, #128	; 0x80
 80061cc:	021b      	lsls	r3, r3, #8
 80061ce:	401a      	ands	r2, r3
 80061d0:	2380      	movs	r3, #128	; 0x80
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d101      	bne.n	80061dc <ADC_Enable+0x44>
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <ADC_Enable+0x46>
 80061dc:	2300      	movs	r3, #0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d14b      	bne.n	800627a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	4a26      	ldr	r2, [pc, #152]	; (8006284 <ADC_Enable+0xec>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	d00d      	beq.n	800620a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	2210      	movs	r2, #16
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fe:	2201      	movs	r2, #1
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e038      	b.n	800627c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2101      	movs	r1, #1
 8006216:	430a      	orrs	r2, r1
 8006218:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800621a:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <ADC_Enable+0xf0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	491b      	ldr	r1, [pc, #108]	; (800628c <ADC_Enable+0xf4>)
 8006220:	0018      	movs	r0, r3
 8006222:	f7f9 ff71 	bl	8000108 <__udivsi3>
 8006226:	0003      	movs	r3, r0
 8006228:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800622a:	e002      	b.n	8006232 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	3b01      	subs	r3, #1
 8006230:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f9      	bne.n	800622c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006238:	f7ff fcec 	bl	8005c14 <HAL_GetTick>
 800623c:	0003      	movs	r3, r0
 800623e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006240:	e014      	b.n	800626c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006242:	f7ff fce7 	bl	8005c14 <HAL_GetTick>
 8006246:	0002      	movs	r2, r0
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d90d      	bls.n	800626c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006254:	2210      	movs	r2, #16
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006260:	2201      	movs	r2, #1
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e007      	b.n	800627c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2201      	movs	r2, #1
 8006274:	4013      	ands	r3, r2
 8006276:	2b01      	cmp	r3, #1
 8006278:	d1e3      	bne.n	8006242 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	0018      	movs	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	b004      	add	sp, #16
 8006282:	bd80      	pop	{r7, pc}
 8006284:	80000017 	.word	0x80000017
 8006288:	20000008 	.word	0x20000008
 800628c:	000f4240 	.word	0x000f4240

08006290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	0002      	movs	r2, r0
 8006298:	1dfb      	adds	r3, r7, #7
 800629a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800629c:	1dfb      	adds	r3, r7, #7
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b7f      	cmp	r3, #127	; 0x7f
 80062a2:	d809      	bhi.n	80062b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062a4:	1dfb      	adds	r3, r7, #7
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	001a      	movs	r2, r3
 80062aa:	231f      	movs	r3, #31
 80062ac:	401a      	ands	r2, r3
 80062ae:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <__NVIC_EnableIRQ+0x30>)
 80062b0:	2101      	movs	r1, #1
 80062b2:	4091      	lsls	r1, r2
 80062b4:	000a      	movs	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]
  }
}
 80062b8:	46c0      	nop			; (mov r8, r8)
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b002      	add	sp, #8
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	e000e100 	.word	0xe000e100

080062c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	0002      	movs	r2, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	1dfb      	adds	r3, r7, #7
 80062d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80062d2:	1dfb      	adds	r3, r7, #7
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b7f      	cmp	r3, #127	; 0x7f
 80062d8:	d828      	bhi.n	800632c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80062da:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <__NVIC_SetPriority+0xd4>)
 80062dc:	1dfb      	adds	r3, r7, #7
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	089b      	lsrs	r3, r3, #2
 80062e4:	33c0      	adds	r3, #192	; 0xc0
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	589b      	ldr	r3, [r3, r2]
 80062ea:	1dfa      	adds	r2, r7, #7
 80062ec:	7812      	ldrb	r2, [r2, #0]
 80062ee:	0011      	movs	r1, r2
 80062f0:	2203      	movs	r2, #3
 80062f2:	400a      	ands	r2, r1
 80062f4:	00d2      	lsls	r2, r2, #3
 80062f6:	21ff      	movs	r1, #255	; 0xff
 80062f8:	4091      	lsls	r1, r2
 80062fa:	000a      	movs	r2, r1
 80062fc:	43d2      	mvns	r2, r2
 80062fe:	401a      	ands	r2, r3
 8006300:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	019b      	lsls	r3, r3, #6
 8006306:	22ff      	movs	r2, #255	; 0xff
 8006308:	401a      	ands	r2, r3
 800630a:	1dfb      	adds	r3, r7, #7
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	0018      	movs	r0, r3
 8006310:	2303      	movs	r3, #3
 8006312:	4003      	ands	r3, r0
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006318:	481f      	ldr	r0, [pc, #124]	; (8006398 <__NVIC_SetPriority+0xd4>)
 800631a:	1dfb      	adds	r3, r7, #7
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	b25b      	sxtb	r3, r3
 8006320:	089b      	lsrs	r3, r3, #2
 8006322:	430a      	orrs	r2, r1
 8006324:	33c0      	adds	r3, #192	; 0xc0
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800632a:	e031      	b.n	8006390 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800632c:	4a1b      	ldr	r2, [pc, #108]	; (800639c <__NVIC_SetPriority+0xd8>)
 800632e:	1dfb      	adds	r3, r7, #7
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	0019      	movs	r1, r3
 8006334:	230f      	movs	r3, #15
 8006336:	400b      	ands	r3, r1
 8006338:	3b08      	subs	r3, #8
 800633a:	089b      	lsrs	r3, r3, #2
 800633c:	3306      	adds	r3, #6
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	18d3      	adds	r3, r2, r3
 8006342:	3304      	adds	r3, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	1dfa      	adds	r2, r7, #7
 8006348:	7812      	ldrb	r2, [r2, #0]
 800634a:	0011      	movs	r1, r2
 800634c:	2203      	movs	r2, #3
 800634e:	400a      	ands	r2, r1
 8006350:	00d2      	lsls	r2, r2, #3
 8006352:	21ff      	movs	r1, #255	; 0xff
 8006354:	4091      	lsls	r1, r2
 8006356:	000a      	movs	r2, r1
 8006358:	43d2      	mvns	r2, r2
 800635a:	401a      	ands	r2, r3
 800635c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	019b      	lsls	r3, r3, #6
 8006362:	22ff      	movs	r2, #255	; 0xff
 8006364:	401a      	ands	r2, r3
 8006366:	1dfb      	adds	r3, r7, #7
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	0018      	movs	r0, r3
 800636c:	2303      	movs	r3, #3
 800636e:	4003      	ands	r3, r0
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006374:	4809      	ldr	r0, [pc, #36]	; (800639c <__NVIC_SetPriority+0xd8>)
 8006376:	1dfb      	adds	r3, r7, #7
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	001c      	movs	r4, r3
 800637c:	230f      	movs	r3, #15
 800637e:	4023      	ands	r3, r4
 8006380:	3b08      	subs	r3, #8
 8006382:	089b      	lsrs	r3, r3, #2
 8006384:	430a      	orrs	r2, r1
 8006386:	3306      	adds	r3, #6
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	18c3      	adds	r3, r0, r3
 800638c:	3304      	adds	r3, #4
 800638e:	601a      	str	r2, [r3, #0]
}
 8006390:	46c0      	nop			; (mov r8, r8)
 8006392:	46bd      	mov	sp, r7
 8006394:	b003      	add	sp, #12
 8006396:	bd90      	pop	{r4, r7, pc}
 8006398:	e000e100 	.word	0xe000e100
 800639c:	e000ed00 	.word	0xe000ed00

080063a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	4a0c      	ldr	r2, [pc, #48]	; (80063e0 <SysTick_Config+0x40>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063b2:	2301      	movs	r3, #1
 80063b4:	e010      	b.n	80063d8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <SysTick_Config+0x44>)
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	3a01      	subs	r2, #1
 80063bc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063be:	2301      	movs	r3, #1
 80063c0:	425b      	negs	r3, r3
 80063c2:	2103      	movs	r1, #3
 80063c4:	0018      	movs	r0, r3
 80063c6:	f7ff ff7d 	bl	80062c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <SysTick_Config+0x44>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063d0:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <SysTick_Config+0x44>)
 80063d2:	2207      	movs	r2, #7
 80063d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	0018      	movs	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	b002      	add	sp, #8
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	00ffffff 	.word	0x00ffffff
 80063e4:	e000e010 	.word	0xe000e010

080063e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	210f      	movs	r1, #15
 80063f4:	187b      	adds	r3, r7, r1
 80063f6:	1c02      	adds	r2, r0, #0
 80063f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	187b      	adds	r3, r7, r1
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	b25b      	sxtb	r3, r3
 8006402:	0011      	movs	r1, r2
 8006404:	0018      	movs	r0, r3
 8006406:	f7ff ff5d 	bl	80062c4 <__NVIC_SetPriority>
}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	46bd      	mov	sp, r7
 800640e:	b004      	add	sp, #16
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	0002      	movs	r2, r0
 800641a:	1dfb      	adds	r3, r7, #7
 800641c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800641e:	1dfb      	adds	r3, r7, #7
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	b25b      	sxtb	r3, r3
 8006424:	0018      	movs	r0, r3
 8006426:	f7ff ff33 	bl	8006290 <__NVIC_EnableIRQ>
}
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	46bd      	mov	sp, r7
 800642e:	b002      	add	sp, #8
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b082      	sub	sp, #8
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	0018      	movs	r0, r3
 800643e:	f7ff ffaf 	bl	80063a0 <SysTick_Config>
 8006442:	0003      	movs	r3, r0
}
 8006444:	0018      	movs	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	b002      	add	sp, #8
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e036      	b.n	80064d0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2221      	movs	r2, #33	; 0x21
 8006466:	2102      	movs	r1, #2
 8006468:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4a18      	ldr	r2, [pc, #96]	; (80064d8 <HAL_DMA_Init+0x8c>)
 8006476:	4013      	ands	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006482:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800648e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800649a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	0018      	movs	r0, r3
 80064b4:	f000 f946 	bl	8006744 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2221      	movs	r2, #33	; 0x21
 80064c2:	2101      	movs	r1, #1
 80064c4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	2100      	movs	r1, #0
 80064cc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}  
 80064d0:	0018      	movs	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b004      	add	sp, #16
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	ffffc00f 	.word	0xffffc00f

080064dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80064ea:	2317      	movs	r3, #23
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	5c9b      	ldrb	r3, [r3, r2]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_DMA_Start_IT+0x24>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e04f      	b.n	80065a0 <HAL_DMA_Start_IT+0xc4>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	2101      	movs	r1, #1
 8006506:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2221      	movs	r2, #33	; 0x21
 800650c:	5c9b      	ldrb	r3, [r3, r2]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d13a      	bne.n	800658a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2221      	movs	r2, #33	; 0x21
 8006518:	2102      	movs	r1, #2
 800651a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2101      	movs	r1, #1
 800652e:	438a      	bics	r2, r1
 8006530:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f8d7 	bl	80066ec <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	210e      	movs	r1, #14
 8006552:	430a      	orrs	r2, r1
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e00f      	b.n	8006578 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	210a      	movs	r1, #10
 8006564:	430a      	orrs	r2, r1
 8006566:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2104      	movs	r1, #4
 8006574:	438a      	bics	r2, r1
 8006576:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2101      	movs	r1, #1
 8006584:	430a      	orrs	r2, r1
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e007      	b.n	800659a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	2100      	movs	r1, #0
 8006590:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006592:	2317      	movs	r3, #23
 8006594:	18fb      	adds	r3, r7, r3
 8006596:	2202      	movs	r2, #2
 8006598:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800659a:	2317      	movs	r3, #23
 800659c:	18fb      	adds	r3, r7, r3
 800659e:	781b      	ldrb	r3, [r3, #0]
} 
 80065a0:	0018      	movs	r0, r3
 80065a2:	46bd      	mov	sp, r7
 80065a4:	b006      	add	sp, #24
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	2204      	movs	r2, #4
 80065c6:	409a      	lsls	r2, r3
 80065c8:	0013      	movs	r3, r2
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4013      	ands	r3, r2
 80065ce:	d024      	beq.n	800661a <HAL_DMA_IRQHandler+0x72>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2204      	movs	r2, #4
 80065d4:	4013      	ands	r3, r2
 80065d6:	d020      	beq.n	800661a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2220      	movs	r2, #32
 80065e0:	4013      	ands	r3, r2
 80065e2:	d107      	bne.n	80065f4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2104      	movs	r1, #4
 80065f0:	438a      	bics	r2, r1
 80065f2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fc:	2104      	movs	r1, #4
 80065fe:	4091      	lsls	r1, r2
 8006600:	000a      	movs	r2, r1
 8006602:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d100      	bne.n	800660e <HAL_DMA_IRQHandler+0x66>
 800660c:	e06a      	b.n	80066e4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	0010      	movs	r0, r2
 8006616:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006618:	e064      	b.n	80066e4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	2202      	movs	r2, #2
 8006620:	409a      	lsls	r2, r3
 8006622:	0013      	movs	r3, r2
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4013      	ands	r3, r2
 8006628:	d02b      	beq.n	8006682 <HAL_DMA_IRQHandler+0xda>
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2202      	movs	r2, #2
 800662e:	4013      	ands	r3, r2
 8006630:	d027      	beq.n	8006682 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2220      	movs	r2, #32
 800663a:	4013      	ands	r3, r2
 800663c:	d10b      	bne.n	8006656 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	210a      	movs	r1, #10
 800664a:	438a      	bics	r2, r1
 800664c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2221      	movs	r2, #33	; 0x21
 8006652:	2101      	movs	r1, #1
 8006654:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665e:	2102      	movs	r1, #2
 8006660:	4091      	lsls	r1, r2
 8006662:	000a      	movs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	2100      	movs	r1, #0
 800666c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	d036      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	0010      	movs	r0, r2
 800667e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006680:	e030      	b.n	80066e4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	2208      	movs	r2, #8
 8006688:	409a      	lsls	r2, r3
 800668a:	0013      	movs	r3, r2
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4013      	ands	r3, r2
 8006690:	d028      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x13c>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2208      	movs	r2, #8
 8006696:	4013      	ands	r3, r2
 8006698:	d024      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	210e      	movs	r1, #14
 80066a6:	438a      	bics	r2, r1
 80066a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	2101      	movs	r1, #1
 80066b4:	4091      	lsls	r1, r2
 80066b6:	000a      	movs	r2, r1
 80066b8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2221      	movs	r2, #33	; 0x21
 80066c4:	2101      	movs	r1, #1
 80066c6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	2100      	movs	r1, #0
 80066ce:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	0010      	movs	r0, r2
 80066e0:	4798      	blx	r3
    }
   }
}  
 80066e2:	e7ff      	b.n	80066e4 <HAL_DMA_IRQHandler+0x13c>
 80066e4:	46c0      	nop			; (mov r8, r8)
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b004      	add	sp, #16
 80066ea:	bd80      	pop	{r7, pc}

080066ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006702:	2101      	movs	r1, #1
 8006704:	4091      	lsls	r1, r2
 8006706:	000a      	movs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b10      	cmp	r3, #16
 8006718:	d108      	bne.n	800672c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800672a:	e007      	b.n	800673c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	60da      	str	r2, [r3, #12]
}
 800673c:	46c0      	nop			; (mov r8, r8)
 800673e:	46bd      	mov	sp, r7
 8006740:	b004      	add	sp, #16
 8006742:	bd80      	pop	{r7, pc}

08006744 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a08      	ldr	r2, [pc, #32]	; (8006774 <DMA_CalcBaseAndBitshift+0x30>)
 8006752:	4694      	mov	ip, r2
 8006754:	4463      	add	r3, ip
 8006756:	2114      	movs	r1, #20
 8006758:	0018      	movs	r0, r3
 800675a:	f7f9 fcd5 	bl	8000108 <__udivsi3>
 800675e:	0003      	movs	r3, r0
 8006760:	009a      	lsls	r2, r3, #2
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a03      	ldr	r2, [pc, #12]	; (8006778 <DMA_CalcBaseAndBitshift+0x34>)
 800676a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800676c:	46c0      	nop			; (mov r8, r8)
 800676e:	46bd      	mov	sp, r7
 8006770:	b002      	add	sp, #8
 8006772:	bd80      	pop	{r7, pc}
 8006774:	bffdfff8 	.word	0xbffdfff8
 8006778:	40020000 	.word	0x40020000

0800677c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800678a:	e14f      	b.n	8006a2c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2101      	movs	r1, #1
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4091      	lsls	r1, r2
 8006796:	000a      	movs	r2, r1
 8006798:	4013      	ands	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d100      	bne.n	80067a4 <HAL_GPIO_Init+0x28>
 80067a2:	e140      	b.n	8006a26 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d003      	beq.n	80067b4 <HAL_GPIO_Init+0x38>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b12      	cmp	r3, #18
 80067b2:	d123      	bne.n	80067fc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	08da      	lsrs	r2, r3, #3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3208      	adds	r2, #8
 80067bc:	0092      	lsls	r2, r2, #2
 80067be:	58d3      	ldr	r3, [r2, r3]
 80067c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2207      	movs	r2, #7
 80067c6:	4013      	ands	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	220f      	movs	r2, #15
 80067cc:	409a      	lsls	r2, r3
 80067ce:	0013      	movs	r3, r2
 80067d0:	43da      	mvns	r2, r3
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4013      	ands	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2107      	movs	r1, #7
 80067e0:	400b      	ands	r3, r1
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	409a      	lsls	r2, r3
 80067e6:	0013      	movs	r3, r2
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	08da      	lsrs	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3208      	adds	r2, #8
 80067f6:	0092      	lsls	r2, r2, #2
 80067f8:	6939      	ldr	r1, [r7, #16]
 80067fa:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	2203      	movs	r2, #3
 8006808:	409a      	lsls	r2, r3
 800680a:	0013      	movs	r3, r2
 800680c:	43da      	mvns	r2, r3
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4013      	ands	r3, r2
 8006812:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2203      	movs	r2, #3
 800681a:	401a      	ands	r2, r3
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	409a      	lsls	r2, r3
 8006822:	0013      	movs	r3, r2
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d00b      	beq.n	8006850 <HAL_GPIO_Init+0xd4>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b02      	cmp	r3, #2
 800683e:	d007      	beq.n	8006850 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006844:	2b11      	cmp	r3, #17
 8006846:	d003      	beq.n	8006850 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2b12      	cmp	r3, #18
 800684e:	d130      	bne.n	80068b2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	2203      	movs	r2, #3
 800685c:	409a      	lsls	r2, r3
 800685e:	0013      	movs	r3, r2
 8006860:	43da      	mvns	r2, r3
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	4013      	ands	r3, r2
 8006866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	409a      	lsls	r2, r3
 8006872:	0013      	movs	r3, r2
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	4313      	orrs	r3, r2
 8006878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006886:	2201      	movs	r2, #1
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	409a      	lsls	r2, r3
 800688c:	0013      	movs	r3, r2
 800688e:	43da      	mvns	r2, r3
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	4013      	ands	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	091b      	lsrs	r3, r3, #4
 800689c:	2201      	movs	r2, #1
 800689e:	401a      	ands	r2, r3
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	409a      	lsls	r2, r3
 80068a4:	0013      	movs	r3, r2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	2203      	movs	r2, #3
 80068be:	409a      	lsls	r2, r3
 80068c0:	0013      	movs	r3, r2
 80068c2:	43da      	mvns	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4013      	ands	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	409a      	lsls	r2, r3
 80068d4:	0013      	movs	r3, r2
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	2380      	movs	r3, #128	; 0x80
 80068e8:	055b      	lsls	r3, r3, #21
 80068ea:	4013      	ands	r3, r2
 80068ec:	d100      	bne.n	80068f0 <HAL_GPIO_Init+0x174>
 80068ee:	e09a      	b.n	8006a26 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068f0:	4b54      	ldr	r3, [pc, #336]	; (8006a44 <HAL_GPIO_Init+0x2c8>)
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	4b53      	ldr	r3, [pc, #332]	; (8006a44 <HAL_GPIO_Init+0x2c8>)
 80068f6:	2101      	movs	r1, #1
 80068f8:	430a      	orrs	r2, r1
 80068fa:	619a      	str	r2, [r3, #24]
 80068fc:	4b51      	ldr	r3, [pc, #324]	; (8006a44 <HAL_GPIO_Init+0x2c8>)
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	2201      	movs	r2, #1
 8006902:	4013      	ands	r3, r2
 8006904:	60bb      	str	r3, [r7, #8]
 8006906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006908:	4a4f      	ldr	r2, [pc, #316]	; (8006a48 <HAL_GPIO_Init+0x2cc>)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	089b      	lsrs	r3, r3, #2
 800690e:	3302      	adds	r3, #2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	589b      	ldr	r3, [r3, r2]
 8006914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2203      	movs	r2, #3
 800691a:	4013      	ands	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	220f      	movs	r2, #15
 8006920:	409a      	lsls	r2, r3
 8006922:	0013      	movs	r3, r2
 8006924:	43da      	mvns	r2, r3
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	4013      	ands	r3, r2
 800692a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	2390      	movs	r3, #144	; 0x90
 8006930:	05db      	lsls	r3, r3, #23
 8006932:	429a      	cmp	r2, r3
 8006934:	d013      	beq.n	800695e <HAL_GPIO_Init+0x1e2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a44      	ldr	r2, [pc, #272]	; (8006a4c <HAL_GPIO_Init+0x2d0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00d      	beq.n	800695a <HAL_GPIO_Init+0x1de>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a43      	ldr	r2, [pc, #268]	; (8006a50 <HAL_GPIO_Init+0x2d4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d007      	beq.n	8006956 <HAL_GPIO_Init+0x1da>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a42      	ldr	r2, [pc, #264]	; (8006a54 <HAL_GPIO_Init+0x2d8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d101      	bne.n	8006952 <HAL_GPIO_Init+0x1d6>
 800694e:	2303      	movs	r3, #3
 8006950:	e006      	b.n	8006960 <HAL_GPIO_Init+0x1e4>
 8006952:	2305      	movs	r3, #5
 8006954:	e004      	b.n	8006960 <HAL_GPIO_Init+0x1e4>
 8006956:	2302      	movs	r3, #2
 8006958:	e002      	b.n	8006960 <HAL_GPIO_Init+0x1e4>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <HAL_GPIO_Init+0x1e4>
 800695e:	2300      	movs	r3, #0
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	2103      	movs	r1, #3
 8006964:	400a      	ands	r2, r1
 8006966:	0092      	lsls	r2, r2, #2
 8006968:	4093      	lsls	r3, r2
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006970:	4935      	ldr	r1, [pc, #212]	; (8006a48 <HAL_GPIO_Init+0x2cc>)
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	089b      	lsrs	r3, r3, #2
 8006976:	3302      	adds	r3, #2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800697e:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <HAL_GPIO_Init+0x2dc>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	43da      	mvns	r2, r3
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4013      	ands	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	2380      	movs	r3, #128	; 0x80
 8006994:	025b      	lsls	r3, r3, #9
 8006996:	4013      	ands	r3, r2
 8006998:	d003      	beq.n	80069a2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80069a2:	4b2d      	ldr	r3, [pc, #180]	; (8006a58 <HAL_GPIO_Init+0x2dc>)
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80069a8:	4b2b      	ldr	r3, [pc, #172]	; (8006a58 <HAL_GPIO_Init+0x2dc>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	43da      	mvns	r2, r3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4013      	ands	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	2380      	movs	r3, #128	; 0x80
 80069be:	029b      	lsls	r3, r3, #10
 80069c0:	4013      	ands	r3, r2
 80069c2:	d003      	beq.n	80069cc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80069cc:	4b22      	ldr	r3, [pc, #136]	; (8006a58 <HAL_GPIO_Init+0x2dc>)
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80069d2:	4b21      	ldr	r3, [pc, #132]	; (8006a58 <HAL_GPIO_Init+0x2dc>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	43da      	mvns	r2, r3
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4013      	ands	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	2380      	movs	r3, #128	; 0x80
 80069e8:	035b      	lsls	r3, r3, #13
 80069ea:	4013      	ands	r3, r2
 80069ec:	d003      	beq.n	80069f6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80069f6:	4b18      	ldr	r3, [pc, #96]	; (8006a58 <HAL_GPIO_Init+0x2dc>)
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80069fc:	4b16      	ldr	r3, [pc, #88]	; (8006a58 <HAL_GPIO_Init+0x2dc>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	43da      	mvns	r2, r3
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	2380      	movs	r3, #128	; 0x80
 8006a12:	039b      	lsls	r3, r3, #14
 8006a14:	4013      	ands	r3, r2
 8006a16:	d003      	beq.n	8006a20 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <HAL_GPIO_Init+0x2dc>)
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	40da      	lsrs	r2, r3
 8006a34:	1e13      	subs	r3, r2, #0
 8006a36:	d000      	beq.n	8006a3a <HAL_GPIO_Init+0x2be>
 8006a38:	e6a8      	b.n	800678c <HAL_GPIO_Init+0x10>
  } 
}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b006      	add	sp, #24
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	40021000 	.word	0x40021000
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	48000400 	.word	0x48000400
 8006a50:	48000800 	.word	0x48000800
 8006a54:	48000c00 	.word	0x48000c00
 8006a58:	40010400 	.word	0x40010400

08006a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	0008      	movs	r0, r1
 8006a66:	0011      	movs	r1, r2
 8006a68:	1cbb      	adds	r3, r7, #2
 8006a6a:	1c02      	adds	r2, r0, #0
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	1c7b      	adds	r3, r7, #1
 8006a70:	1c0a      	adds	r2, r1, #0
 8006a72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a74:	1c7b      	adds	r3, r7, #1
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d004      	beq.n	8006a86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a7c:	1cbb      	adds	r3, r7, #2
 8006a7e:	881a      	ldrh	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a84:	e003      	b.n	8006a8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a86:	1cbb      	adds	r3, r7, #2
 8006a88:	881a      	ldrh	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b002      	add	sp, #8
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	0002      	movs	r2, r0
 8006aa0:	1dbb      	adds	r3, r7, #6
 8006aa2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006aa4:	4b09      	ldr	r3, [pc, #36]	; (8006acc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	1dba      	adds	r2, r7, #6
 8006aaa:	8812      	ldrh	r2, [r2, #0]
 8006aac:	4013      	ands	r3, r2
 8006aae:	d008      	beq.n	8006ac2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ab0:	4b06      	ldr	r3, [pc, #24]	; (8006acc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006ab2:	1dba      	adds	r2, r7, #6
 8006ab4:	8812      	ldrh	r2, [r2, #0]
 8006ab6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ab8:	1dbb      	adds	r3, r7, #6
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	0018      	movs	r0, r3
 8006abe:	f7fb fef1 	bl	80028a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	b002      	add	sp, #8
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	46c0      	nop			; (mov r8, r8)
 8006acc:	40010400 	.word	0x40010400

08006ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e303      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d100      	bne.n	8006aee <HAL_RCC_OscConfig+0x1e>
 8006aec:	e08d      	b.n	8006c0a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006aee:	4bc4      	ldr	r3, [pc, #784]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	220c      	movs	r2, #12
 8006af4:	4013      	ands	r3, r2
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d00e      	beq.n	8006b18 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006afa:	4bc1      	ldr	r3, [pc, #772]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	220c      	movs	r2, #12
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d116      	bne.n	8006b34 <HAL_RCC_OscConfig+0x64>
 8006b06:	4bbe      	ldr	r3, [pc, #760]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	2380      	movs	r3, #128	; 0x80
 8006b0c:	025b      	lsls	r3, r3, #9
 8006b0e:	401a      	ands	r2, r3
 8006b10:	2380      	movs	r3, #128	; 0x80
 8006b12:	025b      	lsls	r3, r3, #9
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d10d      	bne.n	8006b34 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b18:	4bb9      	ldr	r3, [pc, #740]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	2380      	movs	r3, #128	; 0x80
 8006b1e:	029b      	lsls	r3, r3, #10
 8006b20:	4013      	ands	r3, r2
 8006b22:	d100      	bne.n	8006b26 <HAL_RCC_OscConfig+0x56>
 8006b24:	e070      	b.n	8006c08 <HAL_RCC_OscConfig+0x138>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d000      	beq.n	8006b30 <HAL_RCC_OscConfig+0x60>
 8006b2e:	e06b      	b.n	8006c08 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e2da      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d107      	bne.n	8006b4c <HAL_RCC_OscConfig+0x7c>
 8006b3c:	4bb0      	ldr	r3, [pc, #704]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	4baf      	ldr	r3, [pc, #700]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b42:	2180      	movs	r1, #128	; 0x80
 8006b44:	0249      	lsls	r1, r1, #9
 8006b46:	430a      	orrs	r2, r1
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e02f      	b.n	8006bac <HAL_RCC_OscConfig+0xdc>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10c      	bne.n	8006b6e <HAL_RCC_OscConfig+0x9e>
 8006b54:	4baa      	ldr	r3, [pc, #680]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	4ba9      	ldr	r3, [pc, #676]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b5a:	49aa      	ldr	r1, [pc, #680]	; (8006e04 <HAL_RCC_OscConfig+0x334>)
 8006b5c:	400a      	ands	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	4ba7      	ldr	r3, [pc, #668]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	4ba6      	ldr	r3, [pc, #664]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b66:	49a8      	ldr	r1, [pc, #672]	; (8006e08 <HAL_RCC_OscConfig+0x338>)
 8006b68:	400a      	ands	r2, r1
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	e01e      	b.n	8006bac <HAL_RCC_OscConfig+0xdc>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b05      	cmp	r3, #5
 8006b74:	d10e      	bne.n	8006b94 <HAL_RCC_OscConfig+0xc4>
 8006b76:	4ba2      	ldr	r3, [pc, #648]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4ba1      	ldr	r3, [pc, #644]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b7c:	2180      	movs	r1, #128	; 0x80
 8006b7e:	02c9      	lsls	r1, r1, #11
 8006b80:	430a      	orrs	r2, r1
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	4b9e      	ldr	r3, [pc, #632]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	4b9d      	ldr	r3, [pc, #628]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b8a:	2180      	movs	r1, #128	; 0x80
 8006b8c:	0249      	lsls	r1, r1, #9
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	e00b      	b.n	8006bac <HAL_RCC_OscConfig+0xdc>
 8006b94:	4b9a      	ldr	r3, [pc, #616]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	4b99      	ldr	r3, [pc, #612]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006b9a:	499a      	ldr	r1, [pc, #616]	; (8006e04 <HAL_RCC_OscConfig+0x334>)
 8006b9c:	400a      	ands	r2, r1
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	4b97      	ldr	r3, [pc, #604]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4b96      	ldr	r3, [pc, #600]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006ba6:	4998      	ldr	r1, [pc, #608]	; (8006e08 <HAL_RCC_OscConfig+0x338>)
 8006ba8:	400a      	ands	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d014      	beq.n	8006bde <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb4:	f7ff f82e 	bl	8005c14 <HAL_GetTick>
 8006bb8:	0003      	movs	r3, r0
 8006bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bbe:	f7ff f829 	bl	8005c14 <HAL_GetTick>
 8006bc2:	0002      	movs	r2, r0
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b64      	cmp	r3, #100	; 0x64
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e28c      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd0:	4b8b      	ldr	r3, [pc, #556]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	2380      	movs	r3, #128	; 0x80
 8006bd6:	029b      	lsls	r3, r3, #10
 8006bd8:	4013      	ands	r3, r2
 8006bda:	d0f0      	beq.n	8006bbe <HAL_RCC_OscConfig+0xee>
 8006bdc:	e015      	b.n	8006c0a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bde:	f7ff f819 	bl	8005c14 <HAL_GetTick>
 8006be2:	0003      	movs	r3, r0
 8006be4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006be8:	f7ff f814 	bl	8005c14 <HAL_GetTick>
 8006bec:	0002      	movs	r2, r0
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e277      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bfa:	4b81      	ldr	r3, [pc, #516]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	2380      	movs	r3, #128	; 0x80
 8006c00:	029b      	lsls	r3, r3, #10
 8006c02:	4013      	ands	r3, r2
 8006c04:	d1f0      	bne.n	8006be8 <HAL_RCC_OscConfig+0x118>
 8006c06:	e000      	b.n	8006c0a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c08:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	4013      	ands	r3, r2
 8006c12:	d100      	bne.n	8006c16 <HAL_RCC_OscConfig+0x146>
 8006c14:	e069      	b.n	8006cea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006c16:	4b7a      	ldr	r3, [pc, #488]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	220c      	movs	r2, #12
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006c20:	4b77      	ldr	r3, [pc, #476]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	220c      	movs	r2, #12
 8006c26:	4013      	ands	r3, r2
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d11c      	bne.n	8006c66 <HAL_RCC_OscConfig+0x196>
 8006c2c:	4b74      	ldr	r3, [pc, #464]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	2380      	movs	r3, #128	; 0x80
 8006c32:	025b      	lsls	r3, r3, #9
 8006c34:	4013      	ands	r3, r2
 8006c36:	d116      	bne.n	8006c66 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c38:	4b71      	ldr	r3, [pc, #452]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	4013      	ands	r3, r2
 8006c40:	d005      	beq.n	8006c4e <HAL_RCC_OscConfig+0x17e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d001      	beq.n	8006c4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e24d      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c4e:	4b6c      	ldr	r3, [pc, #432]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	22f8      	movs	r2, #248	; 0xf8
 8006c54:	4393      	bics	r3, r2
 8006c56:	0019      	movs	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	00da      	lsls	r2, r3, #3
 8006c5e:	4b68      	ldr	r3, [pc, #416]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c60:	430a      	orrs	r2, r1
 8006c62:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c64:	e041      	b.n	8006cea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d024      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c6e:	4b64      	ldr	r3, [pc, #400]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	4b63      	ldr	r3, [pc, #396]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c74:	2101      	movs	r1, #1
 8006c76:	430a      	orrs	r2, r1
 8006c78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c7a:	f7fe ffcb 	bl	8005c14 <HAL_GetTick>
 8006c7e:	0003      	movs	r3, r0
 8006c80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c84:	f7fe ffc6 	bl	8005c14 <HAL_GetTick>
 8006c88:	0002      	movs	r2, r0
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e229      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c96:	4b5a      	ldr	r3, [pc, #360]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d0f1      	beq.n	8006c84 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca0:	4b57      	ldr	r3, [pc, #348]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	22f8      	movs	r2, #248	; 0xf8
 8006ca6:	4393      	bics	r3, r2
 8006ca8:	0019      	movs	r1, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	00da      	lsls	r2, r3, #3
 8006cb0:	4b53      	ldr	r3, [pc, #332]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e018      	b.n	8006cea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cb8:	4b51      	ldr	r3, [pc, #324]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	4b50      	ldr	r3, [pc, #320]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	438a      	bics	r2, r1
 8006cc2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc4:	f7fe ffa6 	bl	8005c14 <HAL_GetTick>
 8006cc8:	0003      	movs	r3, r0
 8006cca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ccc:	e008      	b.n	8006ce0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cce:	f7fe ffa1 	bl	8005c14 <HAL_GetTick>
 8006cd2:	0002      	movs	r2, r0
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d901      	bls.n	8006ce0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e204      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ce0:	4b47      	ldr	r3, [pc, #284]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	d1f1      	bne.n	8006cce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2208      	movs	r2, #8
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	d036      	beq.n	8006d62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d019      	beq.n	8006d30 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cfc:	4b40      	ldr	r3, [pc, #256]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d00:	4b3f      	ldr	r3, [pc, #252]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006d02:	2101      	movs	r1, #1
 8006d04:	430a      	orrs	r2, r1
 8006d06:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d08:	f7fe ff84 	bl	8005c14 <HAL_GetTick>
 8006d0c:	0003      	movs	r3, r0
 8006d0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d12:	f7fe ff7f 	bl	8005c14 <HAL_GetTick>
 8006d16:	0002      	movs	r2, r0
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e1e2      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d24:	4b36      	ldr	r3, [pc, #216]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	2202      	movs	r2, #2
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	d0f1      	beq.n	8006d12 <HAL_RCC_OscConfig+0x242>
 8006d2e:	e018      	b.n	8006d62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d30:	4b33      	ldr	r3, [pc, #204]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d34:	4b32      	ldr	r3, [pc, #200]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006d36:	2101      	movs	r1, #1
 8006d38:	438a      	bics	r2, r1
 8006d3a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d3c:	f7fe ff6a 	bl	8005c14 <HAL_GetTick>
 8006d40:	0003      	movs	r3, r0
 8006d42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d46:	f7fe ff65 	bl	8005c14 <HAL_GetTick>
 8006d4a:	0002      	movs	r2, r0
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e1c8      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d58:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d1f1      	bne.n	8006d46 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2204      	movs	r2, #4
 8006d68:	4013      	ands	r3, r2
 8006d6a:	d100      	bne.n	8006d6e <HAL_RCC_OscConfig+0x29e>
 8006d6c:	e0b6      	b.n	8006edc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d6e:	231f      	movs	r3, #31
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	2200      	movs	r2, #0
 8006d74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d76:	4b22      	ldr	r3, [pc, #136]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	2380      	movs	r3, #128	; 0x80
 8006d7c:	055b      	lsls	r3, r3, #21
 8006d7e:	4013      	ands	r3, r2
 8006d80:	d111      	bne.n	8006da6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d82:	4b1f      	ldr	r3, [pc, #124]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006d84:	69da      	ldr	r2, [r3, #28]
 8006d86:	4b1e      	ldr	r3, [pc, #120]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006d88:	2180      	movs	r1, #128	; 0x80
 8006d8a:	0549      	lsls	r1, r1, #21
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	61da      	str	r2, [r3, #28]
 8006d90:	4b1b      	ldr	r3, [pc, #108]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006d92:	69da      	ldr	r2, [r3, #28]
 8006d94:	2380      	movs	r3, #128	; 0x80
 8006d96:	055b      	lsls	r3, r3, #21
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d9e:	231f      	movs	r3, #31
 8006da0:	18fb      	adds	r3, r7, r3
 8006da2:	2201      	movs	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da6:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <HAL_RCC_OscConfig+0x33c>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	2380      	movs	r3, #128	; 0x80
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	4013      	ands	r3, r2
 8006db0:	d11a      	bne.n	8006de8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006db2:	4b16      	ldr	r3, [pc, #88]	; (8006e0c <HAL_RCC_OscConfig+0x33c>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4b15      	ldr	r3, [pc, #84]	; (8006e0c <HAL_RCC_OscConfig+0x33c>)
 8006db8:	2180      	movs	r1, #128	; 0x80
 8006dba:	0049      	lsls	r1, r1, #1
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dc0:	f7fe ff28 	bl	8005c14 <HAL_GetTick>
 8006dc4:	0003      	movs	r3, r0
 8006dc6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc8:	e008      	b.n	8006ddc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dca:	f7fe ff23 	bl	8005c14 <HAL_GetTick>
 8006dce:	0002      	movs	r2, r0
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b64      	cmp	r3, #100	; 0x64
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e186      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <HAL_RCC_OscConfig+0x33c>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	2380      	movs	r3, #128	; 0x80
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	4013      	ands	r3, r2
 8006de6:	d0f0      	beq.n	8006dca <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d10f      	bne.n	8006e10 <HAL_RCC_OscConfig+0x340>
 8006df0:	4b03      	ldr	r3, [pc, #12]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006df2:	6a1a      	ldr	r2, [r3, #32]
 8006df4:	4b02      	ldr	r3, [pc, #8]	; (8006e00 <HAL_RCC_OscConfig+0x330>)
 8006df6:	2101      	movs	r1, #1
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	621a      	str	r2, [r3, #32]
 8006dfc:	e036      	b.n	8006e6c <HAL_RCC_OscConfig+0x39c>
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	40021000 	.word	0x40021000
 8006e04:	fffeffff 	.word	0xfffeffff
 8006e08:	fffbffff 	.word	0xfffbffff
 8006e0c:	40007000 	.word	0x40007000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10c      	bne.n	8006e32 <HAL_RCC_OscConfig+0x362>
 8006e18:	4bb6      	ldr	r3, [pc, #728]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e1a:	6a1a      	ldr	r2, [r3, #32]
 8006e1c:	4bb5      	ldr	r3, [pc, #724]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e1e:	2101      	movs	r1, #1
 8006e20:	438a      	bics	r2, r1
 8006e22:	621a      	str	r2, [r3, #32]
 8006e24:	4bb3      	ldr	r3, [pc, #716]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e26:	6a1a      	ldr	r2, [r3, #32]
 8006e28:	4bb2      	ldr	r3, [pc, #712]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e2a:	2104      	movs	r1, #4
 8006e2c:	438a      	bics	r2, r1
 8006e2e:	621a      	str	r2, [r3, #32]
 8006e30:	e01c      	b.n	8006e6c <HAL_RCC_OscConfig+0x39c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b05      	cmp	r3, #5
 8006e38:	d10c      	bne.n	8006e54 <HAL_RCC_OscConfig+0x384>
 8006e3a:	4bae      	ldr	r3, [pc, #696]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e3c:	6a1a      	ldr	r2, [r3, #32]
 8006e3e:	4bad      	ldr	r3, [pc, #692]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e40:	2104      	movs	r1, #4
 8006e42:	430a      	orrs	r2, r1
 8006e44:	621a      	str	r2, [r3, #32]
 8006e46:	4bab      	ldr	r3, [pc, #684]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e48:	6a1a      	ldr	r2, [r3, #32]
 8006e4a:	4baa      	ldr	r3, [pc, #680]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	621a      	str	r2, [r3, #32]
 8006e52:	e00b      	b.n	8006e6c <HAL_RCC_OscConfig+0x39c>
 8006e54:	4ba7      	ldr	r3, [pc, #668]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e56:	6a1a      	ldr	r2, [r3, #32]
 8006e58:	4ba6      	ldr	r3, [pc, #664]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	438a      	bics	r2, r1
 8006e5e:	621a      	str	r2, [r3, #32]
 8006e60:	4ba4      	ldr	r3, [pc, #656]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e62:	6a1a      	ldr	r2, [r3, #32]
 8006e64:	4ba3      	ldr	r3, [pc, #652]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e66:	2104      	movs	r1, #4
 8006e68:	438a      	bics	r2, r1
 8006e6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d014      	beq.n	8006e9e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e74:	f7fe fece 	bl	8005c14 <HAL_GetTick>
 8006e78:	0003      	movs	r3, r0
 8006e7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e7c:	e009      	b.n	8006e92 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e7e:	f7fe fec9 	bl	8005c14 <HAL_GetTick>
 8006e82:	0002      	movs	r2, r0
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	4a9b      	ldr	r2, [pc, #620]	; (80070f8 <HAL_RCC_OscConfig+0x628>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e12b      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e92:	4b98      	ldr	r3, [pc, #608]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	2202      	movs	r2, #2
 8006e98:	4013      	ands	r3, r2
 8006e9a:	d0f0      	beq.n	8006e7e <HAL_RCC_OscConfig+0x3ae>
 8006e9c:	e013      	b.n	8006ec6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e9e:	f7fe feb9 	bl	8005c14 <HAL_GetTick>
 8006ea2:	0003      	movs	r3, r0
 8006ea4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ea6:	e009      	b.n	8006ebc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ea8:	f7fe feb4 	bl	8005c14 <HAL_GetTick>
 8006eac:	0002      	movs	r2, r0
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	4a91      	ldr	r2, [pc, #580]	; (80070f8 <HAL_RCC_OscConfig+0x628>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e116      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ebc:	4b8d      	ldr	r3, [pc, #564]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	d1f0      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ec6:	231f      	movs	r3, #31
 8006ec8:	18fb      	adds	r3, r7, r3
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d105      	bne.n	8006edc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ed0:	4b88      	ldr	r3, [pc, #544]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	4b87      	ldr	r3, [pc, #540]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006ed6:	4989      	ldr	r1, [pc, #548]	; (80070fc <HAL_RCC_OscConfig+0x62c>)
 8006ed8:	400a      	ands	r2, r1
 8006eda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2210      	movs	r2, #16
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d063      	beq.n	8006fae <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d12a      	bne.n	8006f44 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006eee:	4b81      	ldr	r3, [pc, #516]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef2:	4b80      	ldr	r3, [pc, #512]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006ef4:	2104      	movs	r1, #4
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006efa:	4b7e      	ldr	r3, [pc, #504]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006efe:	4b7d      	ldr	r3, [pc, #500]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f00:	2101      	movs	r1, #1
 8006f02:	430a      	orrs	r2, r1
 8006f04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f06:	f7fe fe85 	bl	8005c14 <HAL_GetTick>
 8006f0a:	0003      	movs	r3, r0
 8006f0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006f0e:	e008      	b.n	8006f22 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006f10:	f7fe fe80 	bl	8005c14 <HAL_GetTick>
 8006f14:	0002      	movs	r2, r0
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d901      	bls.n	8006f22 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e0e3      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006f22:	4b74      	ldr	r3, [pc, #464]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f26:	2202      	movs	r2, #2
 8006f28:	4013      	ands	r3, r2
 8006f2a:	d0f1      	beq.n	8006f10 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006f2c:	4b71      	ldr	r3, [pc, #452]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	22f8      	movs	r2, #248	; 0xf8
 8006f32:	4393      	bics	r3, r2
 8006f34:	0019      	movs	r1, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	00da      	lsls	r2, r3, #3
 8006f3c:	4b6d      	ldr	r3, [pc, #436]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	635a      	str	r2, [r3, #52]	; 0x34
 8006f42:	e034      	b.n	8006fae <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	3305      	adds	r3, #5
 8006f4a:	d111      	bne.n	8006f70 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006f4c:	4b69      	ldr	r3, [pc, #420]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f50:	4b68      	ldr	r3, [pc, #416]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f52:	2104      	movs	r1, #4
 8006f54:	438a      	bics	r2, r1
 8006f56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006f58:	4b66      	ldr	r3, [pc, #408]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	22f8      	movs	r2, #248	; 0xf8
 8006f5e:	4393      	bics	r3, r2
 8006f60:	0019      	movs	r1, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	00da      	lsls	r2, r3, #3
 8006f68:	4b62      	ldr	r3, [pc, #392]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8006f6e:	e01e      	b.n	8006fae <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006f70:	4b60      	ldr	r3, [pc, #384]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f74:	4b5f      	ldr	r3, [pc, #380]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f76:	2104      	movs	r1, #4
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006f7c:	4b5d      	ldr	r3, [pc, #372]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f80:	4b5c      	ldr	r3, [pc, #368]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006f82:	2101      	movs	r1, #1
 8006f84:	438a      	bics	r2, r1
 8006f86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f88:	f7fe fe44 	bl	8005c14 <HAL_GetTick>
 8006f8c:	0003      	movs	r3, r0
 8006f8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006f90:	e008      	b.n	8006fa4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006f92:	f7fe fe3f 	bl	8005c14 <HAL_GetTick>
 8006f96:	0002      	movs	r2, r0
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e0a2      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006fa4:	4b53      	ldr	r3, [pc, #332]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa8:	2202      	movs	r2, #2
 8006faa:	4013      	ands	r3, r2
 8006fac:	d1f1      	bne.n	8006f92 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d100      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x4e8>
 8006fb6:	e097      	b.n	80070e8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fb8:	4b4e      	ldr	r3, [pc, #312]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	220c      	movs	r2, #12
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d100      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x4f6>
 8006fc4:	e06b      	b.n	800709e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d14c      	bne.n	8007068 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fce:	4b49      	ldr	r3, [pc, #292]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	4b48      	ldr	r3, [pc, #288]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006fd4:	494a      	ldr	r1, [pc, #296]	; (8007100 <HAL_RCC_OscConfig+0x630>)
 8006fd6:	400a      	ands	r2, r1
 8006fd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fda:	f7fe fe1b 	bl	8005c14 <HAL_GetTick>
 8006fde:	0003      	movs	r3, r0
 8006fe0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fe4:	f7fe fe16 	bl	8005c14 <HAL_GetTick>
 8006fe8:	0002      	movs	r2, r0
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e079      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ff6:	4b3f      	ldr	r3, [pc, #252]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	2380      	movs	r3, #128	; 0x80
 8006ffc:	049b      	lsls	r3, r3, #18
 8006ffe:	4013      	ands	r3, r2
 8007000:	d1f0      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007002:	4b3c      	ldr	r3, [pc, #240]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	220f      	movs	r2, #15
 8007008:	4393      	bics	r3, r2
 800700a:	0019      	movs	r1, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007010:	4b38      	ldr	r3, [pc, #224]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8007012:	430a      	orrs	r2, r1
 8007014:	62da      	str	r2, [r3, #44]	; 0x2c
 8007016:	4b37      	ldr	r3, [pc, #220]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	4a3a      	ldr	r2, [pc, #232]	; (8007104 <HAL_RCC_OscConfig+0x634>)
 800701c:	4013      	ands	r3, r2
 800701e:	0019      	movs	r1, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	431a      	orrs	r2, r3
 800702a:	4b32      	ldr	r3, [pc, #200]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 800702c:	430a      	orrs	r2, r1
 800702e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007030:	4b30      	ldr	r3, [pc, #192]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	4b2f      	ldr	r3, [pc, #188]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8007036:	2180      	movs	r1, #128	; 0x80
 8007038:	0449      	lsls	r1, r1, #17
 800703a:	430a      	orrs	r2, r1
 800703c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800703e:	f7fe fde9 	bl	8005c14 <HAL_GetTick>
 8007042:	0003      	movs	r3, r0
 8007044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007048:	f7fe fde4 	bl	8005c14 <HAL_GetTick>
 800704c:	0002      	movs	r2, r0
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e047      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800705a:	4b26      	ldr	r3, [pc, #152]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	2380      	movs	r3, #128	; 0x80
 8007060:	049b      	lsls	r3, r3, #18
 8007062:	4013      	ands	r3, r2
 8007064:	d0f0      	beq.n	8007048 <HAL_RCC_OscConfig+0x578>
 8007066:	e03f      	b.n	80070e8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007068:	4b22      	ldr	r3, [pc, #136]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	4b21      	ldr	r3, [pc, #132]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 800706e:	4924      	ldr	r1, [pc, #144]	; (8007100 <HAL_RCC_OscConfig+0x630>)
 8007070:	400a      	ands	r2, r1
 8007072:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007074:	f7fe fdce 	bl	8005c14 <HAL_GetTick>
 8007078:	0003      	movs	r3, r0
 800707a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800707c:	e008      	b.n	8007090 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800707e:	f7fe fdc9 	bl	8005c14 <HAL_GetTick>
 8007082:	0002      	movs	r2, r0
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d901      	bls.n	8007090 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e02c      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007090:	4b18      	ldr	r3, [pc, #96]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	2380      	movs	r3, #128	; 0x80
 8007096:	049b      	lsls	r3, r3, #18
 8007098:	4013      	ands	r3, r2
 800709a:	d1f0      	bne.n	800707e <HAL_RCC_OscConfig+0x5ae>
 800709c:	e024      	b.n	80070e8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e01f      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80070aa:	4b12      	ldr	r3, [pc, #72]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80070b0:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <HAL_RCC_OscConfig+0x624>)
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	2380      	movs	r3, #128	; 0x80
 80070ba:	025b      	lsls	r3, r3, #9
 80070bc:	401a      	ands	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d10e      	bne.n	80070e4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	220f      	movs	r2, #15
 80070ca:	401a      	ands	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d107      	bne.n	80070e4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	23f0      	movs	r3, #240	; 0xf0
 80070d8:	039b      	lsls	r3, r3, #14
 80070da:	401a      	ands	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d001      	beq.n	80070e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e000      	b.n	80070ea <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	0018      	movs	r0, r3
 80070ec:	46bd      	mov	sp, r7
 80070ee:	b008      	add	sp, #32
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	40021000 	.word	0x40021000
 80070f8:	00001388 	.word	0x00001388
 80070fc:	efffffff 	.word	0xefffffff
 8007100:	feffffff 	.word	0xfeffffff
 8007104:	ffc2ffff 	.word	0xffc2ffff

08007108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e0b3      	b.n	8007284 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800711c:	4b5b      	ldr	r3, [pc, #364]	; (800728c <HAL_RCC_ClockConfig+0x184>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2201      	movs	r2, #1
 8007122:	4013      	ands	r3, r2
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d911      	bls.n	800714e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800712a:	4b58      	ldr	r3, [pc, #352]	; (800728c <HAL_RCC_ClockConfig+0x184>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2201      	movs	r2, #1
 8007130:	4393      	bics	r3, r2
 8007132:	0019      	movs	r1, r3
 8007134:	4b55      	ldr	r3, [pc, #340]	; (800728c <HAL_RCC_ClockConfig+0x184>)
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800713c:	4b53      	ldr	r3, [pc, #332]	; (800728c <HAL_RCC_ClockConfig+0x184>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2201      	movs	r2, #1
 8007142:	4013      	ands	r3, r2
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d001      	beq.n	800714e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e09a      	b.n	8007284 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2202      	movs	r2, #2
 8007154:	4013      	ands	r3, r2
 8007156:	d015      	beq.n	8007184 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2204      	movs	r2, #4
 800715e:	4013      	ands	r3, r2
 8007160:	d006      	beq.n	8007170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007162:	4b4b      	ldr	r3, [pc, #300]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	4b4a      	ldr	r3, [pc, #296]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 8007168:	21e0      	movs	r1, #224	; 0xe0
 800716a:	00c9      	lsls	r1, r1, #3
 800716c:	430a      	orrs	r2, r1
 800716e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007170:	4b47      	ldr	r3, [pc, #284]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	22f0      	movs	r2, #240	; 0xf0
 8007176:	4393      	bics	r3, r2
 8007178:	0019      	movs	r1, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	4b44      	ldr	r3, [pc, #272]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 8007180:	430a      	orrs	r2, r1
 8007182:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2201      	movs	r2, #1
 800718a:	4013      	ands	r3, r2
 800718c:	d040      	beq.n	8007210 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d107      	bne.n	80071a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007196:	4b3e      	ldr	r3, [pc, #248]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	2380      	movs	r3, #128	; 0x80
 800719c:	029b      	lsls	r3, r3, #10
 800719e:	4013      	ands	r3, r2
 80071a0:	d114      	bne.n	80071cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e06e      	b.n	8007284 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d107      	bne.n	80071be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ae:	4b38      	ldr	r3, [pc, #224]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	2380      	movs	r3, #128	; 0x80
 80071b4:	049b      	lsls	r3, r3, #18
 80071b6:	4013      	ands	r3, r2
 80071b8:	d108      	bne.n	80071cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e062      	b.n	8007284 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071be:	4b34      	ldr	r3, [pc, #208]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2202      	movs	r2, #2
 80071c4:	4013      	ands	r3, r2
 80071c6:	d101      	bne.n	80071cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e05b      	b.n	8007284 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071cc:	4b30      	ldr	r3, [pc, #192]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2203      	movs	r2, #3
 80071d2:	4393      	bics	r3, r2
 80071d4:	0019      	movs	r1, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	4b2d      	ldr	r3, [pc, #180]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 80071dc:	430a      	orrs	r2, r1
 80071de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071e0:	f7fe fd18 	bl	8005c14 <HAL_GetTick>
 80071e4:	0003      	movs	r3, r0
 80071e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071e8:	e009      	b.n	80071fe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071ea:	f7fe fd13 	bl	8005c14 <HAL_GetTick>
 80071ee:	0002      	movs	r2, r0
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	4a27      	ldr	r2, [pc, #156]	; (8007294 <HAL_RCC_ClockConfig+0x18c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e042      	b.n	8007284 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071fe:	4b24      	ldr	r3, [pc, #144]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	220c      	movs	r2, #12
 8007204:	401a      	ands	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	429a      	cmp	r2, r3
 800720e:	d1ec      	bne.n	80071ea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007210:	4b1e      	ldr	r3, [pc, #120]	; (800728c <HAL_RCC_ClockConfig+0x184>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2201      	movs	r2, #1
 8007216:	4013      	ands	r3, r2
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d211      	bcs.n	8007242 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800721e:	4b1b      	ldr	r3, [pc, #108]	; (800728c <HAL_RCC_ClockConfig+0x184>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2201      	movs	r2, #1
 8007224:	4393      	bics	r3, r2
 8007226:	0019      	movs	r1, r3
 8007228:	4b18      	ldr	r3, [pc, #96]	; (800728c <HAL_RCC_ClockConfig+0x184>)
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007230:	4b16      	ldr	r3, [pc, #88]	; (800728c <HAL_RCC_ClockConfig+0x184>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2201      	movs	r2, #1
 8007236:	4013      	ands	r3, r2
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d001      	beq.n	8007242 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e020      	b.n	8007284 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2204      	movs	r2, #4
 8007248:	4013      	ands	r3, r2
 800724a:	d009      	beq.n	8007260 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800724c:	4b10      	ldr	r3, [pc, #64]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	4a11      	ldr	r2, [pc, #68]	; (8007298 <HAL_RCC_ClockConfig+0x190>)
 8007252:	4013      	ands	r3, r2
 8007254:	0019      	movs	r1, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 800725c:	430a      	orrs	r2, r1
 800725e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007260:	f000 f820 	bl	80072a4 <HAL_RCC_GetSysClockFreq>
 8007264:	0001      	movs	r1, r0
 8007266:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <HAL_RCC_ClockConfig+0x188>)
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	091b      	lsrs	r3, r3, #4
 800726c:	220f      	movs	r2, #15
 800726e:	4013      	ands	r3, r2
 8007270:	4a0a      	ldr	r2, [pc, #40]	; (800729c <HAL_RCC_ClockConfig+0x194>)
 8007272:	5cd3      	ldrb	r3, [r2, r3]
 8007274:	000a      	movs	r2, r1
 8007276:	40da      	lsrs	r2, r3
 8007278:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <HAL_RCC_ClockConfig+0x198>)
 800727a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800727c:	2000      	movs	r0, #0
 800727e:	f7fe fc83 	bl	8005b88 <HAL_InitTick>
  
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	0018      	movs	r0, r3
 8007286:	46bd      	mov	sp, r7
 8007288:	b004      	add	sp, #16
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40022000 	.word	0x40022000
 8007290:	40021000 	.word	0x40021000
 8007294:	00001388 	.word	0x00001388
 8007298:	fffff8ff 	.word	0xfffff8ff
 800729c:	08008fb4 	.word	0x08008fb4
 80072a0:	20000008 	.word	0x20000008

080072a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072a4:	b590      	push	{r4, r7, lr}
 80072a6:	b08f      	sub	sp, #60	; 0x3c
 80072a8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80072aa:	2314      	movs	r3, #20
 80072ac:	18fb      	adds	r3, r7, r3
 80072ae:	4a2b      	ldr	r2, [pc, #172]	; (800735c <HAL_RCC_GetSysClockFreq+0xb8>)
 80072b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80072b2:	c313      	stmia	r3!, {r0, r1, r4}
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80072b8:	1d3b      	adds	r3, r7, #4
 80072ba:	4a29      	ldr	r2, [pc, #164]	; (8007360 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80072be:	c313      	stmia	r3!, {r0, r1, r4}
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072c8:	2300      	movs	r3, #0
 80072ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80072cc:	2300      	movs	r3, #0
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
 80072d0:	2300      	movs	r3, #0
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80072d8:	4b22      	ldr	r3, [pc, #136]	; (8007364 <HAL_RCC_GetSysClockFreq+0xc0>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	220c      	movs	r2, #12
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d002      	beq.n	80072ee <HAL_RCC_GetSysClockFreq+0x4a>
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d003      	beq.n	80072f4 <HAL_RCC_GetSysClockFreq+0x50>
 80072ec:	e02d      	b.n	800734a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072ee:	4b1e      	ldr	r3, [pc, #120]	; (8007368 <HAL_RCC_GetSysClockFreq+0xc4>)
 80072f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80072f2:	e02d      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	0c9b      	lsrs	r3, r3, #18
 80072f8:	220f      	movs	r2, #15
 80072fa:	4013      	ands	r3, r2
 80072fc:	2214      	movs	r2, #20
 80072fe:	18ba      	adds	r2, r7, r2
 8007300:	5cd3      	ldrb	r3, [r2, r3]
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007304:	4b17      	ldr	r3, [pc, #92]	; (8007364 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	220f      	movs	r2, #15
 800730a:	4013      	ands	r3, r2
 800730c:	1d3a      	adds	r2, r7, #4
 800730e:	5cd3      	ldrb	r3, [r2, r3]
 8007310:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007314:	2380      	movs	r3, #128	; 0x80
 8007316:	025b      	lsls	r3, r3, #9
 8007318:	4013      	ands	r3, r2
 800731a:	d009      	beq.n	8007330 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800731c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800731e:	4812      	ldr	r0, [pc, #72]	; (8007368 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007320:	f7f8 fef2 	bl	8000108 <__udivsi3>
 8007324:	0003      	movs	r3, r0
 8007326:	001a      	movs	r2, r3
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	4353      	muls	r3, r2
 800732c:	637b      	str	r3, [r7, #52]	; 0x34
 800732e:	e009      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007332:	000a      	movs	r2, r1
 8007334:	0152      	lsls	r2, r2, #5
 8007336:	1a52      	subs	r2, r2, r1
 8007338:	0193      	lsls	r3, r2, #6
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	185b      	adds	r3, r3, r1
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8007344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007346:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007348:	e002      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800734a:	4b07      	ldr	r3, [pc, #28]	; (8007368 <HAL_RCC_GetSysClockFreq+0xc4>)
 800734c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800734e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007352:	0018      	movs	r0, r3
 8007354:	46bd      	mov	sp, r7
 8007356:	b00f      	add	sp, #60	; 0x3c
 8007358:	bd90      	pop	{r4, r7, pc}
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	08008e60 	.word	0x08008e60
 8007360:	08008e70 	.word	0x08008e70
 8007364:	40021000 	.word	0x40021000
 8007368:	007a1200 	.word	0x007a1200

0800736c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007370:	4b02      	ldr	r3, [pc, #8]	; (800737c <HAL_RCC_GetHCLKFreq+0x10>)
 8007372:	681b      	ldr	r3, [r3, #0]
}
 8007374:	0018      	movs	r0, r3
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	20000008 	.word	0x20000008

08007380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8007384:	f7ff fff2 	bl	800736c <HAL_RCC_GetHCLKFreq>
 8007388:	0001      	movs	r1, r0
 800738a:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	0a1b      	lsrs	r3, r3, #8
 8007390:	2207      	movs	r2, #7
 8007392:	4013      	ands	r3, r2
 8007394:	4a04      	ldr	r2, [pc, #16]	; (80073a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007396:	5cd3      	ldrb	r3, [r2, r3]
 8007398:	40d9      	lsrs	r1, r3
 800739a:	000b      	movs	r3, r1
}    
 800739c:	0018      	movs	r0, r3
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	46c0      	nop			; (mov r8, r8)
 80073a4:	40021000 	.word	0x40021000
 80073a8:	08008fc4 	.word	0x08008fc4

080073ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	2380      	movs	r3, #128	; 0x80
 80073c2:	025b      	lsls	r3, r3, #9
 80073c4:	4013      	ands	r3, r2
 80073c6:	d100      	bne.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80073c8:	e08f      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80073ca:	2317      	movs	r3, #23
 80073cc:	18fb      	adds	r3, r7, r3
 80073ce:	2200      	movs	r2, #0
 80073d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073d2:	4b57      	ldr	r3, [pc, #348]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80073d4:	69da      	ldr	r2, [r3, #28]
 80073d6:	2380      	movs	r3, #128	; 0x80
 80073d8:	055b      	lsls	r3, r3, #21
 80073da:	4013      	ands	r3, r2
 80073dc:	d111      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80073de:	4b54      	ldr	r3, [pc, #336]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80073e0:	69da      	ldr	r2, [r3, #28]
 80073e2:	4b53      	ldr	r3, [pc, #332]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80073e4:	2180      	movs	r1, #128	; 0x80
 80073e6:	0549      	lsls	r1, r1, #21
 80073e8:	430a      	orrs	r2, r1
 80073ea:	61da      	str	r2, [r3, #28]
 80073ec:	4b50      	ldr	r3, [pc, #320]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80073ee:	69da      	ldr	r2, [r3, #28]
 80073f0:	2380      	movs	r3, #128	; 0x80
 80073f2:	055b      	lsls	r3, r3, #21
 80073f4:	4013      	ands	r3, r2
 80073f6:	60bb      	str	r3, [r7, #8]
 80073f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073fa:	2317      	movs	r3, #23
 80073fc:	18fb      	adds	r3, r7, r3
 80073fe:	2201      	movs	r2, #1
 8007400:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007402:	4b4c      	ldr	r3, [pc, #304]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	4013      	ands	r3, r2
 800740c:	d11a      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800740e:	4b49      	ldr	r3, [pc, #292]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4b48      	ldr	r3, [pc, #288]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8007414:	2180      	movs	r1, #128	; 0x80
 8007416:	0049      	lsls	r1, r1, #1
 8007418:	430a      	orrs	r2, r1
 800741a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800741c:	f7fe fbfa 	bl	8005c14 <HAL_GetTick>
 8007420:	0003      	movs	r3, r0
 8007422:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007424:	e008      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007426:	f7fe fbf5 	bl	8005c14 <HAL_GetTick>
 800742a:	0002      	movs	r2, r0
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b64      	cmp	r3, #100	; 0x64
 8007432:	d901      	bls.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e077      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007438:	4b3e      	ldr	r3, [pc, #248]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	2380      	movs	r3, #128	; 0x80
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	4013      	ands	r3, r2
 8007442:	d0f0      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007444:	4b3a      	ldr	r3, [pc, #232]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007446:	6a1a      	ldr	r2, [r3, #32]
 8007448:	23c0      	movs	r3, #192	; 0xc0
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4013      	ands	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d034      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	23c0      	movs	r3, #192	; 0xc0
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4013      	ands	r3, r2
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	429a      	cmp	r2, r3
 8007464:	d02c      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007466:	4b32      	ldr	r3, [pc, #200]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	4a33      	ldr	r2, [pc, #204]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800746c:	4013      	ands	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007470:	4b2f      	ldr	r3, [pc, #188]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007472:	6a1a      	ldr	r2, [r3, #32]
 8007474:	4b2e      	ldr	r3, [pc, #184]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	0249      	lsls	r1, r1, #9
 800747a:	430a      	orrs	r2, r1
 800747c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800747e:	4b2c      	ldr	r3, [pc, #176]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007480:	6a1a      	ldr	r2, [r3, #32]
 8007482:	4b2b      	ldr	r3, [pc, #172]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007484:	492d      	ldr	r1, [pc, #180]	; (800753c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8007486:	400a      	ands	r2, r1
 8007488:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800748a:	4b29      	ldr	r3, [pc, #164]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	4013      	ands	r3, r2
 8007496:	d013      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007498:	f7fe fbbc 	bl	8005c14 <HAL_GetTick>
 800749c:	0003      	movs	r3, r0
 800749e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a0:	e009      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a2:	f7fe fbb7 	bl	8005c14 <HAL_GetTick>
 80074a6:	0002      	movs	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	4a24      	ldr	r2, [pc, #144]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d901      	bls.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e038      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b6:	4b1e      	ldr	r3, [pc, #120]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	2202      	movs	r2, #2
 80074bc:	4013      	ands	r3, r2
 80074be:	d0f0      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074c0:	4b1b      	ldr	r3, [pc, #108]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	4a1c      	ldr	r2, [pc, #112]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80074c6:	4013      	ands	r3, r2
 80074c8:	0019      	movs	r1, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	4b18      	ldr	r3, [pc, #96]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80074d0:	430a      	orrs	r2, r1
 80074d2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80074d4:	2317      	movs	r3, #23
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d105      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074de:	4b14      	ldr	r3, [pc, #80]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80074e0:	69da      	ldr	r2, [r3, #28]
 80074e2:	4b13      	ldr	r3, [pc, #76]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80074e4:	4917      	ldr	r1, [pc, #92]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80074e6:	400a      	ands	r2, r1
 80074e8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2201      	movs	r2, #1
 80074f0:	4013      	ands	r3, r2
 80074f2:	d009      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074f4:	4b0e      	ldr	r3, [pc, #56]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80074f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f8:	2203      	movs	r2, #3
 80074fa:	4393      	bics	r3, r2
 80074fc:	0019      	movs	r1, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007504:	430a      	orrs	r2, r1
 8007506:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2220      	movs	r2, #32
 800750e:	4013      	ands	r3, r2
 8007510:	d009      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007512:	4b07      	ldr	r3, [pc, #28]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	2210      	movs	r2, #16
 8007518:	4393      	bics	r3, r2
 800751a:	0019      	movs	r1, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	4b03      	ldr	r3, [pc, #12]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007522:	430a      	orrs	r2, r1
 8007524:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	0018      	movs	r0, r3
 800752a:	46bd      	mov	sp, r7
 800752c:	b006      	add	sp, #24
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40021000 	.word	0x40021000
 8007534:	40007000 	.word	0x40007000
 8007538:	fffffcff 	.word	0xfffffcff
 800753c:	fffeffff 	.word	0xfffeffff
 8007540:	00001388 	.word	0x00001388
 8007544:	efffffff 	.word	0xefffffff

08007548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e08a      	b.n	8007670 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	225d      	movs	r2, #93	; 0x5d
 8007564:	5c9b      	ldrb	r3, [r3, r2]
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d107      	bne.n	800757c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	225c      	movs	r2, #92	; 0x5c
 8007570:	2100      	movs	r1, #0
 8007572:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	0018      	movs	r0, r3
 8007578:	f7fd ff8a 	bl	8005490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	225d      	movs	r2, #93	; 0x5d
 8007580:	2102      	movs	r1, #2
 8007582:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2140      	movs	r1, #64	; 0x40
 8007590:	438a      	bics	r2, r1
 8007592:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	23e0      	movs	r3, #224	; 0xe0
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	429a      	cmp	r2, r3
 800759e:	d902      	bls.n	80075a6 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075a0:	2300      	movs	r3, #0
 80075a2:	60fb      	str	r3, [r7, #12]
 80075a4:	e002      	b.n	80075ac <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	015b      	lsls	r3, r3, #5
 80075aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	23f0      	movs	r3, #240	; 0xf0
 80075b2:	011b      	lsls	r3, r3, #4
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d008      	beq.n	80075ca <HAL_SPI_Init+0x82>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	23e0      	movs	r3, #224	; 0xe0
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d002      	beq.n	80075ca <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10c      	bne.n	80075ec <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	23e0      	movs	r3, #224	; 0xe0
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	429a      	cmp	r2, r3
 80075dc:	d903      	bls.n	80075e6 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2202      	movs	r2, #2
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
 80075e4:	e002      	b.n	80075ec <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	431a      	orrs	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6999      	ldr	r1, [r3, #24]
 8007606:	2380      	movs	r3, #128	; 0x80
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	400b      	ands	r3, r1
 800760c:	431a      	orrs	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	431a      	orrs	r2, r3
 800761a:	0011      	movs	r1, r2
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	0c1b      	lsrs	r3, r3, #16
 800762e:	2204      	movs	r2, #4
 8007630:	401a      	ands	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	431a      	orrs	r2, r3
 8007644:	0011      	movs	r1, r2
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	430a      	orrs	r2, r1
 800764e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	69da      	ldr	r2, [r3, #28]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4907      	ldr	r1, [pc, #28]	; (8007678 <HAL_SPI_Init+0x130>)
 800765c:	400a      	ands	r2, r1
 800765e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	225d      	movs	r2, #93	; 0x5d
 800766a:	2101      	movs	r1, #1
 800766c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	0018      	movs	r0, r3
 8007672:	46bd      	mov	sp, r7
 8007674:	b004      	add	sp, #16
 8007676:	bd80      	pop	{r7, pc}
 8007678:	fffff7ff 	.word	0xfffff7ff

0800767c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e01e      	b.n	80076cc <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	223d      	movs	r2, #61	; 0x3d
 8007692:	5c9b      	ldrb	r3, [r3, r2]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d107      	bne.n	80076aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	223c      	movs	r2, #60	; 0x3c
 800769e:	2100      	movs	r1, #0
 80076a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	0018      	movs	r0, r3
 80076a6:	f7fd ff95 	bl	80055d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	223d      	movs	r2, #61	; 0x3d
 80076ae:	2102      	movs	r1, #2
 80076b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3304      	adds	r3, #4
 80076ba:	0019      	movs	r1, r3
 80076bc:	0010      	movs	r0, r2
 80076be:	f000 f9ff 	bl	8007ac0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	223d      	movs	r2, #61	; 0x3d
 80076c6:	2101      	movs	r1, #1
 80076c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	0018      	movs	r0, r3
 80076ce:	46bd      	mov	sp, r7
 80076d0:	b002      	add	sp, #8
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e01e      	b.n	8007724 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	223d      	movs	r2, #61	; 0x3d
 80076ea:	5c9b      	ldrb	r3, [r3, r2]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d107      	bne.n	8007702 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	223c      	movs	r2, #60	; 0x3c
 80076f6:	2100      	movs	r1, #0
 80076f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0018      	movs	r0, r3
 80076fe:	f000 f815 	bl	800772c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	223d      	movs	r2, #61	; 0x3d
 8007706:	2102      	movs	r1, #2
 8007708:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3304      	adds	r3, #4
 8007712:	0019      	movs	r1, r3
 8007714:	0010      	movs	r0, r2
 8007716:	f000 f9d3 	bl	8007ac0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	223d      	movs	r2, #61	; 0x3d
 800771e:	2101      	movs	r1, #1
 8007720:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	0018      	movs	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	b002      	add	sp, #8
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007734:	46c0      	nop			; (mov r8, r8)
 8007736:	46bd      	mov	sp, r7
 8007738:	b002      	add	sp, #8
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	2201      	movs	r2, #1
 800774e:	0018      	movs	r0, r3
 8007750:	f000 fcc2 	bl	80080d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1a      	ldr	r2, [pc, #104]	; (80077c4 <HAL_TIM_PWM_Start+0x88>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00e      	beq.n	800777c <HAL_TIM_PWM_Start+0x40>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a19      	ldr	r2, [pc, #100]	; (80077c8 <HAL_TIM_PWM_Start+0x8c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d009      	beq.n	800777c <HAL_TIM_PWM_Start+0x40>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a17      	ldr	r2, [pc, #92]	; (80077cc <HAL_TIM_PWM_Start+0x90>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d004      	beq.n	800777c <HAL_TIM_PWM_Start+0x40>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a16      	ldr	r2, [pc, #88]	; (80077d0 <HAL_TIM_PWM_Start+0x94>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d101      	bne.n	8007780 <HAL_TIM_PWM_Start+0x44>
 800777c:	2301      	movs	r3, #1
 800777e:	e000      	b.n	8007782 <HAL_TIM_PWM_Start+0x46>
 8007780:	2300      	movs	r3, #0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d008      	beq.n	8007798 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2180      	movs	r1, #128	; 0x80
 8007792:	0209      	lsls	r1, r1, #8
 8007794:	430a      	orrs	r2, r1
 8007796:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2207      	movs	r2, #7
 80077a0:	4013      	ands	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b06      	cmp	r3, #6
 80077a8:	d007      	beq.n	80077ba <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2101      	movs	r1, #1
 80077b6:	430a      	orrs	r2, r1
 80077b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	0018      	movs	r0, r3
 80077be:	46bd      	mov	sp, r7
 80077c0:	b004      	add	sp, #16
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40012c00 	.word	0x40012c00
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40014400 	.word	0x40014400
 80077d0:	40014800 	.word	0x40014800

080077d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	223c      	movs	r2, #60	; 0x3c
 80077e4:	5c9b      	ldrb	r3, [r3, r2]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80077ea:	2302      	movs	r3, #2
 80077ec:	e0a4      	b.n	8007938 <HAL_TIM_PWM_ConfigChannel+0x164>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	223c      	movs	r2, #60	; 0x3c
 80077f2:	2101      	movs	r1, #1
 80077f4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	223d      	movs	r2, #61	; 0x3d
 80077fa:	2102      	movs	r1, #2
 80077fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b04      	cmp	r3, #4
 8007802:	d029      	beq.n	8007858 <HAL_TIM_PWM_ConfigChannel+0x84>
 8007804:	d802      	bhi.n	800780c <HAL_TIM_PWM_ConfigChannel+0x38>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800780a:	e08c      	b.n	8007926 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800780c:	2b08      	cmp	r3, #8
 800780e:	d046      	beq.n	800789e <HAL_TIM_PWM_ConfigChannel+0xca>
 8007810:	2b0c      	cmp	r3, #12
 8007812:	d065      	beq.n	80078e0 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8007814:	e087      	b.n	8007926 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	0011      	movs	r1, r2
 800781e:	0018      	movs	r0, r3
 8007820:	f000 f9c4 	bl	8007bac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2108      	movs	r1, #8
 8007830:	430a      	orrs	r2, r1
 8007832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2104      	movs	r1, #4
 8007840:	438a      	bics	r2, r1
 8007842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6999      	ldr	r1, [r3, #24]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	691a      	ldr	r2, [r3, #16]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	619a      	str	r2, [r3, #24]
      break;
 8007856:	e066      	b.n	8007926 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	0011      	movs	r1, r2
 8007860:	0018      	movs	r0, r3
 8007862:	f000 fa2b 	bl	8007cbc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	699a      	ldr	r2, [r3, #24]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2180      	movs	r1, #128	; 0x80
 8007872:	0109      	lsls	r1, r1, #4
 8007874:	430a      	orrs	r2, r1
 8007876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	699a      	ldr	r2, [r3, #24]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	492f      	ldr	r1, [pc, #188]	; (8007940 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007884:	400a      	ands	r2, r1
 8007886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6999      	ldr	r1, [r3, #24]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	021a      	lsls	r2, r3, #8
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	619a      	str	r2, [r3, #24]
      break;
 800789c:	e043      	b.n	8007926 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	0011      	movs	r1, r2
 80078a6:	0018      	movs	r0, r3
 80078a8:	f000 fa8c 	bl	8007dc4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	69da      	ldr	r2, [r3, #28]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2108      	movs	r1, #8
 80078b8:	430a      	orrs	r2, r1
 80078ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69da      	ldr	r2, [r3, #28]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2104      	movs	r1, #4
 80078c8:	438a      	bics	r2, r1
 80078ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	69d9      	ldr	r1, [r3, #28]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	61da      	str	r2, [r3, #28]
      break;
 80078de:	e022      	b.n	8007926 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	0011      	movs	r1, r2
 80078e8:	0018      	movs	r0, r3
 80078ea:	f000 faf1 	bl	8007ed0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69da      	ldr	r2, [r3, #28]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2180      	movs	r1, #128	; 0x80
 80078fa:	0109      	lsls	r1, r1, #4
 80078fc:	430a      	orrs	r2, r1
 80078fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	69da      	ldr	r2, [r3, #28]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	490d      	ldr	r1, [pc, #52]	; (8007940 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800790c:	400a      	ands	r2, r1
 800790e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69d9      	ldr	r1, [r3, #28]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	021a      	lsls	r2, r3, #8
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	61da      	str	r2, [r3, #28]
      break;
 8007924:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	223d      	movs	r2, #61	; 0x3d
 800792a:	2101      	movs	r1, #1
 800792c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	223c      	movs	r2, #60	; 0x3c
 8007932:	2100      	movs	r1, #0
 8007934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	0018      	movs	r0, r3
 800793a:	46bd      	mov	sp, r7
 800793c:	b004      	add	sp, #16
 800793e:	bd80      	pop	{r7, pc}
 8007940:	fffffbff 	.word	0xfffffbff

08007944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	223c      	movs	r2, #60	; 0x3c
 8007952:	5c9b      	ldrb	r3, [r3, r2]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d101      	bne.n	800795c <HAL_TIM_ConfigClockSource+0x18>
 8007958:	2302      	movs	r3, #2
 800795a:	e0ab      	b.n	8007ab4 <HAL_TIM_ConfigClockSource+0x170>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	223c      	movs	r2, #60	; 0x3c
 8007960:	2101      	movs	r1, #1
 8007962:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	223d      	movs	r2, #61	; 0x3d
 8007968:	2102      	movs	r1, #2
 800796a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2277      	movs	r2, #119	; 0x77
 8007978:	4393      	bics	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4a4f      	ldr	r2, [pc, #316]	; (8007abc <HAL_TIM_ConfigClockSource+0x178>)
 8007980:	4013      	ands	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	d100      	bne.n	8007996 <HAL_TIM_ConfigClockSource+0x52>
 8007994:	e06b      	b.n	8007a6e <HAL_TIM_ConfigClockSource+0x12a>
 8007996:	d80e      	bhi.n	80079b6 <HAL_TIM_ConfigClockSource+0x72>
 8007998:	2b10      	cmp	r3, #16
 800799a:	d100      	bne.n	800799e <HAL_TIM_ConfigClockSource+0x5a>
 800799c:	e077      	b.n	8007a8e <HAL_TIM_ConfigClockSource+0x14a>
 800799e:	d803      	bhi.n	80079a8 <HAL_TIM_ConfigClockSource+0x64>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d100      	bne.n	80079a6 <HAL_TIM_ConfigClockSource+0x62>
 80079a4:	e073      	b.n	8007a8e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80079a6:	e07c      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80079a8:	2b20      	cmp	r3, #32
 80079aa:	d100      	bne.n	80079ae <HAL_TIM_ConfigClockSource+0x6a>
 80079ac:	e06f      	b.n	8007a8e <HAL_TIM_ConfigClockSource+0x14a>
 80079ae:	2b30      	cmp	r3, #48	; 0x30
 80079b0:	d100      	bne.n	80079b4 <HAL_TIM_ConfigClockSource+0x70>
 80079b2:	e06c      	b.n	8007a8e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80079b4:	e075      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80079b6:	2b70      	cmp	r3, #112	; 0x70
 80079b8:	d00e      	beq.n	80079d8 <HAL_TIM_ConfigClockSource+0x94>
 80079ba:	d804      	bhi.n	80079c6 <HAL_TIM_ConfigClockSource+0x82>
 80079bc:	2b50      	cmp	r3, #80	; 0x50
 80079be:	d036      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0xea>
 80079c0:	2b60      	cmp	r3, #96	; 0x60
 80079c2:	d044      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80079c4:	e06d      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80079c6:	2280      	movs	r2, #128	; 0x80
 80079c8:	0152      	lsls	r2, r2, #5
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d068      	beq.n	8007aa0 <HAL_TIM_ConfigClockSource+0x15c>
 80079ce:	2280      	movs	r2, #128	; 0x80
 80079d0:	0192      	lsls	r2, r2, #6
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d017      	beq.n	8007a06 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80079d6:	e064      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	6899      	ldr	r1, [r3, #8]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f000 fb56 	bl	8008098 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2277      	movs	r2, #119	; 0x77
 80079f8:	4313      	orrs	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	609a      	str	r2, [r3, #8]
      break;
 8007a04:	e04d      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	6899      	ldr	r1, [r3, #8]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f000 fb3f 	bl	8008098 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2180      	movs	r1, #128	; 0x80
 8007a26:	01c9      	lsls	r1, r1, #7
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	609a      	str	r2, [r3, #8]
      break;
 8007a2c:	e039      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6859      	ldr	r1, [r3, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	001a      	movs	r2, r3
 8007a3c:	f000 fab2 	bl	8007fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2150      	movs	r1, #80	; 0x50
 8007a46:	0018      	movs	r0, r3
 8007a48:	f000 fb0c 	bl	8008064 <TIM_ITRx_SetConfig>
      break;
 8007a4c:	e029      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	6859      	ldr	r1, [r3, #4]
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	001a      	movs	r2, r3
 8007a5c:	f000 fad0 	bl	8008000 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2160      	movs	r1, #96	; 0x60
 8007a66:	0018      	movs	r0, r3
 8007a68:	f000 fafc 	bl	8008064 <TIM_ITRx_SetConfig>
      break;
 8007a6c:	e019      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6859      	ldr	r1, [r3, #4]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	001a      	movs	r2, r3
 8007a7c:	f000 fa92 	bl	8007fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2140      	movs	r1, #64	; 0x40
 8007a86:	0018      	movs	r0, r3
 8007a88:	f000 faec 	bl	8008064 <TIM_ITRx_SetConfig>
      break;
 8007a8c:	e009      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	0019      	movs	r1, r3
 8007a98:	0010      	movs	r0, r2
 8007a9a:	f000 fae3 	bl	8008064 <TIM_ITRx_SetConfig>
      break;
 8007a9e:	e000      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8007aa0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	223d      	movs	r2, #61	; 0x3d
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	223c      	movs	r2, #60	; 0x3c
 8007aae:	2100      	movs	r1, #0
 8007ab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b004      	add	sp, #16
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	ffff00ff 	.word	0xffff00ff

08007ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a2f      	ldr	r2, [pc, #188]	; (8007b90 <TIM_Base_SetConfig+0xd0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d003      	beq.n	8007ae0 <TIM_Base_SetConfig+0x20>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a2e      	ldr	r2, [pc, #184]	; (8007b94 <TIM_Base_SetConfig+0xd4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d108      	bne.n	8007af2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2270      	movs	r2, #112	; 0x70
 8007ae4:	4393      	bics	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a26      	ldr	r2, [pc, #152]	; (8007b90 <TIM_Base_SetConfig+0xd0>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d013      	beq.n	8007b22 <TIM_Base_SetConfig+0x62>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a25      	ldr	r2, [pc, #148]	; (8007b94 <TIM_Base_SetConfig+0xd4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00f      	beq.n	8007b22 <TIM_Base_SetConfig+0x62>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a24      	ldr	r2, [pc, #144]	; (8007b98 <TIM_Base_SetConfig+0xd8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00b      	beq.n	8007b22 <TIM_Base_SetConfig+0x62>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a23      	ldr	r2, [pc, #140]	; (8007b9c <TIM_Base_SetConfig+0xdc>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d007      	beq.n	8007b22 <TIM_Base_SetConfig+0x62>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a22      	ldr	r2, [pc, #136]	; (8007ba0 <TIM_Base_SetConfig+0xe0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d003      	beq.n	8007b22 <TIM_Base_SetConfig+0x62>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a21      	ldr	r2, [pc, #132]	; (8007ba4 <TIM_Base_SetConfig+0xe4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d108      	bne.n	8007b34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	4a20      	ldr	r2, [pc, #128]	; (8007ba8 <TIM_Base_SetConfig+0xe8>)
 8007b26:	4013      	ands	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2280      	movs	r2, #128	; 0x80
 8007b38:	4393      	bics	r3, r2
 8007b3a:	001a      	movs	r2, r3
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	689a      	ldr	r2, [r3, #8]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a0c      	ldr	r2, [pc, #48]	; (8007b90 <TIM_Base_SetConfig+0xd0>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00b      	beq.n	8007b7a <TIM_Base_SetConfig+0xba>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a0d      	ldr	r2, [pc, #52]	; (8007b9c <TIM_Base_SetConfig+0xdc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d007      	beq.n	8007b7a <TIM_Base_SetConfig+0xba>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a0c      	ldr	r2, [pc, #48]	; (8007ba0 <TIM_Base_SetConfig+0xe0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d003      	beq.n	8007b7a <TIM_Base_SetConfig+0xba>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a0b      	ldr	r2, [pc, #44]	; (8007ba4 <TIM_Base_SetConfig+0xe4>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d103      	bne.n	8007b82 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	615a      	str	r2, [r3, #20]
}
 8007b88:	46c0      	nop			; (mov r8, r8)
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	b004      	add	sp, #16
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40012c00 	.word	0x40012c00
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40002000 	.word	0x40002000
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40014400 	.word	0x40014400
 8007ba4:	40014800 	.word	0x40014800
 8007ba8:	fffffcff 	.word	0xfffffcff

08007bac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	4393      	bics	r3, r2
 8007bbe:	001a      	movs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2270      	movs	r2, #112	; 0x70
 8007bda:	4393      	bics	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2203      	movs	r2, #3
 8007be2:	4393      	bics	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	4393      	bics	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a27      	ldr	r2, [pc, #156]	; (8007ca4 <TIM_OC1_SetConfig+0xf8>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00b      	beq.n	8007c22 <TIM_OC1_SetConfig+0x76>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a26      	ldr	r2, [pc, #152]	; (8007ca8 <TIM_OC1_SetConfig+0xfc>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d007      	beq.n	8007c22 <TIM_OC1_SetConfig+0x76>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a25      	ldr	r2, [pc, #148]	; (8007cac <TIM_OC1_SetConfig+0x100>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d003      	beq.n	8007c22 <TIM_OC1_SetConfig+0x76>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a24      	ldr	r2, [pc, #144]	; (8007cb0 <TIM_OC1_SetConfig+0x104>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d10c      	bne.n	8007c3c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2208      	movs	r2, #8
 8007c26:	4393      	bics	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	2204      	movs	r2, #4
 8007c38:	4393      	bics	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a19      	ldr	r2, [pc, #100]	; (8007ca4 <TIM_OC1_SetConfig+0xf8>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00b      	beq.n	8007c5c <TIM_OC1_SetConfig+0xb0>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a18      	ldr	r2, [pc, #96]	; (8007ca8 <TIM_OC1_SetConfig+0xfc>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d007      	beq.n	8007c5c <TIM_OC1_SetConfig+0xb0>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a17      	ldr	r2, [pc, #92]	; (8007cac <TIM_OC1_SetConfig+0x100>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d003      	beq.n	8007c5c <TIM_OC1_SetConfig+0xb0>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a16      	ldr	r2, [pc, #88]	; (8007cb0 <TIM_OC1_SetConfig+0x104>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d111      	bne.n	8007c80 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	4a15      	ldr	r2, [pc, #84]	; (8007cb4 <TIM_OC1_SetConfig+0x108>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	4a14      	ldr	r2, [pc, #80]	; (8007cb8 <TIM_OC1_SetConfig+0x10c>)
 8007c68:	4013      	ands	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	621a      	str	r2, [r3, #32]
}
 8007c9a:	46c0      	nop			; (mov r8, r8)
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	b006      	add	sp, #24
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	40012c00 	.word	0x40012c00
 8007ca8:	40014000 	.word	0x40014000
 8007cac:	40014400 	.word	0x40014400
 8007cb0:	40014800 	.word	0x40014800
 8007cb4:	fffffeff 	.word	0xfffffeff
 8007cb8:	fffffdff 	.word	0xfffffdff

08007cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	2210      	movs	r2, #16
 8007ccc:	4393      	bics	r3, r2
 8007cce:	001a      	movs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	4a2e      	ldr	r2, [pc, #184]	; (8007da4 <TIM_OC2_SetConfig+0xe8>)
 8007cea:	4013      	ands	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4a2d      	ldr	r2, [pc, #180]	; (8007da8 <TIM_OC2_SetConfig+0xec>)
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2220      	movs	r2, #32
 8007d06:	4393      	bics	r3, r2
 8007d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a24      	ldr	r2, [pc, #144]	; (8007dac <TIM_OC2_SetConfig+0xf0>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d10d      	bne.n	8007d3a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2280      	movs	r2, #128	; 0x80
 8007d22:	4393      	bics	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2240      	movs	r2, #64	; 0x40
 8007d36:	4393      	bics	r3, r2
 8007d38:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a1b      	ldr	r2, [pc, #108]	; (8007dac <TIM_OC2_SetConfig+0xf0>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00b      	beq.n	8007d5a <TIM_OC2_SetConfig+0x9e>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a1a      	ldr	r2, [pc, #104]	; (8007db0 <TIM_OC2_SetConfig+0xf4>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d007      	beq.n	8007d5a <TIM_OC2_SetConfig+0x9e>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a19      	ldr	r2, [pc, #100]	; (8007db4 <TIM_OC2_SetConfig+0xf8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d003      	beq.n	8007d5a <TIM_OC2_SetConfig+0x9e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a18      	ldr	r2, [pc, #96]	; (8007db8 <TIM_OC2_SetConfig+0xfc>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d113      	bne.n	8007d82 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	4a17      	ldr	r2, [pc, #92]	; (8007dbc <TIM_OC2_SetConfig+0x100>)
 8007d5e:	4013      	ands	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <TIM_OC2_SetConfig+0x104>)
 8007d66:	4013      	ands	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	621a      	str	r2, [r3, #32]
}
 8007d9c:	46c0      	nop			; (mov r8, r8)
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	b006      	add	sp, #24
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	ffff8fff 	.word	0xffff8fff
 8007da8:	fffffcff 	.word	0xfffffcff
 8007dac:	40012c00 	.word	0x40012c00
 8007db0:	40014000 	.word	0x40014000
 8007db4:	40014400 	.word	0x40014400
 8007db8:	40014800 	.word	0x40014800
 8007dbc:	fffffbff 	.word	0xfffffbff
 8007dc0:	fffff7ff 	.word	0xfffff7ff

08007dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	4a35      	ldr	r2, [pc, #212]	; (8007ea8 <TIM_OC3_SetConfig+0xe4>)
 8007dd4:	401a      	ands	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2270      	movs	r2, #112	; 0x70
 8007df0:	4393      	bics	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2203      	movs	r2, #3
 8007df8:	4393      	bics	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	4a28      	ldr	r2, [pc, #160]	; (8007eac <TIM_OC3_SetConfig+0xe8>)
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	021b      	lsls	r3, r3, #8
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a24      	ldr	r2, [pc, #144]	; (8007eb0 <TIM_OC3_SetConfig+0xec>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d10d      	bne.n	8007e3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	4a23      	ldr	r2, [pc, #140]	; (8007eb4 <TIM_OC3_SetConfig+0xf0>)
 8007e26:	4013      	ands	r3, r2
 8007e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	4a1f      	ldr	r2, [pc, #124]	; (8007eb8 <TIM_OC3_SetConfig+0xf4>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1b      	ldr	r2, [pc, #108]	; (8007eb0 <TIM_OC3_SetConfig+0xec>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00b      	beq.n	8007e5e <TIM_OC3_SetConfig+0x9a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a1c      	ldr	r2, [pc, #112]	; (8007ebc <TIM_OC3_SetConfig+0xf8>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d007      	beq.n	8007e5e <TIM_OC3_SetConfig+0x9a>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a1b      	ldr	r2, [pc, #108]	; (8007ec0 <TIM_OC3_SetConfig+0xfc>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d003      	beq.n	8007e5e <TIM_OC3_SetConfig+0x9a>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a1a      	ldr	r2, [pc, #104]	; (8007ec4 <TIM_OC3_SetConfig+0x100>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d113      	bne.n	8007e86 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	4a19      	ldr	r2, [pc, #100]	; (8007ec8 <TIM_OC3_SetConfig+0x104>)
 8007e62:	4013      	ands	r3, r2
 8007e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	4a18      	ldr	r2, [pc, #96]	; (8007ecc <TIM_OC3_SetConfig+0x108>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	621a      	str	r2, [r3, #32]
}
 8007ea0:	46c0      	nop			; (mov r8, r8)
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	b006      	add	sp, #24
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	fffffeff 	.word	0xfffffeff
 8007eac:	fffffdff 	.word	0xfffffdff
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	fffff7ff 	.word	0xfffff7ff
 8007eb8:	fffffbff 	.word	0xfffffbff
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40014400 	.word	0x40014400
 8007ec4:	40014800 	.word	0x40014800
 8007ec8:	ffffefff 	.word	0xffffefff
 8007ecc:	ffffdfff 	.word	0xffffdfff

08007ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	4a28      	ldr	r2, [pc, #160]	; (8007f80 <TIM_OC4_SetConfig+0xb0>)
 8007ee0:	401a      	ands	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4a22      	ldr	r2, [pc, #136]	; (8007f84 <TIM_OC4_SetConfig+0xb4>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4a21      	ldr	r2, [pc, #132]	; (8007f88 <TIM_OC4_SetConfig+0xb8>)
 8007f04:	4013      	ands	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	021b      	lsls	r3, r3, #8
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	4a1d      	ldr	r2, [pc, #116]	; (8007f8c <TIM_OC4_SetConfig+0xbc>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	031b      	lsls	r3, r3, #12
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a19      	ldr	r2, [pc, #100]	; (8007f90 <TIM_OC4_SetConfig+0xc0>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00b      	beq.n	8007f48 <TIM_OC4_SetConfig+0x78>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a18      	ldr	r2, [pc, #96]	; (8007f94 <TIM_OC4_SetConfig+0xc4>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d007      	beq.n	8007f48 <TIM_OC4_SetConfig+0x78>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <TIM_OC4_SetConfig+0xc8>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_OC4_SetConfig+0x78>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a16      	ldr	r2, [pc, #88]	; (8007f9c <TIM_OC4_SetConfig+0xcc>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d109      	bne.n	8007f5c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	4a15      	ldr	r2, [pc, #84]	; (8007fa0 <TIM_OC4_SetConfig+0xd0>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	019b      	lsls	r3, r3, #6
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	621a      	str	r2, [r3, #32]
}
 8007f76:	46c0      	nop			; (mov r8, r8)
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	b006      	add	sp, #24
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	ffffefff 	.word	0xffffefff
 8007f84:	ffff8fff 	.word	0xffff8fff
 8007f88:	fffffcff 	.word	0xfffffcff
 8007f8c:	ffffdfff 	.word	0xffffdfff
 8007f90:	40012c00 	.word	0x40012c00
 8007f94:	40014000 	.word	0x40014000
 8007f98:	40014400 	.word	0x40014400
 8007f9c:	40014800 	.word	0x40014800
 8007fa0:	ffffbfff 	.word	0xffffbfff

08007fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	4393      	bics	r3, r2
 8007fbe:	001a      	movs	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	22f0      	movs	r2, #240	; 0xf0
 8007fce:	4393      	bics	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	011b      	lsls	r3, r3, #4
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	220a      	movs	r2, #10
 8007fe0:	4393      	bics	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	621a      	str	r2, [r3, #32]
}
 8007ff8:	46c0      	nop			; (mov r8, r8)
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b006      	add	sp, #24
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	2210      	movs	r2, #16
 8008012:	4393      	bics	r3, r2
 8008014:	001a      	movs	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	4a0d      	ldr	r2, [pc, #52]	; (8008060 <TIM_TI2_ConfigInputStage+0x60>)
 800802a:	4013      	ands	r3, r2
 800802c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	031b      	lsls	r3, r3, #12
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	22a0      	movs	r2, #160	; 0xa0
 800803c:	4393      	bics	r3, r2
 800803e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	4313      	orrs	r3, r2
 8008048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	46c0      	nop			; (mov r8, r8)
 8008058:	46bd      	mov	sp, r7
 800805a:	b006      	add	sp, #24
 800805c:	bd80      	pop	{r7, pc}
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	ffff0fff 	.word	0xffff0fff

08008064 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2270      	movs	r2, #112	; 0x70
 8008078:	4393      	bics	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4313      	orrs	r3, r2
 8008082:	2207      	movs	r2, #7
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	609a      	str	r2, [r3, #8]
}
 800808e:	46c0      	nop			; (mov r8, r8)
 8008090:	46bd      	mov	sp, r7
 8008092:	b004      	add	sp, #16
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	4a09      	ldr	r2, [pc, #36]	; (80080d4 <TIM_ETR_SetConfig+0x3c>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	021a      	lsls	r2, r3, #8
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4313      	orrs	r3, r2
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	609a      	str	r2, [r3, #8]
}
 80080cc:	46c0      	nop			; (mov r8, r8)
 80080ce:	46bd      	mov	sp, r7
 80080d0:	b006      	add	sp, #24
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	ffff00ff 	.word	0xffff00ff

080080d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	221f      	movs	r2, #31
 80080e8:	4013      	ands	r3, r2
 80080ea:	2201      	movs	r2, #1
 80080ec:	409a      	lsls	r2, r3
 80080ee:	0013      	movs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	43d2      	mvns	r2, r2
 80080fa:	401a      	ands	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1a      	ldr	r2, [r3, #32]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	211f      	movs	r1, #31
 8008108:	400b      	ands	r3, r1
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	4099      	lsls	r1, r3
 800810e:	000b      	movs	r3, r1
 8008110:	431a      	orrs	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	621a      	str	r2, [r3, #32]
}
 8008116:	46c0      	nop			; (mov r8, r8)
 8008118:	46bd      	mov	sp, r7
 800811a:	b006      	add	sp, #24
 800811c:	bd80      	pop	{r7, pc}
	...

08008120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	223c      	movs	r2, #60	; 0x3c
 800812e:	5c9b      	ldrb	r3, [r3, r2]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008134:	2302      	movs	r3, #2
 8008136:	e041      	b.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	223c      	movs	r2, #60	; 0x3c
 800813c:	2101      	movs	r1, #1
 800813e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	223d      	movs	r2, #61	; 0x3d
 8008144:	2102      	movs	r1, #2
 8008146:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2270      	movs	r2, #112	; 0x70
 800815c:	4393      	bics	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a13      	ldr	r2, [pc, #76]	; (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d009      	beq.n	8008190 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a11      	ldr	r2, [pc, #68]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d004      	beq.n	8008190 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a10      	ldr	r2, [pc, #64]	; (80081cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d10c      	bne.n	80081aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	2280      	movs	r2, #128	; 0x80
 8008194:	4393      	bics	r3, r2
 8008196:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	223d      	movs	r2, #61	; 0x3d
 80081ae:	2101      	movs	r1, #1
 80081b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	223c      	movs	r2, #60	; 0x3c
 80081b6:	2100      	movs	r1, #0
 80081b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	0018      	movs	r0, r3
 80081be:	46bd      	mov	sp, r7
 80081c0:	b004      	add	sp, #16
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	40012c00 	.word	0x40012c00
 80081c8:	40000400 	.word	0x40000400
 80081cc:	40014000 	.word	0x40014000

080081d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	223c      	movs	r2, #60	; 0x3c
 80081e2:	5c9b      	ldrb	r3, [r3, r2]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d101      	bne.n	80081ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081e8:	2302      	movs	r3, #2
 80081ea:	e03e      	b.n	800826a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	223c      	movs	r2, #60	; 0x3c
 80081f0:	2101      	movs	r1, #1
 80081f2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	22ff      	movs	r2, #255	; 0xff
 80081f8:	4393      	bics	r3, r2
 80081fa:	001a      	movs	r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4a1b      	ldr	r2, [pc, #108]	; (8008274 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8008208:	401a      	ands	r2, r3
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4a18      	ldr	r2, [pc, #96]	; (8008278 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8008216:	401a      	ands	r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4a16      	ldr	r2, [pc, #88]	; (800827c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8008224:	401a      	ands	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4a13      	ldr	r2, [pc, #76]	; (8008280 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8008232:	401a      	ands	r2, r3
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	4313      	orrs	r3, r2
 800823a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4a11      	ldr	r2, [pc, #68]	; (8008284 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8008240:	401a      	ands	r2, r3
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4a0e      	ldr	r2, [pc, #56]	; (8008288 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800824e:	401a      	ands	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	4313      	orrs	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	223c      	movs	r2, #60	; 0x3c
 8008264:	2100      	movs	r1, #0
 8008266:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	0018      	movs	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	b004      	add	sp, #16
 8008270:	bd80      	pop	{r7, pc}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	fffffcff 	.word	0xfffffcff
 8008278:	fffffbff 	.word	0xfffffbff
 800827c:	fffff7ff 	.word	0xfffff7ff
 8008280:	ffffefff 	.word	0xffffefff
 8008284:	ffffdfff 	.word	0xffffdfff
 8008288:	ffffbfff 	.word	0xffffbfff

0800828c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e044      	b.n	8008328 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d107      	bne.n	80082b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2270      	movs	r2, #112	; 0x70
 80082aa:	2100      	movs	r1, #0
 80082ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	0018      	movs	r0, r3
 80082b2:	f7fd fa73 	bl	800579c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2224      	movs	r2, #36	; 0x24
 80082ba:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2101      	movs	r1, #1
 80082c8:	438a      	bics	r2, r1
 80082ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	0018      	movs	r0, r3
 80082d0:	f000 f8e0 	bl	8008494 <UART_SetConfig>
 80082d4:	0003      	movs	r3, r0
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e024      	b.n	8008328 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	0018      	movs	r0, r3
 80082ea:	f000 fa59 	bl	80087a0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	490d      	ldr	r1, [pc, #52]	; (8008330 <HAL_UART_Init+0xa4>)
 80082fa:	400a      	ands	r2, r1
 80082fc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2108      	movs	r1, #8
 800830a:	438a      	bics	r2, r1
 800830c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2101      	movs	r1, #1
 800831a:	430a      	orrs	r2, r1
 800831c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	0018      	movs	r0, r3
 8008322:	f000 faf1 	bl	8008908 <UART_CheckIdleState>
 8008326:	0003      	movs	r3, r0
}
 8008328:	0018      	movs	r0, r3
 800832a:	46bd      	mov	sp, r7
 800832c:	b002      	add	sp, #8
 800832e:	bd80      	pop	{r7, pc}
 8008330:	fffff7ff 	.word	0xfffff7ff

08008334 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	1dbb      	adds	r3, r7, #6
 8008340:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008346:	2b20      	cmp	r3, #32
 8008348:	d000      	beq.n	800834c <HAL_UART_Receive_DMA+0x18>
 800834a:	e07f      	b.n	800844c <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_UART_Receive_DMA+0x26>
 8008352:	1dbb      	adds	r3, r7, #6
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e077      	b.n	800844e <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689a      	ldr	r2, [r3, #8]
 8008362:	2380      	movs	r3, #128	; 0x80
 8008364:	015b      	lsls	r3, r3, #5
 8008366:	429a      	cmp	r2, r3
 8008368:	d109      	bne.n	800837e <HAL_UART_Receive_DMA+0x4a>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d105      	bne.n	800837e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2201      	movs	r2, #1
 8008376:	4013      	ands	r3, r2
 8008378:	d001      	beq.n	800837e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e067      	b.n	800844e <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2270      	movs	r2, #112	; 0x70
 8008382:	5c9b      	ldrb	r3, [r3, r2]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_UART_Receive_DMA+0x58>
 8008388:	2302      	movs	r3, #2
 800838a:	e060      	b.n	800844e <HAL_UART_Receive_DMA+0x11a>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2270      	movs	r2, #112	; 0x70
 8008390:	2101      	movs	r1, #1
 8008392:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	1dba      	adds	r2, r7, #6
 800839e:	2158      	movs	r1, #88	; 0x58
 80083a0:	8812      	ldrh	r2, [r2, #0]
 80083a2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2222      	movs	r2, #34	; 0x22
 80083ae:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d02a      	beq.n	800840e <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083bc:	4a26      	ldr	r2, [pc, #152]	; (8008458 <HAL_UART_Receive_DMA+0x124>)
 80083be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c4:	4a25      	ldr	r2, [pc, #148]	; (800845c <HAL_UART_Receive_DMA+0x128>)
 80083c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083cc:	4a24      	ldr	r2, [pc, #144]	; (8008460 <HAL_UART_Receive_DMA+0x12c>)
 80083ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d4:	2200      	movs	r2, #0
 80083d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3324      	adds	r3, #36	; 0x24
 80083e2:	0019      	movs	r1, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e8:	001a      	movs	r2, r3
 80083ea:	1dbb      	adds	r3, r7, #6
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	f7fe f875 	bl	80064dc <HAL_DMA_Start_IT>
 80083f2:	1e03      	subs	r3, r0, #0
 80083f4:	d00b      	beq.n	800840e <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2210      	movs	r2, #16
 80083fa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2270      	movs	r2, #112	; 0x70
 8008400:	2100      	movs	r1, #0
 8008402:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2220      	movs	r2, #32
 8008408:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e01f      	b.n	800844e <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2270      	movs	r2, #112	; 0x70
 8008412:	2100      	movs	r1, #0
 8008414:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2180      	movs	r1, #128	; 0x80
 8008422:	0049      	lsls	r1, r1, #1
 8008424:	430a      	orrs	r2, r1
 8008426:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2101      	movs	r1, #1
 8008434:	430a      	orrs	r2, r1
 8008436:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2140      	movs	r1, #64	; 0x40
 8008444:	430a      	orrs	r2, r1
 8008446:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	e000      	b.n	800844e <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800844c:	2302      	movs	r3, #2
  }
}
 800844e:	0018      	movs	r0, r3
 8008450:	46bd      	mov	sp, r7
 8008452:	b004      	add	sp, #16
 8008454:	bd80      	pop	{r7, pc}
 8008456:	46c0      	nop			; (mov r8, r8)
 8008458:	08008af9 	.word	0x08008af9
 800845c:	08008b61 	.word	0x08008b61
 8008460:	08008b7f 	.word	0x08008b7f

08008464 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800846c:	46c0      	nop			; (mov r8, r8)
 800846e:	46bd      	mov	sp, r7
 8008470:	b002      	add	sp, #8
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800847c:	46c0      	nop			; (mov r8, r8)
 800847e:	46bd      	mov	sp, r7
 8008480:	b002      	add	sp, #8
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800848c:	46c0      	nop			; (mov r8, r8)
 800848e:	46bd      	mov	sp, r7
 8008490:	b002      	add	sp, #8
 8008492:	bd80      	pop	{r7, pc}

08008494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800849c:	2300      	movs	r3, #0
 800849e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80084a0:	2317      	movs	r3, #23
 80084a2:	18fb      	adds	r3, r7, r3
 80084a4:	2200      	movs	r2, #0
 80084a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	431a      	orrs	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	4313      	orrs	r3, r2
 80084be:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4aad      	ldr	r2, [pc, #692]	; (800877c <UART_SetConfig+0x2e8>)
 80084c8:	4013      	ands	r3, r2
 80084ca:	0019      	movs	r1, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	4aa8      	ldr	r2, [pc, #672]	; (8008780 <UART_SetConfig+0x2ec>)
 80084de:	4013      	ands	r3, r2
 80084e0:	0019      	movs	r1, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	4a9f      	ldr	r2, [pc, #636]	; (8008784 <UART_SetConfig+0x2f0>)
 8008506:	4013      	ands	r3, r2
 8008508:	0019      	movs	r1, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	430a      	orrs	r2, r1
 8008512:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a9b      	ldr	r2, [pc, #620]	; (8008788 <UART_SetConfig+0x2f4>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d125      	bne.n	800856a <UART_SetConfig+0xd6>
 800851e:	4b9b      	ldr	r3, [pc, #620]	; (800878c <UART_SetConfig+0x2f8>)
 8008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008522:	2203      	movs	r2, #3
 8008524:	4013      	ands	r3, r2
 8008526:	2b01      	cmp	r3, #1
 8008528:	d00f      	beq.n	800854a <UART_SetConfig+0xb6>
 800852a:	d304      	bcc.n	8008536 <UART_SetConfig+0xa2>
 800852c:	2b02      	cmp	r3, #2
 800852e:	d011      	beq.n	8008554 <UART_SetConfig+0xc0>
 8008530:	2b03      	cmp	r3, #3
 8008532:	d005      	beq.n	8008540 <UART_SetConfig+0xac>
 8008534:	e013      	b.n	800855e <UART_SetConfig+0xca>
 8008536:	231f      	movs	r3, #31
 8008538:	18fb      	adds	r3, r7, r3
 800853a:	2200      	movs	r2, #0
 800853c:	701a      	strb	r2, [r3, #0]
 800853e:	e022      	b.n	8008586 <UART_SetConfig+0xf2>
 8008540:	231f      	movs	r3, #31
 8008542:	18fb      	adds	r3, r7, r3
 8008544:	2202      	movs	r2, #2
 8008546:	701a      	strb	r2, [r3, #0]
 8008548:	e01d      	b.n	8008586 <UART_SetConfig+0xf2>
 800854a:	231f      	movs	r3, #31
 800854c:	18fb      	adds	r3, r7, r3
 800854e:	2204      	movs	r2, #4
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	e018      	b.n	8008586 <UART_SetConfig+0xf2>
 8008554:	231f      	movs	r3, #31
 8008556:	18fb      	adds	r3, r7, r3
 8008558:	2208      	movs	r2, #8
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	e013      	b.n	8008586 <UART_SetConfig+0xf2>
 800855e:	231f      	movs	r3, #31
 8008560:	18fb      	adds	r3, r7, r3
 8008562:	2210      	movs	r2, #16
 8008564:	701a      	strb	r2, [r3, #0]
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	e00d      	b.n	8008586 <UART_SetConfig+0xf2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a88      	ldr	r2, [pc, #544]	; (8008790 <UART_SetConfig+0x2fc>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d104      	bne.n	800857e <UART_SetConfig+0xea>
 8008574:	231f      	movs	r3, #31
 8008576:	18fb      	adds	r3, r7, r3
 8008578:	2200      	movs	r2, #0
 800857a:	701a      	strb	r2, [r3, #0]
 800857c:	e003      	b.n	8008586 <UART_SetConfig+0xf2>
 800857e:	231f      	movs	r3, #31
 8008580:	18fb      	adds	r3, r7, r3
 8008582:	2210      	movs	r2, #16
 8008584:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	69da      	ldr	r2, [r3, #28]
 800858a:	2380      	movs	r3, #128	; 0x80
 800858c:	021b      	lsls	r3, r3, #8
 800858e:	429a      	cmp	r2, r3
 8008590:	d000      	beq.n	8008594 <UART_SetConfig+0x100>
 8008592:	e07d      	b.n	8008690 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8008594:	231f      	movs	r3, #31
 8008596:	18fb      	adds	r3, r7, r3
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d01c      	beq.n	80085d8 <UART_SetConfig+0x144>
 800859e:	dc02      	bgt.n	80085a6 <UART_SetConfig+0x112>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <UART_SetConfig+0x11c>
 80085a4:	e04b      	b.n	800863e <UART_SetConfig+0x1aa>
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d025      	beq.n	80085f6 <UART_SetConfig+0x162>
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	d037      	beq.n	800861e <UART_SetConfig+0x18a>
 80085ae:	e046      	b.n	800863e <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085b0:	f7fe fee6 	bl	8007380 <HAL_RCC_GetPCLK1Freq>
 80085b4:	0003      	movs	r3, r0
 80085b6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	005a      	lsls	r2, r3, #1
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	085b      	lsrs	r3, r3, #1
 80085c2:	18d2      	adds	r2, r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	0019      	movs	r1, r3
 80085ca:	0010      	movs	r0, r2
 80085cc:	f7f7 fd9c 	bl	8000108 <__udivsi3>
 80085d0:	0003      	movs	r3, r0
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	61bb      	str	r3, [r7, #24]
        break;
 80085d6:	e037      	b.n	8008648 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	085b      	lsrs	r3, r3, #1
 80085de:	4a6d      	ldr	r2, [pc, #436]	; (8008794 <UART_SetConfig+0x300>)
 80085e0:	189a      	adds	r2, r3, r2
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	0019      	movs	r1, r3
 80085e8:	0010      	movs	r0, r2
 80085ea:	f7f7 fd8d 	bl	8000108 <__udivsi3>
 80085ee:	0003      	movs	r3, r0
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	61bb      	str	r3, [r7, #24]
        break;
 80085f4:	e028      	b.n	8008648 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085f6:	f7fe fe55 	bl	80072a4 <HAL_RCC_GetSysClockFreq>
 80085fa:	0003      	movs	r3, r0
 80085fc:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	005a      	lsls	r2, r3, #1
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	085b      	lsrs	r3, r3, #1
 8008608:	18d2      	adds	r2, r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	0019      	movs	r1, r3
 8008610:	0010      	movs	r0, r2
 8008612:	f7f7 fd79 	bl	8000108 <__udivsi3>
 8008616:	0003      	movs	r3, r0
 8008618:	b29b      	uxth	r3, r3
 800861a:	61bb      	str	r3, [r7, #24]
        break;
 800861c:	e014      	b.n	8008648 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	085b      	lsrs	r3, r3, #1
 8008624:	2280      	movs	r2, #128	; 0x80
 8008626:	0252      	lsls	r2, r2, #9
 8008628:	189a      	adds	r2, r3, r2
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	0019      	movs	r1, r3
 8008630:	0010      	movs	r0, r2
 8008632:	f7f7 fd69 	bl	8000108 <__udivsi3>
 8008636:	0003      	movs	r3, r0
 8008638:	b29b      	uxth	r3, r3
 800863a:	61bb      	str	r3, [r7, #24]
        break;
 800863c:	e004      	b.n	8008648 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 800863e:	2317      	movs	r3, #23
 8008640:	18fb      	adds	r3, r7, r3
 8008642:	2201      	movs	r2, #1
 8008644:	701a      	strb	r2, [r3, #0]
        break;
 8008646:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	2b0f      	cmp	r3, #15
 800864c:	d91b      	bls.n	8008686 <UART_SetConfig+0x1f2>
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	4a51      	ldr	r2, [pc, #324]	; (8008798 <UART_SetConfig+0x304>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d817      	bhi.n	8008686 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	b29a      	uxth	r2, r3
 800865a:	200a      	movs	r0, #10
 800865c:	183b      	adds	r3, r7, r0
 800865e:	210f      	movs	r1, #15
 8008660:	438a      	bics	r2, r1
 8008662:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	b29b      	uxth	r3, r3
 800866a:	2207      	movs	r2, #7
 800866c:	4013      	ands	r3, r2
 800866e:	b299      	uxth	r1, r3
 8008670:	183b      	adds	r3, r7, r0
 8008672:	183a      	adds	r2, r7, r0
 8008674:	8812      	ldrh	r2, [r2, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	183a      	adds	r2, r7, r0
 8008680:	8812      	ldrh	r2, [r2, #0]
 8008682:	60da      	str	r2, [r3, #12]
 8008684:	e06c      	b.n	8008760 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8008686:	2317      	movs	r3, #23
 8008688:	18fb      	adds	r3, r7, r3
 800868a:	2201      	movs	r2, #1
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	e067      	b.n	8008760 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8008690:	231f      	movs	r3, #31
 8008692:	18fb      	adds	r3, r7, r3
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	2b02      	cmp	r3, #2
 8008698:	d01b      	beq.n	80086d2 <UART_SetConfig+0x23e>
 800869a:	dc02      	bgt.n	80086a2 <UART_SetConfig+0x20e>
 800869c:	2b00      	cmp	r3, #0
 800869e:	d005      	beq.n	80086ac <UART_SetConfig+0x218>
 80086a0:	e049      	b.n	8008736 <UART_SetConfig+0x2a2>
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d024      	beq.n	80086f0 <UART_SetConfig+0x25c>
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d035      	beq.n	8008716 <UART_SetConfig+0x282>
 80086aa:	e044      	b.n	8008736 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086ac:	f7fe fe68 	bl	8007380 <HAL_RCC_GetPCLK1Freq>
 80086b0:	0003      	movs	r3, r0
 80086b2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	085a      	lsrs	r2, r3, #1
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	18d2      	adds	r2, r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	0019      	movs	r1, r3
 80086c4:	0010      	movs	r0, r2
 80086c6:	f7f7 fd1f 	bl	8000108 <__udivsi3>
 80086ca:	0003      	movs	r3, r0
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	61bb      	str	r3, [r7, #24]
        break;
 80086d0:	e036      	b.n	8008740 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	085b      	lsrs	r3, r3, #1
 80086d8:	4a30      	ldr	r2, [pc, #192]	; (800879c <UART_SetConfig+0x308>)
 80086da:	189a      	adds	r2, r3, r2
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	0019      	movs	r1, r3
 80086e2:	0010      	movs	r0, r2
 80086e4:	f7f7 fd10 	bl	8000108 <__udivsi3>
 80086e8:	0003      	movs	r3, r0
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	61bb      	str	r3, [r7, #24]
        break;
 80086ee:	e027      	b.n	8008740 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086f0:	f7fe fdd8 	bl	80072a4 <HAL_RCC_GetSysClockFreq>
 80086f4:	0003      	movs	r3, r0
 80086f6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	085a      	lsrs	r2, r3, #1
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	18d2      	adds	r2, r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	0019      	movs	r1, r3
 8008708:	0010      	movs	r0, r2
 800870a:	f7f7 fcfd 	bl	8000108 <__udivsi3>
 800870e:	0003      	movs	r3, r0
 8008710:	b29b      	uxth	r3, r3
 8008712:	61bb      	str	r3, [r7, #24]
        break;
 8008714:	e014      	b.n	8008740 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	085b      	lsrs	r3, r3, #1
 800871c:	2280      	movs	r2, #128	; 0x80
 800871e:	0212      	lsls	r2, r2, #8
 8008720:	189a      	adds	r2, r3, r2
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	0019      	movs	r1, r3
 8008728:	0010      	movs	r0, r2
 800872a:	f7f7 fced 	bl	8000108 <__udivsi3>
 800872e:	0003      	movs	r3, r0
 8008730:	b29b      	uxth	r3, r3
 8008732:	61bb      	str	r3, [r7, #24]
        break;
 8008734:	e004      	b.n	8008740 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8008736:	2317      	movs	r3, #23
 8008738:	18fb      	adds	r3, r7, r3
 800873a:	2201      	movs	r2, #1
 800873c:	701a      	strb	r2, [r3, #0]
        break;
 800873e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	2b0f      	cmp	r3, #15
 8008744:	d908      	bls.n	8008758 <UART_SetConfig+0x2c4>
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	4a13      	ldr	r2, [pc, #76]	; (8008798 <UART_SetConfig+0x304>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d804      	bhi.n	8008758 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	60da      	str	r2, [r3, #12]
 8008756:	e003      	b.n	8008760 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8008758:	2317      	movs	r3, #23
 800875a:	18fb      	adds	r3, r7, r3
 800875c:	2201      	movs	r2, #1
 800875e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800876c:	2317      	movs	r3, #23
 800876e:	18fb      	adds	r3, r7, r3
 8008770:	781b      	ldrb	r3, [r3, #0]
}
 8008772:	0018      	movs	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	b008      	add	sp, #32
 8008778:	bd80      	pop	{r7, pc}
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	ffff69f3 	.word	0xffff69f3
 8008780:	ffffcfff 	.word	0xffffcfff
 8008784:	fffff4ff 	.word	0xfffff4ff
 8008788:	40013800 	.word	0x40013800
 800878c:	40021000 	.word	0x40021000
 8008790:	40004400 	.word	0x40004400
 8008794:	00f42400 	.word	0x00f42400
 8008798:	0000ffff 	.word	0x0000ffff
 800879c:	007a1200 	.word	0x007a1200

080087a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	2201      	movs	r2, #1
 80087ae:	4013      	ands	r3, r2
 80087b0:	d00b      	beq.n	80087ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	4a4a      	ldr	r2, [pc, #296]	; (80088e4 <UART_AdvFeatureConfig+0x144>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	0019      	movs	r1, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	2202      	movs	r2, #2
 80087d0:	4013      	ands	r3, r2
 80087d2:	d00b      	beq.n	80087ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	4a43      	ldr	r2, [pc, #268]	; (80088e8 <UART_AdvFeatureConfig+0x148>)
 80087dc:	4013      	ands	r3, r2
 80087de:	0019      	movs	r1, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	2204      	movs	r2, #4
 80087f2:	4013      	ands	r3, r2
 80087f4:	d00b      	beq.n	800880e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	4a3b      	ldr	r2, [pc, #236]	; (80088ec <UART_AdvFeatureConfig+0x14c>)
 80087fe:	4013      	ands	r3, r2
 8008800:	0019      	movs	r1, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	2208      	movs	r2, #8
 8008814:	4013      	ands	r3, r2
 8008816:	d00b      	beq.n	8008830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	4a34      	ldr	r2, [pc, #208]	; (80088f0 <UART_AdvFeatureConfig+0x150>)
 8008820:	4013      	ands	r3, r2
 8008822:	0019      	movs	r1, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	2210      	movs	r2, #16
 8008836:	4013      	ands	r3, r2
 8008838:	d00b      	beq.n	8008852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	4a2c      	ldr	r2, [pc, #176]	; (80088f4 <UART_AdvFeatureConfig+0x154>)
 8008842:	4013      	ands	r3, r2
 8008844:	0019      	movs	r1, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	2220      	movs	r2, #32
 8008858:	4013      	ands	r3, r2
 800885a:	d00b      	beq.n	8008874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	4a25      	ldr	r2, [pc, #148]	; (80088f8 <UART_AdvFeatureConfig+0x158>)
 8008864:	4013      	ands	r3, r2
 8008866:	0019      	movs	r1, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2240      	movs	r2, #64	; 0x40
 800887a:	4013      	ands	r3, r2
 800887c:	d01d      	beq.n	80088ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4a1d      	ldr	r2, [pc, #116]	; (80088fc <UART_AdvFeatureConfig+0x15c>)
 8008886:	4013      	ands	r3, r2
 8008888:	0019      	movs	r1, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800889a:	2380      	movs	r3, #128	; 0x80
 800889c:	035b      	lsls	r3, r3, #13
 800889e:	429a      	cmp	r2, r3
 80088a0:	d10b      	bne.n	80088ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	4a15      	ldr	r2, [pc, #84]	; (8008900 <UART_AdvFeatureConfig+0x160>)
 80088aa:	4013      	ands	r3, r2
 80088ac:	0019      	movs	r1, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	2280      	movs	r2, #128	; 0x80
 80088c0:	4013      	ands	r3, r2
 80088c2:	d00b      	beq.n	80088dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	4a0e      	ldr	r2, [pc, #56]	; (8008904 <UART_AdvFeatureConfig+0x164>)
 80088cc:	4013      	ands	r3, r2
 80088ce:	0019      	movs	r1, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	430a      	orrs	r2, r1
 80088da:	605a      	str	r2, [r3, #4]
  }
}
 80088dc:	46c0      	nop			; (mov r8, r8)
 80088de:	46bd      	mov	sp, r7
 80088e0:	b002      	add	sp, #8
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	fffdffff 	.word	0xfffdffff
 80088e8:	fffeffff 	.word	0xfffeffff
 80088ec:	fffbffff 	.word	0xfffbffff
 80088f0:	ffff7fff 	.word	0xffff7fff
 80088f4:	ffffefff 	.word	0xffffefff
 80088f8:	ffffdfff 	.word	0xffffdfff
 80088fc:	ffefffff 	.word	0xffefffff
 8008900:	ff9fffff 	.word	0xff9fffff
 8008904:	fff7ffff 	.word	0xfff7ffff

08008908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af02      	add	r7, sp, #8
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008916:	f7fd f97d 	bl	8005c14 <HAL_GetTick>
 800891a:	0003      	movs	r3, r0
 800891c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2208      	movs	r2, #8
 8008926:	4013      	ands	r3, r2
 8008928:	2b08      	cmp	r3, #8
 800892a:	d10d      	bne.n	8008948 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	2380      	movs	r3, #128	; 0x80
 8008930:	0399      	lsls	r1, r3, #14
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4b16      	ldr	r3, [pc, #88]	; (8008990 <UART_CheckIdleState+0x88>)
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	0013      	movs	r3, r2
 800893a:	2200      	movs	r2, #0
 800893c:	f000 f82a 	bl	8008994 <UART_WaitOnFlagUntilTimeout>
 8008940:	1e03      	subs	r3, r0, #0
 8008942:	d001      	beq.n	8008948 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e01f      	b.n	8008988 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2204      	movs	r2, #4
 8008950:	4013      	ands	r3, r2
 8008952:	2b04      	cmp	r3, #4
 8008954:	d10d      	bne.n	8008972 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	2380      	movs	r3, #128	; 0x80
 800895a:	03d9      	lsls	r1, r3, #15
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	4b0c      	ldr	r3, [pc, #48]	; (8008990 <UART_CheckIdleState+0x88>)
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	0013      	movs	r3, r2
 8008964:	2200      	movs	r2, #0
 8008966:	f000 f815 	bl	8008994 <UART_WaitOnFlagUntilTimeout>
 800896a:	1e03      	subs	r3, r0, #0
 800896c:	d001      	beq.n	8008972 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e00a      	b.n	8008988 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2220      	movs	r2, #32
 800897c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2270      	movs	r2, #112	; 0x70
 8008982:	2100      	movs	r1, #0
 8008984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	0018      	movs	r0, r3
 800898a:	46bd      	mov	sp, r7
 800898c:	b004      	add	sp, #16
 800898e:	bd80      	pop	{r7, pc}
 8008990:	01ffffff 	.word	0x01ffffff

08008994 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	1dfb      	adds	r3, r7, #7
 80089a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089a4:	e05d      	b.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	3301      	adds	r3, #1
 80089aa:	d05a      	beq.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ac:	f7fd f932 	bl	8005c14 <HAL_GetTick>
 80089b0:	0002      	movs	r2, r0
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	69ba      	ldr	r2, [r7, #24]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d302      	bcc.n	80089c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d11b      	bne.n	80089fa <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	492f      	ldr	r1, [pc, #188]	; (8008a8c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80089ce:	400a      	ands	r2, r1
 80089d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2101      	movs	r1, #1
 80089de:	438a      	bics	r2, r1
 80089e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2220      	movs	r2, #32
 80089e6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2220      	movs	r2, #32
 80089ec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2270      	movs	r2, #112	; 0x70
 80089f2:	2100      	movs	r1, #0
 80089f4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e043      	b.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2204      	movs	r2, #4
 8008a02:	4013      	ands	r3, r2
 8008a04:	d02d      	beq.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	69da      	ldr	r2, [r3, #28]
 8008a0c:	2380      	movs	r3, #128	; 0x80
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	401a      	ands	r2, r3
 8008a12:	2380      	movs	r3, #128	; 0x80
 8008a14:	011b      	lsls	r3, r3, #4
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d123      	bne.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2280      	movs	r2, #128	; 0x80
 8008a20:	0112      	lsls	r2, r2, #4
 8008a22:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4917      	ldr	r1, [pc, #92]	; (8008a8c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8008a30:	400a      	ands	r2, r1
 8008a32:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2101      	movs	r1, #1
 8008a40:	438a      	bics	r2, r1
 8008a42:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2220      	movs	r2, #32
 8008a54:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2270      	movs	r2, #112	; 0x70
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e00f      	b.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69db      	ldr	r3, [r3, #28]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	425a      	negs	r2, r3
 8008a72:	4153      	adcs	r3, r2
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	001a      	movs	r2, r3
 8008a78:	1dfb      	adds	r3, r7, #7
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d092      	beq.n	80089a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	0018      	movs	r0, r3
 8008a84:	46bd      	mov	sp, r7
 8008a86:	b004      	add	sp, #16
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	fffffe5f 	.word	0xfffffe5f

08008a90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	21c0      	movs	r1, #192	; 0xc0
 8008aa4:	438a      	bics	r2, r1
 8008aa6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008aae:	46c0      	nop			; (mov r8, r8)
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	b002      	add	sp, #8
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	490a      	ldr	r1, [pc, #40]	; (8008af4 <UART_EndRxTransfer+0x3c>)
 8008acc:	400a      	ands	r2, r1
 8008ace:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689a      	ldr	r2, [r3, #8]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2101      	movs	r1, #1
 8008adc:	438a      	bics	r2, r1
 8008ade:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008aec:	46c0      	nop			; (mov r8, r8)
 8008aee:	46bd      	mov	sp, r7
 8008af0:	b002      	add	sp, #8
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	fffffedf 	.word	0xfffffedf

08008af8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	2b20      	cmp	r3, #32
 8008b0c:	d01e      	beq.n	8008b4c <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	225a      	movs	r2, #90	; 0x5a
 8008b12:	2100      	movs	r1, #0
 8008b14:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	490e      	ldr	r1, [pc, #56]	; (8008b5c <UART_DMAReceiveCplt+0x64>)
 8008b22:	400a      	ands	r2, r1
 8008b24:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2101      	movs	r1, #1
 8008b32:	438a      	bics	r2, r1
 8008b34:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2140      	movs	r1, #64	; 0x40
 8008b42:	438a      	bics	r2, r1
 8008b44:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	0018      	movs	r0, r3
 8008b50:	f7ff fc88 	bl	8008464 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b54:	46c0      	nop			; (mov r8, r8)
 8008b56:	46bd      	mov	sp, r7
 8008b58:	b004      	add	sp, #16
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	fffffeff 	.word	0xfffffeff

08008b60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	0018      	movs	r0, r3
 8008b72:	f7ff fc7f 	bl	8008474 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b76:	46c0      	nop			; (mov r8, r8)
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	b004      	add	sp, #16
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b90:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2280      	movs	r2, #128	; 0x80
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	2b80      	cmp	r3, #128	; 0x80
 8008ba4:	d10a      	bne.n	8008bbc <UART_DMAError+0x3e>
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	2b21      	cmp	r3, #33	; 0x21
 8008baa:	d107      	bne.n	8008bbc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2252      	movs	r2, #82	; 0x52
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	f7ff ff6a 	bl	8008a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	2240      	movs	r2, #64	; 0x40
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	2b40      	cmp	r3, #64	; 0x40
 8008bc8:	d10a      	bne.n	8008be0 <UART_DMAError+0x62>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b22      	cmp	r3, #34	; 0x22
 8008bce:	d107      	bne.n	8008be0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	225a      	movs	r2, #90	; 0x5a
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	0018      	movs	r0, r3
 8008bdc:	f7ff ff6c 	bl	8008ab8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008be4:	2210      	movs	r2, #16
 8008be6:	431a      	orrs	r2, r3
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	0018      	movs	r0, r3
 8008bf0:	f7ff fc48 	bl	8008484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bf4:	46c0      	nop			; (mov r8, r8)
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	b006      	add	sp, #24
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <_Znwj>:
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	1e04      	subs	r4, r0, #0
 8008c00:	d100      	bne.n	8008c04 <_Znwj+0x8>
 8008c02:	3401      	adds	r4, #1
 8008c04:	0020      	movs	r0, r4
 8008c06:	f000 f843 	bl	8008c90 <malloc>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d107      	bne.n	8008c1e <_Znwj+0x22>
 8008c0e:	f000 f807 	bl	8008c20 <_ZSt15get_new_handlerv>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d101      	bne.n	8008c1a <_Znwj+0x1e>
 8008c16:	f000 f809 	bl	8008c2c <abort>
 8008c1a:	4780      	blx	r0
 8008c1c:	e7f2      	b.n	8008c04 <_Znwj+0x8>
 8008c1e:	bd10      	pop	{r4, pc}

08008c20 <_ZSt15get_new_handlerv>:
 8008c20:	4b01      	ldr	r3, [pc, #4]	; (8008c28 <_ZSt15get_new_handlerv+0x8>)
 8008c22:	6818      	ldr	r0, [r3, #0]
 8008c24:	4770      	bx	lr
 8008c26:	46c0      	nop			; (mov r8, r8)
 8008c28:	20000458 	.word	0x20000458

08008c2c <abort>:
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	2006      	movs	r0, #6
 8008c30:	f000 f8da 	bl	8008de8 <raise>
 8008c34:	2001      	movs	r0, #1
 8008c36:	f7fc ff2b 	bl	8005a90 <_exit>
	...

08008c3c <__errno>:
 8008c3c:	4b01      	ldr	r3, [pc, #4]	; (8008c44 <__errno+0x8>)
 8008c3e:	6818      	ldr	r0, [r3, #0]
 8008c40:	4770      	bx	lr
 8008c42:	46c0      	nop			; (mov r8, r8)
 8008c44:	20000014 	.word	0x20000014

08008c48 <__libc_init_array>:
 8008c48:	b570      	push	{r4, r5, r6, lr}
 8008c4a:	2600      	movs	r6, #0
 8008c4c:	4d0c      	ldr	r5, [pc, #48]	; (8008c80 <__libc_init_array+0x38>)
 8008c4e:	4c0d      	ldr	r4, [pc, #52]	; (8008c84 <__libc_init_array+0x3c>)
 8008c50:	1b64      	subs	r4, r4, r5
 8008c52:	10a4      	asrs	r4, r4, #2
 8008c54:	42a6      	cmp	r6, r4
 8008c56:	d109      	bne.n	8008c6c <__libc_init_array+0x24>
 8008c58:	2600      	movs	r6, #0
 8008c5a:	f000 f8e7 	bl	8008e2c <_init>
 8008c5e:	4d0a      	ldr	r5, [pc, #40]	; (8008c88 <__libc_init_array+0x40>)
 8008c60:	4c0a      	ldr	r4, [pc, #40]	; (8008c8c <__libc_init_array+0x44>)
 8008c62:	1b64      	subs	r4, r4, r5
 8008c64:	10a4      	asrs	r4, r4, #2
 8008c66:	42a6      	cmp	r6, r4
 8008c68:	d105      	bne.n	8008c76 <__libc_init_array+0x2e>
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}
 8008c6c:	00b3      	lsls	r3, r6, #2
 8008c6e:	58eb      	ldr	r3, [r5, r3]
 8008c70:	4798      	blx	r3
 8008c72:	3601      	adds	r6, #1
 8008c74:	e7ee      	b.n	8008c54 <__libc_init_array+0xc>
 8008c76:	00b3      	lsls	r3, r6, #2
 8008c78:	58eb      	ldr	r3, [r5, r3]
 8008c7a:	4798      	blx	r3
 8008c7c:	3601      	adds	r6, #1
 8008c7e:	e7f2      	b.n	8008c66 <__libc_init_array+0x1e>
 8008c80:	08008fcc 	.word	0x08008fcc
 8008c84:	08008fcc 	.word	0x08008fcc
 8008c88:	08008fcc 	.word	0x08008fcc
 8008c8c:	08008fd0 	.word	0x08008fd0

08008c90 <malloc>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	4b03      	ldr	r3, [pc, #12]	; (8008ca0 <malloc+0x10>)
 8008c94:	0001      	movs	r1, r0
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	f000 f80c 	bl	8008cb4 <_malloc_r>
 8008c9c:	bd10      	pop	{r4, pc}
 8008c9e:	46c0      	nop			; (mov r8, r8)
 8008ca0:	20000014 	.word	0x20000014

08008ca4 <memset>:
 8008ca4:	0003      	movs	r3, r0
 8008ca6:	1812      	adds	r2, r2, r0
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d100      	bne.n	8008cae <memset+0xa>
 8008cac:	4770      	bx	lr
 8008cae:	7019      	strb	r1, [r3, #0]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	e7f9      	b.n	8008ca8 <memset+0x4>

08008cb4 <_malloc_r>:
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	b570      	push	{r4, r5, r6, lr}
 8008cb8:	1ccd      	adds	r5, r1, #3
 8008cba:	439d      	bics	r5, r3
 8008cbc:	3508      	adds	r5, #8
 8008cbe:	0006      	movs	r6, r0
 8008cc0:	2d0c      	cmp	r5, #12
 8008cc2:	d21e      	bcs.n	8008d02 <_malloc_r+0x4e>
 8008cc4:	250c      	movs	r5, #12
 8008cc6:	42a9      	cmp	r1, r5
 8008cc8:	d81d      	bhi.n	8008d06 <_malloc_r+0x52>
 8008cca:	0030      	movs	r0, r6
 8008ccc:	f000 f8ac 	bl	8008e28 <__malloc_lock>
 8008cd0:	4a25      	ldr	r2, [pc, #148]	; (8008d68 <_malloc_r+0xb4>)
 8008cd2:	6814      	ldr	r4, [r2, #0]
 8008cd4:	0021      	movs	r1, r4
 8008cd6:	2900      	cmp	r1, #0
 8008cd8:	d119      	bne.n	8008d0e <_malloc_r+0x5a>
 8008cda:	4c24      	ldr	r4, [pc, #144]	; (8008d6c <_malloc_r+0xb8>)
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d103      	bne.n	8008cea <_malloc_r+0x36>
 8008ce2:	0030      	movs	r0, r6
 8008ce4:	f000 f844 	bl	8008d70 <_sbrk_r>
 8008ce8:	6020      	str	r0, [r4, #0]
 8008cea:	0029      	movs	r1, r5
 8008cec:	0030      	movs	r0, r6
 8008cee:	f000 f83f 	bl	8008d70 <_sbrk_r>
 8008cf2:	1c43      	adds	r3, r0, #1
 8008cf4:	d12b      	bne.n	8008d4e <_malloc_r+0x9a>
 8008cf6:	230c      	movs	r3, #12
 8008cf8:	0030      	movs	r0, r6
 8008cfa:	6033      	str	r3, [r6, #0]
 8008cfc:	f000 f895 	bl	8008e2a <__malloc_unlock>
 8008d00:	e003      	b.n	8008d0a <_malloc_r+0x56>
 8008d02:	2d00      	cmp	r5, #0
 8008d04:	dadf      	bge.n	8008cc6 <_malloc_r+0x12>
 8008d06:	230c      	movs	r3, #12
 8008d08:	6033      	str	r3, [r6, #0]
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	bd70      	pop	{r4, r5, r6, pc}
 8008d0e:	680b      	ldr	r3, [r1, #0]
 8008d10:	1b5b      	subs	r3, r3, r5
 8008d12:	d419      	bmi.n	8008d48 <_malloc_r+0x94>
 8008d14:	2b0b      	cmp	r3, #11
 8008d16:	d903      	bls.n	8008d20 <_malloc_r+0x6c>
 8008d18:	600b      	str	r3, [r1, #0]
 8008d1a:	18cc      	adds	r4, r1, r3
 8008d1c:	6025      	str	r5, [r4, #0]
 8008d1e:	e003      	b.n	8008d28 <_malloc_r+0x74>
 8008d20:	684b      	ldr	r3, [r1, #4]
 8008d22:	428c      	cmp	r4, r1
 8008d24:	d10d      	bne.n	8008d42 <_malloc_r+0x8e>
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	0030      	movs	r0, r6
 8008d2a:	f000 f87e 	bl	8008e2a <__malloc_unlock>
 8008d2e:	0020      	movs	r0, r4
 8008d30:	2207      	movs	r2, #7
 8008d32:	300b      	adds	r0, #11
 8008d34:	1d23      	adds	r3, r4, #4
 8008d36:	4390      	bics	r0, r2
 8008d38:	1ac3      	subs	r3, r0, r3
 8008d3a:	d0e7      	beq.n	8008d0c <_malloc_r+0x58>
 8008d3c:	425a      	negs	r2, r3
 8008d3e:	50e2      	str	r2, [r4, r3]
 8008d40:	e7e4      	b.n	8008d0c <_malloc_r+0x58>
 8008d42:	6063      	str	r3, [r4, #4]
 8008d44:	000c      	movs	r4, r1
 8008d46:	e7ef      	b.n	8008d28 <_malloc_r+0x74>
 8008d48:	000c      	movs	r4, r1
 8008d4a:	6849      	ldr	r1, [r1, #4]
 8008d4c:	e7c3      	b.n	8008cd6 <_malloc_r+0x22>
 8008d4e:	2303      	movs	r3, #3
 8008d50:	1cc4      	adds	r4, r0, #3
 8008d52:	439c      	bics	r4, r3
 8008d54:	42a0      	cmp	r0, r4
 8008d56:	d0e1      	beq.n	8008d1c <_malloc_r+0x68>
 8008d58:	1a21      	subs	r1, r4, r0
 8008d5a:	0030      	movs	r0, r6
 8008d5c:	f000 f808 	bl	8008d70 <_sbrk_r>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d1db      	bne.n	8008d1c <_malloc_r+0x68>
 8008d64:	e7c7      	b.n	8008cf6 <_malloc_r+0x42>
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	2000045c 	.word	0x2000045c
 8008d6c:	20000460 	.word	0x20000460

08008d70 <_sbrk_r>:
 8008d70:	2300      	movs	r3, #0
 8008d72:	b570      	push	{r4, r5, r6, lr}
 8008d74:	4c06      	ldr	r4, [pc, #24]	; (8008d90 <_sbrk_r+0x20>)
 8008d76:	0005      	movs	r5, r0
 8008d78:	0008      	movs	r0, r1
 8008d7a:	6023      	str	r3, [r4, #0]
 8008d7c:	f7fc fe94 	bl	8005aa8 <_sbrk>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d103      	bne.n	8008d8c <_sbrk_r+0x1c>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d000      	beq.n	8008d8c <_sbrk_r+0x1c>
 8008d8a:	602b      	str	r3, [r5, #0]
 8008d8c:	bd70      	pop	{r4, r5, r6, pc}
 8008d8e:	46c0      	nop			; (mov r8, r8)
 8008d90:	20000468 	.word	0x20000468

08008d94 <_raise_r>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	0004      	movs	r4, r0
 8008d98:	000d      	movs	r5, r1
 8008d9a:	291f      	cmp	r1, #31
 8008d9c:	d904      	bls.n	8008da8 <_raise_r+0x14>
 8008d9e:	2316      	movs	r3, #22
 8008da0:	6003      	str	r3, [r0, #0]
 8008da2:	2001      	movs	r0, #1
 8008da4:	4240      	negs	r0, r0
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d004      	beq.n	8008db8 <_raise_r+0x24>
 8008dae:	008a      	lsls	r2, r1, #2
 8008db0:	189b      	adds	r3, r3, r2
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	2a00      	cmp	r2, #0
 8008db6:	d108      	bne.n	8008dca <_raise_r+0x36>
 8008db8:	0020      	movs	r0, r4
 8008dba:	f000 f831 	bl	8008e20 <_getpid_r>
 8008dbe:	002a      	movs	r2, r5
 8008dc0:	0001      	movs	r1, r0
 8008dc2:	0020      	movs	r0, r4
 8008dc4:	f000 f81a 	bl	8008dfc <_kill_r>
 8008dc8:	e7ed      	b.n	8008da6 <_raise_r+0x12>
 8008dca:	2000      	movs	r0, #0
 8008dcc:	2a01      	cmp	r2, #1
 8008dce:	d0ea      	beq.n	8008da6 <_raise_r+0x12>
 8008dd0:	1c51      	adds	r1, r2, #1
 8008dd2:	d103      	bne.n	8008ddc <_raise_r+0x48>
 8008dd4:	2316      	movs	r3, #22
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	e7e4      	b.n	8008da6 <_raise_r+0x12>
 8008ddc:	2400      	movs	r4, #0
 8008dde:	0028      	movs	r0, r5
 8008de0:	601c      	str	r4, [r3, #0]
 8008de2:	4790      	blx	r2
 8008de4:	0020      	movs	r0, r4
 8008de6:	e7de      	b.n	8008da6 <_raise_r+0x12>

08008de8 <raise>:
 8008de8:	b510      	push	{r4, lr}
 8008dea:	4b03      	ldr	r3, [pc, #12]	; (8008df8 <raise+0x10>)
 8008dec:	0001      	movs	r1, r0
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	f7ff ffd0 	bl	8008d94 <_raise_r>
 8008df4:	bd10      	pop	{r4, pc}
 8008df6:	46c0      	nop			; (mov r8, r8)
 8008df8:	20000014 	.word	0x20000014

08008dfc <_kill_r>:
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	b570      	push	{r4, r5, r6, lr}
 8008e00:	4c06      	ldr	r4, [pc, #24]	; (8008e1c <_kill_r+0x20>)
 8008e02:	0005      	movs	r5, r0
 8008e04:	0008      	movs	r0, r1
 8008e06:	0011      	movs	r1, r2
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	f7fc fe31 	bl	8005a70 <_kill>
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	d103      	bne.n	8008e1a <_kill_r+0x1e>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d000      	beq.n	8008e1a <_kill_r+0x1e>
 8008e18:	602b      	str	r3, [r5, #0]
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	20000468 	.word	0x20000468

08008e20 <_getpid_r>:
 8008e20:	b510      	push	{r4, lr}
 8008e22:	f7fc fe1f 	bl	8005a64 <_getpid>
 8008e26:	bd10      	pop	{r4, pc}

08008e28 <__malloc_lock>:
 8008e28:	4770      	bx	lr

08008e2a <__malloc_unlock>:
 8008e2a:	4770      	bx	lr

08008e2c <_init>:
 8008e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2e:	46c0      	nop			; (mov r8, r8)
 8008e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e32:	bc08      	pop	{r3}
 8008e34:	469e      	mov	lr, r3
 8008e36:	4770      	bx	lr

08008e38 <_fini>:
 8008e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3a:	46c0      	nop			; (mov r8, r8)
 8008e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e3e:	bc08      	pop	{r3}
 8008e40:	469e      	mov	lr, r3
 8008e42:	4770      	bx	lr
