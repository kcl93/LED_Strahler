
LED_Strahler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dc8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800908c  0800908c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800908c  0800908c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800908c  0800908c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009090  08009090  00019090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000078  0800910c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  0800910c  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a62  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000318e  00000000  00000000  00032b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b8  00000000  00000000  00035c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001110  00000000  00000000  00036f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001130b  00000000  00000000  00038058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010216  00000000  00000000  00049363  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00055b2d  00000000  00000000  00059579  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af0a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004844  00000000  00000000  000af124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008e70 	.word	0x08008e70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08008e70 	.word	0x08008e70

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f8c7 	bl	8000590 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f849 	bl	80004a4 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f8b9 	bl	8000590 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f8af 	bl	8000590 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f857 	bl	80004f4 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f84d 	bl	80004f4 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_d2uiz>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	2200      	movs	r2, #0
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <__aeabi_d2uiz+0x38>)
 800046e:	0004      	movs	r4, r0
 8000470:	000d      	movs	r5, r1
 8000472:	f002 f843 	bl	80024fc <__aeabi_dcmpge>
 8000476:	2800      	cmp	r0, #0
 8000478:	d104      	bne.n	8000484 <__aeabi_d2uiz+0x1c>
 800047a:	0020      	movs	r0, r4
 800047c:	0029      	movs	r1, r5
 800047e:	f001 fefd 	bl	800227c <__aeabi_d2iz>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <__aeabi_d2uiz+0x38>)
 8000486:	2200      	movs	r2, #0
 8000488:	0020      	movs	r0, r4
 800048a:	0029      	movs	r1, r5
 800048c:	f001 fbae 	bl	8001bec <__aeabi_dsub>
 8000490:	f001 fef4 	bl	800227c <__aeabi_d2iz>
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	061b      	lsls	r3, r3, #24
 8000498:	469c      	mov	ip, r3
 800049a:	4460      	add	r0, ip
 800049c:	e7f1      	b.n	8000482 <__aeabi_d2uiz+0x1a>
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	41e00000 	.word	0x41e00000

080004a4 <__eqsf2>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	0042      	lsls	r2, r0, #1
 80004a8:	024e      	lsls	r6, r1, #9
 80004aa:	004c      	lsls	r4, r1, #1
 80004ac:	0245      	lsls	r5, r0, #9
 80004ae:	0a6d      	lsrs	r5, r5, #9
 80004b0:	0e12      	lsrs	r2, r2, #24
 80004b2:	0fc3      	lsrs	r3, r0, #31
 80004b4:	0a76      	lsrs	r6, r6, #9
 80004b6:	0e24      	lsrs	r4, r4, #24
 80004b8:	0fc9      	lsrs	r1, r1, #31
 80004ba:	2aff      	cmp	r2, #255	; 0xff
 80004bc:	d00f      	beq.n	80004de <__eqsf2+0x3a>
 80004be:	2cff      	cmp	r4, #255	; 0xff
 80004c0:	d011      	beq.n	80004e6 <__eqsf2+0x42>
 80004c2:	2001      	movs	r0, #1
 80004c4:	42a2      	cmp	r2, r4
 80004c6:	d000      	beq.n	80004ca <__eqsf2+0x26>
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	42b5      	cmp	r5, r6
 80004cc:	d1fc      	bne.n	80004c8 <__eqsf2+0x24>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d00d      	beq.n	80004ee <__eqsf2+0x4a>
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d1f8      	bne.n	80004c8 <__eqsf2+0x24>
 80004d6:	0028      	movs	r0, r5
 80004d8:	1e45      	subs	r5, r0, #1
 80004da:	41a8      	sbcs	r0, r5
 80004dc:	e7f4      	b.n	80004c8 <__eqsf2+0x24>
 80004de:	2001      	movs	r0, #1
 80004e0:	2d00      	cmp	r5, #0
 80004e2:	d1f1      	bne.n	80004c8 <__eqsf2+0x24>
 80004e4:	e7eb      	b.n	80004be <__eqsf2+0x1a>
 80004e6:	2001      	movs	r0, #1
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d1ed      	bne.n	80004c8 <__eqsf2+0x24>
 80004ec:	e7e9      	b.n	80004c2 <__eqsf2+0x1e>
 80004ee:	2000      	movs	r0, #0
 80004f0:	e7ea      	b.n	80004c8 <__eqsf2+0x24>
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__gesf2>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	004a      	lsls	r2, r1, #1
 80004f8:	024e      	lsls	r6, r1, #9
 80004fa:	0245      	lsls	r5, r0, #9
 80004fc:	0044      	lsls	r4, r0, #1
 80004fe:	0a6d      	lsrs	r5, r5, #9
 8000500:	0e24      	lsrs	r4, r4, #24
 8000502:	0fc3      	lsrs	r3, r0, #31
 8000504:	0a76      	lsrs	r6, r6, #9
 8000506:	0e12      	lsrs	r2, r2, #24
 8000508:	0fc9      	lsrs	r1, r1, #31
 800050a:	2cff      	cmp	r4, #255	; 0xff
 800050c:	d015      	beq.n	800053a <__gesf2+0x46>
 800050e:	2aff      	cmp	r2, #255	; 0xff
 8000510:	d00e      	beq.n	8000530 <__gesf2+0x3c>
 8000512:	2c00      	cmp	r4, #0
 8000514:	d115      	bne.n	8000542 <__gesf2+0x4e>
 8000516:	2a00      	cmp	r2, #0
 8000518:	d101      	bne.n	800051e <__gesf2+0x2a>
 800051a:	2e00      	cmp	r6, #0
 800051c:	d01c      	beq.n	8000558 <__gesf2+0x64>
 800051e:	2d00      	cmp	r5, #0
 8000520:	d014      	beq.n	800054c <__gesf2+0x58>
 8000522:	428b      	cmp	r3, r1
 8000524:	d027      	beq.n	8000576 <__gesf2+0x82>
 8000526:	2002      	movs	r0, #2
 8000528:	3b01      	subs	r3, #1
 800052a:	4018      	ands	r0, r3
 800052c:	3801      	subs	r0, #1
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	2e00      	cmp	r6, #0
 8000532:	d0ee      	beq.n	8000512 <__gesf2+0x1e>
 8000534:	2002      	movs	r0, #2
 8000536:	4240      	negs	r0, r0
 8000538:	e7f9      	b.n	800052e <__gesf2+0x3a>
 800053a:	2d00      	cmp	r5, #0
 800053c:	d1fa      	bne.n	8000534 <__gesf2+0x40>
 800053e:	2aff      	cmp	r2, #255	; 0xff
 8000540:	d00e      	beq.n	8000560 <__gesf2+0x6c>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d10e      	bne.n	8000564 <__gesf2+0x70>
 8000546:	2e00      	cmp	r6, #0
 8000548:	d0ed      	beq.n	8000526 <__gesf2+0x32>
 800054a:	e00b      	b.n	8000564 <__gesf2+0x70>
 800054c:	2301      	movs	r3, #1
 800054e:	3901      	subs	r1, #1
 8000550:	4399      	bics	r1, r3
 8000552:	0008      	movs	r0, r1
 8000554:	3001      	adds	r0, #1
 8000556:	e7ea      	b.n	800052e <__gesf2+0x3a>
 8000558:	2000      	movs	r0, #0
 800055a:	2d00      	cmp	r5, #0
 800055c:	d0e7      	beq.n	800052e <__gesf2+0x3a>
 800055e:	e7e2      	b.n	8000526 <__gesf2+0x32>
 8000560:	2e00      	cmp	r6, #0
 8000562:	d1e7      	bne.n	8000534 <__gesf2+0x40>
 8000564:	428b      	cmp	r3, r1
 8000566:	d1de      	bne.n	8000526 <__gesf2+0x32>
 8000568:	4294      	cmp	r4, r2
 800056a:	dd05      	ble.n	8000578 <__gesf2+0x84>
 800056c:	2102      	movs	r1, #2
 800056e:	1e58      	subs	r0, r3, #1
 8000570:	4008      	ands	r0, r1
 8000572:	3801      	subs	r0, #1
 8000574:	e7db      	b.n	800052e <__gesf2+0x3a>
 8000576:	2400      	movs	r4, #0
 8000578:	42a2      	cmp	r2, r4
 800057a:	dc04      	bgt.n	8000586 <__gesf2+0x92>
 800057c:	42b5      	cmp	r5, r6
 800057e:	d8d2      	bhi.n	8000526 <__gesf2+0x32>
 8000580:	2000      	movs	r0, #0
 8000582:	42b5      	cmp	r5, r6
 8000584:	d2d3      	bcs.n	800052e <__gesf2+0x3a>
 8000586:	1e58      	subs	r0, r3, #1
 8000588:	2301      	movs	r3, #1
 800058a:	4398      	bics	r0, r3
 800058c:	3001      	adds	r0, #1
 800058e:	e7ce      	b.n	800052e <__gesf2+0x3a>

08000590 <__lesf2>:
 8000590:	b530      	push	{r4, r5, lr}
 8000592:	0042      	lsls	r2, r0, #1
 8000594:	0244      	lsls	r4, r0, #9
 8000596:	024d      	lsls	r5, r1, #9
 8000598:	0fc3      	lsrs	r3, r0, #31
 800059a:	0048      	lsls	r0, r1, #1
 800059c:	0a64      	lsrs	r4, r4, #9
 800059e:	0e12      	lsrs	r2, r2, #24
 80005a0:	0a6d      	lsrs	r5, r5, #9
 80005a2:	0e00      	lsrs	r0, r0, #24
 80005a4:	0fc9      	lsrs	r1, r1, #31
 80005a6:	2aff      	cmp	r2, #255	; 0xff
 80005a8:	d012      	beq.n	80005d0 <__lesf2+0x40>
 80005aa:	28ff      	cmp	r0, #255	; 0xff
 80005ac:	d00c      	beq.n	80005c8 <__lesf2+0x38>
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d112      	bne.n	80005d8 <__lesf2+0x48>
 80005b2:	2800      	cmp	r0, #0
 80005b4:	d119      	bne.n	80005ea <__lesf2+0x5a>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d117      	bne.n	80005ea <__lesf2+0x5a>
 80005ba:	2c00      	cmp	r4, #0
 80005bc:	d02b      	beq.n	8000616 <__lesf2+0x86>
 80005be:	2002      	movs	r0, #2
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4018      	ands	r0, r3
 80005c4:	3801      	subs	r0, #1
 80005c6:	e026      	b.n	8000616 <__lesf2+0x86>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d0f0      	beq.n	80005ae <__lesf2+0x1e>
 80005cc:	2002      	movs	r0, #2
 80005ce:	e022      	b.n	8000616 <__lesf2+0x86>
 80005d0:	2c00      	cmp	r4, #0
 80005d2:	d1fb      	bne.n	80005cc <__lesf2+0x3c>
 80005d4:	28ff      	cmp	r0, #255	; 0xff
 80005d6:	d01f      	beq.n	8000618 <__lesf2+0x88>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d11f      	bne.n	800061c <__lesf2+0x8c>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d11d      	bne.n	800061c <__lesf2+0x8c>
 80005e0:	2002      	movs	r0, #2
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4018      	ands	r0, r3
 80005e6:	3801      	subs	r0, #1
 80005e8:	e015      	b.n	8000616 <__lesf2+0x86>
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d00e      	beq.n	800060c <__lesf2+0x7c>
 80005ee:	428b      	cmp	r3, r1
 80005f0:	d1e5      	bne.n	80005be <__lesf2+0x2e>
 80005f2:	2200      	movs	r2, #0
 80005f4:	4290      	cmp	r0, r2
 80005f6:	dc04      	bgt.n	8000602 <__lesf2+0x72>
 80005f8:	42ac      	cmp	r4, r5
 80005fa:	d8e0      	bhi.n	80005be <__lesf2+0x2e>
 80005fc:	2000      	movs	r0, #0
 80005fe:	42ac      	cmp	r4, r5
 8000600:	d209      	bcs.n	8000616 <__lesf2+0x86>
 8000602:	1e58      	subs	r0, r3, #1
 8000604:	2301      	movs	r3, #1
 8000606:	4398      	bics	r0, r3
 8000608:	3001      	adds	r0, #1
 800060a:	e004      	b.n	8000616 <__lesf2+0x86>
 800060c:	2301      	movs	r3, #1
 800060e:	3901      	subs	r1, #1
 8000610:	4399      	bics	r1, r3
 8000612:	0008      	movs	r0, r1
 8000614:	3001      	adds	r0, #1
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	2d00      	cmp	r5, #0
 800061a:	d1d7      	bne.n	80005cc <__lesf2+0x3c>
 800061c:	428b      	cmp	r3, r1
 800061e:	d1ce      	bne.n	80005be <__lesf2+0x2e>
 8000620:	4282      	cmp	r2, r0
 8000622:	dde7      	ble.n	80005f4 <__lesf2+0x64>
 8000624:	2102      	movs	r1, #2
 8000626:	1e58      	subs	r0, r3, #1
 8000628:	4008      	ands	r0, r1
 800062a:	3801      	subs	r0, #1
 800062c:	e7f3      	b.n	8000616 <__lesf2+0x86>
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__aeabi_fsub>:
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000632:	4647      	mov	r7, r8
 8000634:	46ce      	mov	lr, r9
 8000636:	0044      	lsls	r4, r0, #1
 8000638:	0fc2      	lsrs	r2, r0, #31
 800063a:	b580      	push	{r7, lr}
 800063c:	0247      	lsls	r7, r0, #9
 800063e:	0248      	lsls	r0, r1, #9
 8000640:	0a40      	lsrs	r0, r0, #9
 8000642:	4684      	mov	ip, r0
 8000644:	4666      	mov	r6, ip
 8000646:	0048      	lsls	r0, r1, #1
 8000648:	0a7f      	lsrs	r7, r7, #9
 800064a:	0e24      	lsrs	r4, r4, #24
 800064c:	00f6      	lsls	r6, r6, #3
 800064e:	0025      	movs	r5, r4
 8000650:	4690      	mov	r8, r2
 8000652:	00fb      	lsls	r3, r7, #3
 8000654:	0e00      	lsrs	r0, r0, #24
 8000656:	0fc9      	lsrs	r1, r1, #31
 8000658:	46b1      	mov	r9, r6
 800065a:	28ff      	cmp	r0, #255	; 0xff
 800065c:	d100      	bne.n	8000660 <__aeabi_fsub+0x30>
 800065e:	e085      	b.n	800076c <__aeabi_fsub+0x13c>
 8000660:	2601      	movs	r6, #1
 8000662:	4071      	eors	r1, r6
 8000664:	1a26      	subs	r6, r4, r0
 8000666:	4291      	cmp	r1, r2
 8000668:	d057      	beq.n	800071a <__aeabi_fsub+0xea>
 800066a:	2e00      	cmp	r6, #0
 800066c:	dd43      	ble.n	80006f6 <__aeabi_fsub+0xc6>
 800066e:	2800      	cmp	r0, #0
 8000670:	d000      	beq.n	8000674 <__aeabi_fsub+0x44>
 8000672:	e07f      	b.n	8000774 <__aeabi_fsub+0x144>
 8000674:	4649      	mov	r1, r9
 8000676:	2900      	cmp	r1, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fsub+0x4c>
 800067a:	e0aa      	b.n	80007d2 <__aeabi_fsub+0x1a2>
 800067c:	3e01      	subs	r6, #1
 800067e:	2e00      	cmp	r6, #0
 8000680:	d000      	beq.n	8000684 <__aeabi_fsub+0x54>
 8000682:	e0f7      	b.n	8000874 <__aeabi_fsub+0x244>
 8000684:	1a5b      	subs	r3, r3, r1
 8000686:	015a      	lsls	r2, r3, #5
 8000688:	d400      	bmi.n	800068c <__aeabi_fsub+0x5c>
 800068a:	e08b      	b.n	80007a4 <__aeabi_fsub+0x174>
 800068c:	019b      	lsls	r3, r3, #6
 800068e:	099c      	lsrs	r4, r3, #6
 8000690:	0020      	movs	r0, r4
 8000692:	f001 ff3d 	bl	8002510 <__clzsi2>
 8000696:	3805      	subs	r0, #5
 8000698:	4084      	lsls	r4, r0
 800069a:	4285      	cmp	r5, r0
 800069c:	dd00      	ble.n	80006a0 <__aeabi_fsub+0x70>
 800069e:	e0d3      	b.n	8000848 <__aeabi_fsub+0x218>
 80006a0:	1b45      	subs	r5, r0, r5
 80006a2:	0023      	movs	r3, r4
 80006a4:	2020      	movs	r0, #32
 80006a6:	3501      	adds	r5, #1
 80006a8:	40eb      	lsrs	r3, r5
 80006aa:	1b45      	subs	r5, r0, r5
 80006ac:	40ac      	lsls	r4, r5
 80006ae:	1e62      	subs	r2, r4, #1
 80006b0:	4194      	sbcs	r4, r2
 80006b2:	4323      	orrs	r3, r4
 80006b4:	2407      	movs	r4, #7
 80006b6:	2500      	movs	r5, #0
 80006b8:	401c      	ands	r4, r3
 80006ba:	2201      	movs	r2, #1
 80006bc:	4641      	mov	r1, r8
 80006be:	400a      	ands	r2, r1
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	d004      	beq.n	80006ce <__aeabi_fsub+0x9e>
 80006c4:	210f      	movs	r1, #15
 80006c6:	4019      	ands	r1, r3
 80006c8:	2904      	cmp	r1, #4
 80006ca:	d000      	beq.n	80006ce <__aeabi_fsub+0x9e>
 80006cc:	3304      	adds	r3, #4
 80006ce:	0159      	lsls	r1, r3, #5
 80006d0:	d400      	bmi.n	80006d4 <__aeabi_fsub+0xa4>
 80006d2:	e080      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 80006d4:	3501      	adds	r5, #1
 80006d6:	b2ec      	uxtb	r4, r5
 80006d8:	2dff      	cmp	r5, #255	; 0xff
 80006da:	d000      	beq.n	80006de <__aeabi_fsub+0xae>
 80006dc:	e0a3      	b.n	8000826 <__aeabi_fsub+0x1f6>
 80006de:	24ff      	movs	r4, #255	; 0xff
 80006e0:	2300      	movs	r3, #0
 80006e2:	025b      	lsls	r3, r3, #9
 80006e4:	05e4      	lsls	r4, r4, #23
 80006e6:	0a58      	lsrs	r0, r3, #9
 80006e8:	07d2      	lsls	r2, r2, #31
 80006ea:	4320      	orrs	r0, r4
 80006ec:	4310      	orrs	r0, r2
 80006ee:	bc0c      	pop	{r2, r3}
 80006f0:	4690      	mov	r8, r2
 80006f2:	4699      	mov	r9, r3
 80006f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	d174      	bne.n	80007e4 <__aeabi_fsub+0x1b4>
 80006fa:	1c60      	adds	r0, r4, #1
 80006fc:	b2c0      	uxtb	r0, r0
 80006fe:	2801      	cmp	r0, #1
 8000700:	dc00      	bgt.n	8000704 <__aeabi_fsub+0xd4>
 8000702:	e0a7      	b.n	8000854 <__aeabi_fsub+0x224>
 8000704:	464a      	mov	r2, r9
 8000706:	1a9c      	subs	r4, r3, r2
 8000708:	0162      	lsls	r2, r4, #5
 800070a:	d500      	bpl.n	800070e <__aeabi_fsub+0xde>
 800070c:	e0b6      	b.n	800087c <__aeabi_fsub+0x24c>
 800070e:	2c00      	cmp	r4, #0
 8000710:	d1be      	bne.n	8000690 <__aeabi_fsub+0x60>
 8000712:	2200      	movs	r2, #0
 8000714:	2400      	movs	r4, #0
 8000716:	2300      	movs	r3, #0
 8000718:	e7e3      	b.n	80006e2 <__aeabi_fsub+0xb2>
 800071a:	2e00      	cmp	r6, #0
 800071c:	dc00      	bgt.n	8000720 <__aeabi_fsub+0xf0>
 800071e:	e085      	b.n	800082c <__aeabi_fsub+0x1fc>
 8000720:	2800      	cmp	r0, #0
 8000722:	d046      	beq.n	80007b2 <__aeabi_fsub+0x182>
 8000724:	2cff      	cmp	r4, #255	; 0xff
 8000726:	d049      	beq.n	80007bc <__aeabi_fsub+0x18c>
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	4648      	mov	r0, r9
 800072c:	04d2      	lsls	r2, r2, #19
 800072e:	4310      	orrs	r0, r2
 8000730:	4681      	mov	r9, r0
 8000732:	2201      	movs	r2, #1
 8000734:	2e1b      	cmp	r6, #27
 8000736:	dc09      	bgt.n	800074c <__aeabi_fsub+0x11c>
 8000738:	2020      	movs	r0, #32
 800073a:	464c      	mov	r4, r9
 800073c:	1b80      	subs	r0, r0, r6
 800073e:	4084      	lsls	r4, r0
 8000740:	464a      	mov	r2, r9
 8000742:	0020      	movs	r0, r4
 8000744:	40f2      	lsrs	r2, r6
 8000746:	1e44      	subs	r4, r0, #1
 8000748:	41a0      	sbcs	r0, r4
 800074a:	4302      	orrs	r2, r0
 800074c:	189b      	adds	r3, r3, r2
 800074e:	015a      	lsls	r2, r3, #5
 8000750:	d528      	bpl.n	80007a4 <__aeabi_fsub+0x174>
 8000752:	3501      	adds	r5, #1
 8000754:	2dff      	cmp	r5, #255	; 0xff
 8000756:	d100      	bne.n	800075a <__aeabi_fsub+0x12a>
 8000758:	e0a8      	b.n	80008ac <__aeabi_fsub+0x27c>
 800075a:	2201      	movs	r2, #1
 800075c:	2407      	movs	r4, #7
 800075e:	4994      	ldr	r1, [pc, #592]	; (80009b0 <__aeabi_fsub+0x380>)
 8000760:	401a      	ands	r2, r3
 8000762:	085b      	lsrs	r3, r3, #1
 8000764:	400b      	ands	r3, r1
 8000766:	4313      	orrs	r3, r2
 8000768:	401c      	ands	r4, r3
 800076a:	e7a6      	b.n	80006ba <__aeabi_fsub+0x8a>
 800076c:	2e00      	cmp	r6, #0
 800076e:	d000      	beq.n	8000772 <__aeabi_fsub+0x142>
 8000770:	e778      	b.n	8000664 <__aeabi_fsub+0x34>
 8000772:	e775      	b.n	8000660 <__aeabi_fsub+0x30>
 8000774:	2cff      	cmp	r4, #255	; 0xff
 8000776:	d054      	beq.n	8000822 <__aeabi_fsub+0x1f2>
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	4649      	mov	r1, r9
 800077c:	04d2      	lsls	r2, r2, #19
 800077e:	4311      	orrs	r1, r2
 8000780:	4689      	mov	r9, r1
 8000782:	2201      	movs	r2, #1
 8000784:	2e1b      	cmp	r6, #27
 8000786:	dc09      	bgt.n	800079c <__aeabi_fsub+0x16c>
 8000788:	2120      	movs	r1, #32
 800078a:	4648      	mov	r0, r9
 800078c:	1b89      	subs	r1, r1, r6
 800078e:	4088      	lsls	r0, r1
 8000790:	464a      	mov	r2, r9
 8000792:	0001      	movs	r1, r0
 8000794:	40f2      	lsrs	r2, r6
 8000796:	1e48      	subs	r0, r1, #1
 8000798:	4181      	sbcs	r1, r0
 800079a:	430a      	orrs	r2, r1
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	015a      	lsls	r2, r3, #5
 80007a0:	d500      	bpl.n	80007a4 <__aeabi_fsub+0x174>
 80007a2:	e773      	b.n	800068c <__aeabi_fsub+0x5c>
 80007a4:	2201      	movs	r2, #1
 80007a6:	4641      	mov	r1, r8
 80007a8:	400a      	ands	r2, r1
 80007aa:	0759      	lsls	r1, r3, #29
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fsub+0x180>
 80007ae:	e789      	b.n	80006c4 <__aeabi_fsub+0x94>
 80007b0:	e011      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 80007b2:	4648      	mov	r0, r9
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d158      	bne.n	800086a <__aeabi_fsub+0x23a>
 80007b8:	2cff      	cmp	r4, #255	; 0xff
 80007ba:	d10c      	bne.n	80007d6 <__aeabi_fsub+0x1a6>
 80007bc:	08db      	lsrs	r3, r3, #3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0x194>
 80007c2:	e78c      	b.n	80006de <__aeabi_fsub+0xae>
 80007c4:	2080      	movs	r0, #128	; 0x80
 80007c6:	03c0      	lsls	r0, r0, #15
 80007c8:	4303      	orrs	r3, r0
 80007ca:	025b      	lsls	r3, r3, #9
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	24ff      	movs	r4, #255	; 0xff
 80007d0:	e787      	b.n	80006e2 <__aeabi_fsub+0xb2>
 80007d2:	2cff      	cmp	r4, #255	; 0xff
 80007d4:	d025      	beq.n	8000822 <__aeabi_fsub+0x1f2>
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	2dff      	cmp	r5, #255	; 0xff
 80007da:	d0f0      	beq.n	80007be <__aeabi_fsub+0x18e>
 80007dc:	025b      	lsls	r3, r3, #9
 80007de:	0a5b      	lsrs	r3, r3, #9
 80007e0:	b2ec      	uxtb	r4, r5
 80007e2:	e77e      	b.n	80006e2 <__aeabi_fsub+0xb2>
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d04d      	beq.n	8000884 <__aeabi_fsub+0x254>
 80007e8:	28ff      	cmp	r0, #255	; 0xff
 80007ea:	d018      	beq.n	800081e <__aeabi_fsub+0x1ee>
 80007ec:	2480      	movs	r4, #128	; 0x80
 80007ee:	04e4      	lsls	r4, r4, #19
 80007f0:	4272      	negs	r2, r6
 80007f2:	4323      	orrs	r3, r4
 80007f4:	2a1b      	cmp	r2, #27
 80007f6:	dd00      	ble.n	80007fa <__aeabi_fsub+0x1ca>
 80007f8:	e0c4      	b.n	8000984 <__aeabi_fsub+0x354>
 80007fa:	001c      	movs	r4, r3
 80007fc:	2520      	movs	r5, #32
 80007fe:	40d4      	lsrs	r4, r2
 8000800:	1aaa      	subs	r2, r5, r2
 8000802:	4093      	lsls	r3, r2
 8000804:	1e5a      	subs	r2, r3, #1
 8000806:	4193      	sbcs	r3, r2
 8000808:	4323      	orrs	r3, r4
 800080a:	464a      	mov	r2, r9
 800080c:	0005      	movs	r5, r0
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	4688      	mov	r8, r1
 8000812:	e738      	b.n	8000686 <__aeabi_fsub+0x56>
 8000814:	1c72      	adds	r2, r6, #1
 8000816:	d0f8      	beq.n	800080a <__aeabi_fsub+0x1da>
 8000818:	43f2      	mvns	r2, r6
 800081a:	28ff      	cmp	r0, #255	; 0xff
 800081c:	d1ea      	bne.n	80007f4 <__aeabi_fsub+0x1c4>
 800081e:	000a      	movs	r2, r1
 8000820:	464b      	mov	r3, r9
 8000822:	25ff      	movs	r5, #255	; 0xff
 8000824:	e7d7      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 8000826:	019b      	lsls	r3, r3, #6
 8000828:	0a5b      	lsrs	r3, r3, #9
 800082a:	e75a      	b.n	80006e2 <__aeabi_fsub+0xb2>
 800082c:	2e00      	cmp	r6, #0
 800082e:	d141      	bne.n	80008b4 <__aeabi_fsub+0x284>
 8000830:	1c65      	adds	r5, r4, #1
 8000832:	b2e9      	uxtb	r1, r5
 8000834:	2901      	cmp	r1, #1
 8000836:	dd45      	ble.n	80008c4 <__aeabi_fsub+0x294>
 8000838:	2dff      	cmp	r5, #255	; 0xff
 800083a:	d100      	bne.n	800083e <__aeabi_fsub+0x20e>
 800083c:	e74f      	b.n	80006de <__aeabi_fsub+0xae>
 800083e:	2407      	movs	r4, #7
 8000840:	444b      	add	r3, r9
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	401c      	ands	r4, r3
 8000846:	e738      	b.n	80006ba <__aeabi_fsub+0x8a>
 8000848:	2207      	movs	r2, #7
 800084a:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <__aeabi_fsub+0x384>)
 800084c:	1a2d      	subs	r5, r5, r0
 800084e:	4023      	ands	r3, r4
 8000850:	4014      	ands	r4, r2
 8000852:	e732      	b.n	80006ba <__aeabi_fsub+0x8a>
 8000854:	2c00      	cmp	r4, #0
 8000856:	d11d      	bne.n	8000894 <__aeabi_fsub+0x264>
 8000858:	2b00      	cmp	r3, #0
 800085a:	d17a      	bne.n	8000952 <__aeabi_fsub+0x322>
 800085c:	464b      	mov	r3, r9
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fsub+0x234>
 8000862:	e091      	b.n	8000988 <__aeabi_fsub+0x358>
 8000864:	000a      	movs	r2, r1
 8000866:	2500      	movs	r5, #0
 8000868:	e7b5      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 800086a:	3e01      	subs	r6, #1
 800086c:	2e00      	cmp	r6, #0
 800086e:	d119      	bne.n	80008a4 <__aeabi_fsub+0x274>
 8000870:	444b      	add	r3, r9
 8000872:	e76c      	b.n	800074e <__aeabi_fsub+0x11e>
 8000874:	2cff      	cmp	r4, #255	; 0xff
 8000876:	d184      	bne.n	8000782 <__aeabi_fsub+0x152>
 8000878:	25ff      	movs	r5, #255	; 0xff
 800087a:	e7ac      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 800087c:	464a      	mov	r2, r9
 800087e:	4688      	mov	r8, r1
 8000880:	1ad4      	subs	r4, r2, r3
 8000882:	e705      	b.n	8000690 <__aeabi_fsub+0x60>
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1c5      	bne.n	8000814 <__aeabi_fsub+0x1e4>
 8000888:	000a      	movs	r2, r1
 800088a:	28ff      	cmp	r0, #255	; 0xff
 800088c:	d0c8      	beq.n	8000820 <__aeabi_fsub+0x1f0>
 800088e:	0005      	movs	r5, r0
 8000890:	464b      	mov	r3, r9
 8000892:	e7a0      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 8000894:	2b00      	cmp	r3, #0
 8000896:	d149      	bne.n	800092c <__aeabi_fsub+0x2fc>
 8000898:	464b      	mov	r3, r9
 800089a:	2b00      	cmp	r3, #0
 800089c:	d077      	beq.n	800098e <__aeabi_fsub+0x35e>
 800089e:	000a      	movs	r2, r1
 80008a0:	25ff      	movs	r5, #255	; 0xff
 80008a2:	e798      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 80008a4:	2cff      	cmp	r4, #255	; 0xff
 80008a6:	d000      	beq.n	80008aa <__aeabi_fsub+0x27a>
 80008a8:	e743      	b.n	8000732 <__aeabi_fsub+0x102>
 80008aa:	e787      	b.n	80007bc <__aeabi_fsub+0x18c>
 80008ac:	000a      	movs	r2, r1
 80008ae:	24ff      	movs	r4, #255	; 0xff
 80008b0:	2300      	movs	r3, #0
 80008b2:	e716      	b.n	80006e2 <__aeabi_fsub+0xb2>
 80008b4:	2c00      	cmp	r4, #0
 80008b6:	d115      	bne.n	80008e4 <__aeabi_fsub+0x2b4>
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d157      	bne.n	800096c <__aeabi_fsub+0x33c>
 80008bc:	28ff      	cmp	r0, #255	; 0xff
 80008be:	d1e6      	bne.n	800088e <__aeabi_fsub+0x25e>
 80008c0:	464b      	mov	r3, r9
 80008c2:	e77b      	b.n	80007bc <__aeabi_fsub+0x18c>
 80008c4:	2c00      	cmp	r4, #0
 80008c6:	d120      	bne.n	800090a <__aeabi_fsub+0x2da>
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d057      	beq.n	800097c <__aeabi_fsub+0x34c>
 80008cc:	4649      	mov	r1, r9
 80008ce:	2900      	cmp	r1, #0
 80008d0:	d053      	beq.n	800097a <__aeabi_fsub+0x34a>
 80008d2:	444b      	add	r3, r9
 80008d4:	015a      	lsls	r2, r3, #5
 80008d6:	d568      	bpl.n	80009aa <__aeabi_fsub+0x37a>
 80008d8:	2407      	movs	r4, #7
 80008da:	4a36      	ldr	r2, [pc, #216]	; (80009b4 <__aeabi_fsub+0x384>)
 80008dc:	401c      	ands	r4, r3
 80008de:	2501      	movs	r5, #1
 80008e0:	4013      	ands	r3, r2
 80008e2:	e6ea      	b.n	80006ba <__aeabi_fsub+0x8a>
 80008e4:	28ff      	cmp	r0, #255	; 0xff
 80008e6:	d0eb      	beq.n	80008c0 <__aeabi_fsub+0x290>
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	04d2      	lsls	r2, r2, #19
 80008ec:	4276      	negs	r6, r6
 80008ee:	4313      	orrs	r3, r2
 80008f0:	2e1b      	cmp	r6, #27
 80008f2:	dc53      	bgt.n	800099c <__aeabi_fsub+0x36c>
 80008f4:	2520      	movs	r5, #32
 80008f6:	1bad      	subs	r5, r5, r6
 80008f8:	001a      	movs	r2, r3
 80008fa:	40ab      	lsls	r3, r5
 80008fc:	40f2      	lsrs	r2, r6
 80008fe:	1e5c      	subs	r4, r3, #1
 8000900:	41a3      	sbcs	r3, r4
 8000902:	4313      	orrs	r3, r2
 8000904:	444b      	add	r3, r9
 8000906:	0005      	movs	r5, r0
 8000908:	e721      	b.n	800074e <__aeabi_fsub+0x11e>
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0d8      	beq.n	80008c0 <__aeabi_fsub+0x290>
 800090e:	4649      	mov	r1, r9
 8000910:	2900      	cmp	r1, #0
 8000912:	d100      	bne.n	8000916 <__aeabi_fsub+0x2e6>
 8000914:	e752      	b.n	80007bc <__aeabi_fsub+0x18c>
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	03c9      	lsls	r1, r1, #15
 800091a:	420f      	tst	r7, r1
 800091c:	d100      	bne.n	8000920 <__aeabi_fsub+0x2f0>
 800091e:	e74d      	b.n	80007bc <__aeabi_fsub+0x18c>
 8000920:	4660      	mov	r0, ip
 8000922:	4208      	tst	r0, r1
 8000924:	d000      	beq.n	8000928 <__aeabi_fsub+0x2f8>
 8000926:	e749      	b.n	80007bc <__aeabi_fsub+0x18c>
 8000928:	464b      	mov	r3, r9
 800092a:	e747      	b.n	80007bc <__aeabi_fsub+0x18c>
 800092c:	4648      	mov	r0, r9
 800092e:	25ff      	movs	r5, #255	; 0xff
 8000930:	2800      	cmp	r0, #0
 8000932:	d100      	bne.n	8000936 <__aeabi_fsub+0x306>
 8000934:	e74f      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	03d2      	lsls	r2, r2, #15
 800093a:	4217      	tst	r7, r2
 800093c:	d004      	beq.n	8000948 <__aeabi_fsub+0x318>
 800093e:	4660      	mov	r0, ip
 8000940:	4210      	tst	r0, r2
 8000942:	d101      	bne.n	8000948 <__aeabi_fsub+0x318>
 8000944:	464b      	mov	r3, r9
 8000946:	4688      	mov	r8, r1
 8000948:	2201      	movs	r2, #1
 800094a:	4641      	mov	r1, r8
 800094c:	25ff      	movs	r5, #255	; 0xff
 800094e:	400a      	ands	r2, r1
 8000950:	e741      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 8000952:	4648      	mov	r0, r9
 8000954:	2800      	cmp	r0, #0
 8000956:	d01f      	beq.n	8000998 <__aeabi_fsub+0x368>
 8000958:	1a1a      	subs	r2, r3, r0
 800095a:	0150      	lsls	r0, r2, #5
 800095c:	d520      	bpl.n	80009a0 <__aeabi_fsub+0x370>
 800095e:	464a      	mov	r2, r9
 8000960:	2407      	movs	r4, #7
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	401c      	ands	r4, r3
 8000966:	4688      	mov	r8, r1
 8000968:	2500      	movs	r5, #0
 800096a:	e6a6      	b.n	80006ba <__aeabi_fsub+0x8a>
 800096c:	1c74      	adds	r4, r6, #1
 800096e:	d0c9      	beq.n	8000904 <__aeabi_fsub+0x2d4>
 8000970:	43f6      	mvns	r6, r6
 8000972:	28ff      	cmp	r0, #255	; 0xff
 8000974:	d1bc      	bne.n	80008f0 <__aeabi_fsub+0x2c0>
 8000976:	464b      	mov	r3, r9
 8000978:	e720      	b.n	80007bc <__aeabi_fsub+0x18c>
 800097a:	4699      	mov	r9, r3
 800097c:	464b      	mov	r3, r9
 800097e:	2500      	movs	r5, #0
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	e72b      	b.n	80007dc <__aeabi_fsub+0x1ac>
 8000984:	2301      	movs	r3, #1
 8000986:	e740      	b.n	800080a <__aeabi_fsub+0x1da>
 8000988:	2200      	movs	r2, #0
 800098a:	2300      	movs	r3, #0
 800098c:	e6a9      	b.n	80006e2 <__aeabi_fsub+0xb2>
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	2200      	movs	r2, #0
 8000992:	03db      	lsls	r3, r3, #15
 8000994:	24ff      	movs	r4, #255	; 0xff
 8000996:	e6a4      	b.n	80006e2 <__aeabi_fsub+0xb2>
 8000998:	2500      	movs	r5, #0
 800099a:	e71c      	b.n	80007d6 <__aeabi_fsub+0x1a6>
 800099c:	2301      	movs	r3, #1
 800099e:	e7b1      	b.n	8000904 <__aeabi_fsub+0x2d4>
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	d0f1      	beq.n	8000988 <__aeabi_fsub+0x358>
 80009a4:	0013      	movs	r3, r2
 80009a6:	2500      	movs	r5, #0
 80009a8:	e6fc      	b.n	80007a4 <__aeabi_fsub+0x174>
 80009aa:	2500      	movs	r5, #0
 80009ac:	e6fa      	b.n	80007a4 <__aeabi_fsub+0x174>
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	7dffffff 	.word	0x7dffffff
 80009b4:	fbffffff 	.word	0xfbffffff

080009b8 <__aeabi_i2f>:
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d03d      	beq.n	8000a3a <__aeabi_i2f+0x82>
 80009be:	17c3      	asrs	r3, r0, #31
 80009c0:	18c5      	adds	r5, r0, r3
 80009c2:	405d      	eors	r5, r3
 80009c4:	0fc4      	lsrs	r4, r0, #31
 80009c6:	0028      	movs	r0, r5
 80009c8:	f001 fda2 	bl	8002510 <__clzsi2>
 80009cc:	229e      	movs	r2, #158	; 0x9e
 80009ce:	1a12      	subs	r2, r2, r0
 80009d0:	2a96      	cmp	r2, #150	; 0x96
 80009d2:	dc07      	bgt.n	80009e4 <__aeabi_i2f+0x2c>
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	2808      	cmp	r0, #8
 80009d8:	dd33      	ble.n	8000a42 <__aeabi_i2f+0x8a>
 80009da:	3808      	subs	r0, #8
 80009dc:	4085      	lsls	r5, r0
 80009de:	0268      	lsls	r0, r5, #9
 80009e0:	0a40      	lsrs	r0, r0, #9
 80009e2:	e023      	b.n	8000a2c <__aeabi_i2f+0x74>
 80009e4:	2a99      	cmp	r2, #153	; 0x99
 80009e6:	dd0b      	ble.n	8000a00 <__aeabi_i2f+0x48>
 80009e8:	2305      	movs	r3, #5
 80009ea:	0029      	movs	r1, r5
 80009ec:	1a1b      	subs	r3, r3, r0
 80009ee:	40d9      	lsrs	r1, r3
 80009f0:	0003      	movs	r3, r0
 80009f2:	331b      	adds	r3, #27
 80009f4:	409d      	lsls	r5, r3
 80009f6:	002b      	movs	r3, r5
 80009f8:	1e5d      	subs	r5, r3, #1
 80009fa:	41ab      	sbcs	r3, r5
 80009fc:	4319      	orrs	r1, r3
 80009fe:	000d      	movs	r5, r1
 8000a00:	2805      	cmp	r0, #5
 8000a02:	dd01      	ble.n	8000a08 <__aeabi_i2f+0x50>
 8000a04:	1f43      	subs	r3, r0, #5
 8000a06:	409d      	lsls	r5, r3
 8000a08:	002b      	movs	r3, r5
 8000a0a:	490f      	ldr	r1, [pc, #60]	; (8000a48 <__aeabi_i2f+0x90>)
 8000a0c:	400b      	ands	r3, r1
 8000a0e:	076e      	lsls	r6, r5, #29
 8000a10:	d009      	beq.n	8000a26 <__aeabi_i2f+0x6e>
 8000a12:	260f      	movs	r6, #15
 8000a14:	4035      	ands	r5, r6
 8000a16:	2d04      	cmp	r5, #4
 8000a18:	d005      	beq.n	8000a26 <__aeabi_i2f+0x6e>
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	015d      	lsls	r5, r3, #5
 8000a1e:	d502      	bpl.n	8000a26 <__aeabi_i2f+0x6e>
 8000a20:	229f      	movs	r2, #159	; 0x9f
 8000a22:	400b      	ands	r3, r1
 8000a24:	1a12      	subs	r2, r2, r0
 8000a26:	019b      	lsls	r3, r3, #6
 8000a28:	0a58      	lsrs	r0, r3, #9
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	0240      	lsls	r0, r0, #9
 8000a2e:	05d2      	lsls	r2, r2, #23
 8000a30:	0a40      	lsrs	r0, r0, #9
 8000a32:	07e4      	lsls	r4, r4, #31
 8000a34:	4310      	orrs	r0, r2
 8000a36:	4320      	orrs	r0, r4
 8000a38:	bd70      	pop	{r4, r5, r6, pc}
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	e7f4      	b.n	8000a2c <__aeabi_i2f+0x74>
 8000a42:	0268      	lsls	r0, r5, #9
 8000a44:	0a40      	lsrs	r0, r0, #9
 8000a46:	e7f1      	b.n	8000a2c <__aeabi_i2f+0x74>
 8000a48:	fbffffff 	.word	0xfbffffff

08000a4c <__aeabi_ui2f>:
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	1e04      	subs	r4, r0, #0
 8000a50:	d034      	beq.n	8000abc <__aeabi_ui2f+0x70>
 8000a52:	f001 fd5d 	bl	8002510 <__clzsi2>
 8000a56:	229e      	movs	r2, #158	; 0x9e
 8000a58:	1a12      	subs	r2, r2, r0
 8000a5a:	2a96      	cmp	r2, #150	; 0x96
 8000a5c:	dc07      	bgt.n	8000a6e <__aeabi_ui2f+0x22>
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	2808      	cmp	r0, #8
 8000a62:	dd2e      	ble.n	8000ac2 <__aeabi_ui2f+0x76>
 8000a64:	3808      	subs	r0, #8
 8000a66:	4084      	lsls	r4, r0
 8000a68:	0260      	lsls	r0, r4, #9
 8000a6a:	0a40      	lsrs	r0, r0, #9
 8000a6c:	e021      	b.n	8000ab2 <__aeabi_ui2f+0x66>
 8000a6e:	2a99      	cmp	r2, #153	; 0x99
 8000a70:	dd09      	ble.n	8000a86 <__aeabi_ui2f+0x3a>
 8000a72:	0003      	movs	r3, r0
 8000a74:	0021      	movs	r1, r4
 8000a76:	331b      	adds	r3, #27
 8000a78:	4099      	lsls	r1, r3
 8000a7a:	1e4b      	subs	r3, r1, #1
 8000a7c:	4199      	sbcs	r1, r3
 8000a7e:	2305      	movs	r3, #5
 8000a80:	1a1b      	subs	r3, r3, r0
 8000a82:	40dc      	lsrs	r4, r3
 8000a84:	430c      	orrs	r4, r1
 8000a86:	2805      	cmp	r0, #5
 8000a88:	dd01      	ble.n	8000a8e <__aeabi_ui2f+0x42>
 8000a8a:	1f43      	subs	r3, r0, #5
 8000a8c:	409c      	lsls	r4, r3
 8000a8e:	0023      	movs	r3, r4
 8000a90:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <__aeabi_ui2f+0x7c>)
 8000a92:	400b      	ands	r3, r1
 8000a94:	0765      	lsls	r5, r4, #29
 8000a96:	d009      	beq.n	8000aac <__aeabi_ui2f+0x60>
 8000a98:	250f      	movs	r5, #15
 8000a9a:	402c      	ands	r4, r5
 8000a9c:	2c04      	cmp	r4, #4
 8000a9e:	d005      	beq.n	8000aac <__aeabi_ui2f+0x60>
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	015c      	lsls	r4, r3, #5
 8000aa4:	d502      	bpl.n	8000aac <__aeabi_ui2f+0x60>
 8000aa6:	229f      	movs	r2, #159	; 0x9f
 8000aa8:	400b      	ands	r3, r1
 8000aaa:	1a12      	subs	r2, r2, r0
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	0a58      	lsrs	r0, r3, #9
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	0240      	lsls	r0, r0, #9
 8000ab4:	05d2      	lsls	r2, r2, #23
 8000ab6:	0a40      	lsrs	r0, r0, #9
 8000ab8:	4310      	orrs	r0, r2
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
 8000abc:	2200      	movs	r2, #0
 8000abe:	2000      	movs	r0, #0
 8000ac0:	e7f7      	b.n	8000ab2 <__aeabi_ui2f+0x66>
 8000ac2:	0260      	lsls	r0, r4, #9
 8000ac4:	0a40      	lsrs	r0, r0, #9
 8000ac6:	e7f4      	b.n	8000ab2 <__aeabi_ui2f+0x66>
 8000ac8:	fbffffff 	.word	0xfbffffff

08000acc <__aeabi_dadd>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	464f      	mov	r7, r9
 8000ad0:	4646      	mov	r6, r8
 8000ad2:	46d6      	mov	lr, sl
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	0309      	lsls	r1, r1, #12
 8000ad8:	b5c0      	push	{r6, r7, lr}
 8000ada:	0a49      	lsrs	r1, r1, #9
 8000adc:	0f47      	lsrs	r7, r0, #29
 8000ade:	005e      	lsls	r6, r3, #1
 8000ae0:	4339      	orrs	r1, r7
 8000ae2:	031f      	lsls	r7, r3, #12
 8000ae4:	0fdb      	lsrs	r3, r3, #31
 8000ae6:	469c      	mov	ip, r3
 8000ae8:	0065      	lsls	r5, r4, #1
 8000aea:	0a7b      	lsrs	r3, r7, #9
 8000aec:	0f57      	lsrs	r7, r2, #29
 8000aee:	431f      	orrs	r7, r3
 8000af0:	0d6d      	lsrs	r5, r5, #21
 8000af2:	0fe4      	lsrs	r4, r4, #31
 8000af4:	0d76      	lsrs	r6, r6, #21
 8000af6:	46a1      	mov	r9, r4
 8000af8:	00c0      	lsls	r0, r0, #3
 8000afa:	46b8      	mov	r8, r7
 8000afc:	00d2      	lsls	r2, r2, #3
 8000afe:	1bab      	subs	r3, r5, r6
 8000b00:	4564      	cmp	r4, ip
 8000b02:	d07b      	beq.n	8000bfc <__aeabi_dadd+0x130>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	dd5f      	ble.n	8000bc8 <__aeabi_dadd+0xfc>
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x42>
 8000b0c:	e0a4      	b.n	8000c58 <__aeabi_dadd+0x18c>
 8000b0e:	003e      	movs	r6, r7
 8000b10:	4316      	orrs	r6, r2
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x4a>
 8000b14:	e112      	b.n	8000d3c <__aeabi_dadd+0x270>
 8000b16:	1e5e      	subs	r6, r3, #1
 8000b18:	2e00      	cmp	r6, #0
 8000b1a:	d000      	beq.n	8000b1e <__aeabi_dadd+0x52>
 8000b1c:	e19e      	b.n	8000e5c <__aeabi_dadd+0x390>
 8000b1e:	1a87      	subs	r7, r0, r2
 8000b20:	4643      	mov	r3, r8
 8000b22:	42b8      	cmp	r0, r7
 8000b24:	4180      	sbcs	r0, r0
 8000b26:	2501      	movs	r5, #1
 8000b28:	1ac9      	subs	r1, r1, r3
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	1a09      	subs	r1, r1, r0
 8000b2e:	020b      	lsls	r3, r1, #8
 8000b30:	d400      	bmi.n	8000b34 <__aeabi_dadd+0x68>
 8000b32:	e131      	b.n	8000d98 <__aeabi_dadd+0x2cc>
 8000b34:	0249      	lsls	r1, r1, #9
 8000b36:	0a4e      	lsrs	r6, r1, #9
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x72>
 8000b3c:	e16e      	b.n	8000e1c <__aeabi_dadd+0x350>
 8000b3e:	0030      	movs	r0, r6
 8000b40:	f001 fce6 	bl	8002510 <__clzsi2>
 8000b44:	0003      	movs	r3, r0
 8000b46:	3b08      	subs	r3, #8
 8000b48:	2b1f      	cmp	r3, #31
 8000b4a:	dd00      	ble.n	8000b4e <__aeabi_dadd+0x82>
 8000b4c:	e161      	b.n	8000e12 <__aeabi_dadd+0x346>
 8000b4e:	2220      	movs	r2, #32
 8000b50:	0039      	movs	r1, r7
 8000b52:	1ad2      	subs	r2, r2, r3
 8000b54:	409e      	lsls	r6, r3
 8000b56:	40d1      	lsrs	r1, r2
 8000b58:	409f      	lsls	r7, r3
 8000b5a:	430e      	orrs	r6, r1
 8000b5c:	429d      	cmp	r5, r3
 8000b5e:	dd00      	ble.n	8000b62 <__aeabi_dadd+0x96>
 8000b60:	e151      	b.n	8000e06 <__aeabi_dadd+0x33a>
 8000b62:	1b5d      	subs	r5, r3, r5
 8000b64:	1c6b      	adds	r3, r5, #1
 8000b66:	2b1f      	cmp	r3, #31
 8000b68:	dd00      	ble.n	8000b6c <__aeabi_dadd+0xa0>
 8000b6a:	e17c      	b.n	8000e66 <__aeabi_dadd+0x39a>
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	1ac9      	subs	r1, r1, r3
 8000b70:	003d      	movs	r5, r7
 8000b72:	0030      	movs	r0, r6
 8000b74:	408f      	lsls	r7, r1
 8000b76:	4088      	lsls	r0, r1
 8000b78:	40dd      	lsrs	r5, r3
 8000b7a:	1e79      	subs	r1, r7, #1
 8000b7c:	418f      	sbcs	r7, r1
 8000b7e:	0031      	movs	r1, r6
 8000b80:	2207      	movs	r2, #7
 8000b82:	4328      	orrs	r0, r5
 8000b84:	40d9      	lsrs	r1, r3
 8000b86:	2500      	movs	r5, #0
 8000b88:	4307      	orrs	r7, r0
 8000b8a:	403a      	ands	r2, r7
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d009      	beq.n	8000ba4 <__aeabi_dadd+0xd8>
 8000b90:	230f      	movs	r3, #15
 8000b92:	403b      	ands	r3, r7
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d005      	beq.n	8000ba4 <__aeabi_dadd+0xd8>
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	42bb      	cmp	r3, r7
 8000b9c:	41bf      	sbcs	r7, r7
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	19c9      	adds	r1, r1, r7
 8000ba2:	001f      	movs	r7, r3
 8000ba4:	020b      	lsls	r3, r1, #8
 8000ba6:	d400      	bmi.n	8000baa <__aeabi_dadd+0xde>
 8000ba8:	e226      	b.n	8000ff8 <__aeabi_dadd+0x52c>
 8000baa:	1c6a      	adds	r2, r5, #1
 8000bac:	4bc6      	ldr	r3, [pc, #792]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000bae:	0555      	lsls	r5, r2, #21
 8000bb0:	0d6d      	lsrs	r5, r5, #21
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dadd+0xec>
 8000bb6:	e106      	b.n	8000dc6 <__aeabi_dadd+0x2fa>
 8000bb8:	4ac4      	ldr	r2, [pc, #784]	; (8000ecc <__aeabi_dadd+0x400>)
 8000bba:	08ff      	lsrs	r7, r7, #3
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	0753      	lsls	r3, r2, #29
 8000bc0:	0252      	lsls	r2, r2, #9
 8000bc2:	433b      	orrs	r3, r7
 8000bc4:	0b12      	lsrs	r2, r2, #12
 8000bc6:	e08e      	b.n	8000ce6 <__aeabi_dadd+0x21a>
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d000      	beq.n	8000bce <__aeabi_dadd+0x102>
 8000bcc:	e0b8      	b.n	8000d40 <__aeabi_dadd+0x274>
 8000bce:	1c6b      	adds	r3, r5, #1
 8000bd0:	055b      	lsls	r3, r3, #21
 8000bd2:	0d5b      	lsrs	r3, r3, #21
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	dc00      	bgt.n	8000bda <__aeabi_dadd+0x10e>
 8000bd8:	e130      	b.n	8000e3c <__aeabi_dadd+0x370>
 8000bda:	1a87      	subs	r7, r0, r2
 8000bdc:	4643      	mov	r3, r8
 8000bde:	42b8      	cmp	r0, r7
 8000be0:	41b6      	sbcs	r6, r6
 8000be2:	1acb      	subs	r3, r1, r3
 8000be4:	4276      	negs	r6, r6
 8000be6:	1b9e      	subs	r6, r3, r6
 8000be8:	0233      	lsls	r3, r6, #8
 8000bea:	d500      	bpl.n	8000bee <__aeabi_dadd+0x122>
 8000bec:	e14c      	b.n	8000e88 <__aeabi_dadd+0x3bc>
 8000bee:	003b      	movs	r3, r7
 8000bf0:	4333      	orrs	r3, r6
 8000bf2:	d1a1      	bne.n	8000b38 <__aeabi_dadd+0x6c>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2400      	movs	r4, #0
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	e070      	b.n	8000cde <__aeabi_dadd+0x212>
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	dc00      	bgt.n	8000c02 <__aeabi_dadd+0x136>
 8000c00:	e0e5      	b.n	8000dce <__aeabi_dadd+0x302>
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d100      	bne.n	8000c08 <__aeabi_dadd+0x13c>
 8000c06:	e083      	b.n	8000d10 <__aeabi_dadd+0x244>
 8000c08:	4eaf      	ldr	r6, [pc, #700]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000c0a:	42b5      	cmp	r5, r6
 8000c0c:	d060      	beq.n	8000cd0 <__aeabi_dadd+0x204>
 8000c0e:	2680      	movs	r6, #128	; 0x80
 8000c10:	0436      	lsls	r6, r6, #16
 8000c12:	4337      	orrs	r7, r6
 8000c14:	46b8      	mov	r8, r7
 8000c16:	2b38      	cmp	r3, #56	; 0x38
 8000c18:	dc00      	bgt.n	8000c1c <__aeabi_dadd+0x150>
 8000c1a:	e13e      	b.n	8000e9a <__aeabi_dadd+0x3ce>
 8000c1c:	4643      	mov	r3, r8
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	001f      	movs	r7, r3
 8000c22:	1e7a      	subs	r2, r7, #1
 8000c24:	4197      	sbcs	r7, r2
 8000c26:	183f      	adds	r7, r7, r0
 8000c28:	4287      	cmp	r7, r0
 8000c2a:	4180      	sbcs	r0, r0
 8000c2c:	4240      	negs	r0, r0
 8000c2e:	1809      	adds	r1, r1, r0
 8000c30:	020b      	lsls	r3, r1, #8
 8000c32:	d400      	bmi.n	8000c36 <__aeabi_dadd+0x16a>
 8000c34:	e0b0      	b.n	8000d98 <__aeabi_dadd+0x2cc>
 8000c36:	4ba4      	ldr	r3, [pc, #656]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000c38:	3501      	adds	r5, #1
 8000c3a:	429d      	cmp	r5, r3
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dadd+0x174>
 8000c3e:	e0c3      	b.n	8000dc8 <__aeabi_dadd+0x2fc>
 8000c40:	4aa2      	ldr	r2, [pc, #648]	; (8000ecc <__aeabi_dadd+0x400>)
 8000c42:	087b      	lsrs	r3, r7, #1
 8000c44:	400a      	ands	r2, r1
 8000c46:	2101      	movs	r1, #1
 8000c48:	400f      	ands	r7, r1
 8000c4a:	431f      	orrs	r7, r3
 8000c4c:	0851      	lsrs	r1, r2, #1
 8000c4e:	07d3      	lsls	r3, r2, #31
 8000c50:	2207      	movs	r2, #7
 8000c52:	431f      	orrs	r7, r3
 8000c54:	403a      	ands	r2, r7
 8000c56:	e799      	b.n	8000b8c <__aeabi_dadd+0xc0>
 8000c58:	4e9b      	ldr	r6, [pc, #620]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000c5a:	42b5      	cmp	r5, r6
 8000c5c:	d038      	beq.n	8000cd0 <__aeabi_dadd+0x204>
 8000c5e:	2680      	movs	r6, #128	; 0x80
 8000c60:	0436      	lsls	r6, r6, #16
 8000c62:	4337      	orrs	r7, r6
 8000c64:	46b8      	mov	r8, r7
 8000c66:	2b38      	cmp	r3, #56	; 0x38
 8000c68:	dd00      	ble.n	8000c6c <__aeabi_dadd+0x1a0>
 8000c6a:	e0dc      	b.n	8000e26 <__aeabi_dadd+0x35a>
 8000c6c:	2b1f      	cmp	r3, #31
 8000c6e:	dc00      	bgt.n	8000c72 <__aeabi_dadd+0x1a6>
 8000c70:	e130      	b.n	8000ed4 <__aeabi_dadd+0x408>
 8000c72:	001e      	movs	r6, r3
 8000c74:	4647      	mov	r7, r8
 8000c76:	3e20      	subs	r6, #32
 8000c78:	40f7      	lsrs	r7, r6
 8000c7a:	46bc      	mov	ip, r7
 8000c7c:	2b20      	cmp	r3, #32
 8000c7e:	d004      	beq.n	8000c8a <__aeabi_dadd+0x1be>
 8000c80:	2640      	movs	r6, #64	; 0x40
 8000c82:	1af3      	subs	r3, r6, r3
 8000c84:	4646      	mov	r6, r8
 8000c86:	409e      	lsls	r6, r3
 8000c88:	4332      	orrs	r2, r6
 8000c8a:	0017      	movs	r7, r2
 8000c8c:	4663      	mov	r3, ip
 8000c8e:	1e7a      	subs	r2, r7, #1
 8000c90:	4197      	sbcs	r7, r2
 8000c92:	431f      	orrs	r7, r3
 8000c94:	e0cc      	b.n	8000e30 <__aeabi_dadd+0x364>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d100      	bne.n	8000c9c <__aeabi_dadd+0x1d0>
 8000c9a:	e204      	b.n	80010a6 <__aeabi_dadd+0x5da>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_dadd+0x1d8>
 8000ca2:	e159      	b.n	8000f58 <__aeabi_dadd+0x48c>
 8000ca4:	074b      	lsls	r3, r1, #29
 8000ca6:	08c0      	lsrs	r0, r0, #3
 8000ca8:	4318      	orrs	r0, r3
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	08c9      	lsrs	r1, r1, #3
 8000cae:	031b      	lsls	r3, r3, #12
 8000cb0:	4219      	tst	r1, r3
 8000cb2:	d008      	beq.n	8000cc6 <__aeabi_dadd+0x1fa>
 8000cb4:	4645      	mov	r5, r8
 8000cb6:	08ed      	lsrs	r5, r5, #3
 8000cb8:	421d      	tst	r5, r3
 8000cba:	d104      	bne.n	8000cc6 <__aeabi_dadd+0x1fa>
 8000cbc:	4643      	mov	r3, r8
 8000cbe:	08d0      	lsrs	r0, r2, #3
 8000cc0:	0759      	lsls	r1, r3, #29
 8000cc2:	4308      	orrs	r0, r1
 8000cc4:	0029      	movs	r1, r5
 8000cc6:	0f42      	lsrs	r2, r0, #29
 8000cc8:	00c9      	lsls	r1, r1, #3
 8000cca:	4d7f      	ldr	r5, [pc, #508]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000ccc:	4311      	orrs	r1, r2
 8000cce:	00c0      	lsls	r0, r0, #3
 8000cd0:	074b      	lsls	r3, r1, #29
 8000cd2:	08ca      	lsrs	r2, r1, #3
 8000cd4:	497c      	ldr	r1, [pc, #496]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000cd6:	08c0      	lsrs	r0, r0, #3
 8000cd8:	4303      	orrs	r3, r0
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	d068      	beq.n	8000db0 <__aeabi_dadd+0x2e4>
 8000cde:	0312      	lsls	r2, r2, #12
 8000ce0:	056d      	lsls	r5, r5, #21
 8000ce2:	0b12      	lsrs	r2, r2, #12
 8000ce4:	0d6d      	lsrs	r5, r5, #21
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	0312      	lsls	r2, r2, #12
 8000cea:	0018      	movs	r0, r3
 8000cec:	0b13      	lsrs	r3, r2, #12
 8000cee:	0d0a      	lsrs	r2, r1, #20
 8000cf0:	0512      	lsls	r2, r2, #20
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	4b76      	ldr	r3, [pc, #472]	; (8000ed0 <__aeabi_dadd+0x404>)
 8000cf6:	052d      	lsls	r5, r5, #20
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	432b      	orrs	r3, r5
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	07e4      	lsls	r4, r4, #31
 8000d00:	085b      	lsrs	r3, r3, #1
 8000d02:	4323      	orrs	r3, r4
 8000d04:	0019      	movs	r1, r3
 8000d06:	bc1c      	pop	{r2, r3, r4}
 8000d08:	4690      	mov	r8, r2
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	46a2      	mov	sl, r4
 8000d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d10:	003e      	movs	r6, r7
 8000d12:	4316      	orrs	r6, r2
 8000d14:	d012      	beq.n	8000d3c <__aeabi_dadd+0x270>
 8000d16:	1e5e      	subs	r6, r3, #1
 8000d18:	2e00      	cmp	r6, #0
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x252>
 8000d1c:	e100      	b.n	8000f20 <__aeabi_dadd+0x454>
 8000d1e:	1887      	adds	r7, r0, r2
 8000d20:	4287      	cmp	r7, r0
 8000d22:	4180      	sbcs	r0, r0
 8000d24:	4441      	add	r1, r8
 8000d26:	4240      	negs	r0, r0
 8000d28:	1809      	adds	r1, r1, r0
 8000d2a:	2501      	movs	r5, #1
 8000d2c:	020b      	lsls	r3, r1, #8
 8000d2e:	d533      	bpl.n	8000d98 <__aeabi_dadd+0x2cc>
 8000d30:	2502      	movs	r5, #2
 8000d32:	e785      	b.n	8000c40 <__aeabi_dadd+0x174>
 8000d34:	4664      	mov	r4, ip
 8000d36:	0033      	movs	r3, r6
 8000d38:	4641      	mov	r1, r8
 8000d3a:	0010      	movs	r0, r2
 8000d3c:	001d      	movs	r5, r3
 8000d3e:	e7c7      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000d40:	2d00      	cmp	r5, #0
 8000d42:	d000      	beq.n	8000d46 <__aeabi_dadd+0x27a>
 8000d44:	e0da      	b.n	8000efc <__aeabi_dadd+0x430>
 8000d46:	000c      	movs	r4, r1
 8000d48:	4304      	orrs	r4, r0
 8000d4a:	d0f3      	beq.n	8000d34 <__aeabi_dadd+0x268>
 8000d4c:	1c5c      	adds	r4, r3, #1
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_dadd+0x286>
 8000d50:	e19f      	b.n	8001092 <__aeabi_dadd+0x5c6>
 8000d52:	4c5d      	ldr	r4, [pc, #372]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000d54:	42a6      	cmp	r6, r4
 8000d56:	d100      	bne.n	8000d5a <__aeabi_dadd+0x28e>
 8000d58:	e12f      	b.n	8000fba <__aeabi_dadd+0x4ee>
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	2b38      	cmp	r3, #56	; 0x38
 8000d5e:	dd00      	ble.n	8000d62 <__aeabi_dadd+0x296>
 8000d60:	e166      	b.n	8001030 <__aeabi_dadd+0x564>
 8000d62:	2b1f      	cmp	r3, #31
 8000d64:	dd00      	ble.n	8000d68 <__aeabi_dadd+0x29c>
 8000d66:	e183      	b.n	8001070 <__aeabi_dadd+0x5a4>
 8000d68:	2420      	movs	r4, #32
 8000d6a:	0005      	movs	r5, r0
 8000d6c:	1ae4      	subs	r4, r4, r3
 8000d6e:	000f      	movs	r7, r1
 8000d70:	40dd      	lsrs	r5, r3
 8000d72:	40d9      	lsrs	r1, r3
 8000d74:	40a0      	lsls	r0, r4
 8000d76:	4643      	mov	r3, r8
 8000d78:	40a7      	lsls	r7, r4
 8000d7a:	1a5b      	subs	r3, r3, r1
 8000d7c:	1e44      	subs	r4, r0, #1
 8000d7e:	41a0      	sbcs	r0, r4
 8000d80:	4698      	mov	r8, r3
 8000d82:	432f      	orrs	r7, r5
 8000d84:	4338      	orrs	r0, r7
 8000d86:	1a17      	subs	r7, r2, r0
 8000d88:	42ba      	cmp	r2, r7
 8000d8a:	4192      	sbcs	r2, r2
 8000d8c:	4643      	mov	r3, r8
 8000d8e:	4252      	negs	r2, r2
 8000d90:	1a99      	subs	r1, r3, r2
 8000d92:	4664      	mov	r4, ip
 8000d94:	0035      	movs	r5, r6
 8000d96:	e6ca      	b.n	8000b2e <__aeabi_dadd+0x62>
 8000d98:	2207      	movs	r2, #7
 8000d9a:	403a      	ands	r2, r7
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_dadd+0x2d6>
 8000da0:	e6f6      	b.n	8000b90 <__aeabi_dadd+0xc4>
 8000da2:	074b      	lsls	r3, r1, #29
 8000da4:	08ca      	lsrs	r2, r1, #3
 8000da6:	4948      	ldr	r1, [pc, #288]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000da8:	08ff      	lsrs	r7, r7, #3
 8000daa:	433b      	orrs	r3, r7
 8000dac:	428d      	cmp	r5, r1
 8000dae:	d196      	bne.n	8000cde <__aeabi_dadd+0x212>
 8000db0:	0019      	movs	r1, r3
 8000db2:	4311      	orrs	r1, r2
 8000db4:	d100      	bne.n	8000db8 <__aeabi_dadd+0x2ec>
 8000db6:	e19e      	b.n	80010f6 <__aeabi_dadd+0x62a>
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	0309      	lsls	r1, r1, #12
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	0312      	lsls	r2, r2, #12
 8000dc0:	0b12      	lsrs	r2, r2, #12
 8000dc2:	4d41      	ldr	r5, [pc, #260]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000dc4:	e78f      	b.n	8000ce6 <__aeabi_dadd+0x21a>
 8000dc6:	0015      	movs	r5, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e78b      	b.n	8000ce6 <__aeabi_dadd+0x21a>
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_dadd+0x308>
 8000dd2:	e0c7      	b.n	8000f64 <__aeabi_dadd+0x498>
 8000dd4:	1c6b      	adds	r3, r5, #1
 8000dd6:	055f      	lsls	r7, r3, #21
 8000dd8:	0d7f      	lsrs	r7, r7, #21
 8000dda:	2f01      	cmp	r7, #1
 8000ddc:	dc00      	bgt.n	8000de0 <__aeabi_dadd+0x314>
 8000dde:	e0f1      	b.n	8000fc4 <__aeabi_dadd+0x4f8>
 8000de0:	4d39      	ldr	r5, [pc, #228]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d100      	bne.n	8000de8 <__aeabi_dadd+0x31c>
 8000de6:	e0b9      	b.n	8000f5c <__aeabi_dadd+0x490>
 8000de8:	1885      	adds	r5, r0, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	4285      	cmp	r5, r0
 8000dee:	4189      	sbcs	r1, r1
 8000df0:	4442      	add	r2, r8
 8000df2:	4249      	negs	r1, r1
 8000df4:	1851      	adds	r1, r2, r1
 8000df6:	2207      	movs	r2, #7
 8000df8:	07cf      	lsls	r7, r1, #31
 8000dfa:	086d      	lsrs	r5, r5, #1
 8000dfc:	432f      	orrs	r7, r5
 8000dfe:	0849      	lsrs	r1, r1, #1
 8000e00:	403a      	ands	r2, r7
 8000e02:	001d      	movs	r5, r3
 8000e04:	e6c2      	b.n	8000b8c <__aeabi_dadd+0xc0>
 8000e06:	2207      	movs	r2, #7
 8000e08:	4930      	ldr	r1, [pc, #192]	; (8000ecc <__aeabi_dadd+0x400>)
 8000e0a:	1aed      	subs	r5, r5, r3
 8000e0c:	4031      	ands	r1, r6
 8000e0e:	403a      	ands	r2, r7
 8000e10:	e6bc      	b.n	8000b8c <__aeabi_dadd+0xc0>
 8000e12:	003e      	movs	r6, r7
 8000e14:	3828      	subs	r0, #40	; 0x28
 8000e16:	4086      	lsls	r6, r0
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e69f      	b.n	8000b5c <__aeabi_dadd+0x90>
 8000e1c:	0038      	movs	r0, r7
 8000e1e:	f001 fb77 	bl	8002510 <__clzsi2>
 8000e22:	3020      	adds	r0, #32
 8000e24:	e68e      	b.n	8000b44 <__aeabi_dadd+0x78>
 8000e26:	4643      	mov	r3, r8
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	001f      	movs	r7, r3
 8000e2c:	1e7a      	subs	r2, r7, #1
 8000e2e:	4197      	sbcs	r7, r2
 8000e30:	1bc7      	subs	r7, r0, r7
 8000e32:	42b8      	cmp	r0, r7
 8000e34:	4180      	sbcs	r0, r0
 8000e36:	4240      	negs	r0, r0
 8000e38:	1a09      	subs	r1, r1, r0
 8000e3a:	e678      	b.n	8000b2e <__aeabi_dadd+0x62>
 8000e3c:	000e      	movs	r6, r1
 8000e3e:	003b      	movs	r3, r7
 8000e40:	4306      	orrs	r6, r0
 8000e42:	4313      	orrs	r3, r2
 8000e44:	2d00      	cmp	r5, #0
 8000e46:	d161      	bne.n	8000f0c <__aeabi_dadd+0x440>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_dadd+0x382>
 8000e4c:	e0f4      	b.n	8001038 <__aeabi_dadd+0x56c>
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d100      	bne.n	8000e54 <__aeabi_dadd+0x388>
 8000e52:	e11b      	b.n	800108c <__aeabi_dadd+0x5c0>
 8000e54:	4664      	mov	r4, ip
 8000e56:	0039      	movs	r1, r7
 8000e58:	0010      	movs	r0, r2
 8000e5a:	e739      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000e5c:	4f1a      	ldr	r7, [pc, #104]	; (8000ec8 <__aeabi_dadd+0x3fc>)
 8000e5e:	42bb      	cmp	r3, r7
 8000e60:	d07a      	beq.n	8000f58 <__aeabi_dadd+0x48c>
 8000e62:	0033      	movs	r3, r6
 8000e64:	e6ff      	b.n	8000c66 <__aeabi_dadd+0x19a>
 8000e66:	0030      	movs	r0, r6
 8000e68:	3d1f      	subs	r5, #31
 8000e6a:	40e8      	lsrs	r0, r5
 8000e6c:	2b20      	cmp	r3, #32
 8000e6e:	d003      	beq.n	8000e78 <__aeabi_dadd+0x3ac>
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	1acb      	subs	r3, r1, r3
 8000e74:	409e      	lsls	r6, r3
 8000e76:	4337      	orrs	r7, r6
 8000e78:	1e7b      	subs	r3, r7, #1
 8000e7a:	419f      	sbcs	r7, r3
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	4307      	orrs	r7, r0
 8000e80:	403a      	ands	r2, r7
 8000e82:	2100      	movs	r1, #0
 8000e84:	2500      	movs	r5, #0
 8000e86:	e789      	b.n	8000d9c <__aeabi_dadd+0x2d0>
 8000e88:	1a17      	subs	r7, r2, r0
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	42ba      	cmp	r2, r7
 8000e8e:	41b6      	sbcs	r6, r6
 8000e90:	1a59      	subs	r1, r3, r1
 8000e92:	4276      	negs	r6, r6
 8000e94:	1b8e      	subs	r6, r1, r6
 8000e96:	4664      	mov	r4, ip
 8000e98:	e64e      	b.n	8000b38 <__aeabi_dadd+0x6c>
 8000e9a:	2b1f      	cmp	r3, #31
 8000e9c:	dd00      	ble.n	8000ea0 <__aeabi_dadd+0x3d4>
 8000e9e:	e0ad      	b.n	8000ffc <__aeabi_dadd+0x530>
 8000ea0:	2620      	movs	r6, #32
 8000ea2:	4647      	mov	r7, r8
 8000ea4:	1af6      	subs	r6, r6, r3
 8000ea6:	40b7      	lsls	r7, r6
 8000ea8:	46b9      	mov	r9, r7
 8000eaa:	0017      	movs	r7, r2
 8000eac:	46b2      	mov	sl, r6
 8000eae:	40df      	lsrs	r7, r3
 8000eb0:	464e      	mov	r6, r9
 8000eb2:	433e      	orrs	r6, r7
 8000eb4:	0037      	movs	r7, r6
 8000eb6:	4656      	mov	r6, sl
 8000eb8:	40b2      	lsls	r2, r6
 8000eba:	1e56      	subs	r6, r2, #1
 8000ebc:	41b2      	sbcs	r2, r6
 8000ebe:	4317      	orrs	r7, r2
 8000ec0:	4642      	mov	r2, r8
 8000ec2:	40da      	lsrs	r2, r3
 8000ec4:	1889      	adds	r1, r1, r2
 8000ec6:	e6ae      	b.n	8000c26 <__aeabi_dadd+0x15a>
 8000ec8:	000007ff 	.word	0x000007ff
 8000ecc:	ff7fffff 	.word	0xff7fffff
 8000ed0:	800fffff 	.word	0x800fffff
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	4647      	mov	r7, r8
 8000ed8:	1af6      	subs	r6, r6, r3
 8000eda:	40b7      	lsls	r7, r6
 8000edc:	46b9      	mov	r9, r7
 8000ede:	0017      	movs	r7, r2
 8000ee0:	46b2      	mov	sl, r6
 8000ee2:	40df      	lsrs	r7, r3
 8000ee4:	464e      	mov	r6, r9
 8000ee6:	433e      	orrs	r6, r7
 8000ee8:	0037      	movs	r7, r6
 8000eea:	4656      	mov	r6, sl
 8000eec:	40b2      	lsls	r2, r6
 8000eee:	1e56      	subs	r6, r2, #1
 8000ef0:	41b2      	sbcs	r2, r6
 8000ef2:	4317      	orrs	r7, r2
 8000ef4:	4642      	mov	r2, r8
 8000ef6:	40da      	lsrs	r2, r3
 8000ef8:	1a89      	subs	r1, r1, r2
 8000efa:	e799      	b.n	8000e30 <__aeabi_dadd+0x364>
 8000efc:	4c7f      	ldr	r4, [pc, #508]	; (80010fc <__aeabi_dadd+0x630>)
 8000efe:	42a6      	cmp	r6, r4
 8000f00:	d05b      	beq.n	8000fba <__aeabi_dadd+0x4ee>
 8000f02:	2480      	movs	r4, #128	; 0x80
 8000f04:	0424      	lsls	r4, r4, #16
 8000f06:	425b      	negs	r3, r3
 8000f08:	4321      	orrs	r1, r4
 8000f0a:	e727      	b.n	8000d5c <__aeabi_dadd+0x290>
 8000f0c:	2e00      	cmp	r6, #0
 8000f0e:	d10c      	bne.n	8000f2a <__aeabi_dadd+0x45e>
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d100      	bne.n	8000f16 <__aeabi_dadd+0x44a>
 8000f14:	e0cb      	b.n	80010ae <__aeabi_dadd+0x5e2>
 8000f16:	4664      	mov	r4, ip
 8000f18:	0039      	movs	r1, r7
 8000f1a:	0010      	movs	r0, r2
 8000f1c:	4d77      	ldr	r5, [pc, #476]	; (80010fc <__aeabi_dadd+0x630>)
 8000f1e:	e6d7      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000f20:	4f76      	ldr	r7, [pc, #472]	; (80010fc <__aeabi_dadd+0x630>)
 8000f22:	42bb      	cmp	r3, r7
 8000f24:	d018      	beq.n	8000f58 <__aeabi_dadd+0x48c>
 8000f26:	0033      	movs	r3, r6
 8000f28:	e675      	b.n	8000c16 <__aeabi_dadd+0x14a>
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d014      	beq.n	8000f58 <__aeabi_dadd+0x48c>
 8000f2e:	074b      	lsls	r3, r1, #29
 8000f30:	08c0      	lsrs	r0, r0, #3
 8000f32:	4318      	orrs	r0, r3
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	08c9      	lsrs	r1, r1, #3
 8000f38:	031b      	lsls	r3, r3, #12
 8000f3a:	4219      	tst	r1, r3
 8000f3c:	d007      	beq.n	8000f4e <__aeabi_dadd+0x482>
 8000f3e:	08fc      	lsrs	r4, r7, #3
 8000f40:	421c      	tst	r4, r3
 8000f42:	d104      	bne.n	8000f4e <__aeabi_dadd+0x482>
 8000f44:	0779      	lsls	r1, r7, #29
 8000f46:	08d0      	lsrs	r0, r2, #3
 8000f48:	4308      	orrs	r0, r1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	0021      	movs	r1, r4
 8000f4e:	464c      	mov	r4, r9
 8000f50:	0f42      	lsrs	r2, r0, #29
 8000f52:	00c9      	lsls	r1, r1, #3
 8000f54:	4311      	orrs	r1, r2
 8000f56:	00c0      	lsls	r0, r0, #3
 8000f58:	4d68      	ldr	r5, [pc, #416]	; (80010fc <__aeabi_dadd+0x630>)
 8000f5a:	e6b9      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000f5c:	001d      	movs	r5, r3
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2300      	movs	r3, #0
 8000f62:	e6c0      	b.n	8000ce6 <__aeabi_dadd+0x21a>
 8000f64:	2d00      	cmp	r5, #0
 8000f66:	d15b      	bne.n	8001020 <__aeabi_dadd+0x554>
 8000f68:	000d      	movs	r5, r1
 8000f6a:	4305      	orrs	r5, r0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_dadd+0x4a4>
 8000f6e:	e6e2      	b.n	8000d36 <__aeabi_dadd+0x26a>
 8000f70:	1c5d      	adds	r5, r3, #1
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dadd+0x4aa>
 8000f74:	e0b0      	b.n	80010d8 <__aeabi_dadd+0x60c>
 8000f76:	4d61      	ldr	r5, [pc, #388]	; (80010fc <__aeabi_dadd+0x630>)
 8000f78:	42ae      	cmp	r6, r5
 8000f7a:	d01f      	beq.n	8000fbc <__aeabi_dadd+0x4f0>
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	2b38      	cmp	r3, #56	; 0x38
 8000f80:	dc71      	bgt.n	8001066 <__aeabi_dadd+0x59a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dd00      	ble.n	8000f88 <__aeabi_dadd+0x4bc>
 8000f86:	e096      	b.n	80010b6 <__aeabi_dadd+0x5ea>
 8000f88:	2520      	movs	r5, #32
 8000f8a:	000f      	movs	r7, r1
 8000f8c:	1aed      	subs	r5, r5, r3
 8000f8e:	40af      	lsls	r7, r5
 8000f90:	46b9      	mov	r9, r7
 8000f92:	0007      	movs	r7, r0
 8000f94:	46aa      	mov	sl, r5
 8000f96:	40df      	lsrs	r7, r3
 8000f98:	464d      	mov	r5, r9
 8000f9a:	433d      	orrs	r5, r7
 8000f9c:	002f      	movs	r7, r5
 8000f9e:	4655      	mov	r5, sl
 8000fa0:	40a8      	lsls	r0, r5
 8000fa2:	40d9      	lsrs	r1, r3
 8000fa4:	1e45      	subs	r5, r0, #1
 8000fa6:	41a8      	sbcs	r0, r5
 8000fa8:	4488      	add	r8, r1
 8000faa:	4307      	orrs	r7, r0
 8000fac:	18bf      	adds	r7, r7, r2
 8000fae:	4297      	cmp	r7, r2
 8000fb0:	4192      	sbcs	r2, r2
 8000fb2:	4251      	negs	r1, r2
 8000fb4:	4441      	add	r1, r8
 8000fb6:	0035      	movs	r5, r6
 8000fb8:	e63a      	b.n	8000c30 <__aeabi_dadd+0x164>
 8000fba:	4664      	mov	r4, ip
 8000fbc:	0035      	movs	r5, r6
 8000fbe:	4641      	mov	r1, r8
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	e685      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000fc4:	000b      	movs	r3, r1
 8000fc6:	4303      	orrs	r3, r0
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	d000      	beq.n	8000fce <__aeabi_dadd+0x502>
 8000fcc:	e663      	b.n	8000c96 <__aeabi_dadd+0x1ca>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f5      	beq.n	8000fbe <__aeabi_dadd+0x4f2>
 8000fd2:	4643      	mov	r3, r8
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dadd+0x50e>
 8000fd8:	e67a      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000fda:	1887      	adds	r7, r0, r2
 8000fdc:	4287      	cmp	r7, r0
 8000fde:	4180      	sbcs	r0, r0
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	4441      	add	r1, r8
 8000fe4:	4240      	negs	r0, r0
 8000fe6:	1809      	adds	r1, r1, r0
 8000fe8:	403a      	ands	r2, r7
 8000fea:	020b      	lsls	r3, r1, #8
 8000fec:	d400      	bmi.n	8000ff0 <__aeabi_dadd+0x524>
 8000fee:	e6d5      	b.n	8000d9c <__aeabi_dadd+0x2d0>
 8000ff0:	4b43      	ldr	r3, [pc, #268]	; (8001100 <__aeabi_dadd+0x634>)
 8000ff2:	3501      	adds	r5, #1
 8000ff4:	4019      	ands	r1, r3
 8000ff6:	e5c9      	b.n	8000b8c <__aeabi_dadd+0xc0>
 8000ff8:	0038      	movs	r0, r7
 8000ffa:	e669      	b.n	8000cd0 <__aeabi_dadd+0x204>
 8000ffc:	001e      	movs	r6, r3
 8000ffe:	4647      	mov	r7, r8
 8001000:	3e20      	subs	r6, #32
 8001002:	40f7      	lsrs	r7, r6
 8001004:	46bc      	mov	ip, r7
 8001006:	2b20      	cmp	r3, #32
 8001008:	d004      	beq.n	8001014 <__aeabi_dadd+0x548>
 800100a:	2640      	movs	r6, #64	; 0x40
 800100c:	1af3      	subs	r3, r6, r3
 800100e:	4646      	mov	r6, r8
 8001010:	409e      	lsls	r6, r3
 8001012:	4332      	orrs	r2, r6
 8001014:	0017      	movs	r7, r2
 8001016:	4663      	mov	r3, ip
 8001018:	1e7a      	subs	r2, r7, #1
 800101a:	4197      	sbcs	r7, r2
 800101c:	431f      	orrs	r7, r3
 800101e:	e602      	b.n	8000c26 <__aeabi_dadd+0x15a>
 8001020:	4d36      	ldr	r5, [pc, #216]	; (80010fc <__aeabi_dadd+0x630>)
 8001022:	42ae      	cmp	r6, r5
 8001024:	d0ca      	beq.n	8000fbc <__aeabi_dadd+0x4f0>
 8001026:	2580      	movs	r5, #128	; 0x80
 8001028:	042d      	lsls	r5, r5, #16
 800102a:	425b      	negs	r3, r3
 800102c:	4329      	orrs	r1, r5
 800102e:	e7a6      	b.n	8000f7e <__aeabi_dadd+0x4b2>
 8001030:	4308      	orrs	r0, r1
 8001032:	1e41      	subs	r1, r0, #1
 8001034:	4188      	sbcs	r0, r1
 8001036:	e6a6      	b.n	8000d86 <__aeabi_dadd+0x2ba>
 8001038:	2b00      	cmp	r3, #0
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x572>
 800103c:	e648      	b.n	8000cd0 <__aeabi_dadd+0x204>
 800103e:	1a87      	subs	r7, r0, r2
 8001040:	4643      	mov	r3, r8
 8001042:	42b8      	cmp	r0, r7
 8001044:	41b6      	sbcs	r6, r6
 8001046:	1acb      	subs	r3, r1, r3
 8001048:	4276      	negs	r6, r6
 800104a:	1b9e      	subs	r6, r3, r6
 800104c:	0233      	lsls	r3, r6, #8
 800104e:	d54b      	bpl.n	80010e8 <__aeabi_dadd+0x61c>
 8001050:	1a17      	subs	r7, r2, r0
 8001052:	4643      	mov	r3, r8
 8001054:	42ba      	cmp	r2, r7
 8001056:	4192      	sbcs	r2, r2
 8001058:	1a59      	subs	r1, r3, r1
 800105a:	4252      	negs	r2, r2
 800105c:	1a89      	subs	r1, r1, r2
 800105e:	2207      	movs	r2, #7
 8001060:	4664      	mov	r4, ip
 8001062:	403a      	ands	r2, r7
 8001064:	e592      	b.n	8000b8c <__aeabi_dadd+0xc0>
 8001066:	4301      	orrs	r1, r0
 8001068:	000f      	movs	r7, r1
 800106a:	1e79      	subs	r1, r7, #1
 800106c:	418f      	sbcs	r7, r1
 800106e:	e79d      	b.n	8000fac <__aeabi_dadd+0x4e0>
 8001070:	001c      	movs	r4, r3
 8001072:	000f      	movs	r7, r1
 8001074:	3c20      	subs	r4, #32
 8001076:	40e7      	lsrs	r7, r4
 8001078:	2b20      	cmp	r3, #32
 800107a:	d003      	beq.n	8001084 <__aeabi_dadd+0x5b8>
 800107c:	2440      	movs	r4, #64	; 0x40
 800107e:	1ae3      	subs	r3, r4, r3
 8001080:	4099      	lsls	r1, r3
 8001082:	4308      	orrs	r0, r1
 8001084:	1e41      	subs	r1, r0, #1
 8001086:	4188      	sbcs	r0, r1
 8001088:	4338      	orrs	r0, r7
 800108a:	e67c      	b.n	8000d86 <__aeabi_dadd+0x2ba>
 800108c:	2200      	movs	r2, #0
 800108e:	2400      	movs	r4, #0
 8001090:	e625      	b.n	8000cde <__aeabi_dadd+0x212>
 8001092:	1a17      	subs	r7, r2, r0
 8001094:	4643      	mov	r3, r8
 8001096:	42ba      	cmp	r2, r7
 8001098:	4192      	sbcs	r2, r2
 800109a:	1a59      	subs	r1, r3, r1
 800109c:	4252      	negs	r2, r2
 800109e:	1a89      	subs	r1, r1, r2
 80010a0:	4664      	mov	r4, ip
 80010a2:	0035      	movs	r5, r6
 80010a4:	e543      	b.n	8000b2e <__aeabi_dadd+0x62>
 80010a6:	4641      	mov	r1, r8
 80010a8:	0010      	movs	r0, r2
 80010aa:	4d14      	ldr	r5, [pc, #80]	; (80010fc <__aeabi_dadd+0x630>)
 80010ac:	e610      	b.n	8000cd0 <__aeabi_dadd+0x204>
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	2400      	movs	r4, #0
 80010b2:	0312      	lsls	r2, r2, #12
 80010b4:	e680      	b.n	8000db8 <__aeabi_dadd+0x2ec>
 80010b6:	001d      	movs	r5, r3
 80010b8:	000f      	movs	r7, r1
 80010ba:	3d20      	subs	r5, #32
 80010bc:	40ef      	lsrs	r7, r5
 80010be:	46bc      	mov	ip, r7
 80010c0:	2b20      	cmp	r3, #32
 80010c2:	d003      	beq.n	80010cc <__aeabi_dadd+0x600>
 80010c4:	2540      	movs	r5, #64	; 0x40
 80010c6:	1aeb      	subs	r3, r5, r3
 80010c8:	4099      	lsls	r1, r3
 80010ca:	4308      	orrs	r0, r1
 80010cc:	0007      	movs	r7, r0
 80010ce:	4663      	mov	r3, ip
 80010d0:	1e78      	subs	r0, r7, #1
 80010d2:	4187      	sbcs	r7, r0
 80010d4:	431f      	orrs	r7, r3
 80010d6:	e769      	b.n	8000fac <__aeabi_dadd+0x4e0>
 80010d8:	1887      	adds	r7, r0, r2
 80010da:	4297      	cmp	r7, r2
 80010dc:	419b      	sbcs	r3, r3
 80010de:	4441      	add	r1, r8
 80010e0:	425b      	negs	r3, r3
 80010e2:	18c9      	adds	r1, r1, r3
 80010e4:	0035      	movs	r5, r6
 80010e6:	e5a3      	b.n	8000c30 <__aeabi_dadd+0x164>
 80010e8:	003b      	movs	r3, r7
 80010ea:	4333      	orrs	r3, r6
 80010ec:	d0ce      	beq.n	800108c <__aeabi_dadd+0x5c0>
 80010ee:	2207      	movs	r2, #7
 80010f0:	0031      	movs	r1, r6
 80010f2:	403a      	ands	r2, r7
 80010f4:	e652      	b.n	8000d9c <__aeabi_dadd+0x2d0>
 80010f6:	2300      	movs	r3, #0
 80010f8:	001a      	movs	r2, r3
 80010fa:	e5f4      	b.n	8000ce6 <__aeabi_dadd+0x21a>
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	ff7fffff 	.word	0xff7fffff

08001104 <__aeabi_ddiv>:
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	4657      	mov	r7, sl
 8001108:	46de      	mov	lr, fp
 800110a:	464e      	mov	r6, r9
 800110c:	4645      	mov	r5, r8
 800110e:	b5e0      	push	{r5, r6, r7, lr}
 8001110:	4683      	mov	fp, r0
 8001112:	0007      	movs	r7, r0
 8001114:	030e      	lsls	r6, r1, #12
 8001116:	0048      	lsls	r0, r1, #1
 8001118:	b085      	sub	sp, #20
 800111a:	4692      	mov	sl, r2
 800111c:	001c      	movs	r4, r3
 800111e:	0b36      	lsrs	r6, r6, #12
 8001120:	0d40      	lsrs	r0, r0, #21
 8001122:	0fcd      	lsrs	r5, r1, #31
 8001124:	2800      	cmp	r0, #0
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x26>
 8001128:	e09d      	b.n	8001266 <__aeabi_ddiv+0x162>
 800112a:	4b95      	ldr	r3, [pc, #596]	; (8001380 <__aeabi_ddiv+0x27c>)
 800112c:	4298      	cmp	r0, r3
 800112e:	d039      	beq.n	80011a4 <__aeabi_ddiv+0xa0>
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	00f6      	lsls	r6, r6, #3
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	431e      	orrs	r6, r3
 8001138:	4a92      	ldr	r2, [pc, #584]	; (8001384 <__aeabi_ddiv+0x280>)
 800113a:	0f7b      	lsrs	r3, r7, #29
 800113c:	4333      	orrs	r3, r6
 800113e:	4699      	mov	r9, r3
 8001140:	4694      	mov	ip, r2
 8001142:	0003      	movs	r3, r0
 8001144:	4463      	add	r3, ip
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2300      	movs	r3, #0
 800114a:	2600      	movs	r6, #0
 800114c:	00ff      	lsls	r7, r7, #3
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	0323      	lsls	r3, r4, #12
 8001152:	0b1b      	lsrs	r3, r3, #12
 8001154:	4698      	mov	r8, r3
 8001156:	0063      	lsls	r3, r4, #1
 8001158:	0fe4      	lsrs	r4, r4, #31
 800115a:	4652      	mov	r2, sl
 800115c:	0d5b      	lsrs	r3, r3, #21
 800115e:	9401      	str	r4, [sp, #4]
 8001160:	d100      	bne.n	8001164 <__aeabi_ddiv+0x60>
 8001162:	e0b3      	b.n	80012cc <__aeabi_ddiv+0x1c8>
 8001164:	4986      	ldr	r1, [pc, #536]	; (8001380 <__aeabi_ddiv+0x27c>)
 8001166:	428b      	cmp	r3, r1
 8001168:	d100      	bne.n	800116c <__aeabi_ddiv+0x68>
 800116a:	e09e      	b.n	80012aa <__aeabi_ddiv+0x1a6>
 800116c:	4642      	mov	r2, r8
 800116e:	00d1      	lsls	r1, r2, #3
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	0412      	lsls	r2, r2, #16
 8001174:	430a      	orrs	r2, r1
 8001176:	4651      	mov	r1, sl
 8001178:	0f49      	lsrs	r1, r1, #29
 800117a:	4311      	orrs	r1, r2
 800117c:	468b      	mov	fp, r1
 800117e:	4981      	ldr	r1, [pc, #516]	; (8001384 <__aeabi_ddiv+0x280>)
 8001180:	4652      	mov	r2, sl
 8001182:	468c      	mov	ip, r1
 8001184:	9900      	ldr	r1, [sp, #0]
 8001186:	4463      	add	r3, ip
 8001188:	1acb      	subs	r3, r1, r3
 800118a:	2100      	movs	r1, #0
 800118c:	00d2      	lsls	r2, r2, #3
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	002b      	movs	r3, r5
 8001192:	4063      	eors	r3, r4
 8001194:	469a      	mov	sl, r3
 8001196:	2e0f      	cmp	r6, #15
 8001198:	d900      	bls.n	800119c <__aeabi_ddiv+0x98>
 800119a:	e105      	b.n	80013a8 <__aeabi_ddiv+0x2a4>
 800119c:	4b7a      	ldr	r3, [pc, #488]	; (8001388 <__aeabi_ddiv+0x284>)
 800119e:	00b6      	lsls	r6, r6, #2
 80011a0:	599b      	ldr	r3, [r3, r6]
 80011a2:	469f      	mov	pc, r3
 80011a4:	465b      	mov	r3, fp
 80011a6:	4333      	orrs	r3, r6
 80011a8:	4699      	mov	r9, r3
 80011aa:	d000      	beq.n	80011ae <__aeabi_ddiv+0xaa>
 80011ac:	e0b8      	b.n	8001320 <__aeabi_ddiv+0x21c>
 80011ae:	2302      	movs	r3, #2
 80011b0:	2608      	movs	r6, #8
 80011b2:	2700      	movs	r7, #0
 80011b4:	9000      	str	r0, [sp, #0]
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	e7ca      	b.n	8001150 <__aeabi_ddiv+0x4c>
 80011ba:	46cb      	mov	fp, r9
 80011bc:	003a      	movs	r2, r7
 80011be:	9902      	ldr	r1, [sp, #8]
 80011c0:	9501      	str	r5, [sp, #4]
 80011c2:	9b01      	ldr	r3, [sp, #4]
 80011c4:	469a      	mov	sl, r3
 80011c6:	2902      	cmp	r1, #2
 80011c8:	d027      	beq.n	800121a <__aeabi_ddiv+0x116>
 80011ca:	2903      	cmp	r1, #3
 80011cc:	d100      	bne.n	80011d0 <__aeabi_ddiv+0xcc>
 80011ce:	e280      	b.n	80016d2 <__aeabi_ddiv+0x5ce>
 80011d0:	2901      	cmp	r1, #1
 80011d2:	d044      	beq.n	800125e <__aeabi_ddiv+0x15a>
 80011d4:	496d      	ldr	r1, [pc, #436]	; (800138c <__aeabi_ddiv+0x288>)
 80011d6:	9b00      	ldr	r3, [sp, #0]
 80011d8:	468c      	mov	ip, r1
 80011da:	4463      	add	r3, ip
 80011dc:	001c      	movs	r4, r3
 80011de:	2c00      	cmp	r4, #0
 80011e0:	dd38      	ble.n	8001254 <__aeabi_ddiv+0x150>
 80011e2:	0753      	lsls	r3, r2, #29
 80011e4:	d000      	beq.n	80011e8 <__aeabi_ddiv+0xe4>
 80011e6:	e213      	b.n	8001610 <__aeabi_ddiv+0x50c>
 80011e8:	08d2      	lsrs	r2, r2, #3
 80011ea:	465b      	mov	r3, fp
 80011ec:	01db      	lsls	r3, r3, #7
 80011ee:	d509      	bpl.n	8001204 <__aeabi_ddiv+0x100>
 80011f0:	4659      	mov	r1, fp
 80011f2:	4b67      	ldr	r3, [pc, #412]	; (8001390 <__aeabi_ddiv+0x28c>)
 80011f4:	4019      	ands	r1, r3
 80011f6:	468b      	mov	fp, r1
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	00c9      	lsls	r1, r1, #3
 80011fc:	468c      	mov	ip, r1
 80011fe:	9b00      	ldr	r3, [sp, #0]
 8001200:	4463      	add	r3, ip
 8001202:	001c      	movs	r4, r3
 8001204:	4b63      	ldr	r3, [pc, #396]	; (8001394 <__aeabi_ddiv+0x290>)
 8001206:	429c      	cmp	r4, r3
 8001208:	dc07      	bgt.n	800121a <__aeabi_ddiv+0x116>
 800120a:	465b      	mov	r3, fp
 800120c:	0564      	lsls	r4, r4, #21
 800120e:	075f      	lsls	r7, r3, #29
 8001210:	025b      	lsls	r3, r3, #9
 8001212:	4317      	orrs	r7, r2
 8001214:	0b1b      	lsrs	r3, r3, #12
 8001216:	0d62      	lsrs	r2, r4, #21
 8001218:	e002      	b.n	8001220 <__aeabi_ddiv+0x11c>
 800121a:	2300      	movs	r3, #0
 800121c:	2700      	movs	r7, #0
 800121e:	4a58      	ldr	r2, [pc, #352]	; (8001380 <__aeabi_ddiv+0x27c>)
 8001220:	2100      	movs	r1, #0
 8001222:	031b      	lsls	r3, r3, #12
 8001224:	0b1c      	lsrs	r4, r3, #12
 8001226:	0d0b      	lsrs	r3, r1, #20
 8001228:	051b      	lsls	r3, r3, #20
 800122a:	4323      	orrs	r3, r4
 800122c:	0514      	lsls	r4, r2, #20
 800122e:	4a5a      	ldr	r2, [pc, #360]	; (8001398 <__aeabi_ddiv+0x294>)
 8001230:	0038      	movs	r0, r7
 8001232:	4013      	ands	r3, r2
 8001234:	431c      	orrs	r4, r3
 8001236:	4653      	mov	r3, sl
 8001238:	0064      	lsls	r4, r4, #1
 800123a:	07db      	lsls	r3, r3, #31
 800123c:	0864      	lsrs	r4, r4, #1
 800123e:	431c      	orrs	r4, r3
 8001240:	0021      	movs	r1, r4
 8001242:	b005      	add	sp, #20
 8001244:	bc3c      	pop	{r2, r3, r4, r5}
 8001246:	4690      	mov	r8, r2
 8001248:	4699      	mov	r9, r3
 800124a:	46a2      	mov	sl, r4
 800124c:	46ab      	mov	fp, r5
 800124e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001250:	2201      	movs	r2, #1
 8001252:	4252      	negs	r2, r2
 8001254:	2301      	movs	r3, #1
 8001256:	1b1b      	subs	r3, r3, r4
 8001258:	2b38      	cmp	r3, #56	; 0x38
 800125a:	dc00      	bgt.n	800125e <__aeabi_ddiv+0x15a>
 800125c:	e1ad      	b.n	80015ba <__aeabi_ddiv+0x4b6>
 800125e:	2200      	movs	r2, #0
 8001260:	2300      	movs	r3, #0
 8001262:	2700      	movs	r7, #0
 8001264:	e7dc      	b.n	8001220 <__aeabi_ddiv+0x11c>
 8001266:	465b      	mov	r3, fp
 8001268:	4333      	orrs	r3, r6
 800126a:	4699      	mov	r9, r3
 800126c:	d05e      	beq.n	800132c <__aeabi_ddiv+0x228>
 800126e:	2e00      	cmp	r6, #0
 8001270:	d100      	bne.n	8001274 <__aeabi_ddiv+0x170>
 8001272:	e18a      	b.n	800158a <__aeabi_ddiv+0x486>
 8001274:	0030      	movs	r0, r6
 8001276:	f001 f94b 	bl	8002510 <__clzsi2>
 800127a:	0003      	movs	r3, r0
 800127c:	3b0b      	subs	r3, #11
 800127e:	2b1c      	cmp	r3, #28
 8001280:	dd00      	ble.n	8001284 <__aeabi_ddiv+0x180>
 8001282:	e17b      	b.n	800157c <__aeabi_ddiv+0x478>
 8001284:	221d      	movs	r2, #29
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	465a      	mov	r2, fp
 800128a:	0001      	movs	r1, r0
 800128c:	40da      	lsrs	r2, r3
 800128e:	3908      	subs	r1, #8
 8001290:	408e      	lsls	r6, r1
 8001292:	0013      	movs	r3, r2
 8001294:	465f      	mov	r7, fp
 8001296:	4333      	orrs	r3, r6
 8001298:	4699      	mov	r9, r3
 800129a:	408f      	lsls	r7, r1
 800129c:	4b3f      	ldr	r3, [pc, #252]	; (800139c <__aeabi_ddiv+0x298>)
 800129e:	2600      	movs	r6, #0
 80012a0:	1a1b      	subs	r3, r3, r0
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2300      	movs	r3, #0
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	e752      	b.n	8001150 <__aeabi_ddiv+0x4c>
 80012aa:	4641      	mov	r1, r8
 80012ac:	4653      	mov	r3, sl
 80012ae:	430b      	orrs	r3, r1
 80012b0:	493b      	ldr	r1, [pc, #236]	; (80013a0 <__aeabi_ddiv+0x29c>)
 80012b2:	469b      	mov	fp, r3
 80012b4:	468c      	mov	ip, r1
 80012b6:	9b00      	ldr	r3, [sp, #0]
 80012b8:	4463      	add	r3, ip
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	465b      	mov	r3, fp
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d13b      	bne.n	800133a <__aeabi_ddiv+0x236>
 80012c2:	2302      	movs	r3, #2
 80012c4:	2200      	movs	r2, #0
 80012c6:	431e      	orrs	r6, r3
 80012c8:	2102      	movs	r1, #2
 80012ca:	e761      	b.n	8001190 <__aeabi_ddiv+0x8c>
 80012cc:	4643      	mov	r3, r8
 80012ce:	4313      	orrs	r3, r2
 80012d0:	469b      	mov	fp, r3
 80012d2:	d037      	beq.n	8001344 <__aeabi_ddiv+0x240>
 80012d4:	4643      	mov	r3, r8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d100      	bne.n	80012dc <__aeabi_ddiv+0x1d8>
 80012da:	e162      	b.n	80015a2 <__aeabi_ddiv+0x49e>
 80012dc:	4640      	mov	r0, r8
 80012de:	f001 f917 	bl	8002510 <__clzsi2>
 80012e2:	0003      	movs	r3, r0
 80012e4:	3b0b      	subs	r3, #11
 80012e6:	2b1c      	cmp	r3, #28
 80012e8:	dd00      	ble.n	80012ec <__aeabi_ddiv+0x1e8>
 80012ea:	e153      	b.n	8001594 <__aeabi_ddiv+0x490>
 80012ec:	0002      	movs	r2, r0
 80012ee:	4641      	mov	r1, r8
 80012f0:	3a08      	subs	r2, #8
 80012f2:	4091      	lsls	r1, r2
 80012f4:	4688      	mov	r8, r1
 80012f6:	211d      	movs	r1, #29
 80012f8:	1acb      	subs	r3, r1, r3
 80012fa:	4651      	mov	r1, sl
 80012fc:	40d9      	lsrs	r1, r3
 80012fe:	000b      	movs	r3, r1
 8001300:	4641      	mov	r1, r8
 8001302:	430b      	orrs	r3, r1
 8001304:	469b      	mov	fp, r3
 8001306:	4653      	mov	r3, sl
 8001308:	4093      	lsls	r3, r2
 800130a:	001a      	movs	r2, r3
 800130c:	9b00      	ldr	r3, [sp, #0]
 800130e:	4925      	ldr	r1, [pc, #148]	; (80013a4 <__aeabi_ddiv+0x2a0>)
 8001310:	469c      	mov	ip, r3
 8001312:	4460      	add	r0, ip
 8001314:	0003      	movs	r3, r0
 8001316:	468c      	mov	ip, r1
 8001318:	4463      	add	r3, ip
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2100      	movs	r1, #0
 800131e:	e737      	b.n	8001190 <__aeabi_ddiv+0x8c>
 8001320:	2303      	movs	r3, #3
 8001322:	46b1      	mov	r9, r6
 8001324:	9000      	str	r0, [sp, #0]
 8001326:	260c      	movs	r6, #12
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	e711      	b.n	8001150 <__aeabi_ddiv+0x4c>
 800132c:	2300      	movs	r3, #0
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	2604      	movs	r6, #4
 8001334:	2700      	movs	r7, #0
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	e70a      	b.n	8001150 <__aeabi_ddiv+0x4c>
 800133a:	2303      	movs	r3, #3
 800133c:	46c3      	mov	fp, r8
 800133e:	431e      	orrs	r6, r3
 8001340:	2103      	movs	r1, #3
 8001342:	e725      	b.n	8001190 <__aeabi_ddiv+0x8c>
 8001344:	3301      	adds	r3, #1
 8001346:	431e      	orrs	r6, r3
 8001348:	2200      	movs	r2, #0
 800134a:	2101      	movs	r1, #1
 800134c:	e720      	b.n	8001190 <__aeabi_ddiv+0x8c>
 800134e:	2300      	movs	r3, #0
 8001350:	469a      	mov	sl, r3
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	2700      	movs	r7, #0
 8001356:	031b      	lsls	r3, r3, #12
 8001358:	4a09      	ldr	r2, [pc, #36]	; (8001380 <__aeabi_ddiv+0x27c>)
 800135a:	e761      	b.n	8001220 <__aeabi_ddiv+0x11c>
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	4649      	mov	r1, r9
 8001360:	031b      	lsls	r3, r3, #12
 8001362:	4219      	tst	r1, r3
 8001364:	d100      	bne.n	8001368 <__aeabi_ddiv+0x264>
 8001366:	e0e2      	b.n	800152e <__aeabi_ddiv+0x42a>
 8001368:	4659      	mov	r1, fp
 800136a:	4219      	tst	r1, r3
 800136c:	d000      	beq.n	8001370 <__aeabi_ddiv+0x26c>
 800136e:	e0de      	b.n	800152e <__aeabi_ddiv+0x42a>
 8001370:	430b      	orrs	r3, r1
 8001372:	031b      	lsls	r3, r3, #12
 8001374:	0017      	movs	r7, r2
 8001376:	0b1b      	lsrs	r3, r3, #12
 8001378:	46a2      	mov	sl, r4
 800137a:	4a01      	ldr	r2, [pc, #4]	; (8001380 <__aeabi_ddiv+0x27c>)
 800137c:	e750      	b.n	8001220 <__aeabi_ddiv+0x11c>
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	000007ff 	.word	0x000007ff
 8001384:	fffffc01 	.word	0xfffffc01
 8001388:	08008f54 	.word	0x08008f54
 800138c:	000003ff 	.word	0x000003ff
 8001390:	feffffff 	.word	0xfeffffff
 8001394:	000007fe 	.word	0x000007fe
 8001398:	800fffff 	.word	0x800fffff
 800139c:	fffffc0d 	.word	0xfffffc0d
 80013a0:	fffff801 	.word	0xfffff801
 80013a4:	000003f3 	.word	0x000003f3
 80013a8:	45d9      	cmp	r9, fp
 80013aa:	d900      	bls.n	80013ae <__aeabi_ddiv+0x2aa>
 80013ac:	e0cb      	b.n	8001546 <__aeabi_ddiv+0x442>
 80013ae:	d100      	bne.n	80013b2 <__aeabi_ddiv+0x2ae>
 80013b0:	e0c6      	b.n	8001540 <__aeabi_ddiv+0x43c>
 80013b2:	003c      	movs	r4, r7
 80013b4:	4648      	mov	r0, r9
 80013b6:	2700      	movs	r7, #0
 80013b8:	9b00      	ldr	r3, [sp, #0]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	465b      	mov	r3, fp
 80013c0:	0e16      	lsrs	r6, r2, #24
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	431e      	orrs	r6, r3
 80013c6:	0213      	lsls	r3, r2, #8
 80013c8:	4698      	mov	r8, r3
 80013ca:	0433      	lsls	r3, r6, #16
 80013cc:	0c1b      	lsrs	r3, r3, #16
 80013ce:	4699      	mov	r9, r3
 80013d0:	0c31      	lsrs	r1, r6, #16
 80013d2:	9101      	str	r1, [sp, #4]
 80013d4:	f7fe ff1e 	bl	8000214 <__aeabi_uidivmod>
 80013d8:	464a      	mov	r2, r9
 80013da:	4342      	muls	r2, r0
 80013dc:	040b      	lsls	r3, r1, #16
 80013de:	0c21      	lsrs	r1, r4, #16
 80013e0:	0005      	movs	r5, r0
 80013e2:	4319      	orrs	r1, r3
 80013e4:	428a      	cmp	r2, r1
 80013e6:	d907      	bls.n	80013f8 <__aeabi_ddiv+0x2f4>
 80013e8:	1989      	adds	r1, r1, r6
 80013ea:	3d01      	subs	r5, #1
 80013ec:	428e      	cmp	r6, r1
 80013ee:	d803      	bhi.n	80013f8 <__aeabi_ddiv+0x2f4>
 80013f0:	428a      	cmp	r2, r1
 80013f2:	d901      	bls.n	80013f8 <__aeabi_ddiv+0x2f4>
 80013f4:	1e85      	subs	r5, r0, #2
 80013f6:	1989      	adds	r1, r1, r6
 80013f8:	1a88      	subs	r0, r1, r2
 80013fa:	9901      	ldr	r1, [sp, #4]
 80013fc:	f7fe ff0a 	bl	8000214 <__aeabi_uidivmod>
 8001400:	0409      	lsls	r1, r1, #16
 8001402:	468c      	mov	ip, r1
 8001404:	464a      	mov	r2, r9
 8001406:	0421      	lsls	r1, r4, #16
 8001408:	4664      	mov	r4, ip
 800140a:	4342      	muls	r2, r0
 800140c:	0c09      	lsrs	r1, r1, #16
 800140e:	0003      	movs	r3, r0
 8001410:	4321      	orrs	r1, r4
 8001412:	428a      	cmp	r2, r1
 8001414:	d904      	bls.n	8001420 <__aeabi_ddiv+0x31c>
 8001416:	1989      	adds	r1, r1, r6
 8001418:	3b01      	subs	r3, #1
 800141a:	428e      	cmp	r6, r1
 800141c:	d800      	bhi.n	8001420 <__aeabi_ddiv+0x31c>
 800141e:	e0f1      	b.n	8001604 <__aeabi_ddiv+0x500>
 8001420:	042d      	lsls	r5, r5, #16
 8001422:	431d      	orrs	r5, r3
 8001424:	46ab      	mov	fp, r5
 8001426:	4643      	mov	r3, r8
 8001428:	1a89      	subs	r1, r1, r2
 800142a:	4642      	mov	r2, r8
 800142c:	0c28      	lsrs	r0, r5, #16
 800142e:	0412      	lsls	r2, r2, #16
 8001430:	0c1d      	lsrs	r5, r3, #16
 8001432:	465b      	mov	r3, fp
 8001434:	0c14      	lsrs	r4, r2, #16
 8001436:	0022      	movs	r2, r4
 8001438:	041b      	lsls	r3, r3, #16
 800143a:	0c1b      	lsrs	r3, r3, #16
 800143c:	435a      	muls	r2, r3
 800143e:	9403      	str	r4, [sp, #12]
 8001440:	436b      	muls	r3, r5
 8001442:	4344      	muls	r4, r0
 8001444:	9502      	str	r5, [sp, #8]
 8001446:	4368      	muls	r0, r5
 8001448:	191b      	adds	r3, r3, r4
 800144a:	0c15      	lsrs	r5, r2, #16
 800144c:	18eb      	adds	r3, r5, r3
 800144e:	429c      	cmp	r4, r3
 8001450:	d903      	bls.n	800145a <__aeabi_ddiv+0x356>
 8001452:	2480      	movs	r4, #128	; 0x80
 8001454:	0264      	lsls	r4, r4, #9
 8001456:	46a4      	mov	ip, r4
 8001458:	4460      	add	r0, ip
 800145a:	0c1c      	lsrs	r4, r3, #16
 800145c:	0415      	lsls	r5, r2, #16
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	0c2d      	lsrs	r5, r5, #16
 8001462:	1820      	adds	r0, r4, r0
 8001464:	195d      	adds	r5, r3, r5
 8001466:	4281      	cmp	r1, r0
 8001468:	d377      	bcc.n	800155a <__aeabi_ddiv+0x456>
 800146a:	d073      	beq.n	8001554 <__aeabi_ddiv+0x450>
 800146c:	1a0c      	subs	r4, r1, r0
 800146e:	4aa2      	ldr	r2, [pc, #648]	; (80016f8 <__aeabi_ddiv+0x5f4>)
 8001470:	1b7d      	subs	r5, r7, r5
 8001472:	42af      	cmp	r7, r5
 8001474:	41bf      	sbcs	r7, r7
 8001476:	4694      	mov	ip, r2
 8001478:	9b00      	ldr	r3, [sp, #0]
 800147a:	427f      	negs	r7, r7
 800147c:	4463      	add	r3, ip
 800147e:	1be0      	subs	r0, r4, r7
 8001480:	001c      	movs	r4, r3
 8001482:	4286      	cmp	r6, r0
 8001484:	d100      	bne.n	8001488 <__aeabi_ddiv+0x384>
 8001486:	e0db      	b.n	8001640 <__aeabi_ddiv+0x53c>
 8001488:	9901      	ldr	r1, [sp, #4]
 800148a:	f7fe fec3 	bl	8000214 <__aeabi_uidivmod>
 800148e:	464a      	mov	r2, r9
 8001490:	4342      	muls	r2, r0
 8001492:	040b      	lsls	r3, r1, #16
 8001494:	0c29      	lsrs	r1, r5, #16
 8001496:	0007      	movs	r7, r0
 8001498:	4319      	orrs	r1, r3
 800149a:	428a      	cmp	r2, r1
 800149c:	d907      	bls.n	80014ae <__aeabi_ddiv+0x3aa>
 800149e:	1989      	adds	r1, r1, r6
 80014a0:	3f01      	subs	r7, #1
 80014a2:	428e      	cmp	r6, r1
 80014a4:	d803      	bhi.n	80014ae <__aeabi_ddiv+0x3aa>
 80014a6:	428a      	cmp	r2, r1
 80014a8:	d901      	bls.n	80014ae <__aeabi_ddiv+0x3aa>
 80014aa:	1e87      	subs	r7, r0, #2
 80014ac:	1989      	adds	r1, r1, r6
 80014ae:	1a88      	subs	r0, r1, r2
 80014b0:	9901      	ldr	r1, [sp, #4]
 80014b2:	f7fe feaf 	bl	8000214 <__aeabi_uidivmod>
 80014b6:	0409      	lsls	r1, r1, #16
 80014b8:	464a      	mov	r2, r9
 80014ba:	4689      	mov	r9, r1
 80014bc:	0429      	lsls	r1, r5, #16
 80014be:	464d      	mov	r5, r9
 80014c0:	4342      	muls	r2, r0
 80014c2:	0c09      	lsrs	r1, r1, #16
 80014c4:	0003      	movs	r3, r0
 80014c6:	4329      	orrs	r1, r5
 80014c8:	428a      	cmp	r2, r1
 80014ca:	d907      	bls.n	80014dc <__aeabi_ddiv+0x3d8>
 80014cc:	1989      	adds	r1, r1, r6
 80014ce:	3b01      	subs	r3, #1
 80014d0:	428e      	cmp	r6, r1
 80014d2:	d803      	bhi.n	80014dc <__aeabi_ddiv+0x3d8>
 80014d4:	428a      	cmp	r2, r1
 80014d6:	d901      	bls.n	80014dc <__aeabi_ddiv+0x3d8>
 80014d8:	1e83      	subs	r3, r0, #2
 80014da:	1989      	adds	r1, r1, r6
 80014dc:	043f      	lsls	r7, r7, #16
 80014de:	1a89      	subs	r1, r1, r2
 80014e0:	003a      	movs	r2, r7
 80014e2:	9f03      	ldr	r7, [sp, #12]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	0038      	movs	r0, r7
 80014e8:	0413      	lsls	r3, r2, #16
 80014ea:	0c1b      	lsrs	r3, r3, #16
 80014ec:	4358      	muls	r0, r3
 80014ee:	4681      	mov	r9, r0
 80014f0:	9802      	ldr	r0, [sp, #8]
 80014f2:	0c15      	lsrs	r5, r2, #16
 80014f4:	436f      	muls	r7, r5
 80014f6:	4343      	muls	r3, r0
 80014f8:	4345      	muls	r5, r0
 80014fa:	4648      	mov	r0, r9
 80014fc:	0c00      	lsrs	r0, r0, #16
 80014fe:	4684      	mov	ip, r0
 8001500:	19db      	adds	r3, r3, r7
 8001502:	4463      	add	r3, ip
 8001504:	429f      	cmp	r7, r3
 8001506:	d903      	bls.n	8001510 <__aeabi_ddiv+0x40c>
 8001508:	2080      	movs	r0, #128	; 0x80
 800150a:	0240      	lsls	r0, r0, #9
 800150c:	4684      	mov	ip, r0
 800150e:	4465      	add	r5, ip
 8001510:	4648      	mov	r0, r9
 8001512:	0c1f      	lsrs	r7, r3, #16
 8001514:	0400      	lsls	r0, r0, #16
 8001516:	041b      	lsls	r3, r3, #16
 8001518:	0c00      	lsrs	r0, r0, #16
 800151a:	197d      	adds	r5, r7, r5
 800151c:	1818      	adds	r0, r3, r0
 800151e:	42a9      	cmp	r1, r5
 8001520:	d200      	bcs.n	8001524 <__aeabi_ddiv+0x420>
 8001522:	e084      	b.n	800162e <__aeabi_ddiv+0x52a>
 8001524:	d100      	bne.n	8001528 <__aeabi_ddiv+0x424>
 8001526:	e07f      	b.n	8001628 <__aeabi_ddiv+0x524>
 8001528:	2301      	movs	r3, #1
 800152a:	431a      	orrs	r2, r3
 800152c:	e657      	b.n	80011de <__aeabi_ddiv+0xda>
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	464a      	mov	r2, r9
 8001532:	031b      	lsls	r3, r3, #12
 8001534:	4313      	orrs	r3, r2
 8001536:	031b      	lsls	r3, r3, #12
 8001538:	0b1b      	lsrs	r3, r3, #12
 800153a:	46aa      	mov	sl, r5
 800153c:	4a6f      	ldr	r2, [pc, #444]	; (80016fc <__aeabi_ddiv+0x5f8>)
 800153e:	e66f      	b.n	8001220 <__aeabi_ddiv+0x11c>
 8001540:	42ba      	cmp	r2, r7
 8001542:	d900      	bls.n	8001546 <__aeabi_ddiv+0x442>
 8001544:	e735      	b.n	80013b2 <__aeabi_ddiv+0x2ae>
 8001546:	464b      	mov	r3, r9
 8001548:	07dc      	lsls	r4, r3, #31
 800154a:	0858      	lsrs	r0, r3, #1
 800154c:	087b      	lsrs	r3, r7, #1
 800154e:	431c      	orrs	r4, r3
 8001550:	07ff      	lsls	r7, r7, #31
 8001552:	e734      	b.n	80013be <__aeabi_ddiv+0x2ba>
 8001554:	2400      	movs	r4, #0
 8001556:	42af      	cmp	r7, r5
 8001558:	d289      	bcs.n	800146e <__aeabi_ddiv+0x36a>
 800155a:	4447      	add	r7, r8
 800155c:	4547      	cmp	r7, r8
 800155e:	41a4      	sbcs	r4, r4
 8001560:	465b      	mov	r3, fp
 8001562:	4264      	negs	r4, r4
 8001564:	19a4      	adds	r4, r4, r6
 8001566:	1864      	adds	r4, r4, r1
 8001568:	3b01      	subs	r3, #1
 800156a:	42a6      	cmp	r6, r4
 800156c:	d21e      	bcs.n	80015ac <__aeabi_ddiv+0x4a8>
 800156e:	42a0      	cmp	r0, r4
 8001570:	d86d      	bhi.n	800164e <__aeabi_ddiv+0x54a>
 8001572:	d100      	bne.n	8001576 <__aeabi_ddiv+0x472>
 8001574:	e0b6      	b.n	80016e4 <__aeabi_ddiv+0x5e0>
 8001576:	1a24      	subs	r4, r4, r0
 8001578:	469b      	mov	fp, r3
 800157a:	e778      	b.n	800146e <__aeabi_ddiv+0x36a>
 800157c:	0003      	movs	r3, r0
 800157e:	465a      	mov	r2, fp
 8001580:	3b28      	subs	r3, #40	; 0x28
 8001582:	409a      	lsls	r2, r3
 8001584:	2700      	movs	r7, #0
 8001586:	4691      	mov	r9, r2
 8001588:	e688      	b.n	800129c <__aeabi_ddiv+0x198>
 800158a:	4658      	mov	r0, fp
 800158c:	f000 ffc0 	bl	8002510 <__clzsi2>
 8001590:	3020      	adds	r0, #32
 8001592:	e672      	b.n	800127a <__aeabi_ddiv+0x176>
 8001594:	0003      	movs	r3, r0
 8001596:	4652      	mov	r2, sl
 8001598:	3b28      	subs	r3, #40	; 0x28
 800159a:	409a      	lsls	r2, r3
 800159c:	4693      	mov	fp, r2
 800159e:	2200      	movs	r2, #0
 80015a0:	e6b4      	b.n	800130c <__aeabi_ddiv+0x208>
 80015a2:	4650      	mov	r0, sl
 80015a4:	f000 ffb4 	bl	8002510 <__clzsi2>
 80015a8:	3020      	adds	r0, #32
 80015aa:	e69a      	b.n	80012e2 <__aeabi_ddiv+0x1de>
 80015ac:	42a6      	cmp	r6, r4
 80015ae:	d1e2      	bne.n	8001576 <__aeabi_ddiv+0x472>
 80015b0:	45b8      	cmp	r8, r7
 80015b2:	d9dc      	bls.n	800156e <__aeabi_ddiv+0x46a>
 80015b4:	1a34      	subs	r4, r6, r0
 80015b6:	469b      	mov	fp, r3
 80015b8:	e759      	b.n	800146e <__aeabi_ddiv+0x36a>
 80015ba:	2b1f      	cmp	r3, #31
 80015bc:	dc65      	bgt.n	800168a <__aeabi_ddiv+0x586>
 80015be:	4c50      	ldr	r4, [pc, #320]	; (8001700 <__aeabi_ddiv+0x5fc>)
 80015c0:	9900      	ldr	r1, [sp, #0]
 80015c2:	46a4      	mov	ip, r4
 80015c4:	465c      	mov	r4, fp
 80015c6:	4461      	add	r1, ip
 80015c8:	0008      	movs	r0, r1
 80015ca:	408c      	lsls	r4, r1
 80015cc:	0011      	movs	r1, r2
 80015ce:	4082      	lsls	r2, r0
 80015d0:	40d9      	lsrs	r1, r3
 80015d2:	1e50      	subs	r0, r2, #1
 80015d4:	4182      	sbcs	r2, r0
 80015d6:	430c      	orrs	r4, r1
 80015d8:	4314      	orrs	r4, r2
 80015da:	465a      	mov	r2, fp
 80015dc:	40da      	lsrs	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	0762      	lsls	r2, r4, #29
 80015e2:	d009      	beq.n	80015f8 <__aeabi_ddiv+0x4f4>
 80015e4:	220f      	movs	r2, #15
 80015e6:	4022      	ands	r2, r4
 80015e8:	2a04      	cmp	r2, #4
 80015ea:	d005      	beq.n	80015f8 <__aeabi_ddiv+0x4f4>
 80015ec:	0022      	movs	r2, r4
 80015ee:	1d14      	adds	r4, r2, #4
 80015f0:	4294      	cmp	r4, r2
 80015f2:	4189      	sbcs	r1, r1
 80015f4:	4249      	negs	r1, r1
 80015f6:	185b      	adds	r3, r3, r1
 80015f8:	021a      	lsls	r2, r3, #8
 80015fa:	d562      	bpl.n	80016c2 <__aeabi_ddiv+0x5be>
 80015fc:	2201      	movs	r2, #1
 80015fe:	2300      	movs	r3, #0
 8001600:	2700      	movs	r7, #0
 8001602:	e60d      	b.n	8001220 <__aeabi_ddiv+0x11c>
 8001604:	428a      	cmp	r2, r1
 8001606:	d800      	bhi.n	800160a <__aeabi_ddiv+0x506>
 8001608:	e70a      	b.n	8001420 <__aeabi_ddiv+0x31c>
 800160a:	1e83      	subs	r3, r0, #2
 800160c:	1989      	adds	r1, r1, r6
 800160e:	e707      	b.n	8001420 <__aeabi_ddiv+0x31c>
 8001610:	230f      	movs	r3, #15
 8001612:	4013      	ands	r3, r2
 8001614:	2b04      	cmp	r3, #4
 8001616:	d100      	bne.n	800161a <__aeabi_ddiv+0x516>
 8001618:	e5e6      	b.n	80011e8 <__aeabi_ddiv+0xe4>
 800161a:	1d17      	adds	r7, r2, #4
 800161c:	4297      	cmp	r7, r2
 800161e:	4192      	sbcs	r2, r2
 8001620:	4253      	negs	r3, r2
 8001622:	449b      	add	fp, r3
 8001624:	08fa      	lsrs	r2, r7, #3
 8001626:	e5e0      	b.n	80011ea <__aeabi_ddiv+0xe6>
 8001628:	2800      	cmp	r0, #0
 800162a:	d100      	bne.n	800162e <__aeabi_ddiv+0x52a>
 800162c:	e5d7      	b.n	80011de <__aeabi_ddiv+0xda>
 800162e:	1871      	adds	r1, r6, r1
 8001630:	1e53      	subs	r3, r2, #1
 8001632:	42b1      	cmp	r1, r6
 8001634:	d327      	bcc.n	8001686 <__aeabi_ddiv+0x582>
 8001636:	42a9      	cmp	r1, r5
 8001638:	d315      	bcc.n	8001666 <__aeabi_ddiv+0x562>
 800163a:	d058      	beq.n	80016ee <__aeabi_ddiv+0x5ea>
 800163c:	001a      	movs	r2, r3
 800163e:	e773      	b.n	8001528 <__aeabi_ddiv+0x424>
 8001640:	2b00      	cmp	r3, #0
 8001642:	dc00      	bgt.n	8001646 <__aeabi_ddiv+0x542>
 8001644:	e604      	b.n	8001250 <__aeabi_ddiv+0x14c>
 8001646:	2301      	movs	r3, #1
 8001648:	2200      	movs	r2, #0
 800164a:	449b      	add	fp, r3
 800164c:	e5cd      	b.n	80011ea <__aeabi_ddiv+0xe6>
 800164e:	2302      	movs	r3, #2
 8001650:	4447      	add	r7, r8
 8001652:	4547      	cmp	r7, r8
 8001654:	4189      	sbcs	r1, r1
 8001656:	425b      	negs	r3, r3
 8001658:	469c      	mov	ip, r3
 800165a:	4249      	negs	r1, r1
 800165c:	1989      	adds	r1, r1, r6
 800165e:	190c      	adds	r4, r1, r4
 8001660:	44e3      	add	fp, ip
 8001662:	1a24      	subs	r4, r4, r0
 8001664:	e703      	b.n	800146e <__aeabi_ddiv+0x36a>
 8001666:	4643      	mov	r3, r8
 8001668:	005f      	lsls	r7, r3, #1
 800166a:	4547      	cmp	r7, r8
 800166c:	419b      	sbcs	r3, r3
 800166e:	46b8      	mov	r8, r7
 8001670:	425b      	negs	r3, r3
 8001672:	199e      	adds	r6, r3, r6
 8001674:	3a02      	subs	r2, #2
 8001676:	1989      	adds	r1, r1, r6
 8001678:	42a9      	cmp	r1, r5
 800167a:	d000      	beq.n	800167e <__aeabi_ddiv+0x57a>
 800167c:	e754      	b.n	8001528 <__aeabi_ddiv+0x424>
 800167e:	4540      	cmp	r0, r8
 8001680:	d000      	beq.n	8001684 <__aeabi_ddiv+0x580>
 8001682:	e751      	b.n	8001528 <__aeabi_ddiv+0x424>
 8001684:	e5ab      	b.n	80011de <__aeabi_ddiv+0xda>
 8001686:	001a      	movs	r2, r3
 8001688:	e7f6      	b.n	8001678 <__aeabi_ddiv+0x574>
 800168a:	211f      	movs	r1, #31
 800168c:	465f      	mov	r7, fp
 800168e:	4249      	negs	r1, r1
 8001690:	1b0c      	subs	r4, r1, r4
 8001692:	40e7      	lsrs	r7, r4
 8001694:	2b20      	cmp	r3, #32
 8001696:	d007      	beq.n	80016a8 <__aeabi_ddiv+0x5a4>
 8001698:	491a      	ldr	r1, [pc, #104]	; (8001704 <__aeabi_ddiv+0x600>)
 800169a:	9b00      	ldr	r3, [sp, #0]
 800169c:	468c      	mov	ip, r1
 800169e:	4463      	add	r3, ip
 80016a0:	0018      	movs	r0, r3
 80016a2:	465b      	mov	r3, fp
 80016a4:	4083      	lsls	r3, r0
 80016a6:	431a      	orrs	r2, r3
 80016a8:	1e50      	subs	r0, r2, #1
 80016aa:	4182      	sbcs	r2, r0
 80016ac:	433a      	orrs	r2, r7
 80016ae:	2707      	movs	r7, #7
 80016b0:	2300      	movs	r3, #0
 80016b2:	4017      	ands	r7, r2
 80016b4:	d009      	beq.n	80016ca <__aeabi_ddiv+0x5c6>
 80016b6:	210f      	movs	r1, #15
 80016b8:	2300      	movs	r3, #0
 80016ba:	4011      	ands	r1, r2
 80016bc:	0014      	movs	r4, r2
 80016be:	2904      	cmp	r1, #4
 80016c0:	d195      	bne.n	80015ee <__aeabi_ddiv+0x4ea>
 80016c2:	0022      	movs	r2, r4
 80016c4:	075f      	lsls	r7, r3, #29
 80016c6:	025b      	lsls	r3, r3, #9
 80016c8:	0b1b      	lsrs	r3, r3, #12
 80016ca:	08d2      	lsrs	r2, r2, #3
 80016cc:	4317      	orrs	r7, r2
 80016ce:	2200      	movs	r2, #0
 80016d0:	e5a6      	b.n	8001220 <__aeabi_ddiv+0x11c>
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	4659      	mov	r1, fp
 80016d6:	031b      	lsls	r3, r3, #12
 80016d8:	430b      	orrs	r3, r1
 80016da:	031b      	lsls	r3, r3, #12
 80016dc:	0017      	movs	r7, r2
 80016de:	0b1b      	lsrs	r3, r3, #12
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <__aeabi_ddiv+0x5f8>)
 80016e2:	e59d      	b.n	8001220 <__aeabi_ddiv+0x11c>
 80016e4:	42bd      	cmp	r5, r7
 80016e6:	d8b2      	bhi.n	800164e <__aeabi_ddiv+0x54a>
 80016e8:	469b      	mov	fp, r3
 80016ea:	2400      	movs	r4, #0
 80016ec:	e6bf      	b.n	800146e <__aeabi_ddiv+0x36a>
 80016ee:	4580      	cmp	r8, r0
 80016f0:	d3b9      	bcc.n	8001666 <__aeabi_ddiv+0x562>
 80016f2:	001a      	movs	r2, r3
 80016f4:	e7c3      	b.n	800167e <__aeabi_ddiv+0x57a>
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	000003ff 	.word	0x000003ff
 80016fc:	000007ff 	.word	0x000007ff
 8001700:	0000041e 	.word	0x0000041e
 8001704:	0000043e 	.word	0x0000043e

08001708 <__aeabi_dmul>:
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	4657      	mov	r7, sl
 800170c:	46de      	mov	lr, fp
 800170e:	464e      	mov	r6, r9
 8001710:	4645      	mov	r5, r8
 8001712:	b5e0      	push	{r5, r6, r7, lr}
 8001714:	4683      	mov	fp, r0
 8001716:	0006      	movs	r6, r0
 8001718:	030f      	lsls	r7, r1, #12
 800171a:	0048      	lsls	r0, r1, #1
 800171c:	b087      	sub	sp, #28
 800171e:	4692      	mov	sl, r2
 8001720:	001d      	movs	r5, r3
 8001722:	0b3f      	lsrs	r7, r7, #12
 8001724:	0d40      	lsrs	r0, r0, #21
 8001726:	0fcc      	lsrs	r4, r1, #31
 8001728:	2800      	cmp	r0, #0
 800172a:	d100      	bne.n	800172e <__aeabi_dmul+0x26>
 800172c:	e06f      	b.n	800180e <__aeabi_dmul+0x106>
 800172e:	4bde      	ldr	r3, [pc, #888]	; (8001aa8 <__aeabi_dmul+0x3a0>)
 8001730:	4298      	cmp	r0, r3
 8001732:	d038      	beq.n	80017a6 <__aeabi_dmul+0x9e>
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	00ff      	lsls	r7, r7, #3
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	431f      	orrs	r7, r3
 800173c:	0f73      	lsrs	r3, r6, #29
 800173e:	433b      	orrs	r3, r7
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	4bda      	ldr	r3, [pc, #872]	; (8001aac <__aeabi_dmul+0x3a4>)
 8001744:	2700      	movs	r7, #0
 8001746:	4699      	mov	r9, r3
 8001748:	2300      	movs	r3, #0
 800174a:	469b      	mov	fp, r3
 800174c:	00f6      	lsls	r6, r6, #3
 800174e:	4481      	add	r9, r0
 8001750:	032b      	lsls	r3, r5, #12
 8001752:	0069      	lsls	r1, r5, #1
 8001754:	0b1b      	lsrs	r3, r3, #12
 8001756:	4652      	mov	r2, sl
 8001758:	4698      	mov	r8, r3
 800175a:	0d49      	lsrs	r1, r1, #21
 800175c:	0fed      	lsrs	r5, r5, #31
 800175e:	2900      	cmp	r1, #0
 8001760:	d100      	bne.n	8001764 <__aeabi_dmul+0x5c>
 8001762:	e085      	b.n	8001870 <__aeabi_dmul+0x168>
 8001764:	4bd0      	ldr	r3, [pc, #832]	; (8001aa8 <__aeabi_dmul+0x3a0>)
 8001766:	4299      	cmp	r1, r3
 8001768:	d100      	bne.n	800176c <__aeabi_dmul+0x64>
 800176a:	e073      	b.n	8001854 <__aeabi_dmul+0x14c>
 800176c:	4643      	mov	r3, r8
 800176e:	00da      	lsls	r2, r3, #3
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	041b      	lsls	r3, r3, #16
 8001774:	4313      	orrs	r3, r2
 8001776:	4652      	mov	r2, sl
 8001778:	48cc      	ldr	r0, [pc, #816]	; (8001aac <__aeabi_dmul+0x3a4>)
 800177a:	0f52      	lsrs	r2, r2, #29
 800177c:	4684      	mov	ip, r0
 800177e:	4313      	orrs	r3, r2
 8001780:	4652      	mov	r2, sl
 8001782:	2000      	movs	r0, #0
 8001784:	4461      	add	r1, ip
 8001786:	00d2      	lsls	r2, r2, #3
 8001788:	4489      	add	r9, r1
 800178a:	0021      	movs	r1, r4
 800178c:	4069      	eors	r1, r5
 800178e:	9100      	str	r1, [sp, #0]
 8001790:	468c      	mov	ip, r1
 8001792:	2101      	movs	r1, #1
 8001794:	4449      	add	r1, r9
 8001796:	468a      	mov	sl, r1
 8001798:	2f0f      	cmp	r7, #15
 800179a:	d900      	bls.n	800179e <__aeabi_dmul+0x96>
 800179c:	e090      	b.n	80018c0 <__aeabi_dmul+0x1b8>
 800179e:	49c4      	ldr	r1, [pc, #784]	; (8001ab0 <__aeabi_dmul+0x3a8>)
 80017a0:	00bf      	lsls	r7, r7, #2
 80017a2:	59cf      	ldr	r7, [r1, r7]
 80017a4:	46bf      	mov	pc, r7
 80017a6:	465b      	mov	r3, fp
 80017a8:	433b      	orrs	r3, r7
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	d000      	beq.n	80017b0 <__aeabi_dmul+0xa8>
 80017ae:	e16a      	b.n	8001a86 <__aeabi_dmul+0x37e>
 80017b0:	2302      	movs	r3, #2
 80017b2:	2708      	movs	r7, #8
 80017b4:	2600      	movs	r6, #0
 80017b6:	4681      	mov	r9, r0
 80017b8:	469b      	mov	fp, r3
 80017ba:	e7c9      	b.n	8001750 <__aeabi_dmul+0x48>
 80017bc:	0032      	movs	r2, r6
 80017be:	4658      	mov	r0, fp
 80017c0:	9b01      	ldr	r3, [sp, #4]
 80017c2:	4661      	mov	r1, ip
 80017c4:	9100      	str	r1, [sp, #0]
 80017c6:	2802      	cmp	r0, #2
 80017c8:	d100      	bne.n	80017cc <__aeabi_dmul+0xc4>
 80017ca:	e075      	b.n	80018b8 <__aeabi_dmul+0x1b0>
 80017cc:	2803      	cmp	r0, #3
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dmul+0xca>
 80017d0:	e1fe      	b.n	8001bd0 <__aeabi_dmul+0x4c8>
 80017d2:	2801      	cmp	r0, #1
 80017d4:	d000      	beq.n	80017d8 <__aeabi_dmul+0xd0>
 80017d6:	e12c      	b.n	8001a32 <__aeabi_dmul+0x32a>
 80017d8:	2300      	movs	r3, #0
 80017da:	2700      	movs	r7, #0
 80017dc:	2600      	movs	r6, #0
 80017de:	2500      	movs	r5, #0
 80017e0:	033f      	lsls	r7, r7, #12
 80017e2:	0d2a      	lsrs	r2, r5, #20
 80017e4:	0b3f      	lsrs	r7, r7, #12
 80017e6:	48b3      	ldr	r0, [pc, #716]	; (8001ab4 <__aeabi_dmul+0x3ac>)
 80017e8:	0512      	lsls	r2, r2, #20
 80017ea:	433a      	orrs	r2, r7
 80017ec:	4002      	ands	r2, r0
 80017ee:	051b      	lsls	r3, r3, #20
 80017f0:	4313      	orrs	r3, r2
 80017f2:	9a00      	ldr	r2, [sp, #0]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	07d1      	lsls	r1, r2, #31
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	430b      	orrs	r3, r1
 80017fc:	0030      	movs	r0, r6
 80017fe:	0019      	movs	r1, r3
 8001800:	b007      	add	sp, #28
 8001802:	bc3c      	pop	{r2, r3, r4, r5}
 8001804:	4690      	mov	r8, r2
 8001806:	4699      	mov	r9, r3
 8001808:	46a2      	mov	sl, r4
 800180a:	46ab      	mov	fp, r5
 800180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180e:	465b      	mov	r3, fp
 8001810:	433b      	orrs	r3, r7
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	d100      	bne.n	8001818 <__aeabi_dmul+0x110>
 8001816:	e12f      	b.n	8001a78 <__aeabi_dmul+0x370>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d100      	bne.n	800181e <__aeabi_dmul+0x116>
 800181c:	e1a5      	b.n	8001b6a <__aeabi_dmul+0x462>
 800181e:	0038      	movs	r0, r7
 8001820:	f000 fe76 	bl	8002510 <__clzsi2>
 8001824:	0003      	movs	r3, r0
 8001826:	3b0b      	subs	r3, #11
 8001828:	2b1c      	cmp	r3, #28
 800182a:	dd00      	ble.n	800182e <__aeabi_dmul+0x126>
 800182c:	e196      	b.n	8001b5c <__aeabi_dmul+0x454>
 800182e:	221d      	movs	r2, #29
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	465a      	mov	r2, fp
 8001834:	0001      	movs	r1, r0
 8001836:	40da      	lsrs	r2, r3
 8001838:	465e      	mov	r6, fp
 800183a:	3908      	subs	r1, #8
 800183c:	408f      	lsls	r7, r1
 800183e:	0013      	movs	r3, r2
 8001840:	408e      	lsls	r6, r1
 8001842:	433b      	orrs	r3, r7
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	4b9c      	ldr	r3, [pc, #624]	; (8001ab8 <__aeabi_dmul+0x3b0>)
 8001848:	2700      	movs	r7, #0
 800184a:	1a1b      	subs	r3, r3, r0
 800184c:	4699      	mov	r9, r3
 800184e:	2300      	movs	r3, #0
 8001850:	469b      	mov	fp, r3
 8001852:	e77d      	b.n	8001750 <__aeabi_dmul+0x48>
 8001854:	4641      	mov	r1, r8
 8001856:	4653      	mov	r3, sl
 8001858:	430b      	orrs	r3, r1
 800185a:	4993      	ldr	r1, [pc, #588]	; (8001aa8 <__aeabi_dmul+0x3a0>)
 800185c:	468c      	mov	ip, r1
 800185e:	44e1      	add	r9, ip
 8001860:	2b00      	cmp	r3, #0
 8001862:	d000      	beq.n	8001866 <__aeabi_dmul+0x15e>
 8001864:	e11a      	b.n	8001a9c <__aeabi_dmul+0x394>
 8001866:	2202      	movs	r2, #2
 8001868:	2002      	movs	r0, #2
 800186a:	4317      	orrs	r7, r2
 800186c:	2200      	movs	r2, #0
 800186e:	e78c      	b.n	800178a <__aeabi_dmul+0x82>
 8001870:	4313      	orrs	r3, r2
 8001872:	d100      	bne.n	8001876 <__aeabi_dmul+0x16e>
 8001874:	e10d      	b.n	8001a92 <__aeabi_dmul+0x38a>
 8001876:	4643      	mov	r3, r8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d100      	bne.n	800187e <__aeabi_dmul+0x176>
 800187c:	e181      	b.n	8001b82 <__aeabi_dmul+0x47a>
 800187e:	4640      	mov	r0, r8
 8001880:	f000 fe46 	bl	8002510 <__clzsi2>
 8001884:	0002      	movs	r2, r0
 8001886:	3a0b      	subs	r2, #11
 8001888:	2a1c      	cmp	r2, #28
 800188a:	dd00      	ble.n	800188e <__aeabi_dmul+0x186>
 800188c:	e172      	b.n	8001b74 <__aeabi_dmul+0x46c>
 800188e:	0001      	movs	r1, r0
 8001890:	4643      	mov	r3, r8
 8001892:	3908      	subs	r1, #8
 8001894:	408b      	lsls	r3, r1
 8001896:	4698      	mov	r8, r3
 8001898:	231d      	movs	r3, #29
 800189a:	1a9a      	subs	r2, r3, r2
 800189c:	4653      	mov	r3, sl
 800189e:	40d3      	lsrs	r3, r2
 80018a0:	001a      	movs	r2, r3
 80018a2:	4643      	mov	r3, r8
 80018a4:	4313      	orrs	r3, r2
 80018a6:	4652      	mov	r2, sl
 80018a8:	408a      	lsls	r2, r1
 80018aa:	4649      	mov	r1, r9
 80018ac:	1a08      	subs	r0, r1, r0
 80018ae:	4982      	ldr	r1, [pc, #520]	; (8001ab8 <__aeabi_dmul+0x3b0>)
 80018b0:	4689      	mov	r9, r1
 80018b2:	4481      	add	r9, r0
 80018b4:	2000      	movs	r0, #0
 80018b6:	e768      	b.n	800178a <__aeabi_dmul+0x82>
 80018b8:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <__aeabi_dmul+0x3a0>)
 80018ba:	2700      	movs	r7, #0
 80018bc:	2600      	movs	r6, #0
 80018be:	e78e      	b.n	80017de <__aeabi_dmul+0xd6>
 80018c0:	0c14      	lsrs	r4, r2, #16
 80018c2:	0412      	lsls	r2, r2, #16
 80018c4:	0c12      	lsrs	r2, r2, #16
 80018c6:	0011      	movs	r1, r2
 80018c8:	0c37      	lsrs	r7, r6, #16
 80018ca:	0436      	lsls	r6, r6, #16
 80018cc:	0c35      	lsrs	r5, r6, #16
 80018ce:	4379      	muls	r1, r7
 80018d0:	0028      	movs	r0, r5
 80018d2:	468c      	mov	ip, r1
 80018d4:	002e      	movs	r6, r5
 80018d6:	4360      	muls	r0, r4
 80018d8:	4460      	add	r0, ip
 80018da:	4683      	mov	fp, r0
 80018dc:	4356      	muls	r6, r2
 80018de:	0021      	movs	r1, r4
 80018e0:	0c30      	lsrs	r0, r6, #16
 80018e2:	4680      	mov	r8, r0
 80018e4:	4658      	mov	r0, fp
 80018e6:	4379      	muls	r1, r7
 80018e8:	4440      	add	r0, r8
 80018ea:	9102      	str	r1, [sp, #8]
 80018ec:	4584      	cmp	ip, r0
 80018ee:	d906      	bls.n	80018fe <__aeabi_dmul+0x1f6>
 80018f0:	4688      	mov	r8, r1
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	0249      	lsls	r1, r1, #9
 80018f6:	468c      	mov	ip, r1
 80018f8:	44e0      	add	r8, ip
 80018fa:	4641      	mov	r1, r8
 80018fc:	9102      	str	r1, [sp, #8]
 80018fe:	0436      	lsls	r6, r6, #16
 8001900:	0c01      	lsrs	r1, r0, #16
 8001902:	0c36      	lsrs	r6, r6, #16
 8001904:	0400      	lsls	r0, r0, #16
 8001906:	468b      	mov	fp, r1
 8001908:	1981      	adds	r1, r0, r6
 800190a:	0c1e      	lsrs	r6, r3, #16
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	0c1b      	lsrs	r3, r3, #16
 8001910:	9103      	str	r1, [sp, #12]
 8001912:	0019      	movs	r1, r3
 8001914:	4379      	muls	r1, r7
 8001916:	468c      	mov	ip, r1
 8001918:	0028      	movs	r0, r5
 800191a:	4375      	muls	r5, r6
 800191c:	4465      	add	r5, ip
 800191e:	46a8      	mov	r8, r5
 8001920:	4358      	muls	r0, r3
 8001922:	0c05      	lsrs	r5, r0, #16
 8001924:	4445      	add	r5, r8
 8001926:	4377      	muls	r7, r6
 8001928:	42a9      	cmp	r1, r5
 800192a:	d903      	bls.n	8001934 <__aeabi_dmul+0x22c>
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	0249      	lsls	r1, r1, #9
 8001930:	468c      	mov	ip, r1
 8001932:	4467      	add	r7, ip
 8001934:	0c29      	lsrs	r1, r5, #16
 8001936:	468c      	mov	ip, r1
 8001938:	0039      	movs	r1, r7
 800193a:	0400      	lsls	r0, r0, #16
 800193c:	0c00      	lsrs	r0, r0, #16
 800193e:	042d      	lsls	r5, r5, #16
 8001940:	182d      	adds	r5, r5, r0
 8001942:	4461      	add	r1, ip
 8001944:	44ab      	add	fp, r5
 8001946:	9105      	str	r1, [sp, #20]
 8001948:	4659      	mov	r1, fp
 800194a:	9104      	str	r1, [sp, #16]
 800194c:	9901      	ldr	r1, [sp, #4]
 800194e:	040f      	lsls	r7, r1, #16
 8001950:	0c3f      	lsrs	r7, r7, #16
 8001952:	0c08      	lsrs	r0, r1, #16
 8001954:	0039      	movs	r1, r7
 8001956:	4351      	muls	r1, r2
 8001958:	4342      	muls	r2, r0
 800195a:	4690      	mov	r8, r2
 800195c:	0002      	movs	r2, r0
 800195e:	468c      	mov	ip, r1
 8001960:	0c09      	lsrs	r1, r1, #16
 8001962:	468b      	mov	fp, r1
 8001964:	4362      	muls	r2, r4
 8001966:	437c      	muls	r4, r7
 8001968:	4444      	add	r4, r8
 800196a:	445c      	add	r4, fp
 800196c:	45a0      	cmp	r8, r4
 800196e:	d903      	bls.n	8001978 <__aeabi_dmul+0x270>
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	0249      	lsls	r1, r1, #9
 8001974:	4688      	mov	r8, r1
 8001976:	4442      	add	r2, r8
 8001978:	0c21      	lsrs	r1, r4, #16
 800197a:	4688      	mov	r8, r1
 800197c:	4661      	mov	r1, ip
 800197e:	0409      	lsls	r1, r1, #16
 8001980:	0c09      	lsrs	r1, r1, #16
 8001982:	468c      	mov	ip, r1
 8001984:	0039      	movs	r1, r7
 8001986:	4359      	muls	r1, r3
 8001988:	4343      	muls	r3, r0
 800198a:	4370      	muls	r0, r6
 800198c:	437e      	muls	r6, r7
 800198e:	0c0f      	lsrs	r7, r1, #16
 8001990:	18f6      	adds	r6, r6, r3
 8001992:	0424      	lsls	r4, r4, #16
 8001994:	19be      	adds	r6, r7, r6
 8001996:	4464      	add	r4, ip
 8001998:	4442      	add	r2, r8
 800199a:	468c      	mov	ip, r1
 800199c:	42b3      	cmp	r3, r6
 800199e:	d903      	bls.n	80019a8 <__aeabi_dmul+0x2a0>
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	025b      	lsls	r3, r3, #9
 80019a4:	4698      	mov	r8, r3
 80019a6:	4440      	add	r0, r8
 80019a8:	9b02      	ldr	r3, [sp, #8]
 80019aa:	4661      	mov	r1, ip
 80019ac:	4698      	mov	r8, r3
 80019ae:	9b04      	ldr	r3, [sp, #16]
 80019b0:	0437      	lsls	r7, r6, #16
 80019b2:	4443      	add	r3, r8
 80019b4:	469b      	mov	fp, r3
 80019b6:	45ab      	cmp	fp, r5
 80019b8:	41ad      	sbcs	r5, r5
 80019ba:	426b      	negs	r3, r5
 80019bc:	040d      	lsls	r5, r1, #16
 80019be:	9905      	ldr	r1, [sp, #20]
 80019c0:	0c2d      	lsrs	r5, r5, #16
 80019c2:	468c      	mov	ip, r1
 80019c4:	197f      	adds	r7, r7, r5
 80019c6:	4467      	add	r7, ip
 80019c8:	18fd      	adds	r5, r7, r3
 80019ca:	46a8      	mov	r8, r5
 80019cc:	465d      	mov	r5, fp
 80019ce:	192d      	adds	r5, r5, r4
 80019d0:	42a5      	cmp	r5, r4
 80019d2:	41a4      	sbcs	r4, r4
 80019d4:	4693      	mov	fp, r2
 80019d6:	4264      	negs	r4, r4
 80019d8:	46a4      	mov	ip, r4
 80019da:	44c3      	add	fp, r8
 80019dc:	44dc      	add	ip, fp
 80019de:	428f      	cmp	r7, r1
 80019e0:	41bf      	sbcs	r7, r7
 80019e2:	4598      	cmp	r8, r3
 80019e4:	419b      	sbcs	r3, r3
 80019e6:	4593      	cmp	fp, r2
 80019e8:	4192      	sbcs	r2, r2
 80019ea:	45a4      	cmp	ip, r4
 80019ec:	41a4      	sbcs	r4, r4
 80019ee:	425b      	negs	r3, r3
 80019f0:	427f      	negs	r7, r7
 80019f2:	431f      	orrs	r7, r3
 80019f4:	0c36      	lsrs	r6, r6, #16
 80019f6:	4252      	negs	r2, r2
 80019f8:	4264      	negs	r4, r4
 80019fa:	19bf      	adds	r7, r7, r6
 80019fc:	4322      	orrs	r2, r4
 80019fe:	18bf      	adds	r7, r7, r2
 8001a00:	4662      	mov	r2, ip
 8001a02:	1838      	adds	r0, r7, r0
 8001a04:	0243      	lsls	r3, r0, #9
 8001a06:	0dd2      	lsrs	r2, r2, #23
 8001a08:	9903      	ldr	r1, [sp, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	026a      	lsls	r2, r5, #9
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	1e50      	subs	r0, r2, #1
 8001a12:	4182      	sbcs	r2, r0
 8001a14:	4661      	mov	r1, ip
 8001a16:	0ded      	lsrs	r5, r5, #23
 8001a18:	432a      	orrs	r2, r5
 8001a1a:	024e      	lsls	r6, r1, #9
 8001a1c:	4332      	orrs	r2, r6
 8001a1e:	01d9      	lsls	r1, r3, #7
 8001a20:	d400      	bmi.n	8001a24 <__aeabi_dmul+0x31c>
 8001a22:	e0b3      	b.n	8001b8c <__aeabi_dmul+0x484>
 8001a24:	2601      	movs	r6, #1
 8001a26:	0850      	lsrs	r0, r2, #1
 8001a28:	4032      	ands	r2, r6
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	07de      	lsls	r6, r3, #31
 8001a2e:	4332      	orrs	r2, r6
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4c22      	ldr	r4, [pc, #136]	; (8001abc <__aeabi_dmul+0x3b4>)
 8001a34:	4454      	add	r4, sl
 8001a36:	2c00      	cmp	r4, #0
 8001a38:	dd62      	ble.n	8001b00 <__aeabi_dmul+0x3f8>
 8001a3a:	0751      	lsls	r1, r2, #29
 8001a3c:	d009      	beq.n	8001a52 <__aeabi_dmul+0x34a>
 8001a3e:	200f      	movs	r0, #15
 8001a40:	4010      	ands	r0, r2
 8001a42:	2804      	cmp	r0, #4
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dmul+0x34a>
 8001a46:	1d10      	adds	r0, r2, #4
 8001a48:	4290      	cmp	r0, r2
 8001a4a:	4192      	sbcs	r2, r2
 8001a4c:	4252      	negs	r2, r2
 8001a4e:	189b      	adds	r3, r3, r2
 8001a50:	0002      	movs	r2, r0
 8001a52:	01d9      	lsls	r1, r3, #7
 8001a54:	d504      	bpl.n	8001a60 <__aeabi_dmul+0x358>
 8001a56:	2480      	movs	r4, #128	; 0x80
 8001a58:	4819      	ldr	r0, [pc, #100]	; (8001ac0 <__aeabi_dmul+0x3b8>)
 8001a5a:	00e4      	lsls	r4, r4, #3
 8001a5c:	4003      	ands	r3, r0
 8001a5e:	4454      	add	r4, sl
 8001a60:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <__aeabi_dmul+0x3bc>)
 8001a62:	4284      	cmp	r4, r0
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x360>
 8001a66:	e727      	b.n	80018b8 <__aeabi_dmul+0x1b0>
 8001a68:	075e      	lsls	r6, r3, #29
 8001a6a:	025b      	lsls	r3, r3, #9
 8001a6c:	08d2      	lsrs	r2, r2, #3
 8001a6e:	0b1f      	lsrs	r7, r3, #12
 8001a70:	0563      	lsls	r3, r4, #21
 8001a72:	4316      	orrs	r6, r2
 8001a74:	0d5b      	lsrs	r3, r3, #21
 8001a76:	e6b2      	b.n	80017de <__aeabi_dmul+0xd6>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	2704      	movs	r7, #4
 8001a80:	2600      	movs	r6, #0
 8001a82:	469b      	mov	fp, r3
 8001a84:	e664      	b.n	8001750 <__aeabi_dmul+0x48>
 8001a86:	2303      	movs	r3, #3
 8001a88:	9701      	str	r7, [sp, #4]
 8001a8a:	4681      	mov	r9, r0
 8001a8c:	270c      	movs	r7, #12
 8001a8e:	469b      	mov	fp, r3
 8001a90:	e65e      	b.n	8001750 <__aeabi_dmul+0x48>
 8001a92:	2201      	movs	r2, #1
 8001a94:	2001      	movs	r0, #1
 8001a96:	4317      	orrs	r7, r2
 8001a98:	2200      	movs	r2, #0
 8001a9a:	e676      	b.n	800178a <__aeabi_dmul+0x82>
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	431f      	orrs	r7, r3
 8001aa2:	4643      	mov	r3, r8
 8001aa4:	e671      	b.n	800178a <__aeabi_dmul+0x82>
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	000007ff 	.word	0x000007ff
 8001aac:	fffffc01 	.word	0xfffffc01
 8001ab0:	08008f94 	.word	0x08008f94
 8001ab4:	800fffff 	.word	0x800fffff
 8001ab8:	fffffc0d 	.word	0xfffffc0d
 8001abc:	000003ff 	.word	0x000003ff
 8001ac0:	feffffff 	.word	0xfeffffff
 8001ac4:	000007fe 	.word	0x000007fe
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2780      	movs	r7, #128	; 0x80
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	033f      	lsls	r7, r7, #12
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <__aeabi_dmul+0x4d8>)
 8001ad4:	e683      	b.n	80017de <__aeabi_dmul+0xd6>
 8001ad6:	9b01      	ldr	r3, [sp, #4]
 8001ad8:	0032      	movs	r2, r6
 8001ada:	46a4      	mov	ip, r4
 8001adc:	4658      	mov	r0, fp
 8001ade:	e670      	b.n	80017c2 <__aeabi_dmul+0xba>
 8001ae0:	46ac      	mov	ip, r5
 8001ae2:	e66e      	b.n	80017c2 <__aeabi_dmul+0xba>
 8001ae4:	2780      	movs	r7, #128	; 0x80
 8001ae6:	9901      	ldr	r1, [sp, #4]
 8001ae8:	033f      	lsls	r7, r7, #12
 8001aea:	4239      	tst	r1, r7
 8001aec:	d02d      	beq.n	8001b4a <__aeabi_dmul+0x442>
 8001aee:	423b      	tst	r3, r7
 8001af0:	d12b      	bne.n	8001b4a <__aeabi_dmul+0x442>
 8001af2:	431f      	orrs	r7, r3
 8001af4:	033f      	lsls	r7, r7, #12
 8001af6:	0b3f      	lsrs	r7, r7, #12
 8001af8:	9500      	str	r5, [sp, #0]
 8001afa:	0016      	movs	r6, r2
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <__aeabi_dmul+0x4d8>)
 8001afe:	e66e      	b.n	80017de <__aeabi_dmul+0xd6>
 8001b00:	2501      	movs	r5, #1
 8001b02:	1b2d      	subs	r5, r5, r4
 8001b04:	2d38      	cmp	r5, #56	; 0x38
 8001b06:	dd00      	ble.n	8001b0a <__aeabi_dmul+0x402>
 8001b08:	e666      	b.n	80017d8 <__aeabi_dmul+0xd0>
 8001b0a:	2d1f      	cmp	r5, #31
 8001b0c:	dc40      	bgt.n	8001b90 <__aeabi_dmul+0x488>
 8001b0e:	4835      	ldr	r0, [pc, #212]	; (8001be4 <__aeabi_dmul+0x4dc>)
 8001b10:	001c      	movs	r4, r3
 8001b12:	4450      	add	r0, sl
 8001b14:	0016      	movs	r6, r2
 8001b16:	4082      	lsls	r2, r0
 8001b18:	4084      	lsls	r4, r0
 8001b1a:	40ee      	lsrs	r6, r5
 8001b1c:	1e50      	subs	r0, r2, #1
 8001b1e:	4182      	sbcs	r2, r0
 8001b20:	4334      	orrs	r4, r6
 8001b22:	4314      	orrs	r4, r2
 8001b24:	40eb      	lsrs	r3, r5
 8001b26:	0762      	lsls	r2, r4, #29
 8001b28:	d009      	beq.n	8001b3e <__aeabi_dmul+0x436>
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	4022      	ands	r2, r4
 8001b2e:	2a04      	cmp	r2, #4
 8001b30:	d005      	beq.n	8001b3e <__aeabi_dmul+0x436>
 8001b32:	0022      	movs	r2, r4
 8001b34:	1d14      	adds	r4, r2, #4
 8001b36:	4294      	cmp	r4, r2
 8001b38:	4180      	sbcs	r0, r0
 8001b3a:	4240      	negs	r0, r0
 8001b3c:	181b      	adds	r3, r3, r0
 8001b3e:	021a      	lsls	r2, r3, #8
 8001b40:	d53e      	bpl.n	8001bc0 <__aeabi_dmul+0x4b8>
 8001b42:	2301      	movs	r3, #1
 8001b44:	2700      	movs	r7, #0
 8001b46:	2600      	movs	r6, #0
 8001b48:	e649      	b.n	80017de <__aeabi_dmul+0xd6>
 8001b4a:	2780      	movs	r7, #128	; 0x80
 8001b4c:	9b01      	ldr	r3, [sp, #4]
 8001b4e:	033f      	lsls	r7, r7, #12
 8001b50:	431f      	orrs	r7, r3
 8001b52:	033f      	lsls	r7, r7, #12
 8001b54:	0b3f      	lsrs	r7, r7, #12
 8001b56:	9400      	str	r4, [sp, #0]
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <__aeabi_dmul+0x4d8>)
 8001b5a:	e640      	b.n	80017de <__aeabi_dmul+0xd6>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	465a      	mov	r2, fp
 8001b60:	3b28      	subs	r3, #40	; 0x28
 8001b62:	409a      	lsls	r2, r3
 8001b64:	2600      	movs	r6, #0
 8001b66:	9201      	str	r2, [sp, #4]
 8001b68:	e66d      	b.n	8001846 <__aeabi_dmul+0x13e>
 8001b6a:	4658      	mov	r0, fp
 8001b6c:	f000 fcd0 	bl	8002510 <__clzsi2>
 8001b70:	3020      	adds	r0, #32
 8001b72:	e657      	b.n	8001824 <__aeabi_dmul+0x11c>
 8001b74:	0003      	movs	r3, r0
 8001b76:	4652      	mov	r2, sl
 8001b78:	3b28      	subs	r3, #40	; 0x28
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	e693      	b.n	80018aa <__aeabi_dmul+0x1a2>
 8001b82:	4650      	mov	r0, sl
 8001b84:	f000 fcc4 	bl	8002510 <__clzsi2>
 8001b88:	3020      	adds	r0, #32
 8001b8a:	e67b      	b.n	8001884 <__aeabi_dmul+0x17c>
 8001b8c:	46ca      	mov	sl, r9
 8001b8e:	e750      	b.n	8001a32 <__aeabi_dmul+0x32a>
 8001b90:	201f      	movs	r0, #31
 8001b92:	001e      	movs	r6, r3
 8001b94:	4240      	negs	r0, r0
 8001b96:	1b04      	subs	r4, r0, r4
 8001b98:	40e6      	lsrs	r6, r4
 8001b9a:	2d20      	cmp	r5, #32
 8001b9c:	d003      	beq.n	8001ba6 <__aeabi_dmul+0x49e>
 8001b9e:	4c12      	ldr	r4, [pc, #72]	; (8001be8 <__aeabi_dmul+0x4e0>)
 8001ba0:	4454      	add	r4, sl
 8001ba2:	40a3      	lsls	r3, r4
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	1e50      	subs	r0, r2, #1
 8001ba8:	4182      	sbcs	r2, r0
 8001baa:	4332      	orrs	r2, r6
 8001bac:	2607      	movs	r6, #7
 8001bae:	2700      	movs	r7, #0
 8001bb0:	4016      	ands	r6, r2
 8001bb2:	d009      	beq.n	8001bc8 <__aeabi_dmul+0x4c0>
 8001bb4:	200f      	movs	r0, #15
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	4010      	ands	r0, r2
 8001bba:	0014      	movs	r4, r2
 8001bbc:	2804      	cmp	r0, #4
 8001bbe:	d1b9      	bne.n	8001b34 <__aeabi_dmul+0x42c>
 8001bc0:	0022      	movs	r2, r4
 8001bc2:	075e      	lsls	r6, r3, #29
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	0b1f      	lsrs	r7, r3, #12
 8001bc8:	08d2      	lsrs	r2, r2, #3
 8001bca:	4316      	orrs	r6, r2
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e606      	b.n	80017de <__aeabi_dmul+0xd6>
 8001bd0:	2780      	movs	r7, #128	; 0x80
 8001bd2:	033f      	lsls	r7, r7, #12
 8001bd4:	431f      	orrs	r7, r3
 8001bd6:	033f      	lsls	r7, r7, #12
 8001bd8:	0b3f      	lsrs	r7, r7, #12
 8001bda:	0016      	movs	r6, r2
 8001bdc:	4b00      	ldr	r3, [pc, #0]	; (8001be0 <__aeabi_dmul+0x4d8>)
 8001bde:	e5fe      	b.n	80017de <__aeabi_dmul+0xd6>
 8001be0:	000007ff 	.word	0x000007ff
 8001be4:	0000041e 	.word	0x0000041e
 8001be8:	0000043e 	.word	0x0000043e

08001bec <__aeabi_dsub>:
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bee:	4657      	mov	r7, sl
 8001bf0:	464e      	mov	r6, r9
 8001bf2:	4645      	mov	r5, r8
 8001bf4:	46de      	mov	lr, fp
 8001bf6:	000c      	movs	r4, r1
 8001bf8:	0309      	lsls	r1, r1, #12
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	0a49      	lsrs	r1, r1, #9
 8001bfe:	0f46      	lsrs	r6, r0, #29
 8001c00:	005f      	lsls	r7, r3, #1
 8001c02:	4331      	orrs	r1, r6
 8001c04:	031e      	lsls	r6, r3, #12
 8001c06:	0fdb      	lsrs	r3, r3, #31
 8001c08:	0a76      	lsrs	r6, r6, #9
 8001c0a:	469b      	mov	fp, r3
 8001c0c:	0f53      	lsrs	r3, r2, #29
 8001c0e:	4333      	orrs	r3, r6
 8001c10:	4ec8      	ldr	r6, [pc, #800]	; (8001f34 <__aeabi_dsub+0x348>)
 8001c12:	0065      	lsls	r5, r4, #1
 8001c14:	00c0      	lsls	r0, r0, #3
 8001c16:	0fe4      	lsrs	r4, r4, #31
 8001c18:	00d2      	lsls	r2, r2, #3
 8001c1a:	0d6d      	lsrs	r5, r5, #21
 8001c1c:	46a2      	mov	sl, r4
 8001c1e:	4681      	mov	r9, r0
 8001c20:	0d7f      	lsrs	r7, r7, #21
 8001c22:	469c      	mov	ip, r3
 8001c24:	4690      	mov	r8, r2
 8001c26:	42b7      	cmp	r7, r6
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x40>
 8001c2a:	e0b9      	b.n	8001da0 <__aeabi_dsub+0x1b4>
 8001c2c:	465b      	mov	r3, fp
 8001c2e:	2601      	movs	r6, #1
 8001c30:	4073      	eors	r3, r6
 8001c32:	469b      	mov	fp, r3
 8001c34:	1bee      	subs	r6, r5, r7
 8001c36:	45a3      	cmp	fp, r4
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x50>
 8001c3a:	e083      	b.n	8001d44 <__aeabi_dsub+0x158>
 8001c3c:	2e00      	cmp	r6, #0
 8001c3e:	dd63      	ble.n	8001d08 <__aeabi_dsub+0x11c>
 8001c40:	2f00      	cmp	r7, #0
 8001c42:	d000      	beq.n	8001c46 <__aeabi_dsub+0x5a>
 8001c44:	e0b1      	b.n	8001daa <__aeabi_dsub+0x1be>
 8001c46:	4663      	mov	r3, ip
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dsub+0x62>
 8001c4c:	e123      	b.n	8001e96 <__aeabi_dsub+0x2aa>
 8001c4e:	1e73      	subs	r3, r6, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d000      	beq.n	8001c56 <__aeabi_dsub+0x6a>
 8001c54:	e1ba      	b.n	8001fcc <__aeabi_dsub+0x3e0>
 8001c56:	1a86      	subs	r6, r0, r2
 8001c58:	4663      	mov	r3, ip
 8001c5a:	42b0      	cmp	r0, r6
 8001c5c:	4180      	sbcs	r0, r0
 8001c5e:	2501      	movs	r5, #1
 8001c60:	1ac9      	subs	r1, r1, r3
 8001c62:	4240      	negs	r0, r0
 8001c64:	1a09      	subs	r1, r1, r0
 8001c66:	020b      	lsls	r3, r1, #8
 8001c68:	d400      	bmi.n	8001c6c <__aeabi_dsub+0x80>
 8001c6a:	e147      	b.n	8001efc <__aeabi_dsub+0x310>
 8001c6c:	0249      	lsls	r1, r1, #9
 8001c6e:	0a4b      	lsrs	r3, r1, #9
 8001c70:	4698      	mov	r8, r3
 8001c72:	4643      	mov	r3, r8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d100      	bne.n	8001c7a <__aeabi_dsub+0x8e>
 8001c78:	e189      	b.n	8001f8e <__aeabi_dsub+0x3a2>
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	f000 fc48 	bl	8002510 <__clzsi2>
 8001c80:	0003      	movs	r3, r0
 8001c82:	3b08      	subs	r3, #8
 8001c84:	2b1f      	cmp	r3, #31
 8001c86:	dd00      	ble.n	8001c8a <__aeabi_dsub+0x9e>
 8001c88:	e17c      	b.n	8001f84 <__aeabi_dsub+0x398>
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	0030      	movs	r0, r6
 8001c8e:	1ad2      	subs	r2, r2, r3
 8001c90:	4641      	mov	r1, r8
 8001c92:	40d0      	lsrs	r0, r2
 8001c94:	4099      	lsls	r1, r3
 8001c96:	0002      	movs	r2, r0
 8001c98:	409e      	lsls	r6, r3
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	429d      	cmp	r5, r3
 8001c9e:	dd00      	ble.n	8001ca2 <__aeabi_dsub+0xb6>
 8001ca0:	e16a      	b.n	8001f78 <__aeabi_dsub+0x38c>
 8001ca2:	1b5d      	subs	r5, r3, r5
 8001ca4:	1c6b      	adds	r3, r5, #1
 8001ca6:	2b1f      	cmp	r3, #31
 8001ca8:	dd00      	ble.n	8001cac <__aeabi_dsub+0xc0>
 8001caa:	e194      	b.n	8001fd6 <__aeabi_dsub+0x3ea>
 8001cac:	2120      	movs	r1, #32
 8001cae:	0010      	movs	r0, r2
 8001cb0:	0035      	movs	r5, r6
 8001cb2:	1ac9      	subs	r1, r1, r3
 8001cb4:	408e      	lsls	r6, r1
 8001cb6:	40da      	lsrs	r2, r3
 8001cb8:	4088      	lsls	r0, r1
 8001cba:	40dd      	lsrs	r5, r3
 8001cbc:	1e71      	subs	r1, r6, #1
 8001cbe:	418e      	sbcs	r6, r1
 8001cc0:	0011      	movs	r1, r2
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	4328      	orrs	r0, r5
 8001cc6:	2500      	movs	r5, #0
 8001cc8:	4306      	orrs	r6, r0
 8001cca:	4032      	ands	r2, r6
 8001ccc:	2a00      	cmp	r2, #0
 8001cce:	d009      	beq.n	8001ce4 <__aeabi_dsub+0xf8>
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	4033      	ands	r3, r6
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d005      	beq.n	8001ce4 <__aeabi_dsub+0xf8>
 8001cd8:	1d33      	adds	r3, r6, #4
 8001cda:	42b3      	cmp	r3, r6
 8001cdc:	41b6      	sbcs	r6, r6
 8001cde:	4276      	negs	r6, r6
 8001ce0:	1989      	adds	r1, r1, r6
 8001ce2:	001e      	movs	r6, r3
 8001ce4:	020b      	lsls	r3, r1, #8
 8001ce6:	d400      	bmi.n	8001cea <__aeabi_dsub+0xfe>
 8001ce8:	e23d      	b.n	8002166 <__aeabi_dsub+0x57a>
 8001cea:	1c6a      	adds	r2, r5, #1
 8001cec:	4b91      	ldr	r3, [pc, #580]	; (8001f34 <__aeabi_dsub+0x348>)
 8001cee:	0555      	lsls	r5, r2, #21
 8001cf0:	0d6d      	lsrs	r5, r5, #21
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x10c>
 8001cf6:	e119      	b.n	8001f2c <__aeabi_dsub+0x340>
 8001cf8:	4a8f      	ldr	r2, [pc, #572]	; (8001f38 <__aeabi_dsub+0x34c>)
 8001cfa:	08f6      	lsrs	r6, r6, #3
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	0757      	lsls	r7, r2, #29
 8001d00:	0252      	lsls	r2, r2, #9
 8001d02:	4337      	orrs	r7, r6
 8001d04:	0b12      	lsrs	r2, r2, #12
 8001d06:	e09b      	b.n	8001e40 <__aeabi_dsub+0x254>
 8001d08:	2e00      	cmp	r6, #0
 8001d0a:	d000      	beq.n	8001d0e <__aeabi_dsub+0x122>
 8001d0c:	e0c5      	b.n	8001e9a <__aeabi_dsub+0x2ae>
 8001d0e:	1c6e      	adds	r6, r5, #1
 8001d10:	0576      	lsls	r6, r6, #21
 8001d12:	0d76      	lsrs	r6, r6, #21
 8001d14:	2e01      	cmp	r6, #1
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dsub+0x12e>
 8001d18:	e148      	b.n	8001fac <__aeabi_dsub+0x3c0>
 8001d1a:	4667      	mov	r7, ip
 8001d1c:	1a86      	subs	r6, r0, r2
 8001d1e:	1bcb      	subs	r3, r1, r7
 8001d20:	42b0      	cmp	r0, r6
 8001d22:	41bf      	sbcs	r7, r7
 8001d24:	427f      	negs	r7, r7
 8001d26:	46b8      	mov	r8, r7
 8001d28:	001f      	movs	r7, r3
 8001d2a:	4643      	mov	r3, r8
 8001d2c:	1aff      	subs	r7, r7, r3
 8001d2e:	003b      	movs	r3, r7
 8001d30:	46b8      	mov	r8, r7
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	d500      	bpl.n	8001d38 <__aeabi_dsub+0x14c>
 8001d36:	e15f      	b.n	8001ff8 <__aeabi_dsub+0x40c>
 8001d38:	4337      	orrs	r7, r6
 8001d3a:	d19a      	bne.n	8001c72 <__aeabi_dsub+0x86>
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2400      	movs	r4, #0
 8001d40:	2500      	movs	r5, #0
 8001d42:	e079      	b.n	8001e38 <__aeabi_dsub+0x24c>
 8001d44:	2e00      	cmp	r6, #0
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_dsub+0x15e>
 8001d48:	e0fa      	b.n	8001f40 <__aeabi_dsub+0x354>
 8001d4a:	2f00      	cmp	r7, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x164>
 8001d4e:	e08d      	b.n	8001e6c <__aeabi_dsub+0x280>
 8001d50:	4b78      	ldr	r3, [pc, #480]	; (8001f34 <__aeabi_dsub+0x348>)
 8001d52:	429d      	cmp	r5, r3
 8001d54:	d067      	beq.n	8001e26 <__aeabi_dsub+0x23a>
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	4667      	mov	r7, ip
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	431f      	orrs	r7, r3
 8001d5e:	46bc      	mov	ip, r7
 8001d60:	2e38      	cmp	r6, #56	; 0x38
 8001d62:	dc00      	bgt.n	8001d66 <__aeabi_dsub+0x17a>
 8001d64:	e152      	b.n	800200c <__aeabi_dsub+0x420>
 8001d66:	4663      	mov	r3, ip
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	4193      	sbcs	r3, r2
 8001d6e:	181e      	adds	r6, r3, r0
 8001d70:	4286      	cmp	r6, r0
 8001d72:	4180      	sbcs	r0, r0
 8001d74:	4240      	negs	r0, r0
 8001d76:	1809      	adds	r1, r1, r0
 8001d78:	020b      	lsls	r3, r1, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x192>
 8001d7c:	e0be      	b.n	8001efc <__aeabi_dsub+0x310>
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <__aeabi_dsub+0x348>)
 8001d80:	3501      	adds	r5, #1
 8001d82:	429d      	cmp	r5, r3
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x19c>
 8001d86:	e0d2      	b.n	8001f2e <__aeabi_dsub+0x342>
 8001d88:	4a6b      	ldr	r2, [pc, #428]	; (8001f38 <__aeabi_dsub+0x34c>)
 8001d8a:	0873      	lsrs	r3, r6, #1
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	2101      	movs	r1, #1
 8001d90:	400e      	ands	r6, r1
 8001d92:	431e      	orrs	r6, r3
 8001d94:	0851      	lsrs	r1, r2, #1
 8001d96:	07d3      	lsls	r3, r2, #31
 8001d98:	2207      	movs	r2, #7
 8001d9a:	431e      	orrs	r6, r3
 8001d9c:	4032      	ands	r2, r6
 8001d9e:	e795      	b.n	8001ccc <__aeabi_dsub+0xe0>
 8001da0:	001e      	movs	r6, r3
 8001da2:	4316      	orrs	r6, r2
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dsub+0x1bc>
 8001da6:	e745      	b.n	8001c34 <__aeabi_dsub+0x48>
 8001da8:	e740      	b.n	8001c2c <__aeabi_dsub+0x40>
 8001daa:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <__aeabi_dsub+0x348>)
 8001dac:	429d      	cmp	r5, r3
 8001dae:	d03a      	beq.n	8001e26 <__aeabi_dsub+0x23a>
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	4667      	mov	r7, ip
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	431f      	orrs	r7, r3
 8001db8:	46bc      	mov	ip, r7
 8001dba:	2e38      	cmp	r6, #56	; 0x38
 8001dbc:	dd00      	ble.n	8001dc0 <__aeabi_dsub+0x1d4>
 8001dbe:	e0eb      	b.n	8001f98 <__aeabi_dsub+0x3ac>
 8001dc0:	2e1f      	cmp	r6, #31
 8001dc2:	dc00      	bgt.n	8001dc6 <__aeabi_dsub+0x1da>
 8001dc4:	e13a      	b.n	800203c <__aeabi_dsub+0x450>
 8001dc6:	0033      	movs	r3, r6
 8001dc8:	4667      	mov	r7, ip
 8001dca:	3b20      	subs	r3, #32
 8001dcc:	40df      	lsrs	r7, r3
 8001dce:	003b      	movs	r3, r7
 8001dd0:	2e20      	cmp	r6, #32
 8001dd2:	d005      	beq.n	8001de0 <__aeabi_dsub+0x1f4>
 8001dd4:	2740      	movs	r7, #64	; 0x40
 8001dd6:	1bbf      	subs	r7, r7, r6
 8001dd8:	4666      	mov	r6, ip
 8001dda:	40be      	lsls	r6, r7
 8001ddc:	4332      	orrs	r2, r6
 8001dde:	4690      	mov	r8, r2
 8001de0:	4646      	mov	r6, r8
 8001de2:	1e72      	subs	r2, r6, #1
 8001de4:	4196      	sbcs	r6, r2
 8001de6:	4333      	orrs	r3, r6
 8001de8:	e0da      	b.n	8001fa0 <__aeabi_dsub+0x3b4>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d100      	bne.n	8001df0 <__aeabi_dsub+0x204>
 8001dee:	e214      	b.n	800221a <__aeabi_dsub+0x62e>
 8001df0:	4663      	mov	r3, ip
 8001df2:	4313      	orrs	r3, r2
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dsub+0x20c>
 8001df6:	e168      	b.n	80020ca <__aeabi_dsub+0x4de>
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	074e      	lsls	r6, r1, #29
 8001dfc:	08c0      	lsrs	r0, r0, #3
 8001dfe:	08c9      	lsrs	r1, r1, #3
 8001e00:	031b      	lsls	r3, r3, #12
 8001e02:	4306      	orrs	r6, r0
 8001e04:	4219      	tst	r1, r3
 8001e06:	d008      	beq.n	8001e1a <__aeabi_dsub+0x22e>
 8001e08:	4660      	mov	r0, ip
 8001e0a:	08c0      	lsrs	r0, r0, #3
 8001e0c:	4218      	tst	r0, r3
 8001e0e:	d104      	bne.n	8001e1a <__aeabi_dsub+0x22e>
 8001e10:	4663      	mov	r3, ip
 8001e12:	0001      	movs	r1, r0
 8001e14:	08d2      	lsrs	r2, r2, #3
 8001e16:	075e      	lsls	r6, r3, #29
 8001e18:	4316      	orrs	r6, r2
 8001e1a:	00f3      	lsls	r3, r6, #3
 8001e1c:	4699      	mov	r9, r3
 8001e1e:	00c9      	lsls	r1, r1, #3
 8001e20:	0f72      	lsrs	r2, r6, #29
 8001e22:	4d44      	ldr	r5, [pc, #272]	; (8001f34 <__aeabi_dsub+0x348>)
 8001e24:	4311      	orrs	r1, r2
 8001e26:	464b      	mov	r3, r9
 8001e28:	08de      	lsrs	r6, r3, #3
 8001e2a:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <__aeabi_dsub+0x348>)
 8001e2c:	074f      	lsls	r7, r1, #29
 8001e2e:	4337      	orrs	r7, r6
 8001e30:	08ca      	lsrs	r2, r1, #3
 8001e32:	429d      	cmp	r5, r3
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x24c>
 8001e36:	e06e      	b.n	8001f16 <__aeabi_dsub+0x32a>
 8001e38:	0312      	lsls	r2, r2, #12
 8001e3a:	056d      	lsls	r5, r5, #21
 8001e3c:	0b12      	lsrs	r2, r2, #12
 8001e3e:	0d6d      	lsrs	r5, r5, #21
 8001e40:	2100      	movs	r1, #0
 8001e42:	0312      	lsls	r2, r2, #12
 8001e44:	0b13      	lsrs	r3, r2, #12
 8001e46:	0d0a      	lsrs	r2, r1, #20
 8001e48:	0512      	lsls	r2, r2, #20
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <__aeabi_dsub+0x350>)
 8001e4e:	052d      	lsls	r5, r5, #20
 8001e50:	4013      	ands	r3, r2
 8001e52:	432b      	orrs	r3, r5
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	07e4      	lsls	r4, r4, #31
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	4323      	orrs	r3, r4
 8001e5c:	0038      	movs	r0, r7
 8001e5e:	0019      	movs	r1, r3
 8001e60:	bc3c      	pop	{r2, r3, r4, r5}
 8001e62:	4690      	mov	r8, r2
 8001e64:	4699      	mov	r9, r3
 8001e66:	46a2      	mov	sl, r4
 8001e68:	46ab      	mov	fp, r5
 8001e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e6c:	4663      	mov	r3, ip
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	d011      	beq.n	8001e96 <__aeabi_dsub+0x2aa>
 8001e72:	1e73      	subs	r3, r6, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d000      	beq.n	8001e7a <__aeabi_dsub+0x28e>
 8001e78:	e107      	b.n	800208a <__aeabi_dsub+0x49e>
 8001e7a:	1886      	adds	r6, r0, r2
 8001e7c:	4286      	cmp	r6, r0
 8001e7e:	4180      	sbcs	r0, r0
 8001e80:	4461      	add	r1, ip
 8001e82:	4240      	negs	r0, r0
 8001e84:	1809      	adds	r1, r1, r0
 8001e86:	2501      	movs	r5, #1
 8001e88:	020b      	lsls	r3, r1, #8
 8001e8a:	d537      	bpl.n	8001efc <__aeabi_dsub+0x310>
 8001e8c:	2502      	movs	r5, #2
 8001e8e:	e77b      	b.n	8001d88 <__aeabi_dsub+0x19c>
 8001e90:	003e      	movs	r6, r7
 8001e92:	4661      	mov	r1, ip
 8001e94:	4691      	mov	r9, r2
 8001e96:	0035      	movs	r5, r6
 8001e98:	e7c5      	b.n	8001e26 <__aeabi_dsub+0x23a>
 8001e9a:	465c      	mov	r4, fp
 8001e9c:	2d00      	cmp	r5, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x2b6>
 8001ea0:	e0e1      	b.n	8002066 <__aeabi_dsub+0x47a>
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	4303      	orrs	r3, r0
 8001ea6:	d0f3      	beq.n	8001e90 <__aeabi_dsub+0x2a4>
 8001ea8:	1c73      	adds	r3, r6, #1
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dsub+0x2c2>
 8001eac:	e1ac      	b.n	8002208 <__aeabi_dsub+0x61c>
 8001eae:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <__aeabi_dsub+0x348>)
 8001eb0:	429f      	cmp	r7, r3
 8001eb2:	d100      	bne.n	8001eb6 <__aeabi_dsub+0x2ca>
 8001eb4:	e13a      	b.n	800212c <__aeabi_dsub+0x540>
 8001eb6:	43f3      	mvns	r3, r6
 8001eb8:	2b38      	cmp	r3, #56	; 0x38
 8001eba:	dd00      	ble.n	8001ebe <__aeabi_dsub+0x2d2>
 8001ebc:	e16f      	b.n	800219e <__aeabi_dsub+0x5b2>
 8001ebe:	2b1f      	cmp	r3, #31
 8001ec0:	dd00      	ble.n	8001ec4 <__aeabi_dsub+0x2d8>
 8001ec2:	e18c      	b.n	80021de <__aeabi_dsub+0x5f2>
 8001ec4:	2520      	movs	r5, #32
 8001ec6:	000e      	movs	r6, r1
 8001ec8:	1aed      	subs	r5, r5, r3
 8001eca:	40ae      	lsls	r6, r5
 8001ecc:	46b0      	mov	r8, r6
 8001ece:	0006      	movs	r6, r0
 8001ed0:	46aa      	mov	sl, r5
 8001ed2:	40de      	lsrs	r6, r3
 8001ed4:	4645      	mov	r5, r8
 8001ed6:	4335      	orrs	r5, r6
 8001ed8:	002e      	movs	r6, r5
 8001eda:	4655      	mov	r5, sl
 8001edc:	40d9      	lsrs	r1, r3
 8001ede:	40a8      	lsls	r0, r5
 8001ee0:	4663      	mov	r3, ip
 8001ee2:	1e45      	subs	r5, r0, #1
 8001ee4:	41a8      	sbcs	r0, r5
 8001ee6:	1a5b      	subs	r3, r3, r1
 8001ee8:	469c      	mov	ip, r3
 8001eea:	4330      	orrs	r0, r6
 8001eec:	1a16      	subs	r6, r2, r0
 8001eee:	42b2      	cmp	r2, r6
 8001ef0:	4192      	sbcs	r2, r2
 8001ef2:	4663      	mov	r3, ip
 8001ef4:	4252      	negs	r2, r2
 8001ef6:	1a99      	subs	r1, r3, r2
 8001ef8:	003d      	movs	r5, r7
 8001efa:	e6b4      	b.n	8001c66 <__aeabi_dsub+0x7a>
 8001efc:	2207      	movs	r2, #7
 8001efe:	4032      	ands	r2, r6
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	d000      	beq.n	8001f06 <__aeabi_dsub+0x31a>
 8001f04:	e6e4      	b.n	8001cd0 <__aeabi_dsub+0xe4>
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <__aeabi_dsub+0x348>)
 8001f08:	08f6      	lsrs	r6, r6, #3
 8001f0a:	074f      	lsls	r7, r1, #29
 8001f0c:	4337      	orrs	r7, r6
 8001f0e:	08ca      	lsrs	r2, r1, #3
 8001f10:	429d      	cmp	r5, r3
 8001f12:	d000      	beq.n	8001f16 <__aeabi_dsub+0x32a>
 8001f14:	e790      	b.n	8001e38 <__aeabi_dsub+0x24c>
 8001f16:	003b      	movs	r3, r7
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dsub+0x332>
 8001f1c:	e1a6      	b.n	800226c <__aeabi_dsub+0x680>
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	031b      	lsls	r3, r3, #12
 8001f22:	431a      	orrs	r2, r3
 8001f24:	0312      	lsls	r2, r2, #12
 8001f26:	0b12      	lsrs	r2, r2, #12
 8001f28:	4d02      	ldr	r5, [pc, #8]	; (8001f34 <__aeabi_dsub+0x348>)
 8001f2a:	e789      	b.n	8001e40 <__aeabi_dsub+0x254>
 8001f2c:	0015      	movs	r5, r2
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2700      	movs	r7, #0
 8001f32:	e785      	b.n	8001e40 <__aeabi_dsub+0x254>
 8001f34:	000007ff 	.word	0x000007ff
 8001f38:	ff7fffff 	.word	0xff7fffff
 8001f3c:	800fffff 	.word	0x800fffff
 8001f40:	2e00      	cmp	r6, #0
 8001f42:	d000      	beq.n	8001f46 <__aeabi_dsub+0x35a>
 8001f44:	e0c7      	b.n	80020d6 <__aeabi_dsub+0x4ea>
 8001f46:	1c6b      	adds	r3, r5, #1
 8001f48:	055e      	lsls	r6, r3, #21
 8001f4a:	0d76      	lsrs	r6, r6, #21
 8001f4c:	2e01      	cmp	r6, #1
 8001f4e:	dc00      	bgt.n	8001f52 <__aeabi_dsub+0x366>
 8001f50:	e0f0      	b.n	8002134 <__aeabi_dsub+0x548>
 8001f52:	4dc8      	ldr	r5, [pc, #800]	; (8002274 <__aeabi_dsub+0x688>)
 8001f54:	42ab      	cmp	r3, r5
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x36e>
 8001f58:	e0b9      	b.n	80020ce <__aeabi_dsub+0x4e2>
 8001f5a:	1885      	adds	r5, r0, r2
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	4285      	cmp	r5, r0
 8001f60:	4189      	sbcs	r1, r1
 8001f62:	4462      	add	r2, ip
 8001f64:	4249      	negs	r1, r1
 8001f66:	1851      	adds	r1, r2, r1
 8001f68:	2207      	movs	r2, #7
 8001f6a:	07ce      	lsls	r6, r1, #31
 8001f6c:	086d      	lsrs	r5, r5, #1
 8001f6e:	432e      	orrs	r6, r5
 8001f70:	0849      	lsrs	r1, r1, #1
 8001f72:	4032      	ands	r2, r6
 8001f74:	001d      	movs	r5, r3
 8001f76:	e6a9      	b.n	8001ccc <__aeabi_dsub+0xe0>
 8001f78:	49bf      	ldr	r1, [pc, #764]	; (8002278 <__aeabi_dsub+0x68c>)
 8001f7a:	1aed      	subs	r5, r5, r3
 8001f7c:	4011      	ands	r1, r2
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4032      	ands	r2, r6
 8001f82:	e6a3      	b.n	8001ccc <__aeabi_dsub+0xe0>
 8001f84:	0032      	movs	r2, r6
 8001f86:	3828      	subs	r0, #40	; 0x28
 8001f88:	4082      	lsls	r2, r0
 8001f8a:	2600      	movs	r6, #0
 8001f8c:	e686      	b.n	8001c9c <__aeabi_dsub+0xb0>
 8001f8e:	0030      	movs	r0, r6
 8001f90:	f000 fabe 	bl	8002510 <__clzsi2>
 8001f94:	3020      	adds	r0, #32
 8001f96:	e673      	b.n	8001c80 <__aeabi_dsub+0x94>
 8001f98:	4663      	mov	r3, ip
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	1e5a      	subs	r2, r3, #1
 8001f9e:	4193      	sbcs	r3, r2
 8001fa0:	1ac6      	subs	r6, r0, r3
 8001fa2:	42b0      	cmp	r0, r6
 8001fa4:	4180      	sbcs	r0, r0
 8001fa6:	4240      	negs	r0, r0
 8001fa8:	1a09      	subs	r1, r1, r0
 8001faa:	e65c      	b.n	8001c66 <__aeabi_dsub+0x7a>
 8001fac:	000e      	movs	r6, r1
 8001fae:	4667      	mov	r7, ip
 8001fb0:	4306      	orrs	r6, r0
 8001fb2:	4317      	orrs	r7, r2
 8001fb4:	2d00      	cmp	r5, #0
 8001fb6:	d15e      	bne.n	8002076 <__aeabi_dsub+0x48a>
 8001fb8:	2e00      	cmp	r6, #0
 8001fba:	d000      	beq.n	8001fbe <__aeabi_dsub+0x3d2>
 8001fbc:	e0f3      	b.n	80021a6 <__aeabi_dsub+0x5ba>
 8001fbe:	2f00      	cmp	r7, #0
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x3d8>
 8001fc2:	e11e      	b.n	8002202 <__aeabi_dsub+0x616>
 8001fc4:	465c      	mov	r4, fp
 8001fc6:	4661      	mov	r1, ip
 8001fc8:	4691      	mov	r9, r2
 8001fca:	e72c      	b.n	8001e26 <__aeabi_dsub+0x23a>
 8001fcc:	4fa9      	ldr	r7, [pc, #676]	; (8002274 <__aeabi_dsub+0x688>)
 8001fce:	42be      	cmp	r6, r7
 8001fd0:	d07b      	beq.n	80020ca <__aeabi_dsub+0x4de>
 8001fd2:	001e      	movs	r6, r3
 8001fd4:	e6f1      	b.n	8001dba <__aeabi_dsub+0x1ce>
 8001fd6:	0010      	movs	r0, r2
 8001fd8:	3d1f      	subs	r5, #31
 8001fda:	40e8      	lsrs	r0, r5
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d003      	beq.n	8001fe8 <__aeabi_dsub+0x3fc>
 8001fe0:	2140      	movs	r1, #64	; 0x40
 8001fe2:	1acb      	subs	r3, r1, r3
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	4316      	orrs	r6, r2
 8001fe8:	1e73      	subs	r3, r6, #1
 8001fea:	419e      	sbcs	r6, r3
 8001fec:	2207      	movs	r2, #7
 8001fee:	4306      	orrs	r6, r0
 8001ff0:	4032      	ands	r2, r6
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	2500      	movs	r5, #0
 8001ff6:	e783      	b.n	8001f00 <__aeabi_dsub+0x314>
 8001ff8:	1a16      	subs	r6, r2, r0
 8001ffa:	4663      	mov	r3, ip
 8001ffc:	42b2      	cmp	r2, r6
 8001ffe:	4180      	sbcs	r0, r0
 8002000:	1a59      	subs	r1, r3, r1
 8002002:	4240      	negs	r0, r0
 8002004:	1a0b      	subs	r3, r1, r0
 8002006:	4698      	mov	r8, r3
 8002008:	465c      	mov	r4, fp
 800200a:	e632      	b.n	8001c72 <__aeabi_dsub+0x86>
 800200c:	2e1f      	cmp	r6, #31
 800200e:	dd00      	ble.n	8002012 <__aeabi_dsub+0x426>
 8002010:	e0ab      	b.n	800216a <__aeabi_dsub+0x57e>
 8002012:	2720      	movs	r7, #32
 8002014:	1bbb      	subs	r3, r7, r6
 8002016:	469a      	mov	sl, r3
 8002018:	4663      	mov	r3, ip
 800201a:	4657      	mov	r7, sl
 800201c:	40bb      	lsls	r3, r7
 800201e:	4699      	mov	r9, r3
 8002020:	0013      	movs	r3, r2
 8002022:	464f      	mov	r7, r9
 8002024:	40f3      	lsrs	r3, r6
 8002026:	431f      	orrs	r7, r3
 8002028:	003b      	movs	r3, r7
 800202a:	4657      	mov	r7, sl
 800202c:	40ba      	lsls	r2, r7
 800202e:	1e57      	subs	r7, r2, #1
 8002030:	41ba      	sbcs	r2, r7
 8002032:	4313      	orrs	r3, r2
 8002034:	4662      	mov	r2, ip
 8002036:	40f2      	lsrs	r2, r6
 8002038:	1889      	adds	r1, r1, r2
 800203a:	e698      	b.n	8001d6e <__aeabi_dsub+0x182>
 800203c:	2720      	movs	r7, #32
 800203e:	1bbb      	subs	r3, r7, r6
 8002040:	469a      	mov	sl, r3
 8002042:	4663      	mov	r3, ip
 8002044:	4657      	mov	r7, sl
 8002046:	40bb      	lsls	r3, r7
 8002048:	4699      	mov	r9, r3
 800204a:	0013      	movs	r3, r2
 800204c:	464f      	mov	r7, r9
 800204e:	40f3      	lsrs	r3, r6
 8002050:	431f      	orrs	r7, r3
 8002052:	003b      	movs	r3, r7
 8002054:	4657      	mov	r7, sl
 8002056:	40ba      	lsls	r2, r7
 8002058:	1e57      	subs	r7, r2, #1
 800205a:	41ba      	sbcs	r2, r7
 800205c:	4313      	orrs	r3, r2
 800205e:	4662      	mov	r2, ip
 8002060:	40f2      	lsrs	r2, r6
 8002062:	1a89      	subs	r1, r1, r2
 8002064:	e79c      	b.n	8001fa0 <__aeabi_dsub+0x3b4>
 8002066:	4b83      	ldr	r3, [pc, #524]	; (8002274 <__aeabi_dsub+0x688>)
 8002068:	429f      	cmp	r7, r3
 800206a:	d05f      	beq.n	800212c <__aeabi_dsub+0x540>
 800206c:	2580      	movs	r5, #128	; 0x80
 800206e:	042d      	lsls	r5, r5, #16
 8002070:	4273      	negs	r3, r6
 8002072:	4329      	orrs	r1, r5
 8002074:	e720      	b.n	8001eb8 <__aeabi_dsub+0x2cc>
 8002076:	2e00      	cmp	r6, #0
 8002078:	d10c      	bne.n	8002094 <__aeabi_dsub+0x4a8>
 800207a:	2f00      	cmp	r7, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_dsub+0x494>
 800207e:	e0d0      	b.n	8002222 <__aeabi_dsub+0x636>
 8002080:	465c      	mov	r4, fp
 8002082:	4661      	mov	r1, ip
 8002084:	4691      	mov	r9, r2
 8002086:	4d7b      	ldr	r5, [pc, #492]	; (8002274 <__aeabi_dsub+0x688>)
 8002088:	e6cd      	b.n	8001e26 <__aeabi_dsub+0x23a>
 800208a:	4f7a      	ldr	r7, [pc, #488]	; (8002274 <__aeabi_dsub+0x688>)
 800208c:	42be      	cmp	r6, r7
 800208e:	d01c      	beq.n	80020ca <__aeabi_dsub+0x4de>
 8002090:	001e      	movs	r6, r3
 8002092:	e665      	b.n	8001d60 <__aeabi_dsub+0x174>
 8002094:	2f00      	cmp	r7, #0
 8002096:	d018      	beq.n	80020ca <__aeabi_dsub+0x4de>
 8002098:	08c0      	lsrs	r0, r0, #3
 800209a:	074e      	lsls	r6, r1, #29
 800209c:	4306      	orrs	r6, r0
 800209e:	2080      	movs	r0, #128	; 0x80
 80020a0:	08c9      	lsrs	r1, r1, #3
 80020a2:	0300      	lsls	r0, r0, #12
 80020a4:	4201      	tst	r1, r0
 80020a6:	d008      	beq.n	80020ba <__aeabi_dsub+0x4ce>
 80020a8:	4663      	mov	r3, ip
 80020aa:	08dc      	lsrs	r4, r3, #3
 80020ac:	4204      	tst	r4, r0
 80020ae:	d104      	bne.n	80020ba <__aeabi_dsub+0x4ce>
 80020b0:	0021      	movs	r1, r4
 80020b2:	46da      	mov	sl, fp
 80020b4:	08d2      	lsrs	r2, r2, #3
 80020b6:	075e      	lsls	r6, r3, #29
 80020b8:	4316      	orrs	r6, r2
 80020ba:	00f3      	lsls	r3, r6, #3
 80020bc:	4699      	mov	r9, r3
 80020be:	2401      	movs	r4, #1
 80020c0:	4653      	mov	r3, sl
 80020c2:	00c9      	lsls	r1, r1, #3
 80020c4:	0f72      	lsrs	r2, r6, #29
 80020c6:	4311      	orrs	r1, r2
 80020c8:	401c      	ands	r4, r3
 80020ca:	4d6a      	ldr	r5, [pc, #424]	; (8002274 <__aeabi_dsub+0x688>)
 80020cc:	e6ab      	b.n	8001e26 <__aeabi_dsub+0x23a>
 80020ce:	001d      	movs	r5, r3
 80020d0:	2200      	movs	r2, #0
 80020d2:	2700      	movs	r7, #0
 80020d4:	e6b4      	b.n	8001e40 <__aeabi_dsub+0x254>
 80020d6:	2d00      	cmp	r5, #0
 80020d8:	d159      	bne.n	800218e <__aeabi_dsub+0x5a2>
 80020da:	000b      	movs	r3, r1
 80020dc:	4303      	orrs	r3, r0
 80020de:	d100      	bne.n	80020e2 <__aeabi_dsub+0x4f6>
 80020e0:	e6d6      	b.n	8001e90 <__aeabi_dsub+0x2a4>
 80020e2:	1c73      	adds	r3, r6, #1
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dsub+0x4fc>
 80020e6:	e0b2      	b.n	800224e <__aeabi_dsub+0x662>
 80020e8:	4b62      	ldr	r3, [pc, #392]	; (8002274 <__aeabi_dsub+0x688>)
 80020ea:	429f      	cmp	r7, r3
 80020ec:	d01e      	beq.n	800212c <__aeabi_dsub+0x540>
 80020ee:	43f3      	mvns	r3, r6
 80020f0:	2b38      	cmp	r3, #56	; 0x38
 80020f2:	dc6f      	bgt.n	80021d4 <__aeabi_dsub+0x5e8>
 80020f4:	2b1f      	cmp	r3, #31
 80020f6:	dd00      	ble.n	80020fa <__aeabi_dsub+0x50e>
 80020f8:	e097      	b.n	800222a <__aeabi_dsub+0x63e>
 80020fa:	2520      	movs	r5, #32
 80020fc:	000e      	movs	r6, r1
 80020fe:	1aed      	subs	r5, r5, r3
 8002100:	40ae      	lsls	r6, r5
 8002102:	46b0      	mov	r8, r6
 8002104:	0006      	movs	r6, r0
 8002106:	46aa      	mov	sl, r5
 8002108:	40de      	lsrs	r6, r3
 800210a:	4645      	mov	r5, r8
 800210c:	4335      	orrs	r5, r6
 800210e:	002e      	movs	r6, r5
 8002110:	4655      	mov	r5, sl
 8002112:	40a8      	lsls	r0, r5
 8002114:	40d9      	lsrs	r1, r3
 8002116:	1e45      	subs	r5, r0, #1
 8002118:	41a8      	sbcs	r0, r5
 800211a:	448c      	add	ip, r1
 800211c:	4306      	orrs	r6, r0
 800211e:	18b6      	adds	r6, r6, r2
 8002120:	4296      	cmp	r6, r2
 8002122:	4192      	sbcs	r2, r2
 8002124:	4251      	negs	r1, r2
 8002126:	4461      	add	r1, ip
 8002128:	003d      	movs	r5, r7
 800212a:	e625      	b.n	8001d78 <__aeabi_dsub+0x18c>
 800212c:	003d      	movs	r5, r7
 800212e:	4661      	mov	r1, ip
 8002130:	4691      	mov	r9, r2
 8002132:	e678      	b.n	8001e26 <__aeabi_dsub+0x23a>
 8002134:	000b      	movs	r3, r1
 8002136:	4303      	orrs	r3, r0
 8002138:	2d00      	cmp	r5, #0
 800213a:	d000      	beq.n	800213e <__aeabi_dsub+0x552>
 800213c:	e655      	b.n	8001dea <__aeabi_dsub+0x1fe>
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f5      	beq.n	800212e <__aeabi_dsub+0x542>
 8002142:	4663      	mov	r3, ip
 8002144:	4313      	orrs	r3, r2
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0x55e>
 8002148:	e66d      	b.n	8001e26 <__aeabi_dsub+0x23a>
 800214a:	1886      	adds	r6, r0, r2
 800214c:	4286      	cmp	r6, r0
 800214e:	4180      	sbcs	r0, r0
 8002150:	4461      	add	r1, ip
 8002152:	4240      	negs	r0, r0
 8002154:	1809      	adds	r1, r1, r0
 8002156:	2200      	movs	r2, #0
 8002158:	020b      	lsls	r3, r1, #8
 800215a:	d400      	bmi.n	800215e <__aeabi_dsub+0x572>
 800215c:	e6d0      	b.n	8001f00 <__aeabi_dsub+0x314>
 800215e:	4b46      	ldr	r3, [pc, #280]	; (8002278 <__aeabi_dsub+0x68c>)
 8002160:	3501      	adds	r5, #1
 8002162:	4019      	ands	r1, r3
 8002164:	e5b2      	b.n	8001ccc <__aeabi_dsub+0xe0>
 8002166:	46b1      	mov	r9, r6
 8002168:	e65d      	b.n	8001e26 <__aeabi_dsub+0x23a>
 800216a:	0033      	movs	r3, r6
 800216c:	4667      	mov	r7, ip
 800216e:	3b20      	subs	r3, #32
 8002170:	40df      	lsrs	r7, r3
 8002172:	003b      	movs	r3, r7
 8002174:	2e20      	cmp	r6, #32
 8002176:	d005      	beq.n	8002184 <__aeabi_dsub+0x598>
 8002178:	2740      	movs	r7, #64	; 0x40
 800217a:	1bbf      	subs	r7, r7, r6
 800217c:	4666      	mov	r6, ip
 800217e:	40be      	lsls	r6, r7
 8002180:	4332      	orrs	r2, r6
 8002182:	4690      	mov	r8, r2
 8002184:	4646      	mov	r6, r8
 8002186:	1e72      	subs	r2, r6, #1
 8002188:	4196      	sbcs	r6, r2
 800218a:	4333      	orrs	r3, r6
 800218c:	e5ef      	b.n	8001d6e <__aeabi_dsub+0x182>
 800218e:	4b39      	ldr	r3, [pc, #228]	; (8002274 <__aeabi_dsub+0x688>)
 8002190:	429f      	cmp	r7, r3
 8002192:	d0cb      	beq.n	800212c <__aeabi_dsub+0x540>
 8002194:	2580      	movs	r5, #128	; 0x80
 8002196:	042d      	lsls	r5, r5, #16
 8002198:	4273      	negs	r3, r6
 800219a:	4329      	orrs	r1, r5
 800219c:	e7a8      	b.n	80020f0 <__aeabi_dsub+0x504>
 800219e:	4308      	orrs	r0, r1
 80021a0:	1e41      	subs	r1, r0, #1
 80021a2:	4188      	sbcs	r0, r1
 80021a4:	e6a2      	b.n	8001eec <__aeabi_dsub+0x300>
 80021a6:	2f00      	cmp	r7, #0
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x5c0>
 80021aa:	e63c      	b.n	8001e26 <__aeabi_dsub+0x23a>
 80021ac:	4663      	mov	r3, ip
 80021ae:	1a86      	subs	r6, r0, r2
 80021b0:	1acf      	subs	r7, r1, r3
 80021b2:	42b0      	cmp	r0, r6
 80021b4:	419b      	sbcs	r3, r3
 80021b6:	425b      	negs	r3, r3
 80021b8:	1afb      	subs	r3, r7, r3
 80021ba:	4698      	mov	r8, r3
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	d54e      	bpl.n	800225e <__aeabi_dsub+0x672>
 80021c0:	1a16      	subs	r6, r2, r0
 80021c2:	4663      	mov	r3, ip
 80021c4:	42b2      	cmp	r2, r6
 80021c6:	4192      	sbcs	r2, r2
 80021c8:	1a59      	subs	r1, r3, r1
 80021ca:	4252      	negs	r2, r2
 80021cc:	1a89      	subs	r1, r1, r2
 80021ce:	465c      	mov	r4, fp
 80021d0:	2200      	movs	r2, #0
 80021d2:	e57b      	b.n	8001ccc <__aeabi_dsub+0xe0>
 80021d4:	4301      	orrs	r1, r0
 80021d6:	000e      	movs	r6, r1
 80021d8:	1e71      	subs	r1, r6, #1
 80021da:	418e      	sbcs	r6, r1
 80021dc:	e79f      	b.n	800211e <__aeabi_dsub+0x532>
 80021de:	001d      	movs	r5, r3
 80021e0:	000e      	movs	r6, r1
 80021e2:	3d20      	subs	r5, #32
 80021e4:	40ee      	lsrs	r6, r5
 80021e6:	46b0      	mov	r8, r6
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d004      	beq.n	80021f6 <__aeabi_dsub+0x60a>
 80021ec:	2540      	movs	r5, #64	; 0x40
 80021ee:	1aeb      	subs	r3, r5, r3
 80021f0:	4099      	lsls	r1, r3
 80021f2:	4308      	orrs	r0, r1
 80021f4:	4681      	mov	r9, r0
 80021f6:	4648      	mov	r0, r9
 80021f8:	4643      	mov	r3, r8
 80021fa:	1e41      	subs	r1, r0, #1
 80021fc:	4188      	sbcs	r0, r1
 80021fe:	4318      	orrs	r0, r3
 8002200:	e674      	b.n	8001eec <__aeabi_dsub+0x300>
 8002202:	2200      	movs	r2, #0
 8002204:	2400      	movs	r4, #0
 8002206:	e617      	b.n	8001e38 <__aeabi_dsub+0x24c>
 8002208:	1a16      	subs	r6, r2, r0
 800220a:	4663      	mov	r3, ip
 800220c:	42b2      	cmp	r2, r6
 800220e:	4192      	sbcs	r2, r2
 8002210:	1a59      	subs	r1, r3, r1
 8002212:	4252      	negs	r2, r2
 8002214:	1a89      	subs	r1, r1, r2
 8002216:	003d      	movs	r5, r7
 8002218:	e525      	b.n	8001c66 <__aeabi_dsub+0x7a>
 800221a:	4661      	mov	r1, ip
 800221c:	4691      	mov	r9, r2
 800221e:	4d15      	ldr	r5, [pc, #84]	; (8002274 <__aeabi_dsub+0x688>)
 8002220:	e601      	b.n	8001e26 <__aeabi_dsub+0x23a>
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	2400      	movs	r4, #0
 8002226:	0312      	lsls	r2, r2, #12
 8002228:	e679      	b.n	8001f1e <__aeabi_dsub+0x332>
 800222a:	001d      	movs	r5, r3
 800222c:	000e      	movs	r6, r1
 800222e:	3d20      	subs	r5, #32
 8002230:	40ee      	lsrs	r6, r5
 8002232:	46b0      	mov	r8, r6
 8002234:	2b20      	cmp	r3, #32
 8002236:	d004      	beq.n	8002242 <__aeabi_dsub+0x656>
 8002238:	2540      	movs	r5, #64	; 0x40
 800223a:	1aeb      	subs	r3, r5, r3
 800223c:	4099      	lsls	r1, r3
 800223e:	4308      	orrs	r0, r1
 8002240:	4681      	mov	r9, r0
 8002242:	464e      	mov	r6, r9
 8002244:	4643      	mov	r3, r8
 8002246:	1e71      	subs	r1, r6, #1
 8002248:	418e      	sbcs	r6, r1
 800224a:	431e      	orrs	r6, r3
 800224c:	e767      	b.n	800211e <__aeabi_dsub+0x532>
 800224e:	1886      	adds	r6, r0, r2
 8002250:	4296      	cmp	r6, r2
 8002252:	419b      	sbcs	r3, r3
 8002254:	4461      	add	r1, ip
 8002256:	425b      	negs	r3, r3
 8002258:	18c9      	adds	r1, r1, r3
 800225a:	003d      	movs	r5, r7
 800225c:	e58c      	b.n	8001d78 <__aeabi_dsub+0x18c>
 800225e:	4647      	mov	r7, r8
 8002260:	4337      	orrs	r7, r6
 8002262:	d0ce      	beq.n	8002202 <__aeabi_dsub+0x616>
 8002264:	2207      	movs	r2, #7
 8002266:	4641      	mov	r1, r8
 8002268:	4032      	ands	r2, r6
 800226a:	e649      	b.n	8001f00 <__aeabi_dsub+0x314>
 800226c:	2700      	movs	r7, #0
 800226e:	003a      	movs	r2, r7
 8002270:	e5e6      	b.n	8001e40 <__aeabi_dsub+0x254>
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	000007ff 	.word	0x000007ff
 8002278:	ff7fffff 	.word	0xff7fffff

0800227c <__aeabi_d2iz>:
 800227c:	b530      	push	{r4, r5, lr}
 800227e:	4d14      	ldr	r5, [pc, #80]	; (80022d0 <__aeabi_d2iz+0x54>)
 8002280:	030a      	lsls	r2, r1, #12
 8002282:	004b      	lsls	r3, r1, #1
 8002284:	0b12      	lsrs	r2, r2, #12
 8002286:	0d5b      	lsrs	r3, r3, #21
 8002288:	0fc9      	lsrs	r1, r1, #31
 800228a:	2400      	movs	r4, #0
 800228c:	42ab      	cmp	r3, r5
 800228e:	dd11      	ble.n	80022b4 <__aeabi_d2iz+0x38>
 8002290:	4c10      	ldr	r4, [pc, #64]	; (80022d4 <__aeabi_d2iz+0x58>)
 8002292:	42a3      	cmp	r3, r4
 8002294:	dc10      	bgt.n	80022b8 <__aeabi_d2iz+0x3c>
 8002296:	2480      	movs	r4, #128	; 0x80
 8002298:	0364      	lsls	r4, r4, #13
 800229a:	4322      	orrs	r2, r4
 800229c:	4c0e      	ldr	r4, [pc, #56]	; (80022d8 <__aeabi_d2iz+0x5c>)
 800229e:	1ae4      	subs	r4, r4, r3
 80022a0:	2c1f      	cmp	r4, #31
 80022a2:	dd0c      	ble.n	80022be <__aeabi_d2iz+0x42>
 80022a4:	480d      	ldr	r0, [pc, #52]	; (80022dc <__aeabi_d2iz+0x60>)
 80022a6:	1ac3      	subs	r3, r0, r3
 80022a8:	40da      	lsrs	r2, r3
 80022aa:	0013      	movs	r3, r2
 80022ac:	425c      	negs	r4, r3
 80022ae:	2900      	cmp	r1, #0
 80022b0:	d100      	bne.n	80022b4 <__aeabi_d2iz+0x38>
 80022b2:	001c      	movs	r4, r3
 80022b4:	0020      	movs	r0, r4
 80022b6:	bd30      	pop	{r4, r5, pc}
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <__aeabi_d2iz+0x64>)
 80022ba:	18cc      	adds	r4, r1, r3
 80022bc:	e7fa      	b.n	80022b4 <__aeabi_d2iz+0x38>
 80022be:	4d09      	ldr	r5, [pc, #36]	; (80022e4 <__aeabi_d2iz+0x68>)
 80022c0:	40e0      	lsrs	r0, r4
 80022c2:	46ac      	mov	ip, r5
 80022c4:	4463      	add	r3, ip
 80022c6:	409a      	lsls	r2, r3
 80022c8:	0013      	movs	r3, r2
 80022ca:	4303      	orrs	r3, r0
 80022cc:	e7ee      	b.n	80022ac <__aeabi_d2iz+0x30>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	000003fe 	.word	0x000003fe
 80022d4:	0000041d 	.word	0x0000041d
 80022d8:	00000433 	.word	0x00000433
 80022dc:	00000413 	.word	0x00000413
 80022e0:	7fffffff 	.word	0x7fffffff
 80022e4:	fffffbed 	.word	0xfffffbed

080022e8 <__aeabi_f2d>:
 80022e8:	0041      	lsls	r1, r0, #1
 80022ea:	0e09      	lsrs	r1, r1, #24
 80022ec:	1c4b      	adds	r3, r1, #1
 80022ee:	b570      	push	{r4, r5, r6, lr}
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	0246      	lsls	r6, r0, #9
 80022f4:	0a75      	lsrs	r5, r6, #9
 80022f6:	0fc4      	lsrs	r4, r0, #31
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	dd14      	ble.n	8002326 <__aeabi_f2d+0x3e>
 80022fc:	23e0      	movs	r3, #224	; 0xe0
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	076d      	lsls	r5, r5, #29
 8002302:	0b36      	lsrs	r6, r6, #12
 8002304:	18cb      	adds	r3, r1, r3
 8002306:	2100      	movs	r1, #0
 8002308:	0d0a      	lsrs	r2, r1, #20
 800230a:	0028      	movs	r0, r5
 800230c:	0512      	lsls	r2, r2, #20
 800230e:	4d1c      	ldr	r5, [pc, #112]	; (8002380 <__aeabi_f2d+0x98>)
 8002310:	4332      	orrs	r2, r6
 8002312:	055b      	lsls	r3, r3, #21
 8002314:	402a      	ands	r2, r5
 8002316:	085b      	lsrs	r3, r3, #1
 8002318:	4313      	orrs	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	07e4      	lsls	r4, r4, #31
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	4323      	orrs	r3, r4
 8002322:	0019      	movs	r1, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	2900      	cmp	r1, #0
 8002328:	d114      	bne.n	8002354 <__aeabi_f2d+0x6c>
 800232a:	2d00      	cmp	r5, #0
 800232c:	d01e      	beq.n	800236c <__aeabi_f2d+0x84>
 800232e:	0028      	movs	r0, r5
 8002330:	f000 f8ee 	bl	8002510 <__clzsi2>
 8002334:	280a      	cmp	r0, #10
 8002336:	dc1c      	bgt.n	8002372 <__aeabi_f2d+0x8a>
 8002338:	230b      	movs	r3, #11
 800233a:	002a      	movs	r2, r5
 800233c:	1a1b      	subs	r3, r3, r0
 800233e:	40da      	lsrs	r2, r3
 8002340:	0003      	movs	r3, r0
 8002342:	3315      	adds	r3, #21
 8002344:	409d      	lsls	r5, r3
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <__aeabi_f2d+0x9c>)
 8002348:	0312      	lsls	r2, r2, #12
 800234a:	1a1b      	subs	r3, r3, r0
 800234c:	055b      	lsls	r3, r3, #21
 800234e:	0b16      	lsrs	r6, r2, #12
 8002350:	0d5b      	lsrs	r3, r3, #21
 8002352:	e7d8      	b.n	8002306 <__aeabi_f2d+0x1e>
 8002354:	2d00      	cmp	r5, #0
 8002356:	d006      	beq.n	8002366 <__aeabi_f2d+0x7e>
 8002358:	0b32      	lsrs	r2, r6, #12
 800235a:	2680      	movs	r6, #128	; 0x80
 800235c:	0336      	lsls	r6, r6, #12
 800235e:	076d      	lsls	r5, r5, #29
 8002360:	4316      	orrs	r6, r2
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <__aeabi_f2d+0xa0>)
 8002364:	e7cf      	b.n	8002306 <__aeabi_f2d+0x1e>
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <__aeabi_f2d+0xa0>)
 8002368:	2600      	movs	r6, #0
 800236a:	e7cc      	b.n	8002306 <__aeabi_f2d+0x1e>
 800236c:	2300      	movs	r3, #0
 800236e:	2600      	movs	r6, #0
 8002370:	e7c9      	b.n	8002306 <__aeabi_f2d+0x1e>
 8002372:	0003      	movs	r3, r0
 8002374:	002a      	movs	r2, r5
 8002376:	3b0b      	subs	r3, #11
 8002378:	409a      	lsls	r2, r3
 800237a:	2500      	movs	r5, #0
 800237c:	e7e3      	b.n	8002346 <__aeabi_f2d+0x5e>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	800fffff 	.word	0x800fffff
 8002384:	00000389 	.word	0x00000389
 8002388:	000007ff 	.word	0x000007ff

0800238c <__aeabi_d2f>:
 800238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238e:	004c      	lsls	r4, r1, #1
 8002390:	0d64      	lsrs	r4, r4, #21
 8002392:	030b      	lsls	r3, r1, #12
 8002394:	1c62      	adds	r2, r4, #1
 8002396:	0a5b      	lsrs	r3, r3, #9
 8002398:	0f46      	lsrs	r6, r0, #29
 800239a:	0552      	lsls	r2, r2, #21
 800239c:	0fc9      	lsrs	r1, r1, #31
 800239e:	431e      	orrs	r6, r3
 80023a0:	00c5      	lsls	r5, r0, #3
 80023a2:	0d52      	lsrs	r2, r2, #21
 80023a4:	2a01      	cmp	r2, #1
 80023a6:	dd29      	ble.n	80023fc <__aeabi_d2f+0x70>
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <__aeabi_d2f+0xfc>)
 80023aa:	18e7      	adds	r7, r4, r3
 80023ac:	2ffe      	cmp	r7, #254	; 0xfe
 80023ae:	dc1c      	bgt.n	80023ea <__aeabi_d2f+0x5e>
 80023b0:	2f00      	cmp	r7, #0
 80023b2:	dd3b      	ble.n	800242c <__aeabi_d2f+0xa0>
 80023b4:	0180      	lsls	r0, r0, #6
 80023b6:	1e43      	subs	r3, r0, #1
 80023b8:	4198      	sbcs	r0, r3
 80023ba:	2207      	movs	r2, #7
 80023bc:	00f3      	lsls	r3, r6, #3
 80023be:	0f6d      	lsrs	r5, r5, #29
 80023c0:	4303      	orrs	r3, r0
 80023c2:	432b      	orrs	r3, r5
 80023c4:	401a      	ands	r2, r3
 80023c6:	2a00      	cmp	r2, #0
 80023c8:	d004      	beq.n	80023d4 <__aeabi_d2f+0x48>
 80023ca:	220f      	movs	r2, #15
 80023cc:	401a      	ands	r2, r3
 80023ce:	2a04      	cmp	r2, #4
 80023d0:	d000      	beq.n	80023d4 <__aeabi_d2f+0x48>
 80023d2:	3304      	adds	r3, #4
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	04d2      	lsls	r2, r2, #19
 80023d8:	401a      	ands	r2, r3
 80023da:	d024      	beq.n	8002426 <__aeabi_d2f+0x9a>
 80023dc:	3701      	adds	r7, #1
 80023de:	b2fa      	uxtb	r2, r7
 80023e0:	2fff      	cmp	r7, #255	; 0xff
 80023e2:	d002      	beq.n	80023ea <__aeabi_d2f+0x5e>
 80023e4:	019b      	lsls	r3, r3, #6
 80023e6:	0a58      	lsrs	r0, r3, #9
 80023e8:	e001      	b.n	80023ee <__aeabi_d2f+0x62>
 80023ea:	22ff      	movs	r2, #255	; 0xff
 80023ec:	2000      	movs	r0, #0
 80023ee:	0240      	lsls	r0, r0, #9
 80023f0:	05d2      	lsls	r2, r2, #23
 80023f2:	0a40      	lsrs	r0, r0, #9
 80023f4:	07c9      	lsls	r1, r1, #31
 80023f6:	4310      	orrs	r0, r2
 80023f8:	4308      	orrs	r0, r1
 80023fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fc:	4335      	orrs	r5, r6
 80023fe:	2c00      	cmp	r4, #0
 8002400:	d104      	bne.n	800240c <__aeabi_d2f+0x80>
 8002402:	2d00      	cmp	r5, #0
 8002404:	d10a      	bne.n	800241c <__aeabi_d2f+0x90>
 8002406:	2200      	movs	r2, #0
 8002408:	2000      	movs	r0, #0
 800240a:	e7f0      	b.n	80023ee <__aeabi_d2f+0x62>
 800240c:	2d00      	cmp	r5, #0
 800240e:	d0ec      	beq.n	80023ea <__aeabi_d2f+0x5e>
 8002410:	2080      	movs	r0, #128	; 0x80
 8002412:	03c0      	lsls	r0, r0, #15
 8002414:	4330      	orrs	r0, r6
 8002416:	22ff      	movs	r2, #255	; 0xff
 8002418:	e7e9      	b.n	80023ee <__aeabi_d2f+0x62>
 800241a:	2400      	movs	r4, #0
 800241c:	2300      	movs	r3, #0
 800241e:	025b      	lsls	r3, r3, #9
 8002420:	0a58      	lsrs	r0, r3, #9
 8002422:	b2e2      	uxtb	r2, r4
 8002424:	e7e3      	b.n	80023ee <__aeabi_d2f+0x62>
 8002426:	08db      	lsrs	r3, r3, #3
 8002428:	003c      	movs	r4, r7
 800242a:	e7f8      	b.n	800241e <__aeabi_d2f+0x92>
 800242c:	003b      	movs	r3, r7
 800242e:	3317      	adds	r3, #23
 8002430:	dbf3      	blt.n	800241a <__aeabi_d2f+0x8e>
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	4333      	orrs	r3, r6
 8002438:	261e      	movs	r6, #30
 800243a:	1bf6      	subs	r6, r6, r7
 800243c:	2e1f      	cmp	r6, #31
 800243e:	dd14      	ble.n	800246a <__aeabi_d2f+0xde>
 8002440:	2202      	movs	r2, #2
 8002442:	4252      	negs	r2, r2
 8002444:	1bd7      	subs	r7, r2, r7
 8002446:	001a      	movs	r2, r3
 8002448:	40fa      	lsrs	r2, r7
 800244a:	0017      	movs	r7, r2
 800244c:	2e20      	cmp	r6, #32
 800244e:	d004      	beq.n	800245a <__aeabi_d2f+0xce>
 8002450:	4a0e      	ldr	r2, [pc, #56]	; (800248c <__aeabi_d2f+0x100>)
 8002452:	4694      	mov	ip, r2
 8002454:	4464      	add	r4, ip
 8002456:	40a3      	lsls	r3, r4
 8002458:	431d      	orrs	r5, r3
 800245a:	002b      	movs	r3, r5
 800245c:	1e5d      	subs	r5, r3, #1
 800245e:	41ab      	sbcs	r3, r5
 8002460:	2207      	movs	r2, #7
 8002462:	433b      	orrs	r3, r7
 8002464:	401a      	ands	r2, r3
 8002466:	2700      	movs	r7, #0
 8002468:	e7ad      	b.n	80023c6 <__aeabi_d2f+0x3a>
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <__aeabi_d2f+0x104>)
 800246c:	0028      	movs	r0, r5
 800246e:	18a2      	adds	r2, r4, r2
 8002470:	4095      	lsls	r5, r2
 8002472:	4093      	lsls	r3, r2
 8002474:	1e6c      	subs	r4, r5, #1
 8002476:	41a5      	sbcs	r5, r4
 8002478:	40f0      	lsrs	r0, r6
 800247a:	2207      	movs	r2, #7
 800247c:	432b      	orrs	r3, r5
 800247e:	4303      	orrs	r3, r0
 8002480:	401a      	ands	r2, r3
 8002482:	2700      	movs	r7, #0
 8002484:	e79f      	b.n	80023c6 <__aeabi_d2f+0x3a>
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	fffffc80 	.word	0xfffffc80
 800248c:	fffffca2 	.word	0xfffffca2
 8002490:	fffffc82 	.word	0xfffffc82

08002494 <__aeabi_cdrcmple>:
 8002494:	4684      	mov	ip, r0
 8002496:	1c10      	adds	r0, r2, #0
 8002498:	4662      	mov	r2, ip
 800249a:	468c      	mov	ip, r1
 800249c:	1c19      	adds	r1, r3, #0
 800249e:	4663      	mov	r3, ip
 80024a0:	e000      	b.n	80024a4 <__aeabi_cdcmpeq>
 80024a2:	46c0      	nop			; (mov r8, r8)

080024a4 <__aeabi_cdcmpeq>:
 80024a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80024a6:	f000 f8f1 	bl	800268c <__ledf2>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d401      	bmi.n	80024b2 <__aeabi_cdcmpeq+0xe>
 80024ae:	2100      	movs	r1, #0
 80024b0:	42c8      	cmn	r0, r1
 80024b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080024b4 <__aeabi_dcmpeq>:
 80024b4:	b510      	push	{r4, lr}
 80024b6:	f000 f849 	bl	800254c <__eqdf2>
 80024ba:	4240      	negs	r0, r0
 80024bc:	3001      	adds	r0, #1
 80024be:	bd10      	pop	{r4, pc}

080024c0 <__aeabi_dcmplt>:
 80024c0:	b510      	push	{r4, lr}
 80024c2:	f000 f8e3 	bl	800268c <__ledf2>
 80024c6:	2800      	cmp	r0, #0
 80024c8:	db01      	blt.n	80024ce <__aeabi_dcmplt+0xe>
 80024ca:	2000      	movs	r0, #0
 80024cc:	bd10      	pop	{r4, pc}
 80024ce:	2001      	movs	r0, #1
 80024d0:	bd10      	pop	{r4, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)

080024d4 <__aeabi_dcmple>:
 80024d4:	b510      	push	{r4, lr}
 80024d6:	f000 f8d9 	bl	800268c <__ledf2>
 80024da:	2800      	cmp	r0, #0
 80024dc:	dd01      	ble.n	80024e2 <__aeabi_dcmple+0xe>
 80024de:	2000      	movs	r0, #0
 80024e0:	bd10      	pop	{r4, pc}
 80024e2:	2001      	movs	r0, #1
 80024e4:	bd10      	pop	{r4, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)

080024e8 <__aeabi_dcmpgt>:
 80024e8:	b510      	push	{r4, lr}
 80024ea:	f000 f86b 	bl	80025c4 <__gedf2>
 80024ee:	2800      	cmp	r0, #0
 80024f0:	dc01      	bgt.n	80024f6 <__aeabi_dcmpgt+0xe>
 80024f2:	2000      	movs	r0, #0
 80024f4:	bd10      	pop	{r4, pc}
 80024f6:	2001      	movs	r0, #1
 80024f8:	bd10      	pop	{r4, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)

080024fc <__aeabi_dcmpge>:
 80024fc:	b510      	push	{r4, lr}
 80024fe:	f000 f861 	bl	80025c4 <__gedf2>
 8002502:	2800      	cmp	r0, #0
 8002504:	da01      	bge.n	800250a <__aeabi_dcmpge+0xe>
 8002506:	2000      	movs	r0, #0
 8002508:	bd10      	pop	{r4, pc}
 800250a:	2001      	movs	r0, #1
 800250c:	bd10      	pop	{r4, pc}
 800250e:	46c0      	nop			; (mov r8, r8)

08002510 <__clzsi2>:
 8002510:	211c      	movs	r1, #28
 8002512:	2301      	movs	r3, #1
 8002514:	041b      	lsls	r3, r3, #16
 8002516:	4298      	cmp	r0, r3
 8002518:	d301      	bcc.n	800251e <__clzsi2+0xe>
 800251a:	0c00      	lsrs	r0, r0, #16
 800251c:	3910      	subs	r1, #16
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	4298      	cmp	r0, r3
 8002522:	d301      	bcc.n	8002528 <__clzsi2+0x18>
 8002524:	0a00      	lsrs	r0, r0, #8
 8002526:	3908      	subs	r1, #8
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	4298      	cmp	r0, r3
 800252c:	d301      	bcc.n	8002532 <__clzsi2+0x22>
 800252e:	0900      	lsrs	r0, r0, #4
 8002530:	3904      	subs	r1, #4
 8002532:	a202      	add	r2, pc, #8	; (adr r2, 800253c <__clzsi2+0x2c>)
 8002534:	5c10      	ldrb	r0, [r2, r0]
 8002536:	1840      	adds	r0, r0, r1
 8002538:	4770      	bx	lr
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	02020304 	.word	0x02020304
 8002540:	01010101 	.word	0x01010101
	...

0800254c <__eqdf2>:
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	464f      	mov	r7, r9
 8002550:	4646      	mov	r6, r8
 8002552:	46d6      	mov	lr, sl
 8002554:	4684      	mov	ip, r0
 8002556:	b5c0      	push	{r6, r7, lr}
 8002558:	4680      	mov	r8, r0
 800255a:	4e19      	ldr	r6, [pc, #100]	; (80025c0 <__eqdf2+0x74>)
 800255c:	0318      	lsls	r0, r3, #12
 800255e:	030f      	lsls	r7, r1, #12
 8002560:	004d      	lsls	r5, r1, #1
 8002562:	0b00      	lsrs	r0, r0, #12
 8002564:	005c      	lsls	r4, r3, #1
 8002566:	4682      	mov	sl, r0
 8002568:	0b3f      	lsrs	r7, r7, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	0fc9      	lsrs	r1, r1, #31
 800256e:	4691      	mov	r9, r2
 8002570:	0d64      	lsrs	r4, r4, #21
 8002572:	0fdb      	lsrs	r3, r3, #31
 8002574:	2001      	movs	r0, #1
 8002576:	42b5      	cmp	r5, r6
 8002578:	d00a      	beq.n	8002590 <__eqdf2+0x44>
 800257a:	42b4      	cmp	r4, r6
 800257c:	d003      	beq.n	8002586 <__eqdf2+0x3a>
 800257e:	42a5      	cmp	r5, r4
 8002580:	d101      	bne.n	8002586 <__eqdf2+0x3a>
 8002582:	4557      	cmp	r7, sl
 8002584:	d00c      	beq.n	80025a0 <__eqdf2+0x54>
 8002586:	bc1c      	pop	{r2, r3, r4}
 8002588:	4690      	mov	r8, r2
 800258a:	4699      	mov	r9, r3
 800258c:	46a2      	mov	sl, r4
 800258e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002590:	4666      	mov	r6, ip
 8002592:	433e      	orrs	r6, r7
 8002594:	d1f7      	bne.n	8002586 <__eqdf2+0x3a>
 8002596:	42ac      	cmp	r4, r5
 8002598:	d1f5      	bne.n	8002586 <__eqdf2+0x3a>
 800259a:	4654      	mov	r4, sl
 800259c:	4314      	orrs	r4, r2
 800259e:	d1f2      	bne.n	8002586 <__eqdf2+0x3a>
 80025a0:	2001      	movs	r0, #1
 80025a2:	45c8      	cmp	r8, r9
 80025a4:	d1ef      	bne.n	8002586 <__eqdf2+0x3a>
 80025a6:	4299      	cmp	r1, r3
 80025a8:	d007      	beq.n	80025ba <__eqdf2+0x6e>
 80025aa:	2d00      	cmp	r5, #0
 80025ac:	d1eb      	bne.n	8002586 <__eqdf2+0x3a>
 80025ae:	4663      	mov	r3, ip
 80025b0:	431f      	orrs	r7, r3
 80025b2:	0038      	movs	r0, r7
 80025b4:	1e47      	subs	r7, r0, #1
 80025b6:	41b8      	sbcs	r0, r7
 80025b8:	e7e5      	b.n	8002586 <__eqdf2+0x3a>
 80025ba:	2000      	movs	r0, #0
 80025bc:	e7e3      	b.n	8002586 <__eqdf2+0x3a>
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	000007ff 	.word	0x000007ff

080025c4 <__gedf2>:
 80025c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c6:	464f      	mov	r7, r9
 80025c8:	4646      	mov	r6, r8
 80025ca:	46d6      	mov	lr, sl
 80025cc:	004d      	lsls	r5, r1, #1
 80025ce:	b5c0      	push	{r6, r7, lr}
 80025d0:	030e      	lsls	r6, r1, #12
 80025d2:	0fc9      	lsrs	r1, r1, #31
 80025d4:	468a      	mov	sl, r1
 80025d6:	492c      	ldr	r1, [pc, #176]	; (8002688 <__gedf2+0xc4>)
 80025d8:	031f      	lsls	r7, r3, #12
 80025da:	005c      	lsls	r4, r3, #1
 80025dc:	4680      	mov	r8, r0
 80025de:	0b36      	lsrs	r6, r6, #12
 80025e0:	0d6d      	lsrs	r5, r5, #21
 80025e2:	4691      	mov	r9, r2
 80025e4:	0b3f      	lsrs	r7, r7, #12
 80025e6:	0d64      	lsrs	r4, r4, #21
 80025e8:	0fdb      	lsrs	r3, r3, #31
 80025ea:	428d      	cmp	r5, r1
 80025ec:	d01e      	beq.n	800262c <__gedf2+0x68>
 80025ee:	428c      	cmp	r4, r1
 80025f0:	d016      	beq.n	8002620 <__gedf2+0x5c>
 80025f2:	2d00      	cmp	r5, #0
 80025f4:	d11e      	bne.n	8002634 <__gedf2+0x70>
 80025f6:	4330      	orrs	r0, r6
 80025f8:	4684      	mov	ip, r0
 80025fa:	2c00      	cmp	r4, #0
 80025fc:	d101      	bne.n	8002602 <__gedf2+0x3e>
 80025fe:	433a      	orrs	r2, r7
 8002600:	d023      	beq.n	800264a <__gedf2+0x86>
 8002602:	4662      	mov	r2, ip
 8002604:	2a00      	cmp	r2, #0
 8002606:	d01a      	beq.n	800263e <__gedf2+0x7a>
 8002608:	459a      	cmp	sl, r3
 800260a:	d029      	beq.n	8002660 <__gedf2+0x9c>
 800260c:	4651      	mov	r1, sl
 800260e:	2002      	movs	r0, #2
 8002610:	3901      	subs	r1, #1
 8002612:	4008      	ands	r0, r1
 8002614:	3801      	subs	r0, #1
 8002616:	bc1c      	pop	{r2, r3, r4}
 8002618:	4690      	mov	r8, r2
 800261a:	4699      	mov	r9, r3
 800261c:	46a2      	mov	sl, r4
 800261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002620:	0039      	movs	r1, r7
 8002622:	4311      	orrs	r1, r2
 8002624:	d0e5      	beq.n	80025f2 <__gedf2+0x2e>
 8002626:	2002      	movs	r0, #2
 8002628:	4240      	negs	r0, r0
 800262a:	e7f4      	b.n	8002616 <__gedf2+0x52>
 800262c:	4330      	orrs	r0, r6
 800262e:	d1fa      	bne.n	8002626 <__gedf2+0x62>
 8002630:	42ac      	cmp	r4, r5
 8002632:	d00f      	beq.n	8002654 <__gedf2+0x90>
 8002634:	2c00      	cmp	r4, #0
 8002636:	d10f      	bne.n	8002658 <__gedf2+0x94>
 8002638:	433a      	orrs	r2, r7
 800263a:	d0e7      	beq.n	800260c <__gedf2+0x48>
 800263c:	e00c      	b.n	8002658 <__gedf2+0x94>
 800263e:	2201      	movs	r2, #1
 8002640:	3b01      	subs	r3, #1
 8002642:	4393      	bics	r3, r2
 8002644:	0018      	movs	r0, r3
 8002646:	3001      	adds	r0, #1
 8002648:	e7e5      	b.n	8002616 <__gedf2+0x52>
 800264a:	4663      	mov	r3, ip
 800264c:	2000      	movs	r0, #0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0e1      	beq.n	8002616 <__gedf2+0x52>
 8002652:	e7db      	b.n	800260c <__gedf2+0x48>
 8002654:	433a      	orrs	r2, r7
 8002656:	d1e6      	bne.n	8002626 <__gedf2+0x62>
 8002658:	459a      	cmp	sl, r3
 800265a:	d1d7      	bne.n	800260c <__gedf2+0x48>
 800265c:	42a5      	cmp	r5, r4
 800265e:	dcd5      	bgt.n	800260c <__gedf2+0x48>
 8002660:	42a5      	cmp	r5, r4
 8002662:	db05      	blt.n	8002670 <__gedf2+0xac>
 8002664:	42be      	cmp	r6, r7
 8002666:	d8d1      	bhi.n	800260c <__gedf2+0x48>
 8002668:	d008      	beq.n	800267c <__gedf2+0xb8>
 800266a:	2000      	movs	r0, #0
 800266c:	42be      	cmp	r6, r7
 800266e:	d2d2      	bcs.n	8002616 <__gedf2+0x52>
 8002670:	4650      	mov	r0, sl
 8002672:	2301      	movs	r3, #1
 8002674:	3801      	subs	r0, #1
 8002676:	4398      	bics	r0, r3
 8002678:	3001      	adds	r0, #1
 800267a:	e7cc      	b.n	8002616 <__gedf2+0x52>
 800267c:	45c8      	cmp	r8, r9
 800267e:	d8c5      	bhi.n	800260c <__gedf2+0x48>
 8002680:	2000      	movs	r0, #0
 8002682:	45c8      	cmp	r8, r9
 8002684:	d3f4      	bcc.n	8002670 <__gedf2+0xac>
 8002686:	e7c6      	b.n	8002616 <__gedf2+0x52>
 8002688:	000007ff 	.word	0x000007ff

0800268c <__ledf2>:
 800268c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268e:	464f      	mov	r7, r9
 8002690:	4646      	mov	r6, r8
 8002692:	46d6      	mov	lr, sl
 8002694:	004d      	lsls	r5, r1, #1
 8002696:	b5c0      	push	{r6, r7, lr}
 8002698:	030e      	lsls	r6, r1, #12
 800269a:	0fc9      	lsrs	r1, r1, #31
 800269c:	468a      	mov	sl, r1
 800269e:	492e      	ldr	r1, [pc, #184]	; (8002758 <__ledf2+0xcc>)
 80026a0:	031f      	lsls	r7, r3, #12
 80026a2:	005c      	lsls	r4, r3, #1
 80026a4:	4680      	mov	r8, r0
 80026a6:	0b36      	lsrs	r6, r6, #12
 80026a8:	0d6d      	lsrs	r5, r5, #21
 80026aa:	4691      	mov	r9, r2
 80026ac:	0b3f      	lsrs	r7, r7, #12
 80026ae:	0d64      	lsrs	r4, r4, #21
 80026b0:	0fdb      	lsrs	r3, r3, #31
 80026b2:	428d      	cmp	r5, r1
 80026b4:	d018      	beq.n	80026e8 <__ledf2+0x5c>
 80026b6:	428c      	cmp	r4, r1
 80026b8:	d011      	beq.n	80026de <__ledf2+0x52>
 80026ba:	2d00      	cmp	r5, #0
 80026bc:	d118      	bne.n	80026f0 <__ledf2+0x64>
 80026be:	4330      	orrs	r0, r6
 80026c0:	4684      	mov	ip, r0
 80026c2:	2c00      	cmp	r4, #0
 80026c4:	d11e      	bne.n	8002704 <__ledf2+0x78>
 80026c6:	433a      	orrs	r2, r7
 80026c8:	d11c      	bne.n	8002704 <__ledf2+0x78>
 80026ca:	4663      	mov	r3, ip
 80026cc:	2000      	movs	r0, #0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d030      	beq.n	8002734 <__ledf2+0xa8>
 80026d2:	4651      	mov	r1, sl
 80026d4:	2002      	movs	r0, #2
 80026d6:	3901      	subs	r1, #1
 80026d8:	4008      	ands	r0, r1
 80026da:	3801      	subs	r0, #1
 80026dc:	e02a      	b.n	8002734 <__ledf2+0xa8>
 80026de:	0039      	movs	r1, r7
 80026e0:	4311      	orrs	r1, r2
 80026e2:	d0ea      	beq.n	80026ba <__ledf2+0x2e>
 80026e4:	2002      	movs	r0, #2
 80026e6:	e025      	b.n	8002734 <__ledf2+0xa8>
 80026e8:	4330      	orrs	r0, r6
 80026ea:	d1fb      	bne.n	80026e4 <__ledf2+0x58>
 80026ec:	42ac      	cmp	r4, r5
 80026ee:	d026      	beq.n	800273e <__ledf2+0xb2>
 80026f0:	2c00      	cmp	r4, #0
 80026f2:	d126      	bne.n	8002742 <__ledf2+0xb6>
 80026f4:	433a      	orrs	r2, r7
 80026f6:	d124      	bne.n	8002742 <__ledf2+0xb6>
 80026f8:	4651      	mov	r1, sl
 80026fa:	2002      	movs	r0, #2
 80026fc:	3901      	subs	r1, #1
 80026fe:	4008      	ands	r0, r1
 8002700:	3801      	subs	r0, #1
 8002702:	e017      	b.n	8002734 <__ledf2+0xa8>
 8002704:	4662      	mov	r2, ip
 8002706:	2a00      	cmp	r2, #0
 8002708:	d00f      	beq.n	800272a <__ledf2+0x9e>
 800270a:	459a      	cmp	sl, r3
 800270c:	d1e1      	bne.n	80026d2 <__ledf2+0x46>
 800270e:	42a5      	cmp	r5, r4
 8002710:	db05      	blt.n	800271e <__ledf2+0x92>
 8002712:	42be      	cmp	r6, r7
 8002714:	d8dd      	bhi.n	80026d2 <__ledf2+0x46>
 8002716:	d019      	beq.n	800274c <__ledf2+0xc0>
 8002718:	2000      	movs	r0, #0
 800271a:	42be      	cmp	r6, r7
 800271c:	d20a      	bcs.n	8002734 <__ledf2+0xa8>
 800271e:	4650      	mov	r0, sl
 8002720:	2301      	movs	r3, #1
 8002722:	3801      	subs	r0, #1
 8002724:	4398      	bics	r0, r3
 8002726:	3001      	adds	r0, #1
 8002728:	e004      	b.n	8002734 <__ledf2+0xa8>
 800272a:	2201      	movs	r2, #1
 800272c:	3b01      	subs	r3, #1
 800272e:	4393      	bics	r3, r2
 8002730:	0018      	movs	r0, r3
 8002732:	3001      	adds	r0, #1
 8002734:	bc1c      	pop	{r2, r3, r4}
 8002736:	4690      	mov	r8, r2
 8002738:	4699      	mov	r9, r3
 800273a:	46a2      	mov	sl, r4
 800273c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800273e:	433a      	orrs	r2, r7
 8002740:	d1d0      	bne.n	80026e4 <__ledf2+0x58>
 8002742:	459a      	cmp	sl, r3
 8002744:	d1c5      	bne.n	80026d2 <__ledf2+0x46>
 8002746:	42a5      	cmp	r5, r4
 8002748:	dcc3      	bgt.n	80026d2 <__ledf2+0x46>
 800274a:	e7e0      	b.n	800270e <__ledf2+0x82>
 800274c:	45c8      	cmp	r8, r9
 800274e:	d8c0      	bhi.n	80026d2 <__ledf2+0x46>
 8002750:	2000      	movs	r0, #0
 8002752:	45c8      	cmp	r8, r9
 8002754:	d3e3      	bcc.n	800271e <__ledf2+0x92>
 8002756:	e7ed      	b.n	8002734 <__ledf2+0xa8>
 8002758:	000007ff 	.word	0x000007ff

0800275c <_Z12FAN_PWM_Initv>:
extern TIM_HandleTypeDef htim17;



void FAN_PWM_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	//Set duty cycle to 100% for testing
	FAN_PWM_SetDutyCycle(1000);
 8002760:	23fa      	movs	r3, #250	; 0xfa
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	0018      	movs	r0, r3
 8002766:	f000 f813 	bl	8002790 <_Z20FAN_PWM_SetDutyCyclet>

	//Start FAN PWM
	HAL_TIM_PWM_Start(&FAN_PWM_TIMER, TIM_CHANNEL_1);
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <_Z12FAN_PWM_Initv+0x30>)
 800276c:	2100      	movs	r1, #0
 800276e:	0018      	movs	r0, r3
 8002770:	f004 ff2e 	bl	80075d0 <HAL_TIM_PWM_Start>

	//Let fan ramp up shortly for testing
	HAL_Delay(4000);
 8002774:	23fa      	movs	r3, #250	; 0xfa
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	0018      	movs	r0, r3
 800277a:	f003 f99f 	bl	8005abc <HAL_Delay>

	//Set duty cycle to zero
	FAN_PWM_SetDutyCycle(0);
 800277e:	2000      	movs	r0, #0
 8002780:	f000 f806 	bl	8002790 <_Z20FAN_PWM_SetDutyCyclet>
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	20000288 	.word	0x20000288

08002790 <_Z20FAN_PWM_SetDutyCyclet>:



void FAN_PWM_SetDutyCycle(uint16_t dc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	0002      	movs	r2, r0
 8002798:	1dbb      	adds	r3, r7, #6
 800279a:	801a      	strh	r2, [r3, #0]
	if(dc > 1000)
 800279c:	1dbb      	adds	r3, r7, #6
 800279e:	881a      	ldrh	r2, [r3, #0]
 80027a0:	23fa      	movs	r3, #250	; 0xfa
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d903      	bls.n	80027b0 <_Z20FAN_PWM_SetDutyCyclet+0x20>
	{
		dc = 1000;
 80027a8:	1dbb      	adds	r3, r7, #6
 80027aa:	22fa      	movs	r2, #250	; 0xfa
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	801a      	strh	r2, [r3, #0]
	}

	dc = (uint16_t)((((uint32_t)dc) * 1920) / 1000);
 80027b0:	1dbb      	adds	r3, r7, #6
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	001a      	movs	r2, r3
 80027b6:	0013      	movs	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	01db      	lsls	r3, r3, #7
 80027be:	001a      	movs	r2, r3
 80027c0:	23fa      	movs	r3, #250	; 0xfa
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	0010      	movs	r0, r2
 80027c6:	f7fd fc9f 	bl	8000108 <__udivsi3>
 80027ca:	0003      	movs	r3, r0
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	1dbb      	adds	r3, r7, #6
 80027d0:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&FAN_PWM_TIMER, TIM_CHANNEL_1, dc);
 80027d2:	1dbb      	adds	r3, r7, #6
 80027d4:	881a      	ldrh	r2, [r3, #0]
 80027d6:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <_Z20FAN_PWM_SetDutyCyclet+0x54>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000288 	.word	0x20000288

080027e8 <_Z17LED_NRF24L01_Initv>:
const char* timestamp = __TIMESTAMP__;



void LED_NRF24L01_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
	//Wrapper to char array containing the compilation timestamp
	uint32_t *wrapper = (uint32_t*)timestamp;
 80027ee:	4b29      	ldr	r3, [pc, #164]	; (8002894 <_Z17LED_NRF24L01_Initv+0xac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	607b      	str	r3, [r7, #4]

	OwnGroup = 0;
 80027f4:	4b28      	ldr	r3, [pc, #160]	; (8002898 <_Z17LED_NRF24L01_Initv+0xb0>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]

	NRF24L01_Init(LED_NRF24L01_CHANNEL, LED_NRF24L01_PAYLOAD); // Do basic init
 80027fa:	210c      	movs	r1, #12
 80027fc:	2073      	movs	r0, #115	; 0x73
 80027fe:	f002 f995 	bl	8004b2c <NRF24L01_Init>

	NRF24L01_SetRF(LED_NRF24L01_DATARATE, LED_NRF24L01_OUTPUT_POWER); /* Set RF settings */
 8002802:	2103      	movs	r1, #3
 8002804:	2001      	movs	r0, #1
 8002806:	f002 fc31 	bl	800506c <NRF24L01_SetRF>

	OwnAddress = LED_NRF24L01_BASE_ADDR;
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <_Z17LED_NRF24L01_Initv+0xb4>)
 800280c:	4a24      	ldr	r2, [pc, #144]	; (80028a0 <_Z17LED_NRF24L01_Initv+0xb8>)
 800280e:	601a      	str	r2, [r3, #0]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_TX_ADDR, (uint8_t*)&OwnAddress, 4);	//Setup transmit address
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <_Z17LED_NRF24L01_Initv+0xb4>)
 8002812:	2204      	movs	r2, #4
 8002814:	0019      	movs	r1, r3
 8002816:	2010      	movs	r0, #16
 8002818:	f002 fa56 	bl	8004cc8 <NRF24L01_WriteRegisterMulti>

	NRF24L01_CE_LOW;
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4820      	ldr	r0, [pc, #128]	; (80028a4 <_Z17LED_NRF24L01_Initv+0xbc>)
 8002822:	2200      	movs	r2, #0
 8002824:	0019      	movs	r1, r3
 8002826:	f004 f863 	bl	80068f0 <HAL_GPIO_WritePin>
	OwnAddress = LED_NRF24LO1_BROADCAST_ADDR;	//Setup pipe 0 for RX
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <_Z17LED_NRF24L01_Initv+0xb4>)
 800282c:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <_Z17LED_NRF24L01_Initv+0xc0>)
 800282e:	601a      	str	r2, [r3, #0]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P0, (uint8_t*)&OwnAddress, 4);
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <_Z17LED_NRF24L01_Initv+0xb4>)
 8002832:	2204      	movs	r2, #4
 8002834:	0019      	movs	r1, r3
 8002836:	200a      	movs	r0, #10
 8002838:	f002 fa46 	bl	8004cc8 <NRF24L01_WriteRegisterMulti>
	OwnAddress = wrapper[0] ^ wrapper[1] ^ wrapper[2] ^ wrapper[3] ^ wrapper[4] ^ wrapper[5];	//Calculate own address
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	405a      	eors	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3308      	adds	r3, #8
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	405a      	eors	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	330c      	adds	r3, #12
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	405a      	eors	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3310      	adds	r3, #16
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	405a      	eors	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3314      	adds	r3, #20
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	405a      	eors	r2, r3
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <_Z17LED_NRF24L01_Initv+0xb4>)
 800286a:	601a      	str	r2, [r3, #0]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P1, (uint8_t*)&OwnAddress, 4);
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <_Z17LED_NRF24L01_Initv+0xb4>)
 800286e:	2204      	movs	r2, #4
 8002870:	0019      	movs	r1, r3
 8002872:	200b      	movs	r0, #11
 8002874:	f002 fa28 	bl	8004cc8 <NRF24L01_WriteRegisterMulti>
	NRF24L01_CE_HIGH;
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4809      	ldr	r0, [pc, #36]	; (80028a4 <_Z17LED_NRF24L01_Initv+0xbc>)
 800287e:	2201      	movs	r2, #1
 8002880:	0019      	movs	r1, r3
 8002882:	f004 f835 	bl	80068f0 <HAL_GPIO_WritePin>

	/* Go to RX mode */
	NRF24L01_PowerUpRx();
 8002886:	f002 fa59 	bl	8004d3c <NRF24L01_PowerUpRx>
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b002      	add	sp, #8
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	20000000 	.word	0x20000000
 8002898:	20000098 	.word	0x20000098
 800289c:	20000094 	.word	0x20000094
 80028a0:	87654321 	.word	0x87654321
 80028a4:	48000400 	.word	0x48000400
 80028a8:	12345678 	.word	0x12345678

080028ac <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	0002      	movs	r2, r0
 80028b4:	1dbb      	adds	r3, r7, #6
 80028b6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == NRF_IRQ_Pin)
 80028b8:	1dbb      	adds	r3, r7, #6
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d101      	bne.n	80028c4 <HAL_GPIO_EXTI_Callback+0x18>
	{
		LED_NRF24L01_IRQ();
 80028c0:	f000 f804 	bl	80028cc <_Z16LED_NRF24L01_IRQv>
	}
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_Z16LED_NRF24L01_IRQv>:


void LED_NRF24L01_IRQ(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
	union NRF24L01_DataPacket packet;

	/* Read interrupts, If data is ready on NRF24L01+ */
	if (NRF24L01_GetStatus() & (1 << NRF24L01_RX_DR))
 80028d2:	f002 fad1 	bl	8004e78 <NRF24L01_GetStatus>
 80028d6:	0003      	movs	r3, r0
 80028d8:	001a      	movs	r2, r3
 80028da:	2340      	movs	r3, #64	; 0x40
 80028dc:	4013      	ands	r3, r2
 80028de:	1e5a      	subs	r2, r3, #1
 80028e0:	4193      	sbcs	r3, r2
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05b      	beq.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>
	{
		/* Get data from NRF24L01+ */
		NRF24L01_GetData(packet.Data);
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	0018      	movs	r0, r3
 80028ec:	f002 fa9c 	bl	8004e28 <NRF24L01_GetData>

		//Handle data
		switch(packet.CMD)
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b10      	cmp	r3, #16
 80028f6:	d852      	bhi.n	800299e <_Z16LED_NRF24L01_IRQv+0xd2>
 80028f8:	009a      	lsls	r2, r3, #2
 80028fa:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <_Z16LED_NRF24L01_IRQv+0xe0>)
 80028fc:	18d3      	adds	r3, r2, r3
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	469f      	mov	pc, r3
		{
			case CMD_PINGREQUEST: // Answer with own address for four times with "random" delays in between
				Exec_PingRequest(packet.PingRequest);
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	1c18      	adds	r0, r3, #0
 8002908:	f000 f852 	bl	80029b0 <_Z16Exec_PingRequest20NRF24L01_PingRequest>
				break;
 800290c:	e048      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			case CMD_SETGROUP:
				Exec_SetGroup(packet.SetGroup);
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	f000 f8e2 	bl	8002adc <_Z13Exec_SetGroup17NRF24L01_SetGroup>
				break;
 8002918:	e042      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			case CMD_SETTIMEBASE:
				Exec_SetTimebase(packet.SetTimebase);
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	f000 f8fa 	bl	8002b18 <_Z16Exec_SetTimebase20NRF24L01_SetTimebase>
				break;
 8002924:	e03c      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			case CMD_SETRGB:
				Exec_SetRGB(packet.SetRGB);
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	f000 f90a 	bl	8002b44 <_Z11Exec_SetRGB15NRF24L01_SetRGB>
				break;
 8002930:	e036      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			case CMD_SETRGBW:
				Exec_SetRGBW(packet.SetRGBW);
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	f000 f923 	bl	8002b84 <_Z12Exec_SetRGBW16NRF24L01_SetRGBW>
				break;
 800293e:	e02f      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			case CMD_SETHSV:
				Exec_SetHSV(packet.SetHSV);
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	f000 f93f 	bl	8002bc8 <_Z11Exec_SetHSV15NRF24L01_SetHSV>
				break;
 800294a:	e029      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			case CMD_STROBERGB:
				Exec_StrobeRGB(packet.StrobeRGB);
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	6859      	ldr	r1, [r3, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	f000 f958 	bl	8002c08 <_Z14Exec_StrobeRGB18NRF24L01_StrobeRGB>
				break;
 8002958:	e022      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			case CMD_STROBERGBW:
				Exec_StrobeRGBW(packet.StrobeRGBW);
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	f000 f977 	bl	8002c54 <_Z15Exec_StrobeRGBW19NRF24L01_StrobeRGBW>
				break;
 8002966:	e01b      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			case CMD_STROBEHSV:
				Exec_StrobeHSV(packet.StrobeHSV);
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	f000 f99a 	bl	8002ca8 <_Z14Exec_StrobeHSV18NRF24L01_StrobeHSV>
				break;
 8002974:	e014      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			case CMD_FADEHUE:
				Exec_FadeHue(packet.FadeHue);
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	f000 f9b9 	bl	8002cf4 <_Z12Exec_FadeHue16NRF24L01_FadeHue>
				break;
 8002982:	e00d      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			case CMD_FADESATURATION:
				Exec_FadeSaturation(packet.FadeSaturation);
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	f000 f9d8 	bl	8002d40 <_Z19Exec_FadeSaturation23NRF24L01_FadeSaturation>
				break;
 8002990:	e006      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			case CMD_GETTEMPERATURE:
				Exec_GetTempertaure(packet.GetTemperature);
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	f000 f9f8 	bl	8002d8c <_Z19Exec_GetTempertaure23NRF24L01_GetTemperature>
				break;
 800299c:	e000      	b.n	80029a0 <_Z16LED_NRF24L01_IRQv+0xd4>

			default:
				break;
 800299e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Clear interrupts */
	NRF24L01_Clear_Interrupts();
 80029a0:	f002 fbc0 	bl	8005124 <NRF24L01_Clear_Interrupts>
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b004      	add	sp, #16
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	08008fd4 	.word	0x08008fd4

080029b0 <_Z16Exec_PingRequest20NRF24L01_PingRequest>:



inline void Exec_PingRequest(struct NRF24L01_PingRequest packet)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	7018      	strb	r0, [r3, #0]
	((struct NRF24L01_PingAnswer*)&packet)->CMD = CMD_PINGREQUESTANSWER;
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	701a      	strb	r2, [r3, #0]
	((struct NRF24L01_PingAnswer*)&packet)->SlaveAddress = OwnAddress;
 80029c0:	1d39      	adds	r1, r7, #4
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <_Z16Exec_PingRequest20NRF24L01_PingRequest+0x128>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	1c4b      	adds	r3, r1, #1
 80029c8:	21ff      	movs	r1, #255	; 0xff
 80029ca:	4011      	ands	r1, r2
 80029cc:	000c      	movs	r4, r1
 80029ce:	7819      	ldrb	r1, [r3, #0]
 80029d0:	2000      	movs	r0, #0
 80029d2:	4001      	ands	r1, r0
 80029d4:	1c08      	adds	r0, r1, #0
 80029d6:	1c21      	adds	r1, r4, #0
 80029d8:	4301      	orrs	r1, r0
 80029da:	7019      	strb	r1, [r3, #0]
 80029dc:	0a11      	lsrs	r1, r2, #8
 80029de:	20ff      	movs	r0, #255	; 0xff
 80029e0:	4001      	ands	r1, r0
 80029e2:	000c      	movs	r4, r1
 80029e4:	7859      	ldrb	r1, [r3, #1]
 80029e6:	2000      	movs	r0, #0
 80029e8:	4001      	ands	r1, r0
 80029ea:	1c08      	adds	r0, r1, #0
 80029ec:	1c21      	adds	r1, r4, #0
 80029ee:	4301      	orrs	r1, r0
 80029f0:	7059      	strb	r1, [r3, #1]
 80029f2:	0c11      	lsrs	r1, r2, #16
 80029f4:	20ff      	movs	r0, #255	; 0xff
 80029f6:	4001      	ands	r1, r0
 80029f8:	000c      	movs	r4, r1
 80029fa:	7899      	ldrb	r1, [r3, #2]
 80029fc:	2000      	movs	r0, #0
 80029fe:	4001      	ands	r1, r0
 8002a00:	1c08      	adds	r0, r1, #0
 8002a02:	1c21      	adds	r1, r4, #0
 8002a04:	4301      	orrs	r1, r0
 8002a06:	7099      	strb	r1, [r3, #2]
 8002a08:	0e10      	lsrs	r0, r2, #24
 8002a0a:	78da      	ldrb	r2, [r3, #3]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	400a      	ands	r2, r1
 8002a10:	1c11      	adds	r1, r2, #0
 8002a12:	1c02      	adds	r2, r0, #0
 8002a14:	430a      	orrs	r2, r1
 8002a16:	70da      	strb	r2, [r3, #3]
	//Wait for a random time before answering
	HAL_Delay((uint8_t)(OwnAddress));
 8002a18:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <_Z16Exec_PingRequest20NRF24L01_PingRequest+0x128>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f003 f84c 	bl	8005abc <HAL_Delay>
	NRF24L01_Transmit((uint8_t*)&packet);
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	0018      	movs	r0, r3
 8002a28:	f002 f9b4 	bl	8004d94 <NRF24L01_Transmit>
	while(NRF24L01_GetTransmissionStatus() == NRF24L01_Transmit_Status_Sending);
 8002a2c:	f002 fa41 	bl	8004eb2 <NRF24L01_GetTransmissionStatus>
 8002a30:	0003      	movs	r3, r0
 8002a32:	3bff      	subs	r3, #255	; 0xff
 8002a34:	425a      	negs	r2, r3
 8002a36:	4153      	adcs	r3, r2
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d000      	beq.n	8002a40 <_Z16Exec_PingRequest20NRF24L01_PingRequest+0x90>
 8002a3e:	e7f5      	b.n	8002a2c <_Z16Exec_PingRequest20NRF24L01_PingRequest+0x7c>
	NRF24L01_PowerUpRx();
 8002a40:	f002 f97c 	bl	8004d3c <NRF24L01_PowerUpRx>
	//Wait again for a random time before answering
	HAL_Delay((uint8_t)(OwnAddress >> 8));
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <_Z16Exec_PingRequest20NRF24L01_PingRequest+0x128>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f003 f835 	bl	8005abc <HAL_Delay>
	NRF24L01_Transmit((uint8_t*)&packet);
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	0018      	movs	r0, r3
 8002a56:	f002 f99d 	bl	8004d94 <NRF24L01_Transmit>
	while(NRF24L01_GetTransmissionStatus() == NRF24L01_Transmit_Status_Sending);
 8002a5a:	f002 fa2a 	bl	8004eb2 <NRF24L01_GetTransmissionStatus>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	3bff      	subs	r3, #255	; 0xff
 8002a62:	425a      	negs	r2, r3
 8002a64:	4153      	adcs	r3, r2
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d000      	beq.n	8002a6e <_Z16Exec_PingRequest20NRF24L01_PingRequest+0xbe>
 8002a6c:	e7f5      	b.n	8002a5a <_Z16Exec_PingRequest20NRF24L01_PingRequest+0xaa>
	NRF24L01_PowerUpRx();
 8002a6e:	f002 f965 	bl	8004d3c <NRF24L01_PowerUpRx>
	//Wait again for a random time before answering
	HAL_Delay((uint8_t)(OwnAddress >> 16));
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <_Z16Exec_PingRequest20NRF24L01_PingRequest+0x128>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0c1b      	lsrs	r3, r3, #16
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f003 f81e 	bl	8005abc <HAL_Delay>
	NRF24L01_Transmit((uint8_t*)&packet);
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	0018      	movs	r0, r3
 8002a84:	f002 f986 	bl	8004d94 <NRF24L01_Transmit>
	while(NRF24L01_GetTransmissionStatus() == NRF24L01_Transmit_Status_Sending);
 8002a88:	f002 fa13 	bl	8004eb2 <NRF24L01_GetTransmissionStatus>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	3bff      	subs	r3, #255	; 0xff
 8002a90:	425a      	negs	r2, r3
 8002a92:	4153      	adcs	r3, r2
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d000      	beq.n	8002a9c <_Z16Exec_PingRequest20NRF24L01_PingRequest+0xec>
 8002a9a:	e7f5      	b.n	8002a88 <_Z16Exec_PingRequest20NRF24L01_PingRequest+0xd8>
	NRF24L01_PowerUpRx();
 8002a9c:	f002 f94e 	bl	8004d3c <NRF24L01_PowerUpRx>
	//Wait again for a random time before answering
	HAL_Delay((uint8_t)(OwnAddress >> 24));
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <_Z16Exec_PingRequest20NRF24L01_PingRequest+0x128>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e1b      	lsrs	r3, r3, #24
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f003 f807 	bl	8005abc <HAL_Delay>
	NRF24L01_Transmit((uint8_t*)&packet);
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f002 f96f 	bl	8004d94 <NRF24L01_Transmit>
	while(NRF24L01_GetTransmissionStatus() == NRF24L01_Transmit_Status_Sending);
 8002ab6:	f002 f9fc 	bl	8004eb2 <NRF24L01_GetTransmissionStatus>
 8002aba:	0003      	movs	r3, r0
 8002abc:	3bff      	subs	r3, #255	; 0xff
 8002abe:	425a      	negs	r2, r3
 8002ac0:	4153      	adcs	r3, r2
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d000      	beq.n	8002aca <_Z16Exec_PingRequest20NRF24L01_PingRequest+0x11a>
 8002ac8:	e7f5      	b.n	8002ab6 <_Z16Exec_PingRequest20NRF24L01_PingRequest+0x106>
	NRF24L01_PowerUpRx();
 8002aca:	f002 f937 	bl	8004d3c <NRF24L01_PowerUpRx>
}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b003      	add	sp, #12
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	20000094 	.word	0x20000094

08002adc <_Z13Exec_SetGroup17NRF24L01_SetGroup>:



inline void Exec_SetGroup(struct NRF24L01_SetGroup packet)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	003b      	movs	r3, r7
 8002ae4:	6018      	str	r0, [r3, #0]
 8002ae6:	6059      	str	r1, [r3, #4]
	if(packet.SlaveAddress == OwnAddress)
 8002ae8:	003b      	movs	r3, r7
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	0a12      	lsrs	r2, r2, #8
 8002aee:	791b      	ldrb	r3, [r3, #4]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	4313      	orrs	r3, r2
 8002af4:	001a      	movs	r2, r3
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <_Z13Exec_SetGroup17NRF24L01_SetGroup+0x34>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d103      	bne.n	8002b06 <_Z13Exec_SetGroup17NRF24L01_SetGroup+0x2a>
	{
		OwnGroup = packet.GroupID;
 8002afe:	003b      	movs	r3, r7
 8002b00:	795a      	ldrb	r2, [r3, #5]
 8002b02:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <_Z13Exec_SetGroup17NRF24L01_SetGroup+0x38>)
 8002b04:	701a      	strb	r2, [r3, #0]
	}
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b002      	add	sp, #8
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	20000094 	.word	0x20000094
 8002b14:	20000098 	.word	0x20000098

08002b18 <_Z16Exec_SetTimebase20NRF24L01_SetTimebase>:



inline void Exec_SetTimebase(struct NRF24L01_SetTimebase packet)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	003b      	movs	r3, r7
 8002b20:	6018      	str	r0, [r3, #0]
 8002b22:	6059      	str	r1, [r3, #4]
	uwTick = packet.Timebase;
 8002b24:	003b      	movs	r3, r7
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	0a12      	lsrs	r2, r2, #8
 8002b2a:	791b      	ldrb	r3, [r3, #4]
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	001a      	movs	r2, r3
 8002b32:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <_Z16Exec_SetTimebase20NRF24L01_SetTimebase+0x28>)
 8002b34:	601a      	str	r2, [r3, #0]
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b002      	add	sp, #8
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	20000464 	.word	0x20000464

08002b44 <_Z11Exec_SetRGB15NRF24L01_SetRGB>:



inline void Exec_SetRGB(struct NRF24L01_SetRGB packet)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	003b      	movs	r3, r7
 8002b4c:	6018      	str	r0, [r3, #0]
 8002b4e:	6059      	str	r1, [r3, #4]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002b50:	003b      	movs	r3, r7
 8002b52:	785b      	ldrb	r3, [r3, #1]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <_Z11Exec_SetRGB15NRF24L01_SetRGB+0x20>
 8002b58:	003b      	movs	r3, r7
 8002b5a:	785a      	ldrb	r2, [r3, #1]
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <_Z11Exec_SetRGB15NRF24L01_SetRGB+0x3c>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d108      	bne.n	8002b76 <_Z11Exec_SetRGB15NRF24L01_SetRGB+0x32>
	{
		LED_SetModeRGB(packet.Red, packet.Green, packet.Blue);
 8002b64:	003b      	movs	r3, r7
 8002b66:	8858      	ldrh	r0, [r3, #2]
 8002b68:	003b      	movs	r3, r7
 8002b6a:	8899      	ldrh	r1, [r3, #4]
 8002b6c:	003b      	movs	r3, r7
 8002b6e:	88db      	ldrh	r3, [r3, #6]
 8002b70:	001a      	movs	r2, r3
 8002b72:	f000 fda1 	bl	80036b8 <_Z14LED_SetModeRGBttt>
	}
}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b002      	add	sp, #8
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	20000098 	.word	0x20000098

08002b84 <_Z12Exec_SetRGBW16NRF24L01_SetRGBW>:



inline void Exec_SetRGBW(struct NRF24L01_SetRGBW packet)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	6018      	str	r0, [r3, #0]
 8002b8e:	6059      	str	r1, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <_Z12Exec_SetRGBW16NRF24L01_SetRGBW+0x22>
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	785a      	ldrb	r2, [r3, #1]
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <_Z12Exec_SetRGBW16NRF24L01_SetRGBW+0x40>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d109      	bne.n	8002bba <_Z12Exec_SetRGBW16NRF24L01_SetRGBW+0x36>
	{
		LED_SetModeRGBW(packet.Red, packet.Green, packet.Blue, packet.White);
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	8858      	ldrh	r0, [r3, #2]
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	8899      	ldrh	r1, [r3, #4]
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	88da      	ldrh	r2, [r3, #6]
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	891b      	ldrh	r3, [r3, #8]
 8002bb6:	f000 fdab 	bl	8003710 <_Z15LED_SetModeRGBWtttt>
	}
}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b004      	add	sp, #16
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	20000098 	.word	0x20000098

08002bc8 <_Z11Exec_SetHSV15NRF24L01_SetHSV>:



inline void Exec_SetHSV(struct NRF24L01_SetHSV packet)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	003b      	movs	r3, r7
 8002bd0:	6018      	str	r0, [r3, #0]
 8002bd2:	6059      	str	r1, [r3, #4]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002bd4:	003b      	movs	r3, r7
 8002bd6:	785b      	ldrb	r3, [r3, #1]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <_Z11Exec_SetHSV15NRF24L01_SetHSV+0x20>
 8002bdc:	003b      	movs	r3, r7
 8002bde:	785a      	ldrb	r2, [r3, #1]
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <_Z11Exec_SetHSV15NRF24L01_SetHSV+0x3c>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d108      	bne.n	8002bfa <_Z11Exec_SetHSV15NRF24L01_SetHSV+0x32>
	{
		LED_SetModeHSV(packet.Hue, packet.Saturation, packet.Value);
 8002be8:	003b      	movs	r3, r7
 8002bea:	8858      	ldrh	r0, [r3, #2]
 8002bec:	003b      	movs	r3, r7
 8002bee:	8899      	ldrh	r1, [r3, #4]
 8002bf0:	003b      	movs	r3, r7
 8002bf2:	88db      	ldrh	r3, [r3, #6]
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	f000 fdbd 	bl	8003774 <_Z14LED_SetModeHSVttt>
	}
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b002      	add	sp, #8
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	20000098 	.word	0x20000098

08002c08 <_Z14Exec_StrobeRGB18NRF24L01_StrobeRGB>:



inline void Exec_StrobeRGB(struct NRF24L01_StrobeRGB packet)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	6018      	str	r0, [r3, #0]
 8002c12:	6059      	str	r1, [r3, #4]
 8002c14:	609a      	str	r2, [r3, #8]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	785b      	ldrb	r3, [r3, #1]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <_Z14Exec_StrobeRGB18NRF24L01_StrobeRGB+0x22>
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	785a      	ldrb	r2, [r3, #1]
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <_Z14Exec_StrobeRGB18NRF24L01_StrobeRGB+0x48>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d10d      	bne.n	8002c46 <_Z14Exec_StrobeRGB18NRF24L01_StrobeRGB+0x3e>
	{
		LED_SetModeStrobeRGB(packet.Period, packet.Count, packet.Red, packet.Green, packet.Blue);
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	7898      	ldrb	r0, [r3, #2]
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	78d9      	ldrb	r1, [r3, #3]
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	889a      	ldrh	r2, [r3, #4]
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	88dc      	ldrh	r4, [r3, #6]
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	891b      	ldrh	r3, [r3, #8]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	0023      	movs	r3, r4
 8002c42:	f000 fde1 	bl	8003808 <_Z20LED_SetModeStrobeRGBhhttt>
	}
}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b005      	add	sp, #20
 8002c4c:	bd90      	pop	{r4, r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	20000098 	.word	0x20000098

08002c54 <_Z15Exec_StrobeRGBW19NRF24L01_StrobeRGBW>:



inline void Exec_StrobeRGBW(struct NRF24L01_StrobeRGBW packet)
{
 8002c54:	b5b0      	push	{r4, r5, r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	6018      	str	r0, [r3, #0]
 8002c5e:	6059      	str	r1, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	785b      	ldrb	r3, [r3, #1]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <_Z15Exec_StrobeRGBW19NRF24L01_StrobeRGBW+0x22>
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	785a      	ldrb	r2, [r3, #1]
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <_Z15Exec_StrobeRGBW19NRF24L01_StrobeRGBW+0x50>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d111      	bne.n	8002c9a <_Z15Exec_StrobeRGBW19NRF24L01_StrobeRGBW+0x46>
	{
		LED_SetModeStrobeRGBW(packet.Period, packet.Count, packet.Red, packet.Green, packet.Blue, packet.White);
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	7898      	ldrb	r0, [r3, #2]
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	78d9      	ldrb	r1, [r3, #3]
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	889c      	ldrh	r4, [r3, #4]
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	88dd      	ldrh	r5, [r3, #6]
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	891b      	ldrh	r3, [r3, #8]
 8002c8a:	1d3a      	adds	r2, r7, #4
 8002c8c:	8952      	ldrh	r2, [r2, #10]
 8002c8e:	9201      	str	r2, [sp, #4]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	002b      	movs	r3, r5
 8002c94:	0022      	movs	r2, r4
 8002c96:	f000 fdfb 	bl	8003890 <_Z21LED_SetModeStrobeRGBWhhtttt>
	}
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b004      	add	sp, #16
 8002ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	20000098 	.word	0x20000098

08002ca8 <_Z14Exec_StrobeHSV18NRF24L01_StrobeHSV>:



inline void Exec_StrobeHSV(struct NRF24L01_StrobeHSV packet)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	6018      	str	r0, [r3, #0]
 8002cb2:	6059      	str	r1, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <_Z14Exec_StrobeHSV18NRF24L01_StrobeHSV+0x22>
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	785a      	ldrb	r2, [r3, #1]
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <_Z14Exec_StrobeHSV18NRF24L01_StrobeHSV+0x48>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d10d      	bne.n	8002ce6 <_Z14Exec_StrobeHSV18NRF24L01_StrobeHSV+0x3e>
	{
		LED_SetModeStrobeHSV(packet.Period, packet.Count, packet.Hue, packet.Saturation, packet.Value);
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	7898      	ldrb	r0, [r3, #2]
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	78d9      	ldrb	r1, [r3, #3]
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	889a      	ldrh	r2, [r3, #4]
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	88dc      	ldrh	r4, [r3, #6]
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	891b      	ldrh	r3, [r3, #8]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	0023      	movs	r3, r4
 8002ce2:	f000 fe1b 	bl	800391c <_Z20LED_SetModeStrobeHSVhhttt>
	}
}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b005      	add	sp, #20
 8002cec:	bd90      	pop	{r4, r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	20000098 	.word	0x20000098

08002cf4 <_Z12Exec_FadeHue16NRF24L01_FadeHue>:



inline void Exec_FadeHue(struct NRF24L01_FadeHue packet)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	6018      	str	r0, [r3, #0]
 8002cfe:	6059      	str	r1, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <_Z12Exec_FadeHue16NRF24L01_FadeHue+0x22>
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	785a      	ldrb	r2, [r3, #1]
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <_Z12Exec_FadeHue16NRF24L01_FadeHue+0x48>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d10d      	bne.n	8002d32 <_Z12Exec_FadeHue16NRF24L01_FadeHue+0x3e>
	{
		LED_SetModeFadeHue(packet.Period, packet.Hue_Max, packet.Hue_Min, packet.Saturation, packet.Value);
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	8858      	ldrh	r0, [r3, #2]
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	8899      	ldrh	r1, [r3, #4]
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	88da      	ldrh	r2, [r3, #6]
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	891c      	ldrh	r4, [r3, #8]
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	895b      	ldrh	r3, [r3, #10]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	0023      	movs	r3, r4
 8002d2e:	f000 fe57 	bl	80039e0 <_Z18LED_SetModeFadeHuettttt>
	}
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b005      	add	sp, #20
 8002d38:	bd90      	pop	{r4, r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	20000098 	.word	0x20000098

08002d40 <_Z19Exec_FadeSaturation23NRF24L01_FadeSaturation>:



inline void Exec_FadeSaturation(struct NRF24L01_FadeSaturation packet)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	1d3b      	adds	r3, r7, #4
 8002d48:	6018      	str	r0, [r3, #0]
 8002d4a:	6059      	str	r1, [r3, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
	if((packet.GroupID == 0) || (packet.GroupID == OwnGroup))
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <_Z19Exec_FadeSaturation23NRF24L01_FadeSaturation+0x22>
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	785a      	ldrb	r2, [r3, #1]
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <_Z19Exec_FadeSaturation23NRF24L01_FadeSaturation+0x48>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d10d      	bne.n	8002d7e <_Z19Exec_FadeSaturation23NRF24L01_FadeSaturation+0x3e>
	{
		LED_SetModeFadeSaturation(packet.Period, packet.Hue, packet.Saturation_Max, packet.Saturation_Min, packet.Value);
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	8858      	ldrh	r0, [r3, #2]
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	8899      	ldrh	r1, [r3, #4]
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	88da      	ldrh	r2, [r3, #6]
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	891c      	ldrh	r4, [r3, #8]
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	895b      	ldrh	r3, [r3, #10]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	0023      	movs	r3, r4
 8002d7a:	f000 fe79 	bl	8003a70 <_Z25LED_SetModeFadeSaturationttttt>
	}
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b005      	add	sp, #20
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	20000098 	.word	0x20000098

08002d8c <_Z19Exec_GetTempertaure23NRF24L01_GetTemperature>:
}



inline void Exec_GetTempertaure(struct NRF24L01_GetTemperature packet)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	003b      	movs	r3, r7
 8002d94:	6018      	str	r0, [r3, #0]
 8002d96:	6059      	str	r1, [r3, #4]
	((struct NRF24L01_GetTemperatureAnswer*)&packet)->CMD = CMD_GETTEMPERATUREANSWER;
 8002d98:	003b      	movs	r3, r7
 8002d9a:	2290      	movs	r2, #144	; 0x90
 8002d9c:	701a      	strb	r2, [r3, #0]
	((struct NRF24L01_GetTemperatureAnswer*)&packet)->LED_Temperature = LED_Thermomodel_GetTemp();
 8002d9e:	003c      	movs	r4, r7
 8002da0:	f001 f8aa 	bl	8003ef8 <_Z23LED_Thermomodel_GetTempv>
 8002da4:	1c02      	adds	r2, r0, #0
 8002da6:	1c63      	adds	r3, r4, #1
 8002da8:	21ff      	movs	r1, #255	; 0xff
 8002daa:	4011      	ands	r1, r2
 8002dac:	000c      	movs	r4, r1
 8002dae:	7819      	ldrb	r1, [r3, #0]
 8002db0:	2000      	movs	r0, #0
 8002db2:	4001      	ands	r1, r0
 8002db4:	1c08      	adds	r0, r1, #0
 8002db6:	1c21      	adds	r1, r4, #0
 8002db8:	4301      	orrs	r1, r0
 8002dba:	7019      	strb	r1, [r3, #0]
 8002dbc:	0a11      	lsrs	r1, r2, #8
 8002dbe:	20ff      	movs	r0, #255	; 0xff
 8002dc0:	4001      	ands	r1, r0
 8002dc2:	000c      	movs	r4, r1
 8002dc4:	7859      	ldrb	r1, [r3, #1]
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	4001      	ands	r1, r0
 8002dca:	1c08      	adds	r0, r1, #0
 8002dcc:	1c21      	adds	r1, r4, #0
 8002dce:	4301      	orrs	r1, r0
 8002dd0:	7059      	strb	r1, [r3, #1]
 8002dd2:	0c11      	lsrs	r1, r2, #16
 8002dd4:	20ff      	movs	r0, #255	; 0xff
 8002dd6:	4001      	ands	r1, r0
 8002dd8:	000c      	movs	r4, r1
 8002dda:	7899      	ldrb	r1, [r3, #2]
 8002ddc:	2000      	movs	r0, #0
 8002dde:	4001      	ands	r1, r0
 8002de0:	1c08      	adds	r0, r1, #0
 8002de2:	1c21      	adds	r1, r4, #0
 8002de4:	4301      	orrs	r1, r0
 8002de6:	7099      	strb	r1, [r3, #2]
 8002de8:	0e10      	lsrs	r0, r2, #24
 8002dea:	78da      	ldrb	r2, [r3, #3]
 8002dec:	2100      	movs	r1, #0
 8002dee:	400a      	ands	r2, r1
 8002df0:	1c11      	adds	r1, r2, #0
 8002df2:	1c02      	adds	r2, r0, #0
 8002df4:	430a      	orrs	r2, r1
 8002df6:	70da      	strb	r2, [r3, #3]
	//Transmit answer once
	NRF24L01_Transmit((uint8_t*)&packet);
 8002df8:	003b      	movs	r3, r7
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f001 ffca 	bl	8004d94 <NRF24L01_Transmit>
	while(NRF24L01_GetTransmissionStatus() == NRF24L01_Transmit_Status_Sending);
 8002e00:	f002 f857 	bl	8004eb2 <NRF24L01_GetTransmissionStatus>
 8002e04:	0003      	movs	r3, r0
 8002e06:	3bff      	subs	r3, #255	; 0xff
 8002e08:	425a      	negs	r2, r3
 8002e0a:	4153      	adcs	r3, r2
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d000      	beq.n	8002e14 <_Z19Exec_GetTempertaure23NRF24L01_GetTemperature+0x88>
 8002e12:	e7f5      	b.n	8002e00 <_Z19Exec_GetTempertaure23NRF24L01_GetTemperature+0x74>
	NRF24L01_PowerUpRx();
 8002e14:	f001 ff92 	bl	8004d3c <NRF24L01_PowerUpRx>
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b003      	add	sp, #12
 8002e1e:	bd90      	pop	{r4, r7, pc}

08002e20 <_Z12LED_PWM_Initv>:
uint16_t _led_red, _led_green, _led_blue, _led_white = 0;



void LED_PWM_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	//Disable PWM boost
	PWMboost = 0;
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <_Z12LED_PWM_Initv+0x6c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]

	//Set duty cycles to 0
	LED_PWM_SetRGBW(0, 0, 0, 0);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2100      	movs	r1, #0
 8002e30:	2000      	movs	r0, #0
 8002e32:	f000 f831 	bl	8002e98 <_Z15LED_PWM_SetRGBWtttt>

	//Enable PWM output
	HAL_TIM_PWM_Start(&htim1, LED_R_CH_SLOW);
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <_Z12LED_PWM_Initv+0x70>)
 8002e38:	2108      	movs	r1, #8
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f004 fbc8 	bl	80075d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, LED_G_CH_SLOW);
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <_Z12LED_PWM_Initv+0x70>)
 8002e42:	210c      	movs	r1, #12
 8002e44:	0018      	movs	r0, r3
 8002e46:	f004 fbc3 	bl	80075d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, LED_B_CH_SLOW);
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <_Z12LED_PWM_Initv+0x70>)
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f004 fbbe 	bl	80075d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, LED_W_CH_SLOW);
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <_Z12LED_PWM_Initv+0x70>)
 8002e56:	2104      	movs	r1, #4
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f004 fbb9 	bl	80075d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, LED_R_CH_FAST);
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <_Z12LED_PWM_Initv+0x74>)
 8002e60:	2100      	movs	r1, #0
 8002e62:	0018      	movs	r0, r3
 8002e64:	f004 fbb4 	bl	80075d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, LED_G_CH_FAST);
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <_Z12LED_PWM_Initv+0x74>)
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f004 fbaf 	bl	80075d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, LED_B_CH_FAST);
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <_Z12LED_PWM_Initv+0x74>)
 8002e74:	2108      	movs	r1, #8
 8002e76:	0018      	movs	r0, r3
 8002e78:	f004 fbaa 	bl	80075d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, LED_W_CH_FAST);
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <_Z12LED_PWM_Initv+0x74>)
 8002e7e:	210c      	movs	r1, #12
 8002e80:	0018      	movs	r0, r3
 8002e82:	f004 fba5 	bl	80075d0 <HAL_TIM_PWM_Start>
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000099 	.word	0x20000099
 8002e90:	20000208 	.word	0x20000208
 8002e94:	20000248 	.word	0x20000248

08002e98 <_Z15LED_PWM_SetRGBWtttt>:



void LED_PWM_SetRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	0005      	movs	r5, r0
 8002ea0:	000c      	movs	r4, r1
 8002ea2:	0010      	movs	r0, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	1dbb      	adds	r3, r7, #6
 8002ea8:	1c2a      	adds	r2, r5, #0
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	1c22      	adds	r2, r4, #0
 8002eb0:	801a      	strh	r2, [r3, #0]
 8002eb2:	1cbb      	adds	r3, r7, #2
 8002eb4:	1c02      	adds	r2, r0, #0
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	003b      	movs	r3, r7
 8002eba:	1c0a      	adds	r2, r1, #0
 8002ebc:	801a      	strh	r2, [r3, #0]
	_led_red = red;
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <_Z15LED_PWM_SetRGBWtttt+0x88>)
 8002ec0:	1dba      	adds	r2, r7, #6
 8002ec2:	8812      	ldrh	r2, [r2, #0]
 8002ec4:	801a      	strh	r2, [r3, #0]
	_led_green = green;
 8002ec6:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <_Z15LED_PWM_SetRGBWtttt+0x8c>)
 8002ec8:	1d3a      	adds	r2, r7, #4
 8002eca:	8812      	ldrh	r2, [r2, #0]
 8002ecc:	801a      	strh	r2, [r3, #0]
	_led_blue = blue;
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <_Z15LED_PWM_SetRGBWtttt+0x90>)
 8002ed0:	1cba      	adds	r2, r7, #2
 8002ed2:	8812      	ldrh	r2, [r2, #0]
 8002ed4:	801a      	strh	r2, [r3, #0]
	_led_white = white;
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <_Z15LED_PWM_SetRGBWtttt+0x94>)
 8002ed8:	003a      	movs	r2, r7
 8002eda:	8812      	ldrh	r2, [r2, #0]
 8002edc:	801a      	strh	r2, [r3, #0]
	LED_PWM_SetPWM_TIM(LED_R_CH_SLOW, LED_R_CH_FAST, red);
 8002ede:	1dbb      	adds	r3, r7, #6
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	2008      	movs	r0, #8
 8002ee8:	f000 f822 	bl	8002f30 <_Z18LED_PWM_SetPWM_TIMmmt>
	LED_PWM_SetPWM_TIM(LED_G_CH_SLOW, LED_G_CH_FAST, green);
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	200c      	movs	r0, #12
 8002ef6:	f000 f81b 	bl	8002f30 <_Z18LED_PWM_SetPWM_TIMmmt>
	LED_PWM_SetPWM_TIM(LED_B_CH_SLOW, LED_B_CH_FAST, blue);
 8002efa:	1cbb      	adds	r3, r7, #2
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	001a      	movs	r2, r3
 8002f00:	2108      	movs	r1, #8
 8002f02:	2000      	movs	r0, #0
 8002f04:	f000 f814 	bl	8002f30 <_Z18LED_PWM_SetPWM_TIMmmt>
	LED_PWM_SetPWM_TIM(LED_W_CH_SLOW, LED_W_CH_FAST, white);
 8002f08:	003b      	movs	r3, r7
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	001a      	movs	r2, r3
 8002f0e:	210c      	movs	r1, #12
 8002f10:	2004      	movs	r0, #4
 8002f12:	f000 f80d 	bl	8002f30 <_Z18LED_PWM_SetPWM_TIMmmt>
}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	200000a0 	.word	0x200000a0
 8002f24:	200000a2 	.word	0x200000a2
 8002f28:	200000a4 	.word	0x200000a4
 8002f2c:	200000a6 	.word	0x200000a6

08002f30 <_Z18LED_PWM_SetPWM_TIMmmt>:



void LED_PWM_SetPWM_TIM(uint32_t channel_slow, uint32_t channel_fast, uint16_t value)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	1dbb      	adds	r3, r7, #6
 8002f3c:	801a      	strh	r2, [r3, #0]
	uint16_t val_Slow = 65535; //Translates to 100%
 8002f3e:	2316      	movs	r3, #22
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	2201      	movs	r2, #1
 8002f44:	4252      	negs	r2, r2
 8002f46:	801a      	strh	r2, [r3, #0]
	uint16_t val_Fast = 0; //Translates to 0%
 8002f48:	2314      	movs	r3, #20
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	801a      	strh	r2, [r3, #0]

	if(PWMboost == 0) // Limit max. output current while not boosting
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <_Z18LED_PWM_SetPWM_TIMmmt+0x144>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d111      	bne.n	8002f7c <_Z18LED_PWM_SetPWM_TIMmmt+0x4c>
	{
		value = (value * LED_PWM_STD_PEAK_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT;
 8002f58:	1dbb      	adds	r3, r7, #6
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	0013      	movs	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	189b      	adds	r3, r3, r2
 8002f62:	011a      	lsls	r2, r3, #4
 8002f64:	1ad2      	subs	r2, r2, r3
 8002f66:	00d3      	lsls	r3, r2, #3
 8002f68:	001a      	movs	r2, r3
 8002f6a:	23fa      	movs	r3, #250	; 0xfa
 8002f6c:	0099      	lsls	r1, r3, #2
 8002f6e:	0010      	movs	r0, r2
 8002f70:	f7fd f954 	bl	800021c <__divsi3>
 8002f74:	0003      	movs	r3, r0
 8002f76:	001a      	movs	r2, r3
 8002f78:	1dbb      	adds	r3, r7, #6
 8002f7a:	801a      	strh	r2, [r3, #0]
	}

	if(value >= ((65535 * LED_PWM_ANALOG_MIN_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT))
 8002f7c:	1dbb      	adds	r3, r7, #6
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	4a3d      	ldr	r2, [pc, #244]	; (8003078 <_Z18LED_PWM_SetPWM_TIMmmt+0x148>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d90e      	bls.n	8002fa4 <_Z18LED_PWM_SetPWM_TIMmmt+0x74>
	{ //Only analog dimming
		val_Fast = MapRounded(value, 0, 65535, (1000*LED_PWM_ANALOG_VOLT_MIN)/3300, (1000*LED_PWM_ANALOG_VOLT_MAX)/3300);
 8002f86:	4a3d      	ldr	r2, [pc, #244]	; (800307c <_Z18LED_PWM_SetPWM_TIMmmt+0x14c>)
 8002f88:	1dbb      	adds	r3, r7, #6
 8002f8a:	8818      	ldrh	r0, [r3, #0]
 8002f8c:	4b3c      	ldr	r3, [pc, #240]	; (8003080 <_Z18LED_PWM_SetPWM_TIMmmt+0x150>)
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	234b      	movs	r3, #75	; 0x4b
 8002f92:	2100      	movs	r1, #0
 8002f94:	f000 f910 	bl	80031b8 <_Z10MapRoundedttttt>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	2314      	movs	r3, #20
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	e01a      	b.n	8002fda <_Z18LED_PWM_SetPWM_TIMmmt+0xaa>
	}
	else
	{ //Mixed analog and PWM dimming
		val_Fast = MapRounded(((65535 * LED_PWM_ANALOG_MIN_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT), 0, 65535, (1000*LED_PWM_ANALOG_VOLT_MIN)/3300, (1000*LED_PWM_ANALOG_VOLT_MAX)/3300);
 8002fa4:	4a35      	ldr	r2, [pc, #212]	; (800307c <_Z18LED_PWM_SetPWM_TIMmmt+0x14c>)
 8002fa6:	4837      	ldr	r0, [pc, #220]	; (8003084 <_Z18LED_PWM_SetPWM_TIMmmt+0x154>)
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <_Z18LED_PWM_SetPWM_TIMmmt+0x150>)
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	234b      	movs	r3, #75	; 0x4b
 8002fae:	2100      	movs	r1, #0
 8002fb0:	f000 f902 	bl	80031b8 <_Z10MapRoundedttttt>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	001a      	movs	r2, r3
 8002fb8:	2314      	movs	r3, #20
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	801a      	strh	r2, [r3, #0]
		val_Slow = MapRounded(value, 0, ((65535 * LED_PWM_ANALOG_MIN_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT), 0, 65535);
 8002fbe:	4a31      	ldr	r2, [pc, #196]	; (8003084 <_Z18LED_PWM_SetPWM_TIMmmt+0x154>)
 8002fc0:	1dbb      	adds	r3, r7, #6
 8002fc2:	8818      	ldrh	r0, [r3, #0]
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	; (800307c <_Z18LED_PWM_SetPWM_TIMmmt+0x14c>)
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	f000 f8f4 	bl	80031b8 <_Z10MapRoundedttttt>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	2316      	movs	r3, #22
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	801a      	strh	r2, [r3, #0]
	}

	__HAL_TIM_SET_COMPARE(&LED_PWM_FAST_TIMER, channel_fast, val_Fast);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d106      	bne.n	8002fee <_Z18LED_PWM_SetPWM_TIMmmt+0xbe>
 8002fe0:	2314      	movs	r3, #20
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	4b28      	ldr	r3, [pc, #160]	; (8003088 <_Z18LED_PWM_SetPWM_TIMmmt+0x158>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	635a      	str	r2, [r3, #52]	; 0x34
 8002fec:	e019      	b.n	8003022 <_Z18LED_PWM_SetPWM_TIMmmt+0xf2>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d106      	bne.n	8003002 <_Z18LED_PWM_SetPWM_TIMmmt+0xd2>
 8002ff4:	2314      	movs	r3, #20
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	881a      	ldrh	r2, [r3, #0]
 8002ffa:	4b23      	ldr	r3, [pc, #140]	; (8003088 <_Z18LED_PWM_SetPWM_TIMmmt+0x158>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	639a      	str	r2, [r3, #56]	; 0x38
 8003000:	e00f      	b.n	8003022 <_Z18LED_PWM_SetPWM_TIMmmt+0xf2>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d106      	bne.n	8003016 <_Z18LED_PWM_SetPWM_TIMmmt+0xe6>
 8003008:	2314      	movs	r3, #20
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <_Z18LED_PWM_SetPWM_TIMmmt+0x158>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	63da      	str	r2, [r3, #60]	; 0x3c
 8003014:	e005      	b.n	8003022 <_Z18LED_PWM_SetPWM_TIMmmt+0xf2>
 8003016:	2314      	movs	r3, #20
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	881a      	ldrh	r2, [r3, #0]
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <_Z18LED_PWM_SetPWM_TIMmmt+0x158>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&LED_PWM_SLOW_TIMER, channel_slow, val_Slow);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <_Z18LED_PWM_SetPWM_TIMmmt+0x106>
 8003028:	2316      	movs	r3, #22
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	881a      	ldrh	r2, [r3, #0]
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <_Z18LED_PWM_SetPWM_TIMmmt+0x15c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003034:	e019      	b.n	800306a <_Z18LED_PWM_SetPWM_TIMmmt+0x13a>
	__HAL_TIM_SET_COMPARE(&LED_PWM_SLOW_TIMER, channel_slow, val_Slow);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d106      	bne.n	800304a <_Z18LED_PWM_SetPWM_TIMmmt+0x11a>
 800303c:	2316      	movs	r3, #22
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	881a      	ldrh	r2, [r3, #0]
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <_Z18LED_PWM_SetPWM_TIMmmt+0x15c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003048:	e00f      	b.n	800306a <_Z18LED_PWM_SetPWM_TIMmmt+0x13a>
	__HAL_TIM_SET_COMPARE(&LED_PWM_SLOW_TIMER, channel_slow, val_Slow);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d106      	bne.n	800305e <_Z18LED_PWM_SetPWM_TIMmmt+0x12e>
 8003050:	2316      	movs	r3, #22
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	881a      	ldrh	r2, [r3, #0]
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <_Z18LED_PWM_SetPWM_TIMmmt+0x15c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800305c:	e005      	b.n	800306a <_Z18LED_PWM_SetPWM_TIMmmt+0x13a>
	__HAL_TIM_SET_COMPARE(&LED_PWM_SLOW_TIMER, channel_slow, val_Slow);
 800305e:	2316      	movs	r3, #22
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	881a      	ldrh	r2, [r3, #0]
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <_Z18LED_PWM_SetPWM_TIMmmt+0x15c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	b006      	add	sp, #24
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	20000099 	.word	0x20000099
 8003078:	00003332 	.word	0x00003332
 800307c:	0000ffff 	.word	0x0000ffff
 8003080:	000002f5 	.word	0x000002f5
 8003084:	00003333 	.word	0x00003333
 8003088:	20000208 	.word	0x20000208
 800308c:	20000248 	.word	0x20000248

08003090 <_Z16LED_PWM_SetBoosth>:



void LED_PWM_SetBoost(uint8_t active)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	0002      	movs	r2, r0
 8003098:	1dfb      	adds	r3, r7, #7
 800309a:	701a      	strb	r2, [r3, #0]
	PWMboost = active;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <_Z16LED_PWM_SetBoosth+0x28>)
 800309e:	1dfa      	adds	r2, r7, #7
 80030a0:	7812      	ldrb	r2, [r2, #0]
 80030a2:	701a      	strb	r2, [r3, #0]
	PWMboostTime = HAL_GetTick();
 80030a4:	f002 fd00 	bl	8005aa8 <HAL_GetTick>
 80030a8:	0002      	movs	r2, r0
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <_Z16LED_PWM_SetBoosth+0x2c>)
 80030ac:	601a      	str	r2, [r3, #0]
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b002      	add	sp, #8
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	20000099 	.word	0x20000099
 80030bc:	2000009c 	.word	0x2000009c

080030c0 <_Z18LED_PWM_CheckBoostv>:



void LED_PWM_CheckBoost(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
	if((PWMboost != 0) && ((HAL_GetTick() - PWMboostTime) > LED_PWM_BOOST_TIMEOUT))
 80030c4:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <_Z18LED_PWM_CheckBoostv+0xe0>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <_Z18LED_PWM_CheckBoostv+0x20>
 80030cc:	f002 fcec 	bl	8005aa8 <HAL_GetTick>
 80030d0:	0002      	movs	r2, r0
 80030d2:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <_Z18LED_PWM_CheckBoostv+0xe4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b64      	cmp	r3, #100	; 0x64
 80030da:	d901      	bls.n	80030e0 <_Z18LED_PWM_CheckBoostv+0x20>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <_Z18LED_PWM_CheckBoostv+0x22>
 80030e0:	2300      	movs	r3, #0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d058      	beq.n	8003198 <_Z18LED_PWM_CheckBoostv+0xd8>
	{
		//Disable boost and DIM LEDs
		PWMboost = 0;
 80030e6:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <_Z18LED_PWM_CheckBoostv+0xe0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
		_led_red = (_led_red * LED_PWM_STD_PEAK_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT;
 80030ec:	4b2e      	ldr	r3, [pc, #184]	; (80031a8 <_Z18LED_PWM_CheckBoostv+0xe8>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	001a      	movs	r2, r3
 80030f2:	0013      	movs	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	189b      	adds	r3, r3, r2
 80030f8:	011a      	lsls	r2, r3, #4
 80030fa:	1ad2      	subs	r2, r2, r3
 80030fc:	00d3      	lsls	r3, r2, #3
 80030fe:	001a      	movs	r2, r3
 8003100:	23fa      	movs	r3, #250	; 0xfa
 8003102:	0099      	lsls	r1, r3, #2
 8003104:	0010      	movs	r0, r2
 8003106:	f7fd f889 	bl	800021c <__divsi3>
 800310a:	0003      	movs	r3, r0
 800310c:	b29a      	uxth	r2, r3
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <_Z18LED_PWM_CheckBoostv+0xe8>)
 8003110:	801a      	strh	r2, [r3, #0]
		_led_green = (_led_green * LED_PWM_STD_PEAK_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT;
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <_Z18LED_PWM_CheckBoostv+0xec>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	001a      	movs	r2, r3
 8003118:	0013      	movs	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	189b      	adds	r3, r3, r2
 800311e:	011a      	lsls	r2, r3, #4
 8003120:	1ad2      	subs	r2, r2, r3
 8003122:	00d3      	lsls	r3, r2, #3
 8003124:	001a      	movs	r2, r3
 8003126:	23fa      	movs	r3, #250	; 0xfa
 8003128:	0099      	lsls	r1, r3, #2
 800312a:	0010      	movs	r0, r2
 800312c:	f7fd f876 	bl	800021c <__divsi3>
 8003130:	0003      	movs	r3, r0
 8003132:	b29a      	uxth	r2, r3
 8003134:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <_Z18LED_PWM_CheckBoostv+0xec>)
 8003136:	801a      	strh	r2, [r3, #0]
		_led_blue = (_led_blue * LED_PWM_STD_PEAK_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT;
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <_Z18LED_PWM_CheckBoostv+0xf0>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	001a      	movs	r2, r3
 800313e:	0013      	movs	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	189b      	adds	r3, r3, r2
 8003144:	011a      	lsls	r2, r3, #4
 8003146:	1ad2      	subs	r2, r2, r3
 8003148:	00d3      	lsls	r3, r2, #3
 800314a:	001a      	movs	r2, r3
 800314c:	23fa      	movs	r3, #250	; 0xfa
 800314e:	0099      	lsls	r1, r3, #2
 8003150:	0010      	movs	r0, r2
 8003152:	f7fd f863 	bl	800021c <__divsi3>
 8003156:	0003      	movs	r3, r0
 8003158:	b29a      	uxth	r2, r3
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <_Z18LED_PWM_CheckBoostv+0xf0>)
 800315c:	801a      	strh	r2, [r3, #0]
		_led_white = (_led_white * LED_PWM_STD_PEAK_CURRENT) / LED_PWM_BOOST_PEAK_CURRENT;
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <_Z18LED_PWM_CheckBoostv+0xf4>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	001a      	movs	r2, r3
 8003164:	0013      	movs	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	189b      	adds	r3, r3, r2
 800316a:	011a      	lsls	r2, r3, #4
 800316c:	1ad2      	subs	r2, r2, r3
 800316e:	00d3      	lsls	r3, r2, #3
 8003170:	001a      	movs	r2, r3
 8003172:	23fa      	movs	r3, #250	; 0xfa
 8003174:	0099      	lsls	r1, r3, #2
 8003176:	0010      	movs	r0, r2
 8003178:	f7fd f850 	bl	800021c <__divsi3>
 800317c:	0003      	movs	r3, r0
 800317e:	b29a      	uxth	r2, r3
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <_Z18LED_PWM_CheckBoostv+0xf4>)
 8003182:	801a      	strh	r2, [r3, #0]
		LED_PWM_SetRGBW(_led_red, _led_green, _led_blue, _led_white);
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <_Z18LED_PWM_CheckBoostv+0xe8>)
 8003186:	8818      	ldrh	r0, [r3, #0]
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <_Z18LED_PWM_CheckBoostv+0xec>)
 800318a:	8819      	ldrh	r1, [r3, #0]
 800318c:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <_Z18LED_PWM_CheckBoostv+0xf0>)
 800318e:	881a      	ldrh	r2, [r3, #0]
 8003190:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <_Z18LED_PWM_CheckBoostv+0xf4>)
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	f7ff fe80 	bl	8002e98 <_Z15LED_PWM_SetRGBWtttt>
	}
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	20000099 	.word	0x20000099
 80031a4:	2000009c 	.word	0x2000009c
 80031a8:	200000a0 	.word	0x200000a0
 80031ac:	200000a2 	.word	0x200000a2
 80031b0:	200000a4 	.word	0x200000a4
 80031b4:	200000a6 	.word	0x200000a6

080031b8 <_Z10MapRoundedttttt>:
}



inline uint16_t MapRounded(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 80031b8:	b5b0      	push	{r4, r5, r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	0005      	movs	r5, r0
 80031c0:	000c      	movs	r4, r1
 80031c2:	0010      	movs	r0, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	1dbb      	adds	r3, r7, #6
 80031c8:	1c2a      	adds	r2, r5, #0
 80031ca:	801a      	strh	r2, [r3, #0]
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	1c22      	adds	r2, r4, #0
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	1cbb      	adds	r3, r7, #2
 80031d4:	1c02      	adds	r2, r0, #0
 80031d6:	801a      	strh	r2, [r3, #0]
 80031d8:	003b      	movs	r3, r7
 80031da:	1c0a      	adds	r2, r1, #0
 80031dc:	801a      	strh	r2, [r3, #0]
	return (uint16_t)(((uint32_t)(x - in_min) * (uint32_t)(out_max - out_min) + (uint32_t)((in_max - in_min) >> 1)) / (uint32_t)(in_max - in_min)) + out_min;
 80031de:	1dbb      	adds	r3, r7, #6
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	0019      	movs	r1, r3
 80031ea:	2318      	movs	r3, #24
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	881a      	ldrh	r2, [r3, #0]
 80031f0:	003b      	movs	r3, r7
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	434b      	muls	r3, r1
 80031f8:	1cba      	adds	r2, r7, #2
 80031fa:	8811      	ldrh	r1, [r2, #0]
 80031fc:	1d3a      	adds	r2, r7, #4
 80031fe:	8812      	ldrh	r2, [r2, #0]
 8003200:	1a8a      	subs	r2, r1, r2
 8003202:	1052      	asrs	r2, r2, #1
 8003204:	1898      	adds	r0, r3, r2
 8003206:	1cbb      	adds	r3, r7, #2
 8003208:	881a      	ldrh	r2, [r3, #0]
 800320a:	1d3b      	adds	r3, r7, #4
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	0019      	movs	r1, r3
 8003212:	f7fc ff79 	bl	8000108 <__udivsi3>
 8003216:	0003      	movs	r3, r0
 8003218:	b29a      	uxth	r2, r3
 800321a:	003b      	movs	r3, r7
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	18d3      	adds	r3, r2, r3
 8003220:	b29b      	uxth	r3, r3
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bdb0      	pop	{r4, r5, r7, pc}

0800322a <_ZN13USART_Handler7PrintlnEPKc>:

		inline void Print(const char *c)
			{
				this->Print((char*)c);
			}
		inline void Println(const char *c)
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]
			{
				this->Println((char*)c);
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0011      	movs	r1, r2
 800323a:	0018      	movs	r0, r3
 800323c:	f000 ff47 	bl	80040ce <_ZN13USART_Handler7PrintlnEPc>
			}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}

08003248 <_Z21LED_StateMachine_Initv>:
char buf[32];



void LED_StateMachine_Init(void)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b083      	sub	sp, #12
 800324c:	af02      	add	r7, sp, #8
	Serial = new USART_Handler(huart2);
 800324e:	2388      	movs	r3, #136	; 0x88
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	0018      	movs	r0, r3
 8003254:	f005 fcf4 	bl	8008c40 <_Znwj>
 8003258:	0003      	movs	r3, r0
 800325a:	001c      	movs	r4, r3
 800325c:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <_Z21LED_StateMachine_Initv+0x50>)
 800325e:	0019      	movs	r1, r3
 8003260:	0020      	movs	r0, r4
 8003262:	f000 ff17 	bl	8004094 <_ZN13USART_HandlerC1ER20__UART_HandleTypeDef>
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <_Z21LED_StateMachine_Initv+0x54>)
 8003268:	601c      	str	r4, [r3, #0]
	LED_Timebase = HAL_GetTick();
 800326a:	f002 fc1d 	bl	8005aa8 <HAL_GetTick>
 800326e:	0002      	movs	r2, r0
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <_Z21LED_StateMachine_Initv+0x58>)
 8003272:	601a      	str	r2, [r3, #0]

	LED_PWM_Init();
 8003274:	f7ff fdd4 	bl	8002e20 <_Z12LED_PWM_Initv>

	LED_NRF24L01_Init(); //Setup RF-Interface
 8003278:	f7ff fab6 	bl	80027e8 <_Z17LED_NRF24L01_Initv>

	LED_SetModeFadeHue(1000, 65535, 0, 65535, 10000);
 800327c:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <_Z21LED_StateMachine_Initv+0x5c>)
 800327e:	4909      	ldr	r1, [pc, #36]	; (80032a4 <_Z21LED_StateMachine_Initv+0x5c>)
 8003280:	23fa      	movs	r3, #250	; 0xfa
 8003282:	0098      	lsls	r0, r3, #2
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <_Z21LED_StateMachine_Initv+0x60>)
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	0013      	movs	r3, r2
 800328a:	2200      	movs	r2, #0
 800328c:	f000 fba8 	bl	80039e0 <_Z18LED_SetModeFadeHuettttt>
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b001      	add	sp, #4
 8003296:	bd90      	pop	{r4, r7, pc}
 8003298:	20000348 	.word	0x20000348
 800329c:	200000c8 	.word	0x200000c8
 80032a0:	200000bc 	.word	0x200000bc
 80032a4:	0000ffff 	.word	0x0000ffff
 80032a8:	00002710 	.word	0x00002710

080032ac <_Z23LED_StateMachine_Handlev>:



void LED_StateMachine_Handle(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
	LED_PWM_CheckBoost();
 80032b0:	f7ff ff06 	bl	80030c0 <_Z18LED_PWM_CheckBoostv>

	if((HAL_GetTick() - LED_Timebase) > STATEMACHINE_PERIOD_MS)
 80032b4:	f002 fbf8 	bl	8005aa8 <HAL_GetTick>
 80032b8:	0002      	movs	r2, r0
 80032ba:	4bac      	ldr	r3, [pc, #688]	; (800356c <_Z23LED_StateMachine_Handlev+0x2c0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	220a      	movs	r2, #10
 80032c2:	429a      	cmp	r2, r3
 80032c4:	419b      	sbcs	r3, r3
 80032c6:	425b      	negs	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d100      	bne.n	80032d0 <_Z23LED_StateMachine_Handlev+0x24>
 80032ce:	e149      	b.n	8003564 <_Z23LED_StateMachine_Handlev+0x2b8>
	{
		LED_Timebase += STATEMACHINE_PERIOD_MS;
 80032d0:	4ba6      	ldr	r3, [pc, #664]	; (800356c <_Z23LED_StateMachine_Handlev+0x2c0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330a      	adds	r3, #10
 80032d6:	001a      	movs	r2, r3
 80032d8:	4ba4      	ldr	r3, [pc, #656]	; (800356c <_Z23LED_StateMachine_Handlev+0x2c0>)
 80032da:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032dc:	b672      	cpsid	i

		//Disable interrupts
		__disable_irq();

		//LED statemachine
		switch(LED_mode)
 80032de:	4ba4      	ldr	r3, [pc, #656]	; (8003570 <_Z23LED_StateMachine_Handlev+0x2c4>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d900      	bls.n	80032e8 <_Z23LED_StateMachine_Handlev+0x3c>
 80032e6:	e129      	b.n	800353c <_Z23LED_StateMachine_Handlev+0x290>
 80032e8:	009a      	lsls	r2, r3, #2
 80032ea:	4ba2      	ldr	r3, [pc, #648]	; (8003574 <_Z23LED_StateMachine_Handlev+0x2c8>)
 80032ec:	18d3      	adds	r3, r2, r3
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	469f      	mov	pc, r3
		{
		case LED_Mode_Constant:
			LED_PWM_SetBoost(0); //Deactivate boost
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7ff fecc 	bl	8003090 <_Z16LED_PWM_SetBoosth>
			LED_PWM_SetRGBW(LED_Red, LED_Green, LED_Blue, LED_White);
 80032f8:	4b9f      	ldr	r3, [pc, #636]	; (8003578 <_Z23LED_StateMachine_Handlev+0x2cc>)
 80032fa:	8818      	ldrh	r0, [r3, #0]
 80032fc:	4b9f      	ldr	r3, [pc, #636]	; (800357c <_Z23LED_StateMachine_Handlev+0x2d0>)
 80032fe:	8819      	ldrh	r1, [r3, #0]
 8003300:	4b9f      	ldr	r3, [pc, #636]	; (8003580 <_Z23LED_StateMachine_Handlev+0x2d4>)
 8003302:	881a      	ldrh	r2, [r3, #0]
 8003304:	4b9f      	ldr	r3, [pc, #636]	; (8003584 <_Z23LED_StateMachine_Handlev+0x2d8>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	f7ff fdc6 	bl	8002e98 <_Z15LED_PWM_SetRGBWtttt>
			LED_mode = LED_Mode_Idle;
 800330c:	4b98      	ldr	r3, [pc, #608]	; (8003570 <_Z23LED_StateMachine_Handlev+0x2c4>)
 800330e:	2205      	movs	r2, #5
 8003310:	701a      	strb	r2, [r3, #0]
			break;
 8003312:	e126      	b.n	8003562 <_Z23LED_StateMachine_Handlev+0x2b6>

		case LED_Mode_Strobe:
			LED_PWM_SetBoost(1); //Activate boost
 8003314:	2001      	movs	r0, #1
 8003316:	f7ff febb 	bl	8003090 <_Z16LED_PWM_SetBoosth>
			if(Strobe_Count == 0) //Check if no more strobes should be output
 800331a:	4b9b      	ldr	r3, [pc, #620]	; (8003588 <_Z23LED_StateMachine_Handlev+0x2dc>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <_Z23LED_StateMachine_Handlev+0x8a>
			{
				LED_PWM_SetRGBW(0, 0, 0, 0);
 8003322:	2300      	movs	r3, #0
 8003324:	2200      	movs	r2, #0
 8003326:	2100      	movs	r1, #0
 8003328:	2000      	movs	r0, #0
 800332a:	f7ff fdb5 	bl	8002e98 <_Z15LED_PWM_SetRGBWtttt>
				LED_mode = LED_Mode_Idle;
 800332e:	4b90      	ldr	r3, [pc, #576]	; (8003570 <_Z23LED_StateMachine_Handlev+0x2c4>)
 8003330:	2205      	movs	r2, #5
 8003332:	701a      	strb	r2, [r3, #0]
					Strobe_Count--;
					Strobe_State = 0;
					LED_StateMachine_Handle();
				}
			}
			break;
 8003334:	e114      	b.n	8003560 <_Z23LED_StateMachine_Handlev+0x2b4>
				if(Strobe_State < STROBE_ACTIVE_TICKS)
 8003336:	4b95      	ldr	r3, [pc, #596]	; (800358c <_Z23LED_StateMachine_Handlev+0x2e0>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d80a      	bhi.n	8003354 <_Z23LED_StateMachine_Handlev+0xa8>
					LED_PWM_SetRGBW(LED_Red, LED_Green, LED_Blue, LED_White);
 800333e:	4b8e      	ldr	r3, [pc, #568]	; (8003578 <_Z23LED_StateMachine_Handlev+0x2cc>)
 8003340:	8818      	ldrh	r0, [r3, #0]
 8003342:	4b8e      	ldr	r3, [pc, #568]	; (800357c <_Z23LED_StateMachine_Handlev+0x2d0>)
 8003344:	8819      	ldrh	r1, [r3, #0]
 8003346:	4b8e      	ldr	r3, [pc, #568]	; (8003580 <_Z23LED_StateMachine_Handlev+0x2d4>)
 8003348:	881a      	ldrh	r2, [r3, #0]
 800334a:	4b8e      	ldr	r3, [pc, #568]	; (8003584 <_Z23LED_StateMachine_Handlev+0x2d8>)
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	f7ff fda3 	bl	8002e98 <_Z15LED_PWM_SetRGBWtttt>
			break;
 8003352:	e105      	b.n	8003560 <_Z23LED_StateMachine_Handlev+0x2b4>
				else if(Strobe_State < Strobe_Period)
 8003354:	4b8d      	ldr	r3, [pc, #564]	; (800358c <_Z23LED_StateMachine_Handlev+0x2e0>)
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	4b8d      	ldr	r3, [pc, #564]	; (8003590 <_Z23LED_StateMachine_Handlev+0x2e4>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d206      	bcs.n	800336e <_Z23LED_StateMachine_Handlev+0xc2>
					LED_PWM_SetRGBW(0, 0, 0, 0);
 8003360:	2300      	movs	r3, #0
 8003362:	2200      	movs	r2, #0
 8003364:	2100      	movs	r1, #0
 8003366:	2000      	movs	r0, #0
 8003368:	f7ff fd96 	bl	8002e98 <_Z15LED_PWM_SetRGBWtttt>
			break;
 800336c:	e0f8      	b.n	8003560 <_Z23LED_StateMachine_Handlev+0x2b4>
				else if(Strobe_State >= Strobe_Period)
 800336e:	4b87      	ldr	r3, [pc, #540]	; (800358c <_Z23LED_StateMachine_Handlev+0x2e0>)
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	4b87      	ldr	r3, [pc, #540]	; (8003590 <_Z23LED_StateMachine_Handlev+0x2e4>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d200      	bcs.n	800337c <_Z23LED_StateMachine_Handlev+0xd0>
 800337a:	e0f1      	b.n	8003560 <_Z23LED_StateMachine_Handlev+0x2b4>
					Strobe_Count--;
 800337c:	4b82      	ldr	r3, [pc, #520]	; (8003588 <_Z23LED_StateMachine_Handlev+0x2dc>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	3b01      	subs	r3, #1
 8003382:	b2da      	uxtb	r2, r3
 8003384:	4b80      	ldr	r3, [pc, #512]	; (8003588 <_Z23LED_StateMachine_Handlev+0x2dc>)
 8003386:	701a      	strb	r2, [r3, #0]
					Strobe_State = 0;
 8003388:	4b80      	ldr	r3, [pc, #512]	; (800358c <_Z23LED_StateMachine_Handlev+0x2e0>)
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
					LED_StateMachine_Handle();
 800338e:	f7ff ff8d 	bl	80032ac <_Z23LED_StateMachine_Handlev>
			break;
 8003392:	e0e5      	b.n	8003560 <_Z23LED_StateMachine_Handlev+0x2b4>

		case LED_Mode_FadeHue:
			LED_PWM_SetBoost(0); //Deactivate boost
 8003394:	2000      	movs	r0, #0
 8003396:	f7ff fe7b 	bl	8003090 <_Z16LED_PWM_SetBoosth>
			LED_Hue = (uint16_t)((65535 * (uint32_t)Fade_State)/(uint32_t)Fade_Period) + LED_Fade_Max;
 800339a:	4b7e      	ldr	r3, [pc, #504]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	001a      	movs	r2, r3
 80033a0:	0013      	movs	r3, r2
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	1a9a      	subs	r2, r3, r2
 80033a6:	4b7c      	ldr	r3, [pc, #496]	; (8003598 <_Z23LED_StateMachine_Handlev+0x2ec>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	0019      	movs	r1, r3
 80033ac:	0010      	movs	r0, r2
 80033ae:	f7fc feab 	bl	8000108 <__udivsi3>
 80033b2:	0003      	movs	r3, r0
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	4b79      	ldr	r3, [pc, #484]	; (800359c <_Z23LED_StateMachine_Handlev+0x2f0>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	18d3      	adds	r3, r2, r3
 80033bc:	b29a      	uxth	r2, r3
 80033be:	4b78      	ldr	r3, [pc, #480]	; (80035a0 <_Z23LED_StateMachine_Handlev+0x2f4>)
 80033c0:	801a      	strh	r2, [r3, #0]
			SetHSV(LED_Hue, LED_Saturation, LED_Value); //Calculate RGB from HSV
 80033c2:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <_Z23LED_StateMachine_Handlev+0x2f4>)
 80033c4:	8818      	ldrh	r0, [r3, #0]
 80033c6:	4b77      	ldr	r3, [pc, #476]	; (80035a4 <_Z23LED_StateMachine_Handlev+0x2f8>)
 80033c8:	8819      	ldrh	r1, [r3, #0]
 80033ca:	4b77      	ldr	r3, [pc, #476]	; (80035a8 <_Z23LED_StateMachine_Handlev+0x2fc>)
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	001a      	movs	r2, r3
 80033d0:	f000 fb96 	bl	8003b00 <_Z6SetHSVttt>
			LED_CopyRGB(LED_Red, LED_Green, LED_Blue); //Convert RGB to RGBW
 80033d4:	4b68      	ldr	r3, [pc, #416]	; (8003578 <_Z23LED_StateMachine_Handlev+0x2cc>)
 80033d6:	8818      	ldrh	r0, [r3, #0]
 80033d8:	4b68      	ldr	r3, [pc, #416]	; (800357c <_Z23LED_StateMachine_Handlev+0x2d0>)
 80033da:	8819      	ldrh	r1, [r3, #0]
 80033dc:	4b68      	ldr	r3, [pc, #416]	; (8003580 <_Z23LED_StateMachine_Handlev+0x2d4>)
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	001a      	movs	r2, r3
 80033e2:	f000 f8e5 	bl	80035b0 <_Z11LED_CopyRGBttt>
			LED_PWM_SetRGBW(LED_Red, LED_Green, LED_Blue, LED_White); //Calculate
 80033e6:	4b64      	ldr	r3, [pc, #400]	; (8003578 <_Z23LED_StateMachine_Handlev+0x2cc>)
 80033e8:	8818      	ldrh	r0, [r3, #0]
 80033ea:	4b64      	ldr	r3, [pc, #400]	; (800357c <_Z23LED_StateMachine_Handlev+0x2d0>)
 80033ec:	8819      	ldrh	r1, [r3, #0]
 80033ee:	4b64      	ldr	r3, [pc, #400]	; (8003580 <_Z23LED_StateMachine_Handlev+0x2d4>)
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	4b64      	ldr	r3, [pc, #400]	; (8003584 <_Z23LED_StateMachine_Handlev+0x2d8>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	f7ff fd4f 	bl	8002e98 <_Z15LED_PWM_SetRGBWtttt>
			if(Fade_State >= Fade_Period)
 80033fa:	4b66      	ldr	r3, [pc, #408]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	4b66      	ldr	r3, [pc, #408]	; (8003598 <_Z23LED_StateMachine_Handlev+0x2ec>)
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d303      	bcc.n	800340e <_Z23LED_StateMachine_Handlev+0x162>
			{
				Fade_State = 0;
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 8003408:	2200      	movs	r2, #0
 800340a:	801a      	strh	r2, [r3, #0]
			}
			else
			{
				Fade_State++;
			}
			break;
 800340c:	e0a9      	b.n	8003562 <_Z23LED_StateMachine_Handlev+0x2b6>
				Fade_State++;
 800340e:	4b61      	ldr	r3, [pc, #388]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	3301      	adds	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	4b5f      	ldr	r3, [pc, #380]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 8003418:	801a      	strh	r2, [r3, #0]
			break;
 800341a:	e0a2      	b.n	8003562 <_Z23LED_StateMachine_Handlev+0x2b6>

		case LED_Mode_FadeSaturation:
			LED_PWM_SetBoost(0); //Deactivate boost
 800341c:	2000      	movs	r0, #0
 800341e:	f7ff fe37 	bl	8003090 <_Z16LED_PWM_SetBoosth>
			LED_Saturation = (uint16_t)(((uint32_t)(LED_Fade_Max - LED_Fade_Min) * (uint32_t)Fade_State)/(uint32_t)Fade_Period) + LED_Fade_Min;
 8003422:	4b5e      	ldr	r3, [pc, #376]	; (800359c <_Z23LED_StateMachine_Handlev+0x2f0>)
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	001a      	movs	r2, r3
 8003428:	4b60      	ldr	r3, [pc, #384]	; (80035ac <_Z23LED_StateMachine_Handlev+0x300>)
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	001a      	movs	r2, r3
 8003430:	4b58      	ldr	r3, [pc, #352]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	435a      	muls	r2, r3
 8003436:	4b58      	ldr	r3, [pc, #352]	; (8003598 <_Z23LED_StateMachine_Handlev+0x2ec>)
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	0019      	movs	r1, r3
 800343c:	0010      	movs	r0, r2
 800343e:	f7fc fe63 	bl	8000108 <__udivsi3>
 8003442:	0003      	movs	r3, r0
 8003444:	b29a      	uxth	r2, r3
 8003446:	4b59      	ldr	r3, [pc, #356]	; (80035ac <_Z23LED_StateMachine_Handlev+0x300>)
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	18d3      	adds	r3, r2, r3
 800344c:	b29a      	uxth	r2, r3
 800344e:	4b55      	ldr	r3, [pc, #340]	; (80035a4 <_Z23LED_StateMachine_Handlev+0x2f8>)
 8003450:	801a      	strh	r2, [r3, #0]
			SetHSV(LED_Hue, LED_Saturation, LED_Value); //Calculate RGB from HSV
 8003452:	4b53      	ldr	r3, [pc, #332]	; (80035a0 <_Z23LED_StateMachine_Handlev+0x2f4>)
 8003454:	8818      	ldrh	r0, [r3, #0]
 8003456:	4b53      	ldr	r3, [pc, #332]	; (80035a4 <_Z23LED_StateMachine_Handlev+0x2f8>)
 8003458:	8819      	ldrh	r1, [r3, #0]
 800345a:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <_Z23LED_StateMachine_Handlev+0x2fc>)
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	001a      	movs	r2, r3
 8003460:	f000 fb4e 	bl	8003b00 <_Z6SetHSVttt>
			LED_CopyRGB(LED_Red, LED_Green, LED_Blue); //Convert RGB to RGBW
 8003464:	4b44      	ldr	r3, [pc, #272]	; (8003578 <_Z23LED_StateMachine_Handlev+0x2cc>)
 8003466:	8818      	ldrh	r0, [r3, #0]
 8003468:	4b44      	ldr	r3, [pc, #272]	; (800357c <_Z23LED_StateMachine_Handlev+0x2d0>)
 800346a:	8819      	ldrh	r1, [r3, #0]
 800346c:	4b44      	ldr	r3, [pc, #272]	; (8003580 <_Z23LED_StateMachine_Handlev+0x2d4>)
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	001a      	movs	r2, r3
 8003472:	f000 f89d 	bl	80035b0 <_Z11LED_CopyRGBttt>
			LED_PWM_SetRGBW(LED_Red, LED_Green, LED_Blue, LED_White); //Calculate
 8003476:	4b40      	ldr	r3, [pc, #256]	; (8003578 <_Z23LED_StateMachine_Handlev+0x2cc>)
 8003478:	8818      	ldrh	r0, [r3, #0]
 800347a:	4b40      	ldr	r3, [pc, #256]	; (800357c <_Z23LED_StateMachine_Handlev+0x2d0>)
 800347c:	8819      	ldrh	r1, [r3, #0]
 800347e:	4b40      	ldr	r3, [pc, #256]	; (8003580 <_Z23LED_StateMachine_Handlev+0x2d4>)
 8003480:	881a      	ldrh	r2, [r3, #0]
 8003482:	4b40      	ldr	r3, [pc, #256]	; (8003584 <_Z23LED_StateMachine_Handlev+0x2d8>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	f7ff fd07 	bl	8002e98 <_Z15LED_PWM_SetRGBWtttt>
			if(Fade_State >= Fade_Period)
 800348a:	4b42      	ldr	r3, [pc, #264]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 800348c:	881a      	ldrh	r2, [r3, #0]
 800348e:	4b42      	ldr	r3, [pc, #264]	; (8003598 <_Z23LED_StateMachine_Handlev+0x2ec>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d303      	bcc.n	800349e <_Z23LED_StateMachine_Handlev+0x1f2>
			{
				Fade_State = 0;
 8003496:	4b3f      	ldr	r3, [pc, #252]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 8003498:	2200      	movs	r2, #0
 800349a:	801a      	strh	r2, [r3, #0]
			}
			else
			{
				Fade_State++;
			}
			break;
 800349c:	e061      	b.n	8003562 <_Z23LED_StateMachine_Handlev+0x2b6>
				Fade_State++;
 800349e:	4b3d      	ldr	r3, [pc, #244]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	3301      	adds	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 80034a8:	801a      	strh	r2, [r3, #0]
			break;
 80034aa:	e05a      	b.n	8003562 <_Z23LED_StateMachine_Handlev+0x2b6>

		case LED_Mode_FadeValue:
			LED_PWM_SetBoost(0); //Deactivate boost
 80034ac:	2000      	movs	r0, #0
 80034ae:	f7ff fdef 	bl	8003090 <_Z16LED_PWM_SetBoosth>
			LED_Value = (uint16_t)(((uint32_t)(LED_Fade_Max - LED_Fade_Min) * (uint32_t)Fade_State)/(uint32_t)Fade_Period) + LED_Fade_Min;
 80034b2:	4b3a      	ldr	r3, [pc, #232]	; (800359c <_Z23LED_StateMachine_Handlev+0x2f0>)
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	001a      	movs	r2, r3
 80034b8:	4b3c      	ldr	r3, [pc, #240]	; (80035ac <_Z23LED_StateMachine_Handlev+0x300>)
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	001a      	movs	r2, r3
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	435a      	muls	r2, r3
 80034c6:	4b34      	ldr	r3, [pc, #208]	; (8003598 <_Z23LED_StateMachine_Handlev+0x2ec>)
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	0019      	movs	r1, r3
 80034cc:	0010      	movs	r0, r2
 80034ce:	f7fc fe1b 	bl	8000108 <__udivsi3>
 80034d2:	0003      	movs	r3, r0
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	4b35      	ldr	r3, [pc, #212]	; (80035ac <_Z23LED_StateMachine_Handlev+0x300>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	18d3      	adds	r3, r2, r3
 80034dc:	b29a      	uxth	r2, r3
 80034de:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <_Z23LED_StateMachine_Handlev+0x2fc>)
 80034e0:	801a      	strh	r2, [r3, #0]
			SetHSV(LED_Hue, LED_Saturation, LED_Value); //Calculate RGB from HSV
 80034e2:	4b2f      	ldr	r3, [pc, #188]	; (80035a0 <_Z23LED_StateMachine_Handlev+0x2f4>)
 80034e4:	8818      	ldrh	r0, [r3, #0]
 80034e6:	4b2f      	ldr	r3, [pc, #188]	; (80035a4 <_Z23LED_StateMachine_Handlev+0x2f8>)
 80034e8:	8819      	ldrh	r1, [r3, #0]
 80034ea:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <_Z23LED_StateMachine_Handlev+0x2fc>)
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	001a      	movs	r2, r3
 80034f0:	f000 fb06 	bl	8003b00 <_Z6SetHSVttt>
			LED_CopyRGB(LED_Red, LED_Green, LED_Blue); //Convert RGB to RGBW
 80034f4:	4b20      	ldr	r3, [pc, #128]	; (8003578 <_Z23LED_StateMachine_Handlev+0x2cc>)
 80034f6:	8818      	ldrh	r0, [r3, #0]
 80034f8:	4b20      	ldr	r3, [pc, #128]	; (800357c <_Z23LED_StateMachine_Handlev+0x2d0>)
 80034fa:	8819      	ldrh	r1, [r3, #0]
 80034fc:	4b20      	ldr	r3, [pc, #128]	; (8003580 <_Z23LED_StateMachine_Handlev+0x2d4>)
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	001a      	movs	r2, r3
 8003502:	f000 f855 	bl	80035b0 <_Z11LED_CopyRGBttt>
			LED_PWM_SetRGBW(LED_Red, LED_Green, LED_Blue, LED_White); //Calculate
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <_Z23LED_StateMachine_Handlev+0x2cc>)
 8003508:	8818      	ldrh	r0, [r3, #0]
 800350a:	4b1c      	ldr	r3, [pc, #112]	; (800357c <_Z23LED_StateMachine_Handlev+0x2d0>)
 800350c:	8819      	ldrh	r1, [r3, #0]
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <_Z23LED_StateMachine_Handlev+0x2d4>)
 8003510:	881a      	ldrh	r2, [r3, #0]
 8003512:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <_Z23LED_StateMachine_Handlev+0x2d8>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	f7ff fcbf 	bl	8002e98 <_Z15LED_PWM_SetRGBWtttt>
			if(Fade_State >= Fade_Period)
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 800351c:	881a      	ldrh	r2, [r3, #0]
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <_Z23LED_StateMachine_Handlev+0x2ec>)
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d303      	bcc.n	800352e <_Z23LED_StateMachine_Handlev+0x282>
			{
				Fade_State = 0;
 8003526:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 8003528:	2200      	movs	r2, #0
 800352a:	801a      	strh	r2, [r3, #0]
			}
			else
			{
				Fade_State++;
			}
			break;
 800352c:	e019      	b.n	8003562 <_Z23LED_StateMachine_Handlev+0x2b6>
				Fade_State++;
 800352e:	4b19      	ldr	r3, [pc, #100]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	3301      	adds	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	4b17      	ldr	r3, [pc, #92]	; (8003594 <_Z23LED_StateMachine_Handlev+0x2e8>)
 8003538:	801a      	strh	r2, [r3, #0]
			break;
 800353a:	e012      	b.n	8003562 <_Z23LED_StateMachine_Handlev+0x2b6>
		case LED_Mode_Idle:
			//Do nothing
			break;

		default: //Unknown state! disable lights and go to idle mode
			LED_CopyRGW(0, 0, 0, 0);
 800353c:	2300      	movs	r3, #0
 800353e:	2200      	movs	r2, #0
 8003540:	2100      	movs	r1, #0
 8003542:	2000      	movs	r0, #0
 8003544:	f000 f85a 	bl	80035fc <_Z11LED_CopyRGWtttt>
			LED_PWM_SetRGBW(0, 0, 0, 0);
 8003548:	2300      	movs	r3, #0
 800354a:	2200      	movs	r2, #0
 800354c:	2100      	movs	r1, #0
 800354e:	2000      	movs	r0, #0
 8003550:	f7ff fca2 	bl	8002e98 <_Z15LED_PWM_SetRGBWtttt>
			LED_mode = LED_Mode_Idle;
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <_Z23LED_StateMachine_Handlev+0x2c4>)
 8003556:	2205      	movs	r2, #5
 8003558:	701a      	strb	r2, [r3, #0]
			break;
 800355a:	e002      	b.n	8003562 <_Z23LED_StateMachine_Handlev+0x2b6>
			break;
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	e000      	b.n	8003562 <_Z23LED_StateMachine_Handlev+0x2b6>
			break;
 8003560:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 8003562:	b662      	cpsie	i
		}

		//Reenable interrupts
		__enable_irq();
	}
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	200000bc 	.word	0x200000bc
 8003570:	20000004 	.word	0x20000004
 8003574:	08009018 	.word	0x08009018
 8003578:	200000ae 	.word	0x200000ae
 800357c:	200000b0 	.word	0x200000b0
 8003580:	200000b2 	.word	0x200000b2
 8003584:	200000b4 	.word	0x200000b4
 8003588:	200000c2 	.word	0x200000c2
 800358c:	200000c1 	.word	0x200000c1
 8003590:	200000c0 	.word	0x200000c0
 8003594:	200000c6 	.word	0x200000c6
 8003598:	200000c4 	.word	0x200000c4
 800359c:	200000b8 	.word	0x200000b8
 80035a0:	200000a8 	.word	0x200000a8
 80035a4:	200000aa 	.word	0x200000aa
 80035a8:	200000ac 	.word	0x200000ac
 80035ac:	200000b6 	.word	0x200000b6

080035b0 <_Z11LED_CopyRGBttt>:



void LED_CopyRGB(uint16_t red, uint16_t green, uint16_t blue)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	0004      	movs	r4, r0
 80035b8:	0008      	movs	r0, r1
 80035ba:	0011      	movs	r1, r2
 80035bc:	1dbb      	adds	r3, r7, #6
 80035be:	1c22      	adds	r2, r4, #0
 80035c0:	801a      	strh	r2, [r3, #0]
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	1c02      	adds	r2, r0, #0
 80035c6:	801a      	strh	r2, [r3, #0]
 80035c8:	1cbb      	adds	r3, r7, #2
 80035ca:	1c0a      	adds	r2, r1, #0
 80035cc:	801a      	strh	r2, [r3, #0]

		LED_Red   -= LED_White;
		LED_Green -= LED_White;
		LED_Blue  -= LED_White;
	#elif defined(RGB_LED)
		LED_Red = red;
 80035ce:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <_Z11LED_CopyRGBttt+0x40>)
 80035d0:	1dba      	adds	r2, r7, #6
 80035d2:	8812      	ldrh	r2, [r2, #0]
 80035d4:	801a      	strh	r2, [r3, #0]
		LED_Green = green;
 80035d6:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <_Z11LED_CopyRGBttt+0x44>)
 80035d8:	1d3a      	adds	r2, r7, #4
 80035da:	8812      	ldrh	r2, [r2, #0]
 80035dc:	801a      	strh	r2, [r3, #0]
		LED_Blue = blue;
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <_Z11LED_CopyRGBttt+0x48>)
 80035e0:	1cba      	adds	r2, r7, #2
 80035e2:	8812      	ldrh	r2, [r2, #0]
 80035e4:	801a      	strh	r2, [r3, #0]
	#endif
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b003      	add	sp, #12
 80035ec:	bd90      	pop	{r4, r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	200000ae 	.word	0x200000ae
 80035f4:	200000b0 	.word	0x200000b0
 80035f8:	200000b2 	.word	0x200000b2

080035fc <_Z11LED_CopyRGWtttt>:



inline void LED_CopyRGW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{
 80035fc:	b5b0      	push	{r4, r5, r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	0005      	movs	r5, r0
 8003604:	000c      	movs	r4, r1
 8003606:	0010      	movs	r0, r2
 8003608:	0019      	movs	r1, r3
 800360a:	1dbb      	adds	r3, r7, #6
 800360c:	1c2a      	adds	r2, r5, #0
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	1c22      	adds	r2, r4, #0
 8003614:	801a      	strh	r2, [r3, #0]
 8003616:	1cbb      	adds	r3, r7, #2
 8003618:	1c02      	adds	r2, r0, #0
 800361a:	801a      	strh	r2, [r3, #0]
 800361c:	003b      	movs	r3, r7
 800361e:	1c0a      	adds	r2, r1, #0
 8003620:	801a      	strh	r2, [r3, #0]
		LED_Red = red;
		LED_Green = green;
		LED_Blue = blue;
		LED_White = white;
	#elif defined(RGB_LED)
		LED_Red = ((((uint32_t)red) + (uint32_t)white) >> 1);
 8003622:	1dbb      	adds	r3, r7, #6
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	003b      	movs	r3, r7
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	18d3      	adds	r3, r2, r3
 800362c:	085b      	lsrs	r3, r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <_Z11LED_CopyRGWtttt+0x64>)
 8003632:	801a      	strh	r2, [r3, #0]
		LED_Green = ((((uint32_t)green) + (uint32_t)white) >> 1);
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	881a      	ldrh	r2, [r3, #0]
 8003638:	003b      	movs	r3, r7
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <_Z11LED_CopyRGWtttt+0x68>)
 8003644:	801a      	strh	r2, [r3, #0]
		LED_Blue = ((((uint32_t)blue) + (uint32_t)white) >> 1);
 8003646:	1cbb      	adds	r3, r7, #2
 8003648:	881a      	ldrh	r2, [r3, #0]
 800364a:	003b      	movs	r3, r7
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	18d3      	adds	r3, r2, r3
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <_Z11LED_CopyRGWtttt+0x6c>)
 8003656:	801a      	strh	r2, [r3, #0]
	#endif
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bdb0      	pop	{r4, r5, r7, pc}
 8003660:	200000ae 	.word	0x200000ae
 8003664:	200000b0 	.word	0x200000b0
 8003668:	200000b2 	.word	0x200000b2

0800366c <_Z11LED_CopyHSVttt>:



inline void LED_CopyHSV(uint16_t hue, uint16_t saturation, uint16_t value)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	0004      	movs	r4, r0
 8003674:	0008      	movs	r0, r1
 8003676:	0011      	movs	r1, r2
 8003678:	1dbb      	adds	r3, r7, #6
 800367a:	1c22      	adds	r2, r4, #0
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	1c02      	adds	r2, r0, #0
 8003682:	801a      	strh	r2, [r3, #0]
 8003684:	1cbb      	adds	r3, r7, #2
 8003686:	1c0a      	adds	r2, r1, #0
 8003688:	801a      	strh	r2, [r3, #0]
	LED_Hue = hue;
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <_Z11LED_CopyHSVttt+0x40>)
 800368c:	1dba      	adds	r2, r7, #6
 800368e:	8812      	ldrh	r2, [r2, #0]
 8003690:	801a      	strh	r2, [r3, #0]
	LED_Saturation = saturation;
 8003692:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <_Z11LED_CopyHSVttt+0x44>)
 8003694:	1d3a      	adds	r2, r7, #4
 8003696:	8812      	ldrh	r2, [r2, #0]
 8003698:	801a      	strh	r2, [r3, #0]
	LED_Value = value;
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <_Z11LED_CopyHSVttt+0x48>)
 800369c:	1cba      	adds	r2, r7, #2
 800369e:	8812      	ldrh	r2, [r2, #0]
 80036a0:	801a      	strh	r2, [r3, #0]
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b003      	add	sp, #12
 80036a8:	bd90      	pop	{r4, r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	200000a8 	.word	0x200000a8
 80036b0:	200000aa 	.word	0x200000aa
 80036b4:	200000ac 	.word	0x200000ac

080036b8 <_Z14LED_SetModeRGBttt>:



void LED_SetModeRGB(uint16_t red, uint16_t green, uint16_t blue)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	0004      	movs	r4, r0
 80036c0:	0008      	movs	r0, r1
 80036c2:	0011      	movs	r1, r2
 80036c4:	1dbb      	adds	r3, r7, #6
 80036c6:	1c22      	adds	r2, r4, #0
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	1c02      	adds	r2, r0, #0
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1cbb      	adds	r3, r7, #2
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
	LED_CopyRGB(red, green, blue);
 80036d6:	1cbb      	adds	r3, r7, #2
 80036d8:	881a      	ldrh	r2, [r3, #0]
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	8819      	ldrh	r1, [r3, #0]
 80036de:	1dbb      	adds	r3, r7, #6
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f7ff ff64 	bl	80035b0 <_Z11LED_CopyRGBttt>
	LED_mode = LED_Mode_Constant;
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <_Z14LED_SetModeRGBttt+0x4c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
	Serial->Println("Set RGB...");
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <_Z14LED_SetModeRGBttt+0x50>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a06      	ldr	r2, [pc, #24]	; (800370c <_Z14LED_SetModeRGBttt+0x54>)
 80036f4:	0011      	movs	r1, r2
 80036f6:	0018      	movs	r0, r3
 80036f8:	f7ff fd97 	bl	800322a <_ZN13USART_Handler7PrintlnEPKc>
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b003      	add	sp, #12
 8003702:	bd90      	pop	{r4, r7, pc}
 8003704:	20000004 	.word	0x20000004
 8003708:	200000c8 	.word	0x200000c8
 800370c:	08008ea4 	.word	0x08008ea4

08003710 <_Z15LED_SetModeRGBWtttt>:



void LED_SetModeRGBW(uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{
 8003710:	b5b0      	push	{r4, r5, r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	0005      	movs	r5, r0
 8003718:	000c      	movs	r4, r1
 800371a:	0010      	movs	r0, r2
 800371c:	0019      	movs	r1, r3
 800371e:	1dbb      	adds	r3, r7, #6
 8003720:	1c2a      	adds	r2, r5, #0
 8003722:	801a      	strh	r2, [r3, #0]
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	1c22      	adds	r2, r4, #0
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	1cbb      	adds	r3, r7, #2
 800372c:	1c02      	adds	r2, r0, #0
 800372e:	801a      	strh	r2, [r3, #0]
 8003730:	003b      	movs	r3, r7
 8003732:	1c0a      	adds	r2, r1, #0
 8003734:	801a      	strh	r2, [r3, #0]
	LED_CopyRGW(red, green, blue, white);
 8003736:	003b      	movs	r3, r7
 8003738:	881c      	ldrh	r4, [r3, #0]
 800373a:	1cbb      	adds	r3, r7, #2
 800373c:	881a      	ldrh	r2, [r3, #0]
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	8819      	ldrh	r1, [r3, #0]
 8003742:	1dbb      	adds	r3, r7, #6
 8003744:	8818      	ldrh	r0, [r3, #0]
 8003746:	0023      	movs	r3, r4
 8003748:	f7ff ff58 	bl	80035fc <_Z11LED_CopyRGWtttt>
	LED_mode = LED_Mode_Constant;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <_Z15LED_SetModeRGBWtttt+0x58>)
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
	Serial->Println("Set RGBW...");
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <_Z15LED_SetModeRGBWtttt+0x5c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a06      	ldr	r2, [pc, #24]	; (8003770 <_Z15LED_SetModeRGBWtttt+0x60>)
 8003758:	0011      	movs	r1, r2
 800375a:	0018      	movs	r0, r3
 800375c:	f7ff fd65 	bl	800322a <_ZN13USART_Handler7PrintlnEPKc>
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bdb0      	pop	{r4, r5, r7, pc}
 8003768:	20000004 	.word	0x20000004
 800376c:	200000c8 	.word	0x200000c8
 8003770:	08008eb0 	.word	0x08008eb0

08003774 <_Z14LED_SetModeHSVttt>:



void LED_SetModeHSV(uint16_t hue, uint16_t saturation, uint16_t value)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	0004      	movs	r4, r0
 800377c:	0008      	movs	r0, r1
 800377e:	0011      	movs	r1, r2
 8003780:	1dbb      	adds	r3, r7, #6
 8003782:	1c22      	adds	r2, r4, #0
 8003784:	801a      	strh	r2, [r3, #0]
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	1c02      	adds	r2, r0, #0
 800378a:	801a      	strh	r2, [r3, #0]
 800378c:	1cbb      	adds	r3, r7, #2
 800378e:	1c0a      	adds	r2, r1, #0
 8003790:	801a      	strh	r2, [r3, #0]
	LED_CopyHSV(hue, saturation, value);
 8003792:	1cbb      	adds	r3, r7, #2
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	1d3b      	adds	r3, r7, #4
 8003798:	8819      	ldrh	r1, [r3, #0]
 800379a:	1dbb      	adds	r3, r7, #6
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	0018      	movs	r0, r3
 80037a0:	f7ff ff64 	bl	800366c <_Z11LED_CopyHSVttt>
	SetHSV(LED_Hue, LED_Saturation, LED_Value);
 80037a4:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <_Z14LED_SetModeHSVttt+0x70>)
 80037a6:	8818      	ldrh	r0, [r3, #0]
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <_Z14LED_SetModeHSVttt+0x74>)
 80037aa:	8819      	ldrh	r1, [r3, #0]
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <_Z14LED_SetModeHSVttt+0x78>)
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	001a      	movs	r2, r3
 80037b2:	f000 f9a5 	bl	8003b00 <_Z6SetHSVttt>
	LED_CopyRGB(LED_Red, LED_Green, LED_Blue); //Convert RGB to RGBW
 80037b6:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <_Z14LED_SetModeHSVttt+0x7c>)
 80037b8:	8818      	ldrh	r0, [r3, #0]
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <_Z14LED_SetModeHSVttt+0x80>)
 80037bc:	8819      	ldrh	r1, [r3, #0]
 80037be:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <_Z14LED_SetModeHSVttt+0x84>)
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	001a      	movs	r2, r3
 80037c4:	f7ff fef4 	bl	80035b0 <_Z11LED_CopyRGBttt>
	LED_mode = LED_Mode_Constant;
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <_Z14LED_SetModeHSVttt+0x88>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
	Serial->Println("Set HSV...");
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <_Z14LED_SetModeHSVttt+0x8c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <_Z14LED_SetModeHSVttt+0x90>)
 80037d4:	0011      	movs	r1, r2
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7ff fd27 	bl	800322a <_ZN13USART_Handler7PrintlnEPKc>
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b003      	add	sp, #12
 80037e2:	bd90      	pop	{r4, r7, pc}
 80037e4:	200000a8 	.word	0x200000a8
 80037e8:	200000aa 	.word	0x200000aa
 80037ec:	200000ac 	.word	0x200000ac
 80037f0:	200000ae 	.word	0x200000ae
 80037f4:	200000b0 	.word	0x200000b0
 80037f8:	200000b2 	.word	0x200000b2
 80037fc:	20000004 	.word	0x20000004
 8003800:	200000c8 	.word	0x200000c8
 8003804:	08008ebc 	.word	0x08008ebc

08003808 <_Z20LED_SetModeStrobeRGBhhttt>:



void LED_SetModeStrobeRGB(uint8_t period, uint8_t count, uint16_t red, uint16_t green, uint16_t blue)
{
 8003808:	b5b0      	push	{r4, r5, r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	0005      	movs	r5, r0
 8003810:	000c      	movs	r4, r1
 8003812:	0010      	movs	r0, r2
 8003814:	0019      	movs	r1, r3
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	1c2a      	adds	r2, r5, #0
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	1dbb      	adds	r3, r7, #6
 800381e:	1c22      	adds	r2, r4, #0
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	1c02      	adds	r2, r0, #0
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	1cbb      	adds	r3, r7, #2
 800382a:	1c0a      	adds	r2, r1, #0
 800382c:	801a      	strh	r2, [r3, #0]
	if(period < 2*STROBE_ACTIVE_TICKS)
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d802      	bhi.n	800383c <_Z20LED_SetModeStrobeRGBhhttt+0x34>
	{
		period = 2*STROBE_ACTIVE_TICKS;
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	2204      	movs	r2, #4
 800383a:	701a      	strb	r2, [r3, #0]
	}
	Strobe_Period = period;
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <_Z20LED_SetModeStrobeRGBhhttt+0x74>)
 800383e:	1dfa      	adds	r2, r7, #7
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	701a      	strb	r2, [r3, #0]
	LED_CopyRGB(red, green, blue);
 8003844:	2318      	movs	r3, #24
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	881a      	ldrh	r2, [r3, #0]
 800384a:	1cbb      	adds	r3, r7, #2
 800384c:	8819      	ldrh	r1, [r3, #0]
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	0018      	movs	r0, r3
 8003854:	f7ff feac 	bl	80035b0 <_Z11LED_CopyRGBttt>
	Strobe_State = 0;
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <_Z20LED_SetModeStrobeRGBhhttt+0x78>)
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
	LED_mode = LED_Mode_Strobe;
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <_Z20LED_SetModeStrobeRGBhhttt+0x7c>)
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
	Serial->Println("Strobing RGB...");
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <_Z20LED_SetModeStrobeRGBhhttt+0x80>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a08      	ldr	r2, [pc, #32]	; (800388c <_Z20LED_SetModeStrobeRGBhhttt+0x84>)
 800386a:	0011      	movs	r1, r2
 800386c:	0018      	movs	r0, r3
 800386e:	f7ff fcdc 	bl	800322a <_ZN13USART_Handler7PrintlnEPKc>
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bdb0      	pop	{r4, r5, r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	200000c0 	.word	0x200000c0
 8003880:	200000c1 	.word	0x200000c1
 8003884:	20000004 	.word	0x20000004
 8003888:	200000c8 	.word	0x200000c8
 800388c:	08008ec8 	.word	0x08008ec8

08003890 <_Z21LED_SetModeStrobeRGBWhhtttt>:



void LED_SetModeStrobeRGBW(uint8_t period, uint8_t count, uint16_t red, uint16_t green, uint16_t blue, uint16_t white)
{
 8003890:	b5b0      	push	{r4, r5, r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	0005      	movs	r5, r0
 8003898:	000c      	movs	r4, r1
 800389a:	0010      	movs	r0, r2
 800389c:	0019      	movs	r1, r3
 800389e:	1dfb      	adds	r3, r7, #7
 80038a0:	1c2a      	adds	r2, r5, #0
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	1dbb      	adds	r3, r7, #6
 80038a6:	1c22      	adds	r2, r4, #0
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	1c02      	adds	r2, r0, #0
 80038ae:	801a      	strh	r2, [r3, #0]
 80038b0:	1cbb      	adds	r3, r7, #2
 80038b2:	1c0a      	adds	r2, r1, #0
 80038b4:	801a      	strh	r2, [r3, #0]
	if(period < 2*STROBE_ACTIVE_TICKS)
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d802      	bhi.n	80038c4 <_Z21LED_SetModeStrobeRGBWhhtttt+0x34>
	{
		period = 2*STROBE_ACTIVE_TICKS;
 80038be:	1dfb      	adds	r3, r7, #7
 80038c0:	2204      	movs	r2, #4
 80038c2:	701a      	strb	r2, [r3, #0]
	}
	Strobe_Period = period;
 80038c4:	4b10      	ldr	r3, [pc, #64]	; (8003908 <_Z21LED_SetModeStrobeRGBWhhtttt+0x78>)
 80038c6:	1dfa      	adds	r2, r7, #7
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	701a      	strb	r2, [r3, #0]
	LED_CopyRGW(red, green, blue, white);
 80038cc:	231c      	movs	r3, #28
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	881c      	ldrh	r4, [r3, #0]
 80038d2:	2318      	movs	r3, #24
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	1cbb      	adds	r3, r7, #2
 80038da:	8819      	ldrh	r1, [r3, #0]
 80038dc:	1d3b      	adds	r3, r7, #4
 80038de:	8818      	ldrh	r0, [r3, #0]
 80038e0:	0023      	movs	r3, r4
 80038e2:	f7ff fe8b 	bl	80035fc <_Z11LED_CopyRGWtttt>
	Strobe_State = 0;
 80038e6:	4b09      	ldr	r3, [pc, #36]	; (800390c <_Z21LED_SetModeStrobeRGBWhhtttt+0x7c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
	LED_mode = LED_Mode_Strobe;
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <_Z21LED_SetModeStrobeRGBWhhtttt+0x80>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
	Serial->Println("Strobing RGBW...");
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <_Z21LED_SetModeStrobeRGBWhhtttt+0x84>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a08      	ldr	r2, [pc, #32]	; (8003918 <_Z21LED_SetModeStrobeRGBWhhtttt+0x88>)
 80038f8:	0011      	movs	r1, r2
 80038fa:	0018      	movs	r0, r3
 80038fc:	f7ff fc95 	bl	800322a <_ZN13USART_Handler7PrintlnEPKc>
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bdb0      	pop	{r4, r5, r7, pc}
 8003908:	200000c0 	.word	0x200000c0
 800390c:	200000c1 	.word	0x200000c1
 8003910:	20000004 	.word	0x20000004
 8003914:	200000c8 	.word	0x200000c8
 8003918:	08008ed8 	.word	0x08008ed8

0800391c <_Z20LED_SetModeStrobeHSVhhttt>:



void LED_SetModeStrobeHSV(uint8_t period, uint8_t count, uint16_t hue, uint16_t saturation, uint16_t value)
{
 800391c:	b5b0      	push	{r4, r5, r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	0005      	movs	r5, r0
 8003924:	000c      	movs	r4, r1
 8003926:	0010      	movs	r0, r2
 8003928:	0019      	movs	r1, r3
 800392a:	1dfb      	adds	r3, r7, #7
 800392c:	1c2a      	adds	r2, r5, #0
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	1dbb      	adds	r3, r7, #6
 8003932:	1c22      	adds	r2, r4, #0
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	1c02      	adds	r2, r0, #0
 800393a:	801a      	strh	r2, [r3, #0]
 800393c:	1cbb      	adds	r3, r7, #2
 800393e:	1c0a      	adds	r2, r1, #0
 8003940:	801a      	strh	r2, [r3, #0]
	if(period < 2*STROBE_ACTIVE_TICKS)
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d802      	bhi.n	8003950 <_Z20LED_SetModeStrobeHSVhhttt+0x34>
	{
		period = 2*STROBE_ACTIVE_TICKS;
 800394a:	1dfb      	adds	r3, r7, #7
 800394c:	2204      	movs	r2, #4
 800394e:	701a      	strb	r2, [r3, #0]
	}
	Strobe_Period = period;
 8003950:	4b18      	ldr	r3, [pc, #96]	; (80039b4 <_Z20LED_SetModeStrobeHSVhhttt+0x98>)
 8003952:	1dfa      	adds	r2, r7, #7
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	701a      	strb	r2, [r3, #0]
	LED_CopyHSV(hue, saturation, value);
 8003958:	2318      	movs	r3, #24
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	881a      	ldrh	r2, [r3, #0]
 800395e:	1cbb      	adds	r3, r7, #2
 8003960:	8819      	ldrh	r1, [r3, #0]
 8003962:	1d3b      	adds	r3, r7, #4
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	0018      	movs	r0, r3
 8003968:	f7ff fe80 	bl	800366c <_Z11LED_CopyHSVttt>
	SetHSV(LED_Hue, LED_Saturation, LED_Value);
 800396c:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <_Z20LED_SetModeStrobeHSVhhttt+0x9c>)
 800396e:	8818      	ldrh	r0, [r3, #0]
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <_Z20LED_SetModeStrobeHSVhhttt+0xa0>)
 8003972:	8819      	ldrh	r1, [r3, #0]
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <_Z20LED_SetModeStrobeHSVhhttt+0xa4>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	001a      	movs	r2, r3
 800397a:	f000 f8c1 	bl	8003b00 <_Z6SetHSVttt>
	LED_CopyRGB(LED_Red, LED_Green, LED_Blue); //Convert RGB to RGBW
 800397e:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <_Z20LED_SetModeStrobeHSVhhttt+0xa8>)
 8003980:	8818      	ldrh	r0, [r3, #0]
 8003982:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <_Z20LED_SetModeStrobeHSVhhttt+0xac>)
 8003984:	8819      	ldrh	r1, [r3, #0]
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <_Z20LED_SetModeStrobeHSVhhttt+0xb0>)
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	001a      	movs	r2, r3
 800398c:	f7ff fe10 	bl	80035b0 <_Z11LED_CopyRGBttt>
	Strobe_State = 0;
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <_Z20LED_SetModeStrobeHSVhhttt+0xb4>)
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
	LED_mode = LED_Mode_Strobe;
 8003996:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <_Z20LED_SetModeStrobeHSVhhttt+0xb8>)
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
	Serial->Println("Strobing HSV...");
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <_Z20LED_SetModeStrobeHSVhhttt+0xbc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0e      	ldr	r2, [pc, #56]	; (80039dc <_Z20LED_SetModeStrobeHSVhhttt+0xc0>)
 80039a2:	0011      	movs	r1, r2
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff fc40 	bl	800322a <_ZN13USART_Handler7PrintlnEPKc>
}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bdb0      	pop	{r4, r5, r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	200000c0 	.word	0x200000c0
 80039b8:	200000a8 	.word	0x200000a8
 80039bc:	200000aa 	.word	0x200000aa
 80039c0:	200000ac 	.word	0x200000ac
 80039c4:	200000ae 	.word	0x200000ae
 80039c8:	200000b0 	.word	0x200000b0
 80039cc:	200000b2 	.word	0x200000b2
 80039d0:	200000c1 	.word	0x200000c1
 80039d4:	20000004 	.word	0x20000004
 80039d8:	200000c8 	.word	0x200000c8
 80039dc:	08008eec 	.word	0x08008eec

080039e0 <_Z18LED_SetModeFadeHuettttt>:



void LED_SetModeFadeHue(uint16_t period, uint16_t hue_max, uint16_t hue_min, uint16_t saturation, uint16_t value)
{
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0005      	movs	r5, r0
 80039e8:	000c      	movs	r4, r1
 80039ea:	0010      	movs	r0, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	1dbb      	adds	r3, r7, #6
 80039f0:	1c2a      	adds	r2, r5, #0
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	1c22      	adds	r2, r4, #0
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	1cbb      	adds	r3, r7, #2
 80039fc:	1c02      	adds	r2, r0, #0
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	003b      	movs	r3, r7
 8003a02:	1c0a      	adds	r2, r1, #0
 8003a04:	801a      	strh	r2, [r3, #0]
	LED_CopyHSV(hue_max, saturation, value);
 8003a06:	2318      	movs	r3, #24
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	881a      	ldrh	r2, [r3, #0]
 8003a0c:	003b      	movs	r3, r7
 8003a0e:	8819      	ldrh	r1, [r3, #0]
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7ff fe29 	bl	800366c <_Z11LED_CopyHSVttt>
	LED_Fade_Max = hue_max;
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <_Z18LED_SetModeFadeHuettttt+0x74>)
 8003a1c:	1d3a      	adds	r2, r7, #4
 8003a1e:	8812      	ldrh	r2, [r2, #0]
 8003a20:	801a      	strh	r2, [r3, #0]
	LED_Fade_Min = hue_min;
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <_Z18LED_SetModeFadeHuettttt+0x78>)
 8003a24:	1cba      	adds	r2, r7, #2
 8003a26:	8812      	ldrh	r2, [r2, #0]
 8003a28:	801a      	strh	r2, [r3, #0]
	Fade_Period = period;
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <_Z18LED_SetModeFadeHuettttt+0x7c>)
 8003a2c:	1dba      	adds	r2, r7, #6
 8003a2e:	8812      	ldrh	r2, [r2, #0]
 8003a30:	801a      	strh	r2, [r3, #0]
	Fade_State = 0;
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <_Z18LED_SetModeFadeHuettttt+0x80>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	801a      	strh	r2, [r3, #0]
	LED_mode = LED_Mode_FadeHue;
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <_Z18LED_SetModeFadeHuettttt+0x84>)
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	701a      	strb	r2, [r3, #0]
	Serial->Println("Fading hue...");
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <_Z18LED_SetModeFadeHuettttt+0x88>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <_Z18LED_SetModeFadeHuettttt+0x8c>)
 8003a44:	0011      	movs	r1, r2
 8003a46:	0018      	movs	r0, r3
 8003a48:	f7ff fbef 	bl	800322a <_ZN13USART_Handler7PrintlnEPKc>
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b002      	add	sp, #8
 8003a52:	bdb0      	pop	{r4, r5, r7, pc}
 8003a54:	200000b8 	.word	0x200000b8
 8003a58:	200000b6 	.word	0x200000b6
 8003a5c:	200000c4 	.word	0x200000c4
 8003a60:	200000c6 	.word	0x200000c6
 8003a64:	20000004 	.word	0x20000004
 8003a68:	200000c8 	.word	0x200000c8
 8003a6c:	08008efc 	.word	0x08008efc

08003a70 <_Z25LED_SetModeFadeSaturationttttt>:



void LED_SetModeFadeSaturation(uint16_t period, uint16_t hue, uint16_t saturation_max, uint16_t saturation_min, uint16_t value)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	0005      	movs	r5, r0
 8003a78:	000c      	movs	r4, r1
 8003a7a:	0010      	movs	r0, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	1dbb      	adds	r3, r7, #6
 8003a80:	1c2a      	adds	r2, r5, #0
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	1c22      	adds	r2, r4, #0
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	1cbb      	adds	r3, r7, #2
 8003a8c:	1c02      	adds	r2, r0, #0
 8003a8e:	801a      	strh	r2, [r3, #0]
 8003a90:	003b      	movs	r3, r7
 8003a92:	1c0a      	adds	r2, r1, #0
 8003a94:	801a      	strh	r2, [r3, #0]
	LED_CopyHSV(hue, saturation_max, value);
 8003a96:	2318      	movs	r3, #24
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	881a      	ldrh	r2, [r3, #0]
 8003a9c:	1cbb      	adds	r3, r7, #2
 8003a9e:	8819      	ldrh	r1, [r3, #0]
 8003aa0:	1d3b      	adds	r3, r7, #4
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7ff fde1 	bl	800366c <_Z11LED_CopyHSVttt>
	LED_Fade_Max = saturation_max;
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <_Z25LED_SetModeFadeSaturationttttt+0x74>)
 8003aac:	1cba      	adds	r2, r7, #2
 8003aae:	8812      	ldrh	r2, [r2, #0]
 8003ab0:	801a      	strh	r2, [r3, #0]
	LED_Fade_Min = saturation_min;
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <_Z25LED_SetModeFadeSaturationttttt+0x78>)
 8003ab4:	003a      	movs	r2, r7
 8003ab6:	8812      	ldrh	r2, [r2, #0]
 8003ab8:	801a      	strh	r2, [r3, #0]
	Fade_Period = period;
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <_Z25LED_SetModeFadeSaturationttttt+0x7c>)
 8003abc:	1dba      	adds	r2, r7, #6
 8003abe:	8812      	ldrh	r2, [r2, #0]
 8003ac0:	801a      	strh	r2, [r3, #0]
	Fade_State = 0;
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <_Z25LED_SetModeFadeSaturationttttt+0x80>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	801a      	strh	r2, [r3, #0]
	LED_mode = LED_Mode_FadeSaturation;
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <_Z25LED_SetModeFadeSaturationttttt+0x84>)
 8003aca:	2203      	movs	r2, #3
 8003acc:	701a      	strb	r2, [r3, #0]
	Serial->Println("Fading saturation...");
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <_Z25LED_SetModeFadeSaturationttttt+0x88>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <_Z25LED_SetModeFadeSaturationttttt+0x8c>)
 8003ad4:	0011      	movs	r1, r2
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f7ff fba7 	bl	800322a <_ZN13USART_Handler7PrintlnEPKc>
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ae4:	200000b8 	.word	0x200000b8
 8003ae8:	200000b6 	.word	0x200000b6
 8003aec:	200000c4 	.word	0x200000c4
 8003af0:	200000c6 	.word	0x200000c6
 8003af4:	20000004 	.word	0x20000004
 8003af8:	200000c8 	.word	0x200000c8
 8003afc:	08008f0c 	.word	0x08008f0c

08003b00 <_Z6SetHSVttt>:
}



void SetHSV(uint16_t H, uint16_t S, uint16_t V)
{
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	0004      	movs	r4, r0
 8003b08:	0008      	movs	r0, r1
 8003b0a:	0011      	movs	r1, r2
 8003b0c:	1dbb      	adds	r3, r7, #6
 8003b0e:	1c22      	adds	r2, r4, #0
 8003b10:	801a      	strh	r2, [r3, #0]
 8003b12:	1d3b      	adds	r3, r7, #4
 8003b14:	1c02      	adds	r2, r0, #0
 8003b16:	801a      	strh	r2, [r3, #0]
 8003b18:	1cbb      	adds	r3, r7, #2
 8003b1a:	1c0a      	adds	r2, r1, #0
 8003b1c:	801a      	strh	r2, [r3, #0]
	uint16_t X, Y;

	if ((H >= 0) && (H < 10922))
 8003b1e:	1dbb      	adds	r3, r7, #6
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	4a82      	ldr	r2, [pc, #520]	; (8003d2c <_Z6SetHSVttt+0x22c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d81e      	bhi.n	8003b66 <_Z6SetHSVttt+0x66>
	{
		X = H;
 8003b28:	210e      	movs	r1, #14
 8003b2a:	187b      	adds	r3, r7, r1
 8003b2c:	1dba      	adds	r2, r7, #6
 8003b2e:	8812      	ldrh	r2, [r2, #0]
 8003b30:	801a      	strh	r2, [r3, #0]
		Y = (((uint32_t)V) * (uint32_t)X) / 10922;
 8003b32:	1cbb      	adds	r3, r7, #2
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	187a      	adds	r2, r7, r1
 8003b38:	8812      	ldrh	r2, [r2, #0]
 8003b3a:	4353      	muls	r3, r2
 8003b3c:	497c      	ldr	r1, [pc, #496]	; (8003d30 <_Z6SetHSVttt+0x230>)
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f7fc fae2 	bl	8000108 <__udivsi3>
 8003b44:	0003      	movs	r3, r0
 8003b46:	001a      	movs	r2, r3
 8003b48:	210c      	movs	r1, #12
 8003b4a:	187b      	adds	r3, r7, r1
 8003b4c:	801a      	strh	r2, [r3, #0]
		LED_Red = V;
 8003b4e:	4b79      	ldr	r3, [pc, #484]	; (8003d34 <_Z6SetHSVttt+0x234>)
 8003b50:	1cba      	adds	r2, r7, #2
 8003b52:	8812      	ldrh	r2, [r2, #0]
 8003b54:	801a      	strh	r2, [r3, #0]
		LED_Green = Y;
 8003b56:	4b78      	ldr	r3, [pc, #480]	; (8003d38 <_Z6SetHSVttt+0x238>)
 8003b58:	187a      	adds	r2, r7, r1
 8003b5a:	8812      	ldrh	r2, [r2, #0]
 8003b5c:	801a      	strh	r2, [r3, #0]
		LED_Blue = 0;
 8003b5e:	4b77      	ldr	r3, [pc, #476]	; (8003d3c <_Z6SetHSVttt+0x23c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	801a      	strh	r2, [r3, #0]
		Y = (((uint32_t)V) * (uint32_t)X) / 10923;
		LED_Red = V;
		LED_Green = 0;
		LED_Blue = V - Y;
	}
}
 8003b64:	e0dd      	b.n	8003d22 <_Z6SetHSVttt+0x222>
	else if ((H >= 10922) && (H < 21845))
 8003b66:	1dbb      	adds	r3, r7, #6
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	4a70      	ldr	r2, [pc, #448]	; (8003d2c <_Z6SetHSVttt+0x22c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d92a      	bls.n	8003bc6 <_Z6SetHSVttt+0xc6>
 8003b70:	1dbb      	adds	r3, r7, #6
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	4a72      	ldr	r2, [pc, #456]	; (8003d40 <_Z6SetHSVttt+0x240>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d825      	bhi.n	8003bc6 <_Z6SetHSVttt+0xc6>
		X = H - 10922;
 8003b7a:	210e      	movs	r1, #14
 8003b7c:	187b      	adds	r3, r7, r1
 8003b7e:	1dba      	adds	r2, r7, #6
 8003b80:	8812      	ldrh	r2, [r2, #0]
 8003b82:	4870      	ldr	r0, [pc, #448]	; (8003d44 <_Z6SetHSVttt+0x244>)
 8003b84:	4684      	mov	ip, r0
 8003b86:	4462      	add	r2, ip
 8003b88:	801a      	strh	r2, [r3, #0]
		Y = (((uint32_t)V) * (uint32_t)X) / 10923;
 8003b8a:	1cbb      	adds	r3, r7, #2
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	187a      	adds	r2, r7, r1
 8003b90:	8812      	ldrh	r2, [r2, #0]
 8003b92:	4353      	muls	r3, r2
 8003b94:	496c      	ldr	r1, [pc, #432]	; (8003d48 <_Z6SetHSVttt+0x248>)
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7fc fab6 	bl	8000108 <__udivsi3>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	210c      	movs	r1, #12
 8003ba2:	187b      	adds	r3, r7, r1
 8003ba4:	801a      	strh	r2, [r3, #0]
		LED_Red = V - Y;
 8003ba6:	1cba      	adds	r2, r7, #2
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	8812      	ldrh	r2, [r2, #0]
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	4b60      	ldr	r3, [pc, #384]	; (8003d34 <_Z6SetHSVttt+0x234>)
 8003bb4:	801a      	strh	r2, [r3, #0]
		LED_Green = V;
 8003bb6:	4b60      	ldr	r3, [pc, #384]	; (8003d38 <_Z6SetHSVttt+0x238>)
 8003bb8:	1cba      	adds	r2, r7, #2
 8003bba:	8812      	ldrh	r2, [r2, #0]
 8003bbc:	801a      	strh	r2, [r3, #0]
		LED_Blue = 0;
 8003bbe:	4b5f      	ldr	r3, [pc, #380]	; (8003d3c <_Z6SetHSVttt+0x23c>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	801a      	strh	r2, [r3, #0]
 8003bc4:	e0ad      	b.n	8003d22 <_Z6SetHSVttt+0x222>
	else if ((H >= 21845) && (H < 32767))
 8003bc6:	1dbb      	adds	r3, r7, #6
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	4a5d      	ldr	r2, [pc, #372]	; (8003d40 <_Z6SetHSVttt+0x240>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d926      	bls.n	8003c1e <_Z6SetHSVttt+0x11e>
 8003bd0:	1dbb      	adds	r3, r7, #6
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	4a5d      	ldr	r2, [pc, #372]	; (8003d4c <_Z6SetHSVttt+0x24c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d821      	bhi.n	8003c1e <_Z6SetHSVttt+0x11e>
		X = H - 21845;
 8003bda:	210e      	movs	r1, #14
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	1dba      	adds	r2, r7, #6
 8003be0:	8812      	ldrh	r2, [r2, #0]
 8003be2:	485b      	ldr	r0, [pc, #364]	; (8003d50 <_Z6SetHSVttt+0x250>)
 8003be4:	4684      	mov	ip, r0
 8003be6:	4462      	add	r2, ip
 8003be8:	801a      	strh	r2, [r3, #0]
		Y = (((uint32_t)V) * (uint32_t)X) / 10922;
 8003bea:	1cbb      	adds	r3, r7, #2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	187a      	adds	r2, r7, r1
 8003bf0:	8812      	ldrh	r2, [r2, #0]
 8003bf2:	4353      	muls	r3, r2
 8003bf4:	494e      	ldr	r1, [pc, #312]	; (8003d30 <_Z6SetHSVttt+0x230>)
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7fc fa86 	bl	8000108 <__udivsi3>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	001a      	movs	r2, r3
 8003c00:	210c      	movs	r1, #12
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	801a      	strh	r2, [r3, #0]
		LED_Red = 0;
 8003c06:	4b4b      	ldr	r3, [pc, #300]	; (8003d34 <_Z6SetHSVttt+0x234>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	801a      	strh	r2, [r3, #0]
		LED_Green = V;
 8003c0c:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <_Z6SetHSVttt+0x238>)
 8003c0e:	1cba      	adds	r2, r7, #2
 8003c10:	8812      	ldrh	r2, [r2, #0]
 8003c12:	801a      	strh	r2, [r3, #0]
		LED_Blue = Y;
 8003c14:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <_Z6SetHSVttt+0x23c>)
 8003c16:	187a      	adds	r2, r7, r1
 8003c18:	8812      	ldrh	r2, [r2, #0]
 8003c1a:	801a      	strh	r2, [r3, #0]
 8003c1c:	e081      	b.n	8003d22 <_Z6SetHSVttt+0x222>
	else if ((H >= 32767) && (H < 43690))
 8003c1e:	1dbb      	adds	r3, r7, #6
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <_Z6SetHSVttt+0x24c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d92a      	bls.n	8003c7e <_Z6SetHSVttt+0x17e>
 8003c28:	1dbb      	adds	r3, r7, #6
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	4a49      	ldr	r2, [pc, #292]	; (8003d54 <_Z6SetHSVttt+0x254>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d825      	bhi.n	8003c7e <_Z6SetHSVttt+0x17e>
		X = H - 32767;
 8003c32:	210e      	movs	r1, #14
 8003c34:	187b      	adds	r3, r7, r1
 8003c36:	1dba      	adds	r2, r7, #6
 8003c38:	8812      	ldrh	r2, [r2, #0]
 8003c3a:	4847      	ldr	r0, [pc, #284]	; (8003d58 <_Z6SetHSVttt+0x258>)
 8003c3c:	4684      	mov	ip, r0
 8003c3e:	4462      	add	r2, ip
 8003c40:	801a      	strh	r2, [r3, #0]
		Y = (((uint32_t)V) * (uint32_t)X) / 10923;
 8003c42:	1cbb      	adds	r3, r7, #2
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	187a      	adds	r2, r7, r1
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	4353      	muls	r3, r2
 8003c4c:	493e      	ldr	r1, [pc, #248]	; (8003d48 <_Z6SetHSVttt+0x248>)
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7fc fa5a 	bl	8000108 <__udivsi3>
 8003c54:	0003      	movs	r3, r0
 8003c56:	001a      	movs	r2, r3
 8003c58:	210c      	movs	r1, #12
 8003c5a:	187b      	adds	r3, r7, r1
 8003c5c:	801a      	strh	r2, [r3, #0]
		LED_Red = 0;
 8003c5e:	4b35      	ldr	r3, [pc, #212]	; (8003d34 <_Z6SetHSVttt+0x234>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	801a      	strh	r2, [r3, #0]
		LED_Green = V - Y;
 8003c64:	1cba      	adds	r2, r7, #2
 8003c66:	187b      	adds	r3, r7, r1
 8003c68:	8812      	ldrh	r2, [r2, #0]
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <_Z6SetHSVttt+0x238>)
 8003c72:	801a      	strh	r2, [r3, #0]
		LED_Blue = V;
 8003c74:	4b31      	ldr	r3, [pc, #196]	; (8003d3c <_Z6SetHSVttt+0x23c>)
 8003c76:	1cba      	adds	r2, r7, #2
 8003c78:	8812      	ldrh	r2, [r2, #0]
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	e051      	b.n	8003d22 <_Z6SetHSVttt+0x222>
	else if ((H >= 43690) && (H < 54612))
 8003c7e:	1dbb      	adds	r3, r7, #6
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	4a34      	ldr	r2, [pc, #208]	; (8003d54 <_Z6SetHSVttt+0x254>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d926      	bls.n	8003cd6 <_Z6SetHSVttt+0x1d6>
 8003c88:	1dbb      	adds	r3, r7, #6
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	4a33      	ldr	r2, [pc, #204]	; (8003d5c <_Z6SetHSVttt+0x25c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d821      	bhi.n	8003cd6 <_Z6SetHSVttt+0x1d6>
		X = H - 43690;
 8003c92:	210e      	movs	r1, #14
 8003c94:	187b      	adds	r3, r7, r1
 8003c96:	1dba      	adds	r2, r7, #6
 8003c98:	8812      	ldrh	r2, [r2, #0]
 8003c9a:	4831      	ldr	r0, [pc, #196]	; (8003d60 <_Z6SetHSVttt+0x260>)
 8003c9c:	4684      	mov	ip, r0
 8003c9e:	4462      	add	r2, ip
 8003ca0:	801a      	strh	r2, [r3, #0]
		Y = (((uint32_t)V) * (uint32_t)X) / 10922;
 8003ca2:	1cbb      	adds	r3, r7, #2
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	187a      	adds	r2, r7, r1
 8003ca8:	8812      	ldrh	r2, [r2, #0]
 8003caa:	4353      	muls	r3, r2
 8003cac:	4920      	ldr	r1, [pc, #128]	; (8003d30 <_Z6SetHSVttt+0x230>)
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f7fc fa2a 	bl	8000108 <__udivsi3>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	210c      	movs	r1, #12
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	801a      	strh	r2, [r3, #0]
		LED_Red = Y;
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <_Z6SetHSVttt+0x234>)
 8003cc0:	187a      	adds	r2, r7, r1
 8003cc2:	8812      	ldrh	r2, [r2, #0]
 8003cc4:	801a      	strh	r2, [r3, #0]
		LED_Green = 0;
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <_Z6SetHSVttt+0x238>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	801a      	strh	r2, [r3, #0]
		LED_Blue = V;
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <_Z6SetHSVttt+0x23c>)
 8003cce:	1cba      	adds	r2, r7, #2
 8003cd0:	8812      	ldrh	r2, [r2, #0]
 8003cd2:	801a      	strh	r2, [r3, #0]
 8003cd4:	e025      	b.n	8003d22 <_Z6SetHSVttt+0x222>
		X = H - 54612;
 8003cd6:	210e      	movs	r1, #14
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	1dba      	adds	r2, r7, #6
 8003cdc:	8812      	ldrh	r2, [r2, #0]
 8003cde:	4821      	ldr	r0, [pc, #132]	; (8003d64 <_Z6SetHSVttt+0x264>)
 8003ce0:	4684      	mov	ip, r0
 8003ce2:	4462      	add	r2, ip
 8003ce4:	801a      	strh	r2, [r3, #0]
		Y = (((uint32_t)V) * (uint32_t)X) / 10923;
 8003ce6:	1cbb      	adds	r3, r7, #2
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	187a      	adds	r2, r7, r1
 8003cec:	8812      	ldrh	r2, [r2, #0]
 8003cee:	4353      	muls	r3, r2
 8003cf0:	4915      	ldr	r1, [pc, #84]	; (8003d48 <_Z6SetHSVttt+0x248>)
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7fc fa08 	bl	8000108 <__udivsi3>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	210c      	movs	r1, #12
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	801a      	strh	r2, [r3, #0]
		LED_Red = V;
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <_Z6SetHSVttt+0x234>)
 8003d04:	1cba      	adds	r2, r7, #2
 8003d06:	8812      	ldrh	r2, [r2, #0]
 8003d08:	801a      	strh	r2, [r3, #0]
		LED_Green = 0;
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <_Z6SetHSVttt+0x238>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	801a      	strh	r2, [r3, #0]
		LED_Blue = V - Y;
 8003d10:	1cba      	adds	r2, r7, #2
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	8812      	ldrh	r2, [r2, #0]
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <_Z6SetHSVttt+0x23c>)
 8003d1e:	801a      	strh	r2, [r3, #0]
}
 8003d20:	e7ff      	b.n	8003d22 <_Z6SetHSVttt+0x222>
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b005      	add	sp, #20
 8003d28:	bd90      	pop	{r4, r7, pc}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	00002aa9 	.word	0x00002aa9
 8003d30:	00002aaa 	.word	0x00002aaa
 8003d34:	200000ae 	.word	0x200000ae
 8003d38:	200000b0 	.word	0x200000b0
 8003d3c:	200000b2 	.word	0x200000b2
 8003d40:	00005554 	.word	0x00005554
 8003d44:	ffffd556 	.word	0xffffd556
 8003d48:	00002aab 	.word	0x00002aab
 8003d4c:	00007ffe 	.word	0x00007ffe
 8003d50:	ffffaaab 	.word	0xffffaaab
 8003d54:	0000aaa9 	.word	0x0000aaa9
 8003d58:	ffff8001 	.word	0xffff8001
 8003d5c:	0000d553 	.word	0x0000d553
 8003d60:	00005556 	.word	0x00005556
 8003d64:	00002aac 	.word	0x00002aac

08003d68 <_Z20LED_Thermomodel_Initv>:
uint32_t Thermomodel_Timebase = 0;
uint16_t Fan_PWM = 0;


void LED_Thermomodel_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
	//Init FAN PWM
	FAN_PWM_Init();
 8003d6c:	f7fe fcf6 	bl	800275c <_Z12FAN_PWM_Initv>
	Fan_PWM = 0;
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <_Z20LED_Thermomodel_Initv+0x34>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	801a      	strh	r2, [r3, #0]

	//Initialize ADC
	NTC_Init();
 8003d76:	f000 f8c9 	bl	8003f0c <_Z8NTC_Initv>

	//Get initial temperature values
	NTC_Temp = NTC_Get_Temp();
 8003d7a:	f000 f8d5 	bl	8003f28 <_Z12NTC_Get_Tempv>
 8003d7e:	1c02      	adds	r2, r0, #0
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <_Z20LED_Thermomodel_Initv+0x38>)
 8003d82:	601a      	str	r2, [r3, #0]
	LED_Temp = NTC_Temp;
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <_Z20LED_Thermomodel_Initv+0x38>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <_Z20LED_Thermomodel_Initv+0x3c>)
 8003d8a:	601a      	str	r2, [r3, #0]

	//Setup timebase
	Thermomodel_Timebase = HAL_GetTick();
 8003d8c:	f001 fe8c 	bl	8005aa8 <HAL_GetTick>
 8003d90:	0002      	movs	r2, r0
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <_Z20LED_Thermomodel_Initv+0x40>)
 8003d94:	601a      	str	r2, [r3, #0]
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	200000d8 	.word	0x200000d8
 8003da0:	200000d0 	.word	0x200000d0
 8003da4:	200000cc 	.word	0x200000cc
 8003da8:	200000d4 	.word	0x200000d4

08003dac <_Z22LED_Thermomodel_Handlev>:



void LED_Thermomodel_Handle(void)
{
 8003dac:	b5b0      	push	{r4, r5, r7, lr}
 8003dae:	af00      	add	r7, sp, #0
	if((HAL_GetTick() - Thermomodel_Timebase) > THERMOMODEL_PERIOD)
 8003db0:	f001 fe7a 	bl	8005aa8 <HAL_GetTick>
 8003db4:	0002      	movs	r2, r0
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <_Z22LED_Thermomodel_Handlev+0x128>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2264      	movs	r2, #100	; 0x64
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	419b      	sbcs	r3, r3
 8003dc2:	425b      	negs	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d100      	bne.n	8003dcc <_Z22LED_Thermomodel_Handlev+0x20>
 8003dca:	e080      	b.n	8003ece <_Z22LED_Thermomodel_Handlev+0x122>
	{
		//Update and filter NTC temperature
		NTC_Temp = NTC_Temp + (0.125 * (NTC_Get_Temp() - NTC_Temp));
 8003dcc:	4b42      	ldr	r3, [pc, #264]	; (8003ed8 <_Z22LED_Thermomodel_Handlev+0x12c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1c18      	adds	r0, r3, #0
 8003dd2:	f7fe fa89 	bl	80022e8 <__aeabi_f2d>
 8003dd6:	0004      	movs	r4, r0
 8003dd8:	000d      	movs	r5, r1
 8003dda:	f000 f8a5 	bl	8003f28 <_Z12NTC_Get_Tempv>
 8003dde:	1c02      	adds	r2, r0, #0
 8003de0:	4b3d      	ldr	r3, [pc, #244]	; (8003ed8 <_Z22LED_Thermomodel_Handlev+0x12c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	1c19      	adds	r1, r3, #0
 8003de6:	1c10      	adds	r0, r2, #0
 8003de8:	f7fc fc22 	bl	8000630 <__aeabi_fsub>
 8003dec:	1c03      	adds	r3, r0, #0
 8003dee:	1c18      	adds	r0, r3, #0
 8003df0:	f7fe fa7a 	bl	80022e8 <__aeabi_f2d>
 8003df4:	2200      	movs	r2, #0
 8003df6:	23ff      	movs	r3, #255	; 0xff
 8003df8:	059b      	lsls	r3, r3, #22
 8003dfa:	f7fd fc85 	bl	8001708 <__aeabi_dmul>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	000b      	movs	r3, r1
 8003e02:	0020      	movs	r0, r4
 8003e04:	0029      	movs	r1, r5
 8003e06:	f7fc fe61 	bl	8000acc <__aeabi_dadd>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	000c      	movs	r4, r1
 8003e0e:	0018      	movs	r0, r3
 8003e10:	0021      	movs	r1, r4
 8003e12:	f7fe fabb 	bl	800238c <__aeabi_d2f>
 8003e16:	1c02      	adds	r2, r0, #0
 8003e18:	4b2f      	ldr	r3, [pc, #188]	; (8003ed8 <_Z22LED_Thermomodel_Handlev+0x12c>)
 8003e1a:	601a      	str	r2, [r3, #0]

		//Calculate LED temperature based on thermal model (currently not implemented)
		LED_Temp = NTC_Temp;
 8003e1c:	4b2e      	ldr	r3, [pc, #184]	; (8003ed8 <_Z22LED_Thermomodel_Handlev+0x12c>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <_Z22LED_Thermomodel_Handlev+0x130>)
 8003e22:	601a      	str	r2, [r3, #0]

		//Control FAN speed
		if(((Fan_PWM == 0) && (LED_Temp > THERMOMODEL_FAN_MIN_ON_TEMP)) || ((Fan_PWM != 0) && (LED_Temp > THERMOMODEL_FAN_MIN_TEMP)))
 8003e24:	4b2e      	ldr	r3, [pc, #184]	; (8003ee0 <_Z22LED_Thermomodel_Handlev+0x134>)
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d108      	bne.n	8003e3e <_Z22LED_Thermomodel_Handlev+0x92>
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <_Z22LED_Thermomodel_Handlev+0x130>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2184      	movs	r1, #132	; 0x84
 8003e32:	05c9      	lsls	r1, r1, #23
 8003e34:	1c18      	adds	r0, r3, #0
 8003e36:	f7fc fb03 	bl	8000440 <__aeabi_fcmpgt>
 8003e3a:	1e03      	subs	r3, r0, #0
 8003e3c:	d10b      	bne.n	8003e56 <_Z22LED_Thermomodel_Handlev+0xaa>
 8003e3e:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <_Z22LED_Thermomodel_Handlev+0x134>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d03b      	beq.n	8003ebe <_Z22LED_Thermomodel_Handlev+0x112>
 8003e46:	4b25      	ldr	r3, [pc, #148]	; (8003edc <_Z22LED_Thermomodel_Handlev+0x130>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4926      	ldr	r1, [pc, #152]	; (8003ee4 <_Z22LED_Thermomodel_Handlev+0x138>)
 8003e4c:	1c18      	adds	r0, r3, #0
 8003e4e:	f7fc faf7 	bl	8000440 <__aeabi_fcmpgt>
 8003e52:	1e03      	subs	r3, r0, #0
 8003e54:	d033      	beq.n	8003ebe <_Z22LED_Thermomodel_Handlev+0x112>
		{
			if(LED_Temp > THERMOMODEL_FAN_MAX_TEMP)
 8003e56:	4b21      	ldr	r3, [pc, #132]	; (8003edc <_Z22LED_Thermomodel_Handlev+0x130>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4923      	ldr	r1, [pc, #140]	; (8003ee8 <_Z22LED_Thermomodel_Handlev+0x13c>)
 8003e5c:	1c18      	adds	r0, r3, #0
 8003e5e:	f7fc faef 	bl	8000440 <__aeabi_fcmpgt>
 8003e62:	1e03      	subs	r3, r0, #0
 8003e64:	d004      	beq.n	8003e70 <_Z22LED_Thermomodel_Handlev+0xc4>
			{
				Fan_PWM = 1000;
 8003e66:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <_Z22LED_Thermomodel_Handlev+0x134>)
 8003e68:	22fa      	movs	r2, #250	; 0xfa
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	801a      	strh	r2, [r3, #0]
			if(LED_Temp > THERMOMODEL_FAN_MAX_TEMP)
 8003e6e:	e029      	b.n	8003ec4 <_Z22LED_Thermomodel_Handlev+0x118>
			}
			else
			{
				Fan_PWM = (uint16_t)(((LED_Temp - THERMOMODEL_FAN_MIN_TEMP)*(float)(FAN_MAX_PWM - FAN_MIN_PWM)) / (THERMOMODEL_FAN_MAX_TEMP - THERMOMODEL_FAN_MIN_TEMP)) + FAN_MIN_PWM;
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <_Z22LED_Thermomodel_Handlev+0x130>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	1c18      	adds	r0, r3, #0
 8003e76:	f7fe fa37 	bl	80022e8 <__aeabi_f2d>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <_Z22LED_Thermomodel_Handlev+0x140>)
 8003e7e:	f7fd feb5 	bl	8001bec <__aeabi_dsub>
 8003e82:	0003      	movs	r3, r0
 8003e84:	000c      	movs	r4, r1
 8003e86:	0018      	movs	r0, r3
 8003e88:	0021      	movs	r1, r4
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <_Z22LED_Thermomodel_Handlev+0x144>)
 8003e8e:	f7fd fc3b 	bl	8001708 <__aeabi_dmul>
 8003e92:	0003      	movs	r3, r0
 8003e94:	000c      	movs	r4, r1
 8003e96:	0018      	movs	r0, r3
 8003e98:	0021      	movs	r1, r4
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <_Z22LED_Thermomodel_Handlev+0x148>)
 8003e9e:	f7fd f931 	bl	8001104 <__aeabi_ddiv>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	000c      	movs	r4, r1
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	0021      	movs	r1, r4
 8003eaa:	f7fc fadd 	bl	8000468 <__aeabi_d2uiz>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	332d      	adds	r3, #45	; 0x2d
 8003eb4:	33ff      	adds	r3, #255	; 0xff
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <_Z22LED_Thermomodel_Handlev+0x134>)
 8003eba:	801a      	strh	r2, [r3, #0]
			if(LED_Temp > THERMOMODEL_FAN_MAX_TEMP)
 8003ebc:	e002      	b.n	8003ec4 <_Z22LED_Thermomodel_Handlev+0x118>
			}
		}
		else
		{
			Fan_PWM = 0;
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <_Z22LED_Thermomodel_Handlev+0x134>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	801a      	strh	r2, [r3, #0]
		}
		FAN_PWM_SetDutyCycle(Fan_PWM);
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <_Z22LED_Thermomodel_Handlev+0x134>)
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7fe fc61 	bl	8002790 <_Z20FAN_PWM_SetDutyCyclet>
	}
}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ed4:	200000d4 	.word	0x200000d4
 8003ed8:	200000d0 	.word	0x200000d0
 8003edc:	200000cc 	.word	0x200000cc
 8003ee0:	200000d8 	.word	0x200000d8
 8003ee4:	41f00000 	.word	0x41f00000
 8003ee8:	42340000 	.word	0x42340000
 8003eec:	403e0000 	.word	0x403e0000
 8003ef0:	4085e000 	.word	0x4085e000
 8003ef4:	402e0000 	.word	0x402e0000

08003ef8 <_Z23LED_Thermomodel_GetTempv>:



float LED_Thermomodel_GetTemp(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
	return LED_Temp;
 8003efc:	4b02      	ldr	r3, [pc, #8]	; (8003f08 <_Z23LED_Thermomodel_GetTempv+0x10>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	1c18      	adds	r0, r3, #0
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	200000cc 	.word	0x200000cc

08003f0c <_Z8NTC_Initv>:
};



void NTC_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&NTC_ADC_HANDLE);
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <_Z8NTC_Initv+0x18>)
 8003f12:	0018      	movs	r0, r3
 8003f14:	f001 ff34 	bl	8005d80 <HAL_ADC_Start>
	HAL_Delay(2); //Give ADC some time to get at least one sample
 8003f18:	2002      	movs	r0, #2
 8003f1a:	f001 fdcf 	bl	8005abc <HAL_Delay>
}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	200000dc 	.word	0x200000dc

08003f28 <_Z12NTC_Get_Tempv>:



float NTC_Get_Temp(void)
{
 8003f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t adc_val = (uint16_t)HAL_ADC_GetValue(&NTC_ADC_HANDLE);
 8003f2e:	4b54      	ldr	r3, [pc, #336]	; (8004080 <_Z12NTC_Get_Tempv+0x158>)
 8003f30:	0018      	movs	r0, r3
 8003f32:	f001 ff79 	bl	8005e28 <HAL_ADC_GetValue>
 8003f36:	0002      	movs	r2, r0
 8003f38:	230c      	movs	r3, #12
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	801a      	strh	r2, [r3, #0]

	for(i = 0; i < (sizeof(NTC_Lookup)/sizeof(uint16_t)); i++)
 8003f3e:	230f      	movs	r3, #15
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	230f      	movs	r3, #15
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b21      	cmp	r3, #33	; 0x21
 8003f4e:	d812      	bhi.n	8003f76 <_Z12NTC_Get_Tempv+0x4e>
	{
		if(adc_val > NTC_Lookup[i])
 8003f50:	230f      	movs	r3, #15
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	781a      	ldrb	r2, [r3, #0]
 8003f56:	4b4b      	ldr	r3, [pc, #300]	; (8004084 <_Z12NTC_Get_Tempv+0x15c>)
 8003f58:	0052      	lsls	r2, r2, #1
 8003f5a:	5ad3      	ldrh	r3, [r2, r3]
 8003f5c:	220c      	movs	r2, #12
 8003f5e:	18ba      	adds	r2, r7, r2
 8003f60:	8812      	ldrh	r2, [r2, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d806      	bhi.n	8003f74 <_Z12NTC_Get_Tempv+0x4c>
	for(i = 0; i < (sizeof(NTC_Lookup)/sizeof(uint16_t)); i++)
 8003f66:	210f      	movs	r1, #15
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	781a      	ldrb	r2, [r3, #0]
 8003f6c:	187b      	adds	r3, r7, r1
 8003f6e:	3201      	adds	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	e7e8      	b.n	8003f46 <_Z12NTC_Get_Tempv+0x1e>
		{
			break;
 8003f74:	46c0      	nop			; (mov r8, r8)
		}
	}

	if((i == 0) || (i == sizeof(NTC_Lookup)/sizeof(uint16_t)))
 8003f76:	230f      	movs	r3, #15
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <_Z12NTC_Get_Tempv+0x62>
 8003f80:	230f      	movs	r3, #15
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b22      	cmp	r3, #34	; 0x22
 8003f88:	d11d      	bne.n	8003fc6 <_Z12NTC_Get_Tempv+0x9e>
	{
		return ((((float)i) * 5.0) - 40.0);
 8003f8a:	230f      	movs	r3, #15
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7fc fd5b 	bl	8000a4c <__aeabi_ui2f>
 8003f96:	1c03      	adds	r3, r0, #0
 8003f98:	1c18      	adds	r0, r3, #0
 8003f9a:	f7fe f9a5 	bl	80022e8 <__aeabi_f2d>
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	4b39      	ldr	r3, [pc, #228]	; (8004088 <_Z12NTC_Get_Tempv+0x160>)
 8003fa2:	f7fd fbb1 	bl	8001708 <__aeabi_dmul>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	000c      	movs	r4, r1
 8003faa:	0018      	movs	r0, r3
 8003fac:	0021      	movs	r1, r4
 8003fae:	2200      	movs	r2, #0
 8003fb0:	4b36      	ldr	r3, [pc, #216]	; (800408c <_Z12NTC_Get_Tempv+0x164>)
 8003fb2:	f7fd fe1b 	bl	8001bec <__aeabi_dsub>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	000c      	movs	r4, r1
 8003fba:	0018      	movs	r0, r3
 8003fbc:	0021      	movs	r1, r4
 8003fbe:	f7fe f9e5 	bl	800238c <__aeabi_d2f>
 8003fc2:	1c03      	adds	r3, r0, #0
 8003fc4:	e058      	b.n	8004078 <_Z12NTC_Get_Tempv+0x150>
	}

	return ((((float)i) * 5.0) - 45.0 - (5.0 * ((float)(adc_val - NTC_Lookup[i])) / ((float)(NTC_Lookup[i - 1] - NTC_Lookup[i]))));
 8003fc6:	260f      	movs	r6, #15
 8003fc8:	19bb      	adds	r3, r7, r6
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7fc fd3d 	bl	8000a4c <__aeabi_ui2f>
 8003fd2:	1c03      	adds	r3, r0, #0
 8003fd4:	1c18      	adds	r0, r3, #0
 8003fd6:	f7fe f987 	bl	80022e8 <__aeabi_f2d>
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <_Z12NTC_Get_Tempv+0x160>)
 8003fde:	f7fd fb93 	bl	8001708 <__aeabi_dmul>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	000c      	movs	r4, r1
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	0021      	movs	r1, r4
 8003fea:	2200      	movs	r2, #0
 8003fec:	4b28      	ldr	r3, [pc, #160]	; (8004090 <_Z12NTC_Get_Tempv+0x168>)
 8003fee:	f7fd fdfd 	bl	8001bec <__aeabi_dsub>
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	000c      	movs	r4, r1
 8003ff6:	0025      	movs	r5, r4
 8003ff8:	001c      	movs	r4, r3
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	19ba      	adds	r2, r7, r6
 8004002:	7811      	ldrb	r1, [r2, #0]
 8004004:	4a1f      	ldr	r2, [pc, #124]	; (8004084 <_Z12NTC_Get_Tempv+0x15c>)
 8004006:	0049      	lsls	r1, r1, #1
 8004008:	5a8a      	ldrh	r2, [r1, r2]
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	0018      	movs	r0, r3
 800400e:	f7fc fcd3 	bl	80009b8 <__aeabi_i2f>
 8004012:	1c03      	adds	r3, r0, #0
 8004014:	1c18      	adds	r0, r3, #0
 8004016:	f7fe f967 	bl	80022e8 <__aeabi_f2d>
 800401a:	2200      	movs	r2, #0
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <_Z12NTC_Get_Tempv+0x160>)
 800401e:	f7fd fb73 	bl	8001708 <__aeabi_dmul>
 8004022:	0002      	movs	r2, r0
 8004024:	000b      	movs	r3, r1
 8004026:	603a      	str	r2, [r7, #0]
 8004028:	607b      	str	r3, [r7, #4]
 800402a:	19bb      	adds	r3, r7, r6
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	1e5a      	subs	r2, r3, #1
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <_Z12NTC_Get_Tempv+0x15c>)
 8004032:	0052      	lsls	r2, r2, #1
 8004034:	5ad3      	ldrh	r3, [r2, r3]
 8004036:	0019      	movs	r1, r3
 8004038:	19bb      	adds	r3, r7, r6
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	4b11      	ldr	r3, [pc, #68]	; (8004084 <_Z12NTC_Get_Tempv+0x15c>)
 800403e:	0052      	lsls	r2, r2, #1
 8004040:	5ad3      	ldrh	r3, [r2, r3]
 8004042:	1acb      	subs	r3, r1, r3
 8004044:	0018      	movs	r0, r3
 8004046:	f7fc fcb7 	bl	80009b8 <__aeabi_i2f>
 800404a:	1c03      	adds	r3, r0, #0
 800404c:	1c18      	adds	r0, r3, #0
 800404e:	f7fe f94b 	bl	80022e8 <__aeabi_f2d>
 8004052:	0002      	movs	r2, r0
 8004054:	000b      	movs	r3, r1
 8004056:	6838      	ldr	r0, [r7, #0]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	f7fd f853 	bl	8001104 <__aeabi_ddiv>
 800405e:	0002      	movs	r2, r0
 8004060:	000b      	movs	r3, r1
 8004062:	0020      	movs	r0, r4
 8004064:	0029      	movs	r1, r5
 8004066:	f7fd fdc1 	bl	8001bec <__aeabi_dsub>
 800406a:	0003      	movs	r3, r0
 800406c:	000c      	movs	r4, r1
 800406e:	0018      	movs	r0, r3
 8004070:	0021      	movs	r1, r4
 8004072:	f7fe f98b 	bl	800238c <__aeabi_d2f>
 8004076:	1c03      	adds	r3, r0, #0
}
 8004078:	1c18      	adds	r0, r3, #0
 800407a:	46bd      	mov	sp, r7
 800407c:	b005      	add	sp, #20
 800407e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004080:	200000dc 	.word	0x200000dc
 8004084:	08009030 	.word	0x08009030
 8004088:	40140000 	.word	0x40140000
 800408c:	40440000 	.word	0x40440000
 8004090:	40468000 	.word	0x40468000

08004094 <_ZN13USART_HandlerC1ER20__UART_HandleTypeDef>:
#include "USART_Handler.h"




USART_Handler::USART_Handler(UART_HandleTypeDef &_huart)
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
{
	this->huart = &_huart;
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	2384      	movs	r3, #132	; 0x84
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	6839      	ldr	r1, [r7, #0]
 80040a6:	50d1      	str	r1, [r2, r3]

	//Register UART RX buffers
	HAL_UART_Receive_DMA(this->huart, this->rx_buffer, UART_RX_BUFFER_SIZE);
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	2384      	movs	r3, #132	; 0x84
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	58d3      	ldr	r3, [r2, r3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	2208      	movs	r2, #8
 80040b4:	0018      	movs	r0, r3
 80040b6:	f004 f917 	bl	80082e8 <HAL_UART_Receive_DMA>
	rx_ptr = UART_RX_BUFFER_SIZE;
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	2386      	movs	r3, #134	; 0x86
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	2108      	movs	r1, #8
 80040c2:	52d1      	strh	r1, [r2, r3]
}
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b002      	add	sp, #8
 80040cc:	bd80      	pop	{r7, pc}

080040ce <_ZN13USART_Handler7PrintlnEPc>:
}



void USART_Handler::Println(char *c)
{
 80040ce:	b590      	push	{r4, r7, lr}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
	uint16_t i;

	while(this->Busy());
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 f83f 	bl	800415e <_ZN13USART_Handler4BusyEv>
 80040e0:	1e03      	subs	r3, r0, #0
 80040e2:	d000      	beq.n	80040e6 <_ZN13USART_Handler7PrintlnEPc+0x18>
 80040e4:	e7f8      	b.n	80040d8 <_ZN13USART_Handler7PrintlnEPc+0xa>

	for(i = 0; ((i < (UART_TX_BUFFER_SIZE-1)) && (c[i] != 0x00)); i++)
 80040e6:	230e      	movs	r3, #14
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	2200      	movs	r2, #0
 80040ec:	801a      	strh	r2, [r3, #0]
 80040ee:	230e      	movs	r3, #14
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	2bfe      	cmp	r3, #254	; 0xfe
 80040f6:	d819      	bhi.n	800412c <_ZN13USART_Handler7PrintlnEPc+0x5e>
 80040f8:	230e      	movs	r3, #14
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	18d3      	adds	r3, r2, r3
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d011      	beq.n	800412c <_ZN13USART_Handler7PrintlnEPc+0x5e>
	{
		this->tx_buffer[i] = c[i];
 8004108:	200e      	movs	r0, #14
 800410a:	183b      	adds	r3, r7, r0
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	18d2      	adds	r2, r2, r3
 8004112:	183b      	adds	r3, r7, r0
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	7811      	ldrb	r1, [r2, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	18d3      	adds	r3, r2, r3
 800411c:	1c0a      	adds	r2, r1, #0
 800411e:	721a      	strb	r2, [r3, #8]
	for(i = 0; ((i < (UART_TX_BUFFER_SIZE-1)) && (c[i] != 0x00)); i++)
 8004120:	183b      	adds	r3, r7, r0
 8004122:	881a      	ldrh	r2, [r3, #0]
 8004124:	183b      	adds	r3, r7, r0
 8004126:	3201      	adds	r2, #1
 8004128:	801a      	strh	r2, [r3, #0]
 800412a:	e7e0      	b.n	80040ee <_ZN13USART_Handler7PrintlnEPc+0x20>
	}
	this->tx_buffer[i] = '\n';
 800412c:	240e      	movs	r4, #14
 800412e:	193b      	adds	r3, r7, r4
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	18d3      	adds	r3, r2, r3
 8004136:	220a      	movs	r2, #10
 8004138:	721a      	strb	r2, [r3, #8]

	HAL_UART_Transmit_DMA(this->huart, this->tx_buffer, (i+1));
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	2384      	movs	r3, #132	; 0x84
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	58d0      	ldr	r0, [r2, r3]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3308      	adds	r3, #8
 8004146:	0019      	movs	r1, r3
 8004148:	193b      	adds	r3, r7, r4
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	b29b      	uxth	r3, r3
 8004150:	001a      	movs	r2, r3
 8004152:	f004 f839 	bl	80081c8 <HAL_UART_Transmit_DMA>
}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	46bd      	mov	sp, r7
 800415a:	b005      	add	sp, #20
 800415c:	bd90      	pop	{r4, r7, pc}

0800415e <_ZN13USART_Handler4BusyEv>:


bool USART_Handler::Busy(void)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
	if((this->huart->hdmatx->State == HAL_DMA_STATE_BUSY) || (huart->gState != HAL_UART_STATE_READY))
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	2384      	movs	r3, #132	; 0x84
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	58d3      	ldr	r3, [r2, r3]
 800416e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004170:	2221      	movs	r2, #33	; 0x21
 8004172:	5c9b      	ldrb	r3, [r3, r2]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d006      	beq.n	8004188 <_ZN13USART_Handler4BusyEv+0x2a>
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	2384      	movs	r3, #132	; 0x84
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	58d3      	ldr	r3, [r2, r3]
 8004182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004184:	2b20      	cmp	r3, #32
 8004186:	d001      	beq.n	800418c <_ZN13USART_Handler4BusyEv+0x2e>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <_ZN13USART_Handler4BusyEv+0x30>
 800418c:	2300      	movs	r3, #0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <_ZN13USART_Handler4BusyEv+0x38>
	{
		return true;
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <_ZN13USART_Handler4BusyEv+0x3a>
	}
	return false;
 8004196:	2300      	movs	r3, #0
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}

080041a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041a4:	f001 fc26 	bl	80059f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041a8:	f000 f81b 	bl	80041e2 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041ac:	f000 fc1e 	bl	80049ec <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80041b0:	f000 fbf6 	bl	80049a0 <_ZL11MX_DMA_Initv>
  MX_ADC_Init();
 80041b4:	f000 f886 	bl	80042c4 <_ZL11MX_ADC_Initv>
  MX_SPI1_Init();
 80041b8:	f000 f8e8 	bl	800438c <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 80041bc:	f000 f93a 	bl	8004434 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80041c0:	f000 fa32 	bl	8004628 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80041c4:	f000 fb82 	bl	80048cc <_ZL19MX_USART1_UART_Initv>
  MX_TIM17_Init();
 80041c8:	f000 faec 	bl	80047a4 <_ZL13MX_TIM17_Initv>
  MX_USART2_UART_Init();
 80041cc:	f000 fbb4 	bl	8004938 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  LED_Thermomodel_Init();
 80041d0:	f7ff fdca 	bl	8003d68 <_Z20LED_Thermomodel_Initv>
  LED_StateMachine_Init();
 80041d4:	f7ff f838 	bl	8003248 <_Z21LED_StateMachine_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		LED_StateMachine_Handle();
 80041d8:	f7ff f868 	bl	80032ac <_Z23LED_StateMachine_Handlev>
		LED_Thermomodel_Handle();
 80041dc:	f7ff fde6 	bl	8003dac <_Z22LED_Thermomodel_Handlev>
		LED_StateMachine_Handle();
 80041e0:	e7fa      	b.n	80041d8 <main+0x38>

080041e2 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041e2:	b590      	push	{r4, r7, lr}
 80041e4:	b095      	sub	sp, #84	; 0x54
 80041e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041e8:	2420      	movs	r4, #32
 80041ea:	193b      	adds	r3, r7, r4
 80041ec:	0018      	movs	r0, r3
 80041ee:	2330      	movs	r3, #48	; 0x30
 80041f0:	001a      	movs	r2, r3
 80041f2:	2100      	movs	r1, #0
 80041f4:	f004 fd78 	bl	8008ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041f8:	2310      	movs	r3, #16
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	0018      	movs	r0, r3
 80041fe:	2310      	movs	r3, #16
 8004200:	001a      	movs	r2, r3
 8004202:	2100      	movs	r1, #0
 8004204:	f004 fd70 	bl	8008ce8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004208:	003b      	movs	r3, r7
 800420a:	0018      	movs	r0, r3
 800420c:	2310      	movs	r3, #16
 800420e:	001a      	movs	r2, r3
 8004210:	2100      	movs	r1, #0
 8004212:	f004 fd69 	bl	8008ce8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8004216:	0021      	movs	r1, r4
 8004218:	187b      	adds	r3, r7, r1
 800421a:	2211      	movs	r2, #17
 800421c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800421e:	187b      	adds	r3, r7, r1
 8004220:	2201      	movs	r2, #1
 8004222:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004224:	187b      	adds	r3, r7, r1
 8004226:	2201      	movs	r2, #1
 8004228:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800422a:	187b      	adds	r3, r7, r1
 800422c:	2210      	movs	r2, #16
 800422e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004230:	187b      	adds	r3, r7, r1
 8004232:	2202      	movs	r2, #2
 8004234:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004236:	187b      	adds	r3, r7, r1
 8004238:	2280      	movs	r2, #128	; 0x80
 800423a:	0252      	lsls	r2, r2, #9
 800423c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800423e:	187b      	adds	r3, r7, r1
 8004240:	2280      	movs	r2, #128	; 0x80
 8004242:	0352      	lsls	r2, r2, #13
 8004244:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004246:	187b      	adds	r3, r7, r1
 8004248:	2200      	movs	r2, #0
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800424c:	187b      	adds	r3, r7, r1
 800424e:	0018      	movs	r0, r3
 8004250:	f002 fb88 	bl	8006964 <HAL_RCC_OscConfig>
 8004254:	0003      	movs	r3, r0
 8004256:	1e5a      	subs	r2, r3, #1
 8004258:	4193      	sbcs	r3, r2
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8004260:	f000 fc48 	bl	8004af4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004264:	2110      	movs	r1, #16
 8004266:	187b      	adds	r3, r7, r1
 8004268:	2207      	movs	r2, #7
 800426a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800426c:	187b      	adds	r3, r7, r1
 800426e:	2202      	movs	r2, #2
 8004270:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004272:	187b      	adds	r3, r7, r1
 8004274:	2200      	movs	r2, #0
 8004276:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004278:	187b      	adds	r3, r7, r1
 800427a:	2200      	movs	r2, #0
 800427c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800427e:	187b      	adds	r3, r7, r1
 8004280:	2101      	movs	r1, #1
 8004282:	0018      	movs	r0, r3
 8004284:	f002 fe8a 	bl	8006f9c <HAL_RCC_ClockConfig>
 8004288:	0003      	movs	r3, r0
 800428a:	1e5a      	subs	r2, r3, #1
 800428c:	4193      	sbcs	r3, r2
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8004294:	f000 fc2e 	bl	8004af4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004298:	003b      	movs	r3, r7
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800429e:	003b      	movs	r3, r7
 80042a0:	2200      	movs	r2, #0
 80042a2:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042a4:	003b      	movs	r3, r7
 80042a6:	0018      	movs	r0, r3
 80042a8:	f002 ffca 	bl	8007240 <HAL_RCCEx_PeriphCLKConfig>
 80042ac:	0003      	movs	r3, r0
 80042ae:	1e5a      	subs	r2, r3, #1
 80042b0:	4193      	sbcs	r3, r2
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80042b8:	f000 fc1c 	bl	8004af4 <Error_Handler>
  }
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b015      	add	sp, #84	; 0x54
 80042c2:	bd90      	pop	{r4, r7, pc}

080042c4 <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80042ca:	1d3b      	adds	r3, r7, #4
 80042cc:	0018      	movs	r0, r3
 80042ce:	230c      	movs	r3, #12
 80042d0:	001a      	movs	r2, r3
 80042d2:	2100      	movs	r1, #0
 80042d4:	f004 fd08 	bl	8008ce8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80042d8:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 80042da:	4a2b      	ldr	r2, [pc, #172]	; (8004388 <_ZL11MX_ADC_Initv+0xc4>)
 80042dc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80042de:	4b29      	ldr	r3, [pc, #164]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80042e4:	4b27      	ldr	r3, [pc, #156]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042ea:	4b26      	ldr	r3, [pc, #152]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80042f0:	4b24      	ldr	r3, [pc, #144]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042f6:	4b23      	ldr	r3, [pc, #140]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 80042f8:	2204      	movs	r2, #4
 80042fa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 80042fe:	2200      	movs	r2, #0
 8004300:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004302:	4b20      	ldr	r3, [pc, #128]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 8004304:	2200      	movs	r2, #0
 8004306:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8004308:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 800430a:	2201      	movs	r2, #1
 800430c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800430e:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 8004310:	2200      	movs	r2, #0
 8004312:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 8004316:	22c2      	movs	r2, #194	; 0xc2
 8004318:	32ff      	adds	r2, #255	; 0xff
 800431a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 800431e:	2200      	movs	r2, #0
 8004320:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004322:	4b18      	ldr	r3, [pc, #96]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 8004324:	2224      	movs	r2, #36	; 0x24
 8004326:	2100      	movs	r1, #0
 8004328:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800432a:	4b16      	ldr	r3, [pc, #88]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 800432c:	2201      	movs	r2, #1
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004330:	4b14      	ldr	r3, [pc, #80]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 8004332:	0018      	movs	r0, r3
 8004334:	f001 fbe4 	bl	8005b00 <HAL_ADC_Init>
 8004338:	0003      	movs	r3, r0
 800433a:	1e5a      	subs	r2, r3, #1
 800433c:	4193      	sbcs	r3, r2
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <_ZL11MX_ADC_Initv+0x84>
  {
    Error_Handler();
 8004344:	f000 fbd6 	bl	8004af4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004348:	1d3b      	adds	r3, r7, #4
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800434e:	1d3b      	adds	r3, r7, #4
 8004350:	2280      	movs	r2, #128	; 0x80
 8004352:	0152      	lsls	r2, r2, #5
 8004354:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	2280      	movs	r2, #128	; 0x80
 800435a:	0552      	lsls	r2, r2, #21
 800435c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800435e:	1d3a      	adds	r2, r7, #4
 8004360:	4b08      	ldr	r3, [pc, #32]	; (8004384 <_ZL11MX_ADC_Initv+0xc0>)
 8004362:	0011      	movs	r1, r2
 8004364:	0018      	movs	r0, r3
 8004366:	f001 fd6b 	bl	8005e40 <HAL_ADC_ConfigChannel>
 800436a:	0003      	movs	r3, r0
 800436c:	1e5a      	subs	r2, r3, #1
 800436e:	4193      	sbcs	r3, r2
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <_ZL11MX_ADC_Initv+0xb6>
  {
    Error_Handler();
 8004376:	f000 fbbd 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	200000dc 	.word	0x200000dc
 8004388:	40012400 	.word	0x40012400

0800438c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004390:	4b26      	ldr	r3, [pc, #152]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 8004392:	4a27      	ldr	r2, [pc, #156]	; (8004430 <_ZL12MX_SPI1_Initv+0xa4>)
 8004394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004396:	4b25      	ldr	r3, [pc, #148]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 8004398:	2282      	movs	r2, #130	; 0x82
 800439a:	0052      	lsls	r2, r2, #1
 800439c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800439e:	4b23      	ldr	r3, [pc, #140]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80043a4:	4b21      	ldr	r3, [pc, #132]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043a6:	22e0      	movs	r2, #224	; 0xe0
 80043a8:	00d2      	lsls	r2, r2, #3
 80043aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ac:	4b1f      	ldr	r3, [pc, #124]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043b2:	4b1e      	ldr	r3, [pc, #120]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80043b8:	4b1c      	ldr	r3, [pc, #112]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	02d2      	lsls	r2, r2, #11
 80043be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80043c0:	4b1a      	ldr	r3, [pc, #104]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043c2:	2220      	movs	r2, #32
 80043c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043c6:	4b19      	ldr	r3, [pc, #100]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043cc:	4b17      	ldr	r3, [pc, #92]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d2:	4b16      	ldr	r3, [pc, #88]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80043d8:	4b14      	ldr	r3, [pc, #80]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043da:	2207      	movs	r2, #7
 80043dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80043de:	4b13      	ldr	r3, [pc, #76]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80043e4:	4b11      	ldr	r3, [pc, #68]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043e6:	2208      	movs	r2, #8
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043ea:	4b10      	ldr	r3, [pc, #64]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 80043ec:	0018      	movs	r0, r3
 80043ee:	f002 fff5 	bl	80073dc <HAL_SPI_Init>
 80043f2:	0003      	movs	r3, r0
 80043f4:	1e5a      	subs	r2, r3, #1
 80043f6:	4193      	sbcs	r3, r2
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 80043fe:	f000 fb79 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* full duplex master, 8 bit transfer, default phase and polarity */
  hspi1.Instance->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI;
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b08      	ldr	r3, [pc, #32]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	21d1      	movs	r1, #209	; 0xd1
 800440e:	0089      	lsls	r1, r1, #2
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]
  /* Disable receive FIFO, it'd complicate things when there is an odd number of bytes to transfer */
  hspi1.Instance->CR2 |= SPI_CR2_FRXTH;
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	4b04      	ldr	r3, [pc, #16]	; (800442c <_ZL12MX_SPI1_Initv+0xa0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2180      	movs	r1, #128	; 0x80
 8004420:	0149      	lsls	r1, r1, #5
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI1_Init 2 */

}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	2000011c 	.word	0x2000011c
 8004430:	40013000 	.word	0x40013000

08004434 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b096      	sub	sp, #88	; 0x58
 8004438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800443a:	2348      	movs	r3, #72	; 0x48
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	0018      	movs	r0, r3
 8004440:	2310      	movs	r3, #16
 8004442:	001a      	movs	r2, r3
 8004444:	2100      	movs	r1, #0
 8004446:	f004 fc4f 	bl	8008ce8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800444a:	2340      	movs	r3, #64	; 0x40
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	0018      	movs	r0, r3
 8004450:	2308      	movs	r3, #8
 8004452:	001a      	movs	r2, r3
 8004454:	2100      	movs	r1, #0
 8004456:	f004 fc47 	bl	8008ce8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800445a:	2324      	movs	r3, #36	; 0x24
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	0018      	movs	r0, r3
 8004460:	231c      	movs	r3, #28
 8004462:	001a      	movs	r2, r3
 8004464:	2100      	movs	r1, #0
 8004466:	f004 fc3f 	bl	8008ce8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	0018      	movs	r0, r3
 800446e:	2320      	movs	r3, #32
 8004470:	001a      	movs	r2, r3
 8004472:	2100      	movs	r1, #0
 8004474:	f004 fc38 	bl	8008ce8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004478:	4b69      	ldr	r3, [pc, #420]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 800447a:	4a6a      	ldr	r2, [pc, #424]	; (8004624 <_ZL12MX_TIM1_Initv+0x1f0>)
 800447c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800447e:	4b68      	ldr	r3, [pc, #416]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004484:	4b66      	ldr	r3, [pc, #408]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800448a:	4b65      	ldr	r3, [pc, #404]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 800448c:	22fa      	movs	r2, #250	; 0xfa
 800448e:	0092      	lsls	r2, r2, #2
 8004490:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004492:	4b63      	ldr	r3, [pc, #396]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004494:	2200      	movs	r2, #0
 8004496:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004498:	4b61      	ldr	r3, [pc, #388]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 800449a:	2200      	movs	r2, #0
 800449c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800449e:	4b60      	ldr	r3, [pc, #384]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 80044a0:	2280      	movs	r2, #128	; 0x80
 80044a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80044a4:	4b5e      	ldr	r3, [pc, #376]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 80044a6:	0018      	movs	r0, r3
 80044a8:	f003 f832 	bl	8007510 <HAL_TIM_Base_Init>
 80044ac:	0003      	movs	r3, r0
 80044ae:	1e5a      	subs	r2, r3, #1
 80044b0:	4193      	sbcs	r3, r2
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 80044b8:	f000 fb1c 	bl	8004af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044bc:	2148      	movs	r1, #72	; 0x48
 80044be:	187b      	adds	r3, r7, r1
 80044c0:	2280      	movs	r2, #128	; 0x80
 80044c2:	0152      	lsls	r2, r2, #5
 80044c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044c6:	187a      	adds	r2, r7, r1
 80044c8:	4b55      	ldr	r3, [pc, #340]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 80044ca:	0011      	movs	r1, r2
 80044cc:	0018      	movs	r0, r3
 80044ce:	f003 f983 	bl	80077d8 <HAL_TIM_ConfigClockSource>
 80044d2:	0003      	movs	r3, r0
 80044d4:	1e5a      	subs	r2, r3, #1
 80044d6:	4193      	sbcs	r3, r2
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 80044de:	f000 fb09 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044e2:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 80044e4:	0018      	movs	r0, r3
 80044e6:	f003 f83f 	bl	8007568 <HAL_TIM_PWM_Init>
 80044ea:	0003      	movs	r3, r0
 80044ec:	1e5a      	subs	r2, r3, #1
 80044ee:	4193      	sbcs	r3, r2
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 80044f6:	f000 fafd 	bl	8004af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044fa:	2140      	movs	r1, #64	; 0x40
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004502:	187b      	adds	r3, r7, r1
 8004504:	2200      	movs	r2, #0
 8004506:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004508:	187a      	adds	r2, r7, r1
 800450a:	4b45      	ldr	r3, [pc, #276]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 800450c:	0011      	movs	r1, r2
 800450e:	0018      	movs	r0, r3
 8004510:	f003 fd50 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8004514:	0003      	movs	r3, r0
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	4193      	sbcs	r3, r2
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <_ZL12MX_TIM1_Initv+0xf0>
  {
    Error_Handler();
 8004520:	f000 fae8 	bl	8004af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004524:	2124      	movs	r1, #36	; 0x24
 8004526:	187b      	adds	r3, r7, r1
 8004528:	2260      	movs	r2, #96	; 0x60
 800452a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800452c:	187b      	adds	r3, r7, r1
 800452e:	2200      	movs	r2, #0
 8004530:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004532:	187b      	adds	r3, r7, r1
 8004534:	2200      	movs	r2, #0
 8004536:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004538:	187b      	adds	r3, r7, r1
 800453a:	2200      	movs	r2, #0
 800453c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800453e:	187b      	adds	r3, r7, r1
 8004540:	2200      	movs	r2, #0
 8004542:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004544:	187b      	adds	r3, r7, r1
 8004546:	2200      	movs	r2, #0
 8004548:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800454a:	187b      	adds	r3, r7, r1
 800454c:	2200      	movs	r2, #0
 800454e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004550:	1879      	adds	r1, r7, r1
 8004552:	4b33      	ldr	r3, [pc, #204]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004554:	2200      	movs	r2, #0
 8004556:	0018      	movs	r0, r3
 8004558:	f003 f886 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 800455c:	0003      	movs	r3, r0
 800455e:	1e5a      	subs	r2, r3, #1
 8004560:	4193      	sbcs	r3, r2
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <_ZL12MX_TIM1_Initv+0x138>
  {
    Error_Handler();
 8004568:	f000 fac4 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800456c:	2324      	movs	r3, #36	; 0x24
 800456e:	18f9      	adds	r1, r7, r3
 8004570:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004572:	2204      	movs	r2, #4
 8004574:	0018      	movs	r0, r3
 8004576:	f003 f877 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 800457a:	0003      	movs	r3, r0
 800457c:	1e5a      	subs	r2, r3, #1
 800457e:	4193      	sbcs	r3, r2
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <_ZL12MX_TIM1_Initv+0x156>
  {
    Error_Handler();
 8004586:	f000 fab5 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800458a:	2324      	movs	r3, #36	; 0x24
 800458c:	18f9      	adds	r1, r7, r3
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004590:	2208      	movs	r2, #8
 8004592:	0018      	movs	r0, r3
 8004594:	f003 f868 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8004598:	0003      	movs	r3, r0
 800459a:	1e5a      	subs	r2, r3, #1
 800459c:	4193      	sbcs	r3, r2
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <_ZL12MX_TIM1_Initv+0x174>
  {
    Error_Handler();
 80045a4:	f000 faa6 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80045a8:	2324      	movs	r3, #36	; 0x24
 80045aa:	18f9      	adds	r1, r7, r3
 80045ac:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 80045ae:	220c      	movs	r2, #12
 80045b0:	0018      	movs	r0, r3
 80045b2:	f003 f859 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 80045b6:	0003      	movs	r3, r0
 80045b8:	1e5a      	subs	r2, r3, #1
 80045ba:	4193      	sbcs	r3, r2
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <_ZL12MX_TIM1_Initv+0x192>
  {
    Error_Handler();
 80045c2:	f000 fa97 	bl	8004af4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80045c6:	1d3b      	adds	r3, r7, #4
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80045cc:	1d3b      	adds	r3, r7, #4
 80045ce:	2200      	movs	r2, #0
 80045d0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80045d2:	1d3b      	adds	r3, r7, #4
 80045d4:	2200      	movs	r2, #0
 80045d6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80045d8:	1d3b      	adds	r3, r7, #4
 80045da:	2200      	movs	r2, #0
 80045dc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80045de:	1d3b      	adds	r3, r7, #4
 80045e0:	2200      	movs	r2, #0
 80045e2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	2280      	movs	r2, #128	; 0x80
 80045e8:	0192      	lsls	r2, r2, #6
 80045ea:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80045ec:	1d3b      	adds	r3, r7, #4
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80045f2:	1d3a      	adds	r2, r7, #4
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 80045f6:	0011      	movs	r1, r2
 80045f8:	0018      	movs	r0, r3
 80045fa:	f003 fd33 	bl	8008064 <HAL_TIMEx_ConfigBreakDeadTime>
 80045fe:	0003      	movs	r3, r0
 8004600:	1e5a      	subs	r2, r3, #1
 8004602:	4193      	sbcs	r3, r2
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <_ZL12MX_TIM1_Initv+0x1da>
  {
    Error_Handler();
 800460a:	f000 fa73 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <_ZL12MX_TIM1_Initv+0x1ec>)
 8004610:	0018      	movs	r0, r3
 8004612:	f000 ff73 	bl	80054fc <HAL_TIM_MspPostInit>

}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	46bd      	mov	sp, r7
 800461a:	b016      	add	sp, #88	; 0x58
 800461c:	bd80      	pop	{r7, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	20000208 	.word	0x20000208
 8004624:	40012c00 	.word	0x40012c00

08004628 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08e      	sub	sp, #56	; 0x38
 800462c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800462e:	2328      	movs	r3, #40	; 0x28
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	0018      	movs	r0, r3
 8004634:	2310      	movs	r3, #16
 8004636:	001a      	movs	r2, r3
 8004638:	2100      	movs	r1, #0
 800463a:	f004 fb55 	bl	8008ce8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800463e:	2320      	movs	r3, #32
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	0018      	movs	r0, r3
 8004644:	2308      	movs	r3, #8
 8004646:	001a      	movs	r2, r3
 8004648:	2100      	movs	r1, #0
 800464a:	f004 fb4d 	bl	8008ce8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800464e:	1d3b      	adds	r3, r7, #4
 8004650:	0018      	movs	r0, r3
 8004652:	231c      	movs	r3, #28
 8004654:	001a      	movs	r2, r3
 8004656:	2100      	movs	r1, #0
 8004658:	f004 fb46 	bl	8008ce8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800465c:	4b4e      	ldr	r3, [pc, #312]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 800465e:	4a4f      	ldr	r2, [pc, #316]	; (800479c <_ZL12MX_TIM3_Initv+0x174>)
 8004660:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004662:	4b4d      	ldr	r3, [pc, #308]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 8004664:	2200      	movs	r2, #0
 8004666:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004668:	4b4b      	ldr	r3, [pc, #300]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 800466a:	2200      	movs	r2, #0
 800466c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800466e:	4b4a      	ldr	r3, [pc, #296]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 8004670:	4a4b      	ldr	r2, [pc, #300]	; (80047a0 <_ZL12MX_TIM3_Initv+0x178>)
 8004672:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004674:	4b48      	ldr	r3, [pc, #288]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 8004676:	2200      	movs	r2, #0
 8004678:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800467a:	4b47      	ldr	r3, [pc, #284]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 800467c:	2280      	movs	r2, #128	; 0x80
 800467e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004680:	4b45      	ldr	r3, [pc, #276]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 8004682:	0018      	movs	r0, r3
 8004684:	f002 ff44 	bl	8007510 <HAL_TIM_Base_Init>
 8004688:	0003      	movs	r3, r0
 800468a:	1e5a      	subs	r2, r3, #1
 800468c:	4193      	sbcs	r3, r2
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8004694:	f000 fa2e 	bl	8004af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004698:	2128      	movs	r1, #40	; 0x28
 800469a:	187b      	adds	r3, r7, r1
 800469c:	2280      	movs	r2, #128	; 0x80
 800469e:	0152      	lsls	r2, r2, #5
 80046a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046a2:	187a      	adds	r2, r7, r1
 80046a4:	4b3c      	ldr	r3, [pc, #240]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 80046a6:	0011      	movs	r1, r2
 80046a8:	0018      	movs	r0, r3
 80046aa:	f003 f895 	bl	80077d8 <HAL_TIM_ConfigClockSource>
 80046ae:	0003      	movs	r3, r0
 80046b0:	1e5a      	subs	r2, r3, #1
 80046b2:	4193      	sbcs	r3, r2
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80046ba:	f000 fa1b 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 80046c0:	0018      	movs	r0, r3
 80046c2:	f002 ff51 	bl	8007568 <HAL_TIM_PWM_Init>
 80046c6:	0003      	movs	r3, r0
 80046c8:	1e5a      	subs	r2, r3, #1
 80046ca:	4193      	sbcs	r3, r2
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80046d2:	f000 fa0f 	bl	8004af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046d6:	2120      	movs	r1, #32
 80046d8:	187b      	adds	r3, r7, r1
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046de:	187b      	adds	r3, r7, r1
 80046e0:	2200      	movs	r2, #0
 80046e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046e4:	187a      	adds	r2, r7, r1
 80046e6:	4b2c      	ldr	r3, [pc, #176]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 80046e8:	0011      	movs	r1, r2
 80046ea:	0018      	movs	r0, r3
 80046ec:	f003 fc62 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80046f0:	0003      	movs	r3, r0
 80046f2:	1e5a      	subs	r2, r3, #1
 80046f4:	4193      	sbcs	r3, r2
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80046fc:	f000 f9fa 	bl	8004af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004700:	1d3b      	adds	r3, r7, #4
 8004702:	2260      	movs	r2, #96	; 0x60
 8004704:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004706:	1d3b      	adds	r3, r7, #4
 8004708:	2200      	movs	r2, #0
 800470a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800470c:	1d3b      	adds	r3, r7, #4
 800470e:	2200      	movs	r2, #0
 8004710:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004712:	1d3b      	adds	r3, r7, #4
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004718:	1d39      	adds	r1, r7, #4
 800471a:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 800471c:	2200      	movs	r2, #0
 800471e:	0018      	movs	r0, r3
 8004720:	f002 ffa2 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8004724:	0003      	movs	r3, r0
 8004726:	1e5a      	subs	r2, r3, #1
 8004728:	4193      	sbcs	r3, r2
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8004730:	f000 f9e0 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004734:	1d39      	adds	r1, r7, #4
 8004736:	4b18      	ldr	r3, [pc, #96]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 8004738:	2204      	movs	r2, #4
 800473a:	0018      	movs	r0, r3
 800473c:	f002 ff94 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8004740:	0003      	movs	r3, r0
 8004742:	1e5a      	subs	r2, r3, #1
 8004744:	4193      	sbcs	r3, r2
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 800474c:	f000 f9d2 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004750:	1d39      	adds	r1, r7, #4
 8004752:	4b11      	ldr	r3, [pc, #68]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 8004754:	2208      	movs	r2, #8
 8004756:	0018      	movs	r0, r3
 8004758:	f002 ff86 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 800475c:	0003      	movs	r3, r0
 800475e:	1e5a      	subs	r2, r3, #1
 8004760:	4193      	sbcs	r3, r2
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <_ZL12MX_TIM3_Initv+0x144>
  {
    Error_Handler();
 8004768:	f000 f9c4 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800476c:	1d39      	adds	r1, r7, #4
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 8004770:	220c      	movs	r2, #12
 8004772:	0018      	movs	r0, r3
 8004774:	f002 ff78 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 8004778:	0003      	movs	r3, r0
 800477a:	1e5a      	subs	r2, r3, #1
 800477c:	4193      	sbcs	r3, r2
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <_ZL12MX_TIM3_Initv+0x160>
  {
    Error_Handler();
 8004784:	f000 f9b6 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <_ZL12MX_TIM3_Initv+0x170>)
 800478a:	0018      	movs	r0, r3
 800478c:	f000 feb6 	bl	80054fc <HAL_TIM_MspPostInit>

}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b00e      	add	sp, #56	; 0x38
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000248 	.word	0x20000248
 800479c:	40000400 	.word	0x40000400
 80047a0:	0000ffff 	.word	0x0000ffff

080047a4 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b090      	sub	sp, #64	; 0x40
 80047a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80047aa:	2324      	movs	r3, #36	; 0x24
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	0018      	movs	r0, r3
 80047b0:	231c      	movs	r3, #28
 80047b2:	001a      	movs	r2, r3
 80047b4:	2100      	movs	r1, #0
 80047b6:	f004 fa97 	bl	8008ce8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	0018      	movs	r0, r3
 80047be:	2320      	movs	r3, #32
 80047c0:	001a      	movs	r2, r3
 80047c2:	2100      	movs	r1, #0
 80047c4:	f004 fa90 	bl	8008ce8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80047c8:	4b3e      	ldr	r3, [pc, #248]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 80047ca:	4a3f      	ldr	r2, [pc, #252]	; (80048c8 <_ZL13MX_TIM17_Initv+0x124>)
 80047cc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80047ce:	4b3d      	ldr	r3, [pc, #244]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047d4:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1920;
 80047da:	4b3a      	ldr	r3, [pc, #232]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 80047dc:	22f0      	movs	r2, #240	; 0xf0
 80047de:	00d2      	lsls	r2, r2, #3
 80047e0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047e2:	4b38      	ldr	r3, [pc, #224]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80047e8:	4b36      	ldr	r3, [pc, #216]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047ee:	4b35      	ldr	r3, [pc, #212]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80047f4:	4b33      	ldr	r3, [pc, #204]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 80047f6:	0018      	movs	r0, r3
 80047f8:	f002 fe8a 	bl	8007510 <HAL_TIM_Base_Init>
 80047fc:	0003      	movs	r3, r0
 80047fe:	1e5a      	subs	r2, r3, #1
 8004800:	4193      	sbcs	r3, r2
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <_ZL13MX_TIM17_Initv+0x68>
  {
    Error_Handler();
 8004808:	f000 f974 	bl	8004af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800480c:	4b2d      	ldr	r3, [pc, #180]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 800480e:	0018      	movs	r0, r3
 8004810:	f002 feaa 	bl	8007568 <HAL_TIM_PWM_Init>
 8004814:	0003      	movs	r3, r0
 8004816:	1e5a      	subs	r2, r3, #1
 8004818:	4193      	sbcs	r3, r2
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <_ZL13MX_TIM17_Initv+0x80>
  {
    Error_Handler();
 8004820:	f000 f968 	bl	8004af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004824:	2124      	movs	r1, #36	; 0x24
 8004826:	187b      	adds	r3, r7, r1
 8004828:	2260      	movs	r2, #96	; 0x60
 800482a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800482c:	187b      	adds	r3, r7, r1
 800482e:	2200      	movs	r2, #0
 8004830:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004832:	187b      	adds	r3, r7, r1
 8004834:	2200      	movs	r2, #0
 8004836:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004838:	187b      	adds	r3, r7, r1
 800483a:	2200      	movs	r2, #0
 800483c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800483e:	187b      	adds	r3, r7, r1
 8004840:	2204      	movs	r2, #4
 8004842:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004844:	187b      	adds	r3, r7, r1
 8004846:	2200      	movs	r2, #0
 8004848:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800484a:	187b      	adds	r3, r7, r1
 800484c:	2200      	movs	r2, #0
 800484e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004850:	1879      	adds	r1, r7, r1
 8004852:	4b1c      	ldr	r3, [pc, #112]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 8004854:	2200      	movs	r2, #0
 8004856:	0018      	movs	r0, r3
 8004858:	f002 ff06 	bl	8007668 <HAL_TIM_PWM_ConfigChannel>
 800485c:	0003      	movs	r3, r0
 800485e:	1e5a      	subs	r2, r3, #1
 8004860:	4193      	sbcs	r3, r2
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <_ZL13MX_TIM17_Initv+0xc8>
  {
    Error_Handler();
 8004868:	f000 f944 	bl	8004af4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800486c:	1d3b      	adds	r3, r7, #4
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	2200      	movs	r2, #0
 8004876:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004878:	1d3b      	adds	r3, r7, #4
 800487a:	2200      	movs	r2, #0
 800487c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	2200      	movs	r2, #0
 8004882:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	2200      	movs	r2, #0
 8004888:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	2280      	movs	r2, #128	; 0x80
 800488e:	0192      	lsls	r2, r2, #6
 8004890:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004892:	1d3b      	adds	r3, r7, #4
 8004894:	2200      	movs	r2, #0
 8004896:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004898:	1d3a      	adds	r2, r7, #4
 800489a:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 800489c:	0011      	movs	r1, r2
 800489e:	0018      	movs	r0, r3
 80048a0:	f003 fbe0 	bl	8008064 <HAL_TIMEx_ConfigBreakDeadTime>
 80048a4:	0003      	movs	r3, r0
 80048a6:	1e5a      	subs	r2, r3, #1
 80048a8:	4193      	sbcs	r3, r2
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <_ZL13MX_TIM17_Initv+0x110>
  {
    Error_Handler();
 80048b0:	f000 f920 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80048b4:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <_ZL13MX_TIM17_Initv+0x120>)
 80048b6:	0018      	movs	r0, r3
 80048b8:	f000 fe20 	bl	80054fc <HAL_TIM_MspPostInit>

}
 80048bc:	46c0      	nop			; (mov r8, r8)
 80048be:	46bd      	mov	sp, r7
 80048c0:	b010      	add	sp, #64	; 0x40
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000288 	.word	0x20000288
 80048c8:	40014800 	.word	0x40014800

080048cc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048d0:	4b16      	ldr	r3, [pc, #88]	; (800492c <_ZL19MX_USART1_UART_Initv+0x60>)
 80048d2:	4a17      	ldr	r2, [pc, #92]	; (8004930 <_ZL19MX_USART1_UART_Initv+0x64>)
 80048d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <_ZL19MX_USART1_UART_Initv+0x60>)
 80048d8:	4a16      	ldr	r2, [pc, #88]	; (8004934 <_ZL19MX_USART1_UART_Initv+0x68>)
 80048da:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048dc:	4b13      	ldr	r3, [pc, #76]	; (800492c <_ZL19MX_USART1_UART_Initv+0x60>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <_ZL19MX_USART1_UART_Initv+0x60>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048e8:	4b10      	ldr	r3, [pc, #64]	; (800492c <_ZL19MX_USART1_UART_Initv+0x60>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <_ZL19MX_USART1_UART_Initv+0x60>)
 80048f0:	220c      	movs	r2, #12
 80048f2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048f4:	4b0d      	ldr	r3, [pc, #52]	; (800492c <_ZL19MX_USART1_UART_Initv+0x60>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <_ZL19MX_USART1_UART_Initv+0x60>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004900:	4b0a      	ldr	r3, [pc, #40]	; (800492c <_ZL19MX_USART1_UART_Initv+0x60>)
 8004902:	2200      	movs	r2, #0
 8004904:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004906:	4b09      	ldr	r3, [pc, #36]	; (800492c <_ZL19MX_USART1_UART_Initv+0x60>)
 8004908:	2200      	movs	r2, #0
 800490a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800490c:	4b07      	ldr	r3, [pc, #28]	; (800492c <_ZL19MX_USART1_UART_Initv+0x60>)
 800490e:	0018      	movs	r0, r3
 8004910:	f003 fc06 	bl	8008120 <HAL_UART_Init>
 8004914:	0003      	movs	r3, r0
 8004916:	1e5a      	subs	r2, r3, #1
 8004918:	4193      	sbcs	r3, r2
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <_ZL19MX_USART1_UART_Initv+0x58>
  {
    Error_Handler();
 8004920:	f000 f8e8 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004924:	46c0      	nop			; (mov r8, r8)
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	200002c8 	.word	0x200002c8
 8004930:	40013800 	.word	0x40013800
 8004934:	0003d090 	.word	0x0003d090

08004938 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800493c:	4b16      	ldr	r3, [pc, #88]	; (8004998 <_ZL19MX_USART2_UART_Initv+0x60>)
 800493e:	4a17      	ldr	r2, [pc, #92]	; (800499c <_ZL19MX_USART2_UART_Initv+0x64>)
 8004940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004944:	2296      	movs	r2, #150	; 0x96
 8004946:	0212      	lsls	r2, r2, #8
 8004948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800494a:	4b13      	ldr	r3, [pc, #76]	; (8004998 <_ZL19MX_USART2_UART_Initv+0x60>)
 800494c:	2200      	movs	r2, #0
 800494e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004950:	4b11      	ldr	r3, [pc, #68]	; (8004998 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004952:	2200      	movs	r2, #0
 8004954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004958:	2200      	movs	r2, #0
 800495a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800495c:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <_ZL19MX_USART2_UART_Initv+0x60>)
 800495e:	220c      	movs	r2, #12
 8004960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004964:	2200      	movs	r2, #0
 8004966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <_ZL19MX_USART2_UART_Initv+0x60>)
 800496a:	2200      	movs	r2, #0
 800496c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004970:	2200      	movs	r2, #0
 8004972:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004976:	2200      	movs	r2, #0
 8004978:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <_ZL19MX_USART2_UART_Initv+0x60>)
 800497c:	0018      	movs	r0, r3
 800497e:	f003 fbcf 	bl	8008120 <HAL_UART_Init>
 8004982:	0003      	movs	r3, r0
 8004984:	1e5a      	subs	r2, r3, #1
 8004986:	4193      	sbcs	r3, r2
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 800498e:	f000 f8b1 	bl	8004af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000348 	.word	0x20000348
 800499c:	40004400 	.word	0x40004400

080049a0 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049a6:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <_ZL11MX_DMA_Initv+0x48>)
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <_ZL11MX_DMA_Initv+0x48>)
 80049ac:	2101      	movs	r1, #1
 80049ae:	430a      	orrs	r2, r1
 80049b0:	615a      	str	r2, [r3, #20]
 80049b2:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <_ZL11MX_DMA_Initv+0x48>)
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	2201      	movs	r2, #1
 80049b8:	4013      	ands	r3, r2
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80049be:	2200      	movs	r2, #0
 80049c0:	2100      	movs	r1, #0
 80049c2:	200a      	movs	r0, #10
 80049c4:	f001 fc5a 	bl	800627c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80049c8:	200a      	movs	r0, #10
 80049ca:	f001 fc6c 	bl	80062a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80049ce:	2200      	movs	r2, #0
 80049d0:	2100      	movs	r1, #0
 80049d2:	200b      	movs	r0, #11
 80049d4:	f001 fc52 	bl	800627c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80049d8:	200b      	movs	r0, #11
 80049da:	f001 fc64 	bl	80062a6 <HAL_NVIC_EnableIRQ>

}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b002      	add	sp, #8
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	40021000 	.word	0x40021000

080049ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b089      	sub	sp, #36	; 0x24
 80049f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f2:	240c      	movs	r4, #12
 80049f4:	193b      	adds	r3, r7, r4
 80049f6:	0018      	movs	r0, r3
 80049f8:	2314      	movs	r3, #20
 80049fa:	001a      	movs	r2, r3
 80049fc:	2100      	movs	r1, #0
 80049fe:	f004 f973 	bl	8008ce8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a02:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <_ZL12MX_GPIO_Initv+0xfc>)
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	4b38      	ldr	r3, [pc, #224]	; (8004ae8 <_ZL12MX_GPIO_Initv+0xfc>)
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	03c9      	lsls	r1, r1, #15
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	615a      	str	r2, [r3, #20]
 8004a10:	4b35      	ldr	r3, [pc, #212]	; (8004ae8 <_ZL12MX_GPIO_Initv+0xfc>)
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	03db      	lsls	r3, r3, #15
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a1e:	4b32      	ldr	r3, [pc, #200]	; (8004ae8 <_ZL12MX_GPIO_Initv+0xfc>)
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	4b31      	ldr	r3, [pc, #196]	; (8004ae8 <_ZL12MX_GPIO_Initv+0xfc>)
 8004a24:	2180      	movs	r1, #128	; 0x80
 8004a26:	0289      	lsls	r1, r1, #10
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	615a      	str	r2, [r3, #20]
 8004a2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ae8 <_ZL12MX_GPIO_Initv+0xfc>)
 8004a2e:	695a      	ldr	r2, [r3, #20]
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	029b      	lsls	r3, r3, #10
 8004a34:	4013      	ands	r3, r2
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ae8 <_ZL12MX_GPIO_Initv+0xfc>)
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <_ZL12MX_GPIO_Initv+0xfc>)
 8004a40:	2180      	movs	r1, #128	; 0x80
 8004a42:	02c9      	lsls	r1, r1, #11
 8004a44:	430a      	orrs	r2, r1
 8004a46:	615a      	str	r2, [r3, #20]
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <_ZL12MX_GPIO_Initv+0xfc>)
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	02db      	lsls	r3, r3, #11
 8004a50:	4013      	ands	r3, r2
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4824      	ldr	r0, [pc, #144]	; (8004aec <_ZL12MX_GPIO_Initv+0x100>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	0019      	movs	r1, r3
 8004a60:	f001 ff46 	bl	80068f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8004a64:	193b      	adds	r3, r7, r4
 8004a66:	2204      	movs	r2, #4
 8004a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a6a:	193b      	adds	r3, r7, r4
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <_ZL12MX_GPIO_Initv+0x104>)
 8004a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a70:	193b      	adds	r3, r7, r4
 8004a72:	2201      	movs	r2, #1
 8004a74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004a76:	193b      	adds	r3, r7, r4
 8004a78:	4a1c      	ldr	r2, [pc, #112]	; (8004aec <_ZL12MX_GPIO_Initv+0x100>)
 8004a7a:	0019      	movs	r1, r3
 8004a7c:	0010      	movs	r0, r2
 8004a7e:	f001 fdc7 	bl	8006610 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8004a82:	0021      	movs	r1, r4
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	2280      	movs	r2, #128	; 0x80
 8004a88:	00d2      	lsls	r2, r2, #3
 8004a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a8c:	187b      	adds	r3, r7, r1
 8004a8e:	2201      	movs	r2, #1
 8004a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	187b      	adds	r3, r7, r1
 8004a94:	2200      	movs	r2, #0
 8004a96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004a98:	187b      	adds	r3, r7, r1
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8004a9e:	000c      	movs	r4, r1
 8004aa0:	187b      	adds	r3, r7, r1
 8004aa2:	4a12      	ldr	r2, [pc, #72]	; (8004aec <_ZL12MX_GPIO_Initv+0x100>)
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	0010      	movs	r0, r2
 8004aa8:	f001 fdb2 	bl	8006610 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_2_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 8004aac:	0021      	movs	r1, r4
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	22c0      	movs	r2, #192	; 0xc0
 8004ab2:	0192      	lsls	r2, r2, #6
 8004ab4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ab6:	187b      	adds	r3, r7, r1
 8004ab8:	2200      	movs	r2, #0
 8004aba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004abc:	187b      	adds	r3, r7, r1
 8004abe:	2201      	movs	r2, #1
 8004ac0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	4a09      	ldr	r2, [pc, #36]	; (8004aec <_ZL12MX_GPIO_Initv+0x100>)
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	0010      	movs	r0, r2
 8004aca:	f001 fda1 	bl	8006610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	2006      	movs	r0, #6
 8004ad4:	f001 fbd2 	bl	800627c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004ad8:	2006      	movs	r0, #6
 8004ada:	f001 fbe4 	bl	80062a6 <HAL_NVIC_EnableIRQ>

}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b009      	add	sp, #36	; 0x24
 8004ae4:	bd90      	pop	{r4, r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	48000400 	.word	0x48000400
 8004af0:	10210000 	.word	0x10210000

08004af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <NRF24L01_InitPins>:
uint8_t NRF24L01_RxFifoEmpty(void);

/* NRF structure */
static NRF24L01_t NRF24L01_Struct;

void NRF24L01_InitPins(void) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
	/* CSN high = disable SPI */
	NRF24L01_CSN_HIGH;
 8004b04:	2390      	movs	r3, #144	; 0x90
 8004b06:	05db      	lsls	r3, r3, #23
 8004b08:	2201      	movs	r2, #1
 8004b0a:	2110      	movs	r1, #16
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f001 feef 	bl	80068f0 <HAL_GPIO_WritePin>
	
	/* CE low = disable TX/RX */
	NRF24L01_CE_LOW;
 8004b12:	2380      	movs	r3, #128	; 0x80
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4804      	ldr	r0, [pc, #16]	; (8004b28 <NRF24L01_InitPins+0x28>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	f001 fee8 	bl	80068f0 <HAL_GPIO_WritePin>
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	48000400 	.word	0x48000400

08004b2c <NRF24L01_Init>:

uint8_t NRF24L01_Init(uint8_t channel, uint8_t payload_size) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	0002      	movs	r2, r0
 8004b34:	1dfb      	adds	r3, r7, #7
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	1dbb      	adds	r3, r7, #6
 8004b3a:	1c0a      	adds	r2, r1, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
	/* Initialize CE and CSN pins */
	NRF24L01_InitPins();
 8004b3e:	f7ff ffdf 	bl	8004b00 <NRF24L01_InitPins>
	
	/* Max payload is 32bytes */
	if (payload_size > 32) {
 8004b42:	1dbb      	adds	r3, r7, #6
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d902      	bls.n	8004b50 <NRF24L01_Init+0x24>
		payload_size = 32;
 8004b4a:	1dbb      	adds	r3, r7, #6
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	701a      	strb	r2, [r3, #0]
	}
	
	/* Fill structure */
	NRF24L01_Struct.Channel = !channel; /* Set channel to some different value for NRF24L01_SetChannel() function */
 8004b50:	1dfb      	adds	r3, r7, #7
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	425a      	negs	r2, r3
 8004b56:	4153      	adcs	r3, r2
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	4b40      	ldr	r3, [pc, #256]	; (8004c60 <NRF24L01_Init+0x134>)
 8004b5e:	705a      	strb	r2, [r3, #1]
	NRF24L01_Struct.PayloadSize = payload_size;
 8004b60:	4b3f      	ldr	r3, [pc, #252]	; (8004c60 <NRF24L01_Init+0x134>)
 8004b62:	1dba      	adds	r2, r7, #6
 8004b64:	7812      	ldrb	r2, [r2, #0]
 8004b66:	701a      	strb	r2, [r3, #0]
	NRF24L01_Struct.OutPwr = NRF24L01_OutputPower_0dBm;
 8004b68:	4b3d      	ldr	r3, [pc, #244]	; (8004c60 <NRF24L01_Init+0x134>)
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	709a      	strb	r2, [r3, #2]
	NRF24L01_Struct.DataRate = NRF24L01_DataRate_1M;
 8004b6e:	4b3c      	ldr	r3, [pc, #240]	; (8004c60 <NRF24L01_Init+0x134>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	70da      	strb	r2, [r3, #3]
	
	/* Reset nRF24L01+ to power on registers values */
	NRF24L01_SoftwareReset();
 8004b74:	f000 f9b8 	bl	8004ee8 <NRF24L01_SoftwareReset>
	
	/* Channel select */
	NRF24L01_SetChannel(channel);
 8004b78:	1dfb      	adds	r3, r7, #7
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f000 fa55 	bl	800502c <NRF24L01_SetChannel>
	
	/* Set pipeline to max possible 32 bytes */
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P0, NRF24L01_Struct.PayloadSize); // Auto-ACK pipe
 8004b82:	4b37      	ldr	r3, [pc, #220]	; (8004c60 <NRF24L01_Init+0x134>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	0019      	movs	r1, r3
 8004b88:	2011      	movs	r0, #17
 8004b8a:	f000 f86b 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P1, NRF24L01_Struct.PayloadSize); // Data payload pipe
 8004b8e:	4b34      	ldr	r3, [pc, #208]	; (8004c60 <NRF24L01_Init+0x134>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	0019      	movs	r1, r3
 8004b94:	2012      	movs	r0, #18
 8004b96:	f000 f865 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P2, NRF24L01_Struct.PayloadSize);
 8004b9a:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <NRF24L01_Init+0x134>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	2013      	movs	r0, #19
 8004ba2:	f000 f85f 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P3, NRF24L01_Struct.PayloadSize);
 8004ba6:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <NRF24L01_Init+0x134>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	0019      	movs	r1, r3
 8004bac:	2014      	movs	r0, #20
 8004bae:	f000 f859 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P4, NRF24L01_Struct.PayloadSize);
 8004bb2:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <NRF24L01_Init+0x134>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	2015      	movs	r0, #21
 8004bba:	f000 f853 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P5, NRF24L01_Struct.PayloadSize);
 8004bbe:	4b28      	ldr	r3, [pc, #160]	; (8004c60 <NRF24L01_Init+0x134>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	2016      	movs	r0, #22
 8004bc6:	f000 f84d 	bl	8004c64 <NRF24L01_WriteRegister>
	
	/* Set RF settings (1mbps, output power) */
	NRF24L01_SetRF(NRF24L01_Struct.DataRate, NRF24L01_Struct.OutPwr);
 8004bca:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <NRF24L01_Init+0x134>)
 8004bcc:	78da      	ldrb	r2, [r3, #3]
 8004bce:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <NRF24L01_Init+0x134>)
 8004bd0:	789b      	ldrb	r3, [r3, #2]
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	0010      	movs	r0, r2
 8004bd6:	f000 fa49 	bl	800506c <NRF24L01_SetRF>
	
	/* Config register */
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG);
 8004bda:	213c      	movs	r1, #60	; 0x3c
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f000 f841 	bl	8004c64 <NRF24L01_WriteRegister>
	
	/* Enable auto-acknowledgment for all pipes */
	//NRF24L01_WriteRegister(NRF24L01_REG_EN_AA, 0x3F);

	/* Disable auto-acknowledgment for all pipes */
	NRF24L01_WriteRegister(NRF24L01_REG_EN_AA, 0x00);
 8004be2:	2100      	movs	r1, #0
 8004be4:	2001      	movs	r0, #1
 8004be6:	f000 f83d 	bl	8004c64 <NRF24L01_WriteRegister>
	
	/* Enable RX addresses */
	//NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, 0x3F);

	/* Disable RX addresses beside pipelines 0 and 1 */
	NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, ((1 << NRF24L01_ERX_P0) | (1 << NRF24L01_ERX_P1)));
 8004bea:	2103      	movs	r1, #3
 8004bec:	2002      	movs	r0, #2
 8004bee:	f000 f839 	bl	8004c64 <NRF24L01_WriteRegister>

	/* Auto retransmit delay: 1000 (4x250) us and Up to 15 retransmit trials */
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, 0x4F);
 8004bf2:	214f      	movs	r1, #79	; 0x4f
 8004bf4:	2004      	movs	r0, #4
 8004bf6:	f000 f835 	bl	8004c64 <NRF24L01_WriteRegister>
	
	/* Dynamic length configurations: No dynamic length */
	NRF24L01_WriteRegister(NRF24L01_REG_DYNPD, (0 << NRF24L01_DPL_P0) | (0 << NRF24L01_DPL_P1) | (0 << NRF24L01_DPL_P2) | (0 << NRF24L01_DPL_P3) | (0 << NRF24L01_DPL_P4) | (0 << NRF24L01_DPL_P5));
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	201c      	movs	r0, #28
 8004bfe:	f000 f831 	bl	8004c64 <NRF24L01_WriteRegister>
	
	// Set address length to 4 bytes
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_AW, (0x02 << NRF24L01_AW));
 8004c02:	2102      	movs	r1, #2
 8004c04:	2003      	movs	r0, #3
 8004c06:	f000 f82d 	bl	8004c64 <NRF24L01_WriteRegister>

	/* Clear FIFOs */
	NRF24L01_FLUSH_TX;
 8004c0a:	2390      	movs	r3, #144	; 0x90
 8004c0c:	05db      	lsls	r3, r3, #23
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2110      	movs	r1, #16
 8004c12:	0018      	movs	r0, r3
 8004c14:	f001 fe6c 	bl	80068f0 <HAL_GPIO_WritePin>
 8004c18:	20e1      	movs	r0, #225	; 0xe1
 8004c1a:	f000 fa8d 	bl	8005138 <NRF24L01_SPI_Send>
 8004c1e:	2390      	movs	r3, #144	; 0x90
 8004c20:	05db      	lsls	r3, r3, #23
 8004c22:	2201      	movs	r2, #1
 8004c24:	2110      	movs	r1, #16
 8004c26:	0018      	movs	r0, r3
 8004c28:	f001 fe62 	bl	80068f0 <HAL_GPIO_WritePin>
	NRF24L01_FLUSH_RX;
 8004c2c:	2390      	movs	r3, #144	; 0x90
 8004c2e:	05db      	lsls	r3, r3, #23
 8004c30:	2200      	movs	r2, #0
 8004c32:	2110      	movs	r1, #16
 8004c34:	0018      	movs	r0, r3
 8004c36:	f001 fe5b 	bl	80068f0 <HAL_GPIO_WritePin>
 8004c3a:	20e2      	movs	r0, #226	; 0xe2
 8004c3c:	f000 fa7c 	bl	8005138 <NRF24L01_SPI_Send>
 8004c40:	2390      	movs	r3, #144	; 0x90
 8004c42:	05db      	lsls	r3, r3, #23
 8004c44:	2201      	movs	r2, #1
 8004c46:	2110      	movs	r1, #16
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f001 fe51 	bl	80068f0 <HAL_GPIO_WritePin>
	
	/* Clear interrupts */
	NRF24L01_Clear_Interrupts();
 8004c4e:	f000 fa69 	bl	8005124 <NRF24L01_Clear_Interrupts>
	
	/* Go to RX mode */
	NRF24L01_PowerUpRx();
 8004c52:	f000 f873 	bl	8004d3c <NRF24L01_PowerUpRx>
	
	/* Return OK */
	return 1;
 8004c56:	2301      	movs	r3, #1
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000450 	.word	0x20000450

08004c64 <NRF24L01_WriteRegister>:
	NRF24L01_SPI_ReadMulti(data, NRF24L01_NOP_MASK, count);
	NRF24L01_CSN_HIGH;
}

uint8_t NRF24L01_WriteRegister(uint8_t reg, uint8_t value)
{
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	0002      	movs	r2, r0
 8004c6c:	1dfb      	adds	r3, r7, #7
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	1dbb      	adds	r3, r7, #6
 8004c72:	1c0a      	adds	r2, r1, #0
 8004c74:	701a      	strb	r2, [r3, #0]
	uint8_t Data[2];
	Data[0] = NRF24L01_WRITE_REGISTER_MASK(reg);
 8004c76:	1dfb      	adds	r3, r7, #7
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	221f      	movs	r2, #31
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2220      	movs	r2, #32
 8004c82:	4313      	orrs	r3, r2
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	240c      	movs	r4, #12
 8004c88:	193b      	adds	r3, r7, r4
 8004c8a:	701a      	strb	r2, [r3, #0]
	Data[1] = value;
 8004c8c:	193b      	adds	r3, r7, r4
 8004c8e:	1dba      	adds	r2, r7, #6
 8004c90:	7812      	ldrb	r2, [r2, #0]
 8004c92:	705a      	strb	r2, [r3, #1]
	NRF24L01_CSN_LOW;
 8004c94:	2390      	movs	r3, #144	; 0x90
 8004c96:	05db      	lsls	r3, r3, #23
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2110      	movs	r1, #16
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f001 fe27 	bl	80068f0 <HAL_GPIO_WritePin>
	NRF24L01_SPI_SendMulti(Data, Data, 2);
 8004ca2:	1939      	adds	r1, r7, r4
 8004ca4:	193b      	adds	r3, r7, r4
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f000 fa9d 	bl	80051e8 <NRF24L01_SPI_SendMulti>
	NRF24L01_CSN_HIGH;
 8004cae:	2390      	movs	r3, #144	; 0x90
 8004cb0:	05db      	lsls	r3, r3, #23
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	2110      	movs	r1, #16
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f001 fe1a 	bl	80068f0 <HAL_GPIO_WritePin>
	return Data[0];
 8004cbc:	193b      	adds	r3, r7, r4
 8004cbe:	781b      	ldrb	r3, [r3, #0]
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b005      	add	sp, #20
 8004cc6:	bd90      	pop	{r4, r7, pc}

08004cc8 <NRF24L01_WriteRegisterMulti>:

void NRF24L01_WriteRegisterMulti(uint8_t reg, uint8_t *data, uint8_t count) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6039      	str	r1, [r7, #0]
 8004cd0:	0011      	movs	r1, r2
 8004cd2:	1dfb      	adds	r3, r7, #7
 8004cd4:	1c02      	adds	r2, r0, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	1c0a      	adds	r2, r1, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
	NRF24L01_CSN_LOW;
 8004cde:	2390      	movs	r3, #144	; 0x90
 8004ce0:	05db      	lsls	r3, r3, #23
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2110      	movs	r1, #16
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f001 fe02 	bl	80068f0 <HAL_GPIO_WritePin>
	NRF24L01_SPI_Send(NRF24L01_WRITE_REGISTER_MASK(reg));
 8004cec:	1dfb      	adds	r3, r7, #7
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	221f      	movs	r2, #31
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f000 fa1b 	bl	8005138 <NRF24L01_SPI_Send>
	NRF24L01_SPI_WriteMulti(data, count);
 8004d02:	1dbb      	adds	r3, r7, #6
 8004d04:	781a      	ldrb	r2, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	0011      	movs	r1, r2
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 fa3e 	bl	800518c <NRF24L01_SPI_WriteMulti>
	NRF24L01_CSN_HIGH;
 8004d10:	2390      	movs	r3, #144	; 0x90
 8004d12:	05db      	lsls	r3, r3, #23
 8004d14:	2201      	movs	r2, #1
 8004d16:	2110      	movs	r1, #16
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f001 fde9 	bl	80068f0 <HAL_GPIO_WritePin>
}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b002      	add	sp, #8
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <NRF24L01_PowerUpTx>:

void NRF24L01_PowerUpTx(void) {
 8004d26:	b580      	push	{r7, lr}
 8004d28:	af00      	add	r7, sp, #0
	NRF24L01_Clear_Interrupts();
 8004d2a:	f000 f9fb 	bl	8005124 <NRF24L01_Clear_Interrupts>
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG | (0 << NRF24L01_PRIM_RX) | (1 << NRF24L01_PWR_UP));
 8004d2e:	213e      	movs	r1, #62	; 0x3e
 8004d30:	2000      	movs	r0, #0
 8004d32:	f7ff ff97 	bl	8004c64 <NRF24L01_WriteRegister>
}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <NRF24L01_PowerUpRx>:

void NRF24L01_PowerUpRx(void) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
	/* Disable RX/TX mode */
	NRF24L01_CE_LOW;
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4812      	ldr	r0, [pc, #72]	; (8004d90 <NRF24L01_PowerUpRx+0x54>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	0019      	movs	r1, r3
 8004d4a:	f001 fdd1 	bl	80068f0 <HAL_GPIO_WritePin>
	/* Clear RX buffer */
	NRF24L01_FLUSH_RX;
 8004d4e:	2390      	movs	r3, #144	; 0x90
 8004d50:	05db      	lsls	r3, r3, #23
 8004d52:	2200      	movs	r2, #0
 8004d54:	2110      	movs	r1, #16
 8004d56:	0018      	movs	r0, r3
 8004d58:	f001 fdca 	bl	80068f0 <HAL_GPIO_WritePin>
 8004d5c:	20e2      	movs	r0, #226	; 0xe2
 8004d5e:	f000 f9eb 	bl	8005138 <NRF24L01_SPI_Send>
 8004d62:	2390      	movs	r3, #144	; 0x90
 8004d64:	05db      	lsls	r3, r3, #23
 8004d66:	2201      	movs	r2, #1
 8004d68:	2110      	movs	r1, #16
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f001 fdc0 	bl	80068f0 <HAL_GPIO_WritePin>
	/* Clear interrupts */
	NRF24L01_Clear_Interrupts();
 8004d70:	f000 f9d8 	bl	8005124 <NRF24L01_Clear_Interrupts>
	/* Setup RX mode */
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG | 1 << NRF24L01_PWR_UP | 1 << NRF24L01_PRIM_RX);
 8004d74:	213f      	movs	r1, #63	; 0x3f
 8004d76:	2000      	movs	r0, #0
 8004d78:	f7ff ff74 	bl	8004c64 <NRF24L01_WriteRegister>
	/* Start listening */
	NRF24L01_CE_HIGH;
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4803      	ldr	r0, [pc, #12]	; (8004d90 <NRF24L01_PowerUpRx+0x54>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	0019      	movs	r1, r3
 8004d86:	f001 fdb3 	bl	80068f0 <HAL_GPIO_WritePin>
}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	48000400 	.word	0x48000400

08004d94 <NRF24L01_Transmit>:
void NRF24L01_PowerDown(void) {
	NRF24L01_CE_LOW;
	NRF24L01_WriteBit(NRF24L01_REG_CONFIG, NRF24L01_PWR_UP, 0);
}

void NRF24L01_Transmit(uint8_t *data) {
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	uint8_t count = NRF24L01_Struct.PayloadSize;
 8004d9c:	240f      	movs	r4, #15
 8004d9e:	193b      	adds	r3, r7, r4
 8004da0:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <NRF24L01_Transmit+0x8c>)
 8004da2:	7812      	ldrb	r2, [r2, #0]
 8004da4:	701a      	strb	r2, [r3, #0]

	/* Chip enable put to low, disable it */
	NRF24L01_CE_LOW;
 8004da6:	2380      	movs	r3, #128	; 0x80
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	481e      	ldr	r0, [pc, #120]	; (8004e24 <NRF24L01_Transmit+0x90>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	0019      	movs	r1, r3
 8004db0:	f001 fd9e 	bl	80068f0 <HAL_GPIO_WritePin>
	
	/* Go to power up tx mode */
	NRF24L01_PowerUpTx();
 8004db4:	f7ff ffb7 	bl	8004d26 <NRF24L01_PowerUpTx>
	
	/* Clear TX FIFO from NRF24L01+ */
	NRF24L01_FLUSH_TX;
 8004db8:	2390      	movs	r3, #144	; 0x90
 8004dba:	05db      	lsls	r3, r3, #23
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2110      	movs	r1, #16
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f001 fd95 	bl	80068f0 <HAL_GPIO_WritePin>
 8004dc6:	20e1      	movs	r0, #225	; 0xe1
 8004dc8:	f000 f9b6 	bl	8005138 <NRF24L01_SPI_Send>
 8004dcc:	2390      	movs	r3, #144	; 0x90
 8004dce:	05db      	lsls	r3, r3, #23
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	2110      	movs	r1, #16
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f001 fd8b 	bl	80068f0 <HAL_GPIO_WritePin>
	
	/* Send payload to nRF24L01+ */
	NRF24L01_CSN_LOW;
 8004dda:	2390      	movs	r3, #144	; 0x90
 8004ddc:	05db      	lsls	r3, r3, #23
 8004dde:	2200      	movs	r2, #0
 8004de0:	2110      	movs	r1, #16
 8004de2:	0018      	movs	r0, r3
 8004de4:	f001 fd84 	bl	80068f0 <HAL_GPIO_WritePin>
	/* Send write payload command */
	NRF24L01_SPI_Send(NRF24L01_W_TX_PAYLOAD_MASK);
 8004de8:	20a0      	movs	r0, #160	; 0xa0
 8004dea:	f000 f9a5 	bl	8005138 <NRF24L01_SPI_Send>
	/* Fill payload with data*/
	NRF24L01_SPI_WriteMulti(data, count);
 8004dee:	193b      	adds	r3, r7, r4
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0011      	movs	r1, r2
 8004df6:	0018      	movs	r0, r3
 8004df8:	f000 f9c8 	bl	800518c <NRF24L01_SPI_WriteMulti>
	/* Disable SPI */
	NRF24L01_CSN_HIGH;
 8004dfc:	2390      	movs	r3, #144	; 0x90
 8004dfe:	05db      	lsls	r3, r3, #23
 8004e00:	2201      	movs	r2, #1
 8004e02:	2110      	movs	r1, #16
 8004e04:	0018      	movs	r0, r3
 8004e06:	f001 fd73 	bl	80068f0 <HAL_GPIO_WritePin>
	
	/* Send data! */
	NRF24L01_CE_HIGH;
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	4805      	ldr	r0, [pc, #20]	; (8004e24 <NRF24L01_Transmit+0x90>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	0019      	movs	r1, r3
 8004e14:	f001 fd6c 	bl	80068f0 <HAL_GPIO_WritePin>
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b005      	add	sp, #20
 8004e1e:	bd90      	pop	{r4, r7, pc}
 8004e20:	20000450 	.word	0x20000450
 8004e24:	48000400 	.word	0x48000400

08004e28 <NRF24L01_GetData>:

void NRF24L01_GetData(uint8_t* data) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	/* Pull down chip select */
	NRF24L01_CSN_LOW;
 8004e30:	2390      	movs	r3, #144	; 0x90
 8004e32:	05db      	lsls	r3, r3, #23
 8004e34:	2200      	movs	r2, #0
 8004e36:	2110      	movs	r1, #16
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f001 fd59 	bl	80068f0 <HAL_GPIO_WritePin>
	/* Send read payload command*/
	NRF24L01_SPI_Send(NRF24L01_R_RX_PAYLOAD_MASK);
 8004e3e:	2061      	movs	r0, #97	; 0x61
 8004e40:	f000 f97a 	bl	8005138 <NRF24L01_SPI_Send>
	/* Read payload */
	NRF24L01_SPI_SendMulti(data, data, NRF24L01_Struct.PayloadSize);
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <NRF24L01_GetData+0x4c>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	001a      	movs	r2, r3
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 f9ca 	bl	80051e8 <NRF24L01_SPI_SendMulti>
	/* Pull up chip select */
	NRF24L01_CSN_HIGH;
 8004e54:	2390      	movs	r3, #144	; 0x90
 8004e56:	05db      	lsls	r3, r3, #23
 8004e58:	2201      	movs	r2, #1
 8004e5a:	2110      	movs	r1, #16
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f001 fd47 	bl	80068f0 <HAL_GPIO_WritePin>
	
	/* Reset status register, clear RX_DR interrupt flag */
	NRF24L01_WriteRegister(NRF24L01_REG_STATUS, (1 << NRF24L01_RX_DR));
 8004e62:	2140      	movs	r1, #64	; 0x40
 8004e64:	2007      	movs	r0, #7
 8004e66:	f7ff fefd 	bl	8004c64 <NRF24L01_WriteRegister>
}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	b002      	add	sp, #8
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	20000450 	.word	0x20000450

08004e78 <NRF24L01_GetStatus>:
uint8_t NRF24L01_RxFifoEmpty(void) {
	uint8_t reg = NRF24L01_ReadRegister(NRF24L01_REG_FIFO_STATUS);
	return NRF24L01_CHECK_BIT(reg, NRF24L01_RX_EMPTY);
}

uint8_t NRF24L01_GetStatus(void) {
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
	uint8_t status;
	
	NRF24L01_CSN_LOW;
 8004e7e:	2390      	movs	r3, #144	; 0x90
 8004e80:	05db      	lsls	r3, r3, #23
 8004e82:	2200      	movs	r2, #0
 8004e84:	2110      	movs	r1, #16
 8004e86:	0018      	movs	r0, r3
 8004e88:	f001 fd32 	bl	80068f0 <HAL_GPIO_WritePin>
	/* First received byte is always status register */
	status = NRF24L01_SPI_Send(NRF24L01_NOP_MASK);
 8004e8c:	1dfc      	adds	r4, r7, #7
 8004e8e:	20ff      	movs	r0, #255	; 0xff
 8004e90:	f000 f952 	bl	8005138 <NRF24L01_SPI_Send>
 8004e94:	0003      	movs	r3, r0
 8004e96:	7023      	strb	r3, [r4, #0]
	/* Pull up chip select */
	NRF24L01_CSN_HIGH;
 8004e98:	2390      	movs	r3, #144	; 0x90
 8004e9a:	05db      	lsls	r3, r3, #23
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2110      	movs	r1, #16
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f001 fd25 	bl	80068f0 <HAL_GPIO_WritePin>
	
	return status;
 8004ea6:	1dfb      	adds	r3, r7, #7
 8004ea8:	781b      	ldrb	r3, [r3, #0]
}
 8004eaa:	0018      	movs	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b003      	add	sp, #12
 8004eb0:	bd90      	pop	{r4, r7, pc}

08004eb2 <NRF24L01_GetTransmissionStatus>:

NRF24L01_Transmit_Status_t NRF24L01_GetTransmissionStatus(void) {
 8004eb2:	b590      	push	{r4, r7, lr}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
	uint8_t status = NRF24L01_GetStatus();
 8004eb8:	1dfc      	adds	r4, r7, #7
 8004eba:	f7ff ffdd 	bl	8004e78 <NRF24L01_GetStatus>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	7023      	strb	r3, [r4, #0]
	if (NRF24L01_CHECK_BIT(status, NRF24L01_TX_DS)) {
 8004ec2:	1dfb      	adds	r3, r7, #7
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d001      	beq.n	8004ed0 <NRF24L01_GetTransmissionStatus+0x1e>
		/* Successfully sent */
		return NRF24L01_Transmit_Status_Ok;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e007      	b.n	8004ee0 <NRF24L01_GetTransmissionStatus+0x2e>
	} else if (NRF24L01_CHECK_BIT(status, NRF24L01_MAX_RT)) {
 8004ed0:	1dfb      	adds	r3, r7, #7
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d001      	beq.n	8004ede <NRF24L01_GetTransmissionStatus+0x2c>
		/* Message lost */
		return NRF24L01_Transmit_Status_Lost;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e000      	b.n	8004ee0 <NRF24L01_GetTransmissionStatus+0x2e>
	}
	
	/* Still sending */
	return NRF24L01_Transmit_Status_Sending;
 8004ede:	23ff      	movs	r3, #255	; 0xff
}
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b003      	add	sp, #12
 8004ee6:	bd90      	pop	{r4, r7, pc}

08004ee8 <NRF24L01_SoftwareReset>:

void NRF24L01_SoftwareReset(void) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
	uint8_t data[5];
	
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, 		NRF24L01_REG_DEFAULT_VAL_CONFIG);
 8004eee:	2108      	movs	r1, #8
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f7ff feb7 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_EN_AA,		NRF24L01_REG_DEFAULT_VAL_EN_AA);
 8004ef6:	213f      	movs	r1, #63	; 0x3f
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f7ff feb3 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, 	NRF24L01_REG_DEFAULT_VAL_EN_RXADDR);
 8004efe:	2103      	movs	r1, #3
 8004f00:	2002      	movs	r0, #2
 8004f02:	f7ff feaf 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_AW, 	NRF24L01_REG_DEFAULT_VAL_SETUP_AW);
 8004f06:	2103      	movs	r1, #3
 8004f08:	2003      	movs	r0, #3
 8004f0a:	f7ff feab 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, 	NRF24L01_REG_DEFAULT_VAL_SETUP_RETR);
 8004f0e:	2103      	movs	r1, #3
 8004f10:	2004      	movs	r0, #4
 8004f12:	f7ff fea7 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RF_CH, 		NRF24L01_REG_DEFAULT_VAL_RF_CH);
 8004f16:	2102      	movs	r1, #2
 8004f18:	2005      	movs	r0, #5
 8004f1a:	f7ff fea3 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RF_SETUP, 	NRF24L01_REG_DEFAULT_VAL_RF_SETUP);
 8004f1e:	210e      	movs	r1, #14
 8004f20:	2006      	movs	r0, #6
 8004f22:	f7ff fe9f 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_STATUS, 		NRF24L01_REG_DEFAULT_VAL_STATUS);
 8004f26:	210e      	movs	r1, #14
 8004f28:	2007      	movs	r0, #7
 8004f2a:	f7ff fe9b 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_OBSERVE_TX, 	NRF24L01_REG_DEFAULT_VAL_OBSERVE_TX);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	2008      	movs	r0, #8
 8004f32:	f7ff fe97 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RPD, 		NRF24L01_REG_DEFAULT_VAL_RPD);
 8004f36:	2100      	movs	r1, #0
 8004f38:	2009      	movs	r0, #9
 8004f3a:	f7ff fe93 	bl	8004c64 <NRF24L01_WriteRegister>
	
	//P0
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_0;
 8004f3e:	003b      	movs	r3, r7
 8004f40:	22e7      	movs	r2, #231	; 0xe7
 8004f42:	701a      	strb	r2, [r3, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_1;
 8004f44:	003b      	movs	r3, r7
 8004f46:	22e7      	movs	r2, #231	; 0xe7
 8004f48:	705a      	strb	r2, [r3, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_2;
 8004f4a:	003b      	movs	r3, r7
 8004f4c:	22e7      	movs	r2, #231	; 0xe7
 8004f4e:	709a      	strb	r2, [r3, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_3;
 8004f50:	003b      	movs	r3, r7
 8004f52:	22e7      	movs	r2, #231	; 0xe7
 8004f54:	70da      	strb	r2, [r3, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_4;
 8004f56:	003b      	movs	r3, r7
 8004f58:	22e7      	movs	r2, #231	; 0xe7
 8004f5a:	711a      	strb	r2, [r3, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P0, data, 5);
 8004f5c:	003b      	movs	r3, r7
 8004f5e:	2205      	movs	r2, #5
 8004f60:	0019      	movs	r1, r3
 8004f62:	200a      	movs	r0, #10
 8004f64:	f7ff feb0 	bl	8004cc8 <NRF24L01_WriteRegisterMulti>
	
	//P1
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_0;
 8004f68:	003b      	movs	r3, r7
 8004f6a:	22c2      	movs	r2, #194	; 0xc2
 8004f6c:	701a      	strb	r2, [r3, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_1;
 8004f6e:	003b      	movs	r3, r7
 8004f70:	22c2      	movs	r2, #194	; 0xc2
 8004f72:	705a      	strb	r2, [r3, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_2;
 8004f74:	003b      	movs	r3, r7
 8004f76:	22c2      	movs	r2, #194	; 0xc2
 8004f78:	709a      	strb	r2, [r3, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_3;
 8004f7a:	003b      	movs	r3, r7
 8004f7c:	22c2      	movs	r2, #194	; 0xc2
 8004f7e:	70da      	strb	r2, [r3, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_4;
 8004f80:	003b      	movs	r3, r7
 8004f82:	22c2      	movs	r2, #194	; 0xc2
 8004f84:	711a      	strb	r2, [r3, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P1, data, 5);
 8004f86:	003b      	movs	r3, r7
 8004f88:	2205      	movs	r2, #5
 8004f8a:	0019      	movs	r1, r3
 8004f8c:	200b      	movs	r0, #11
 8004f8e:	f7ff fe9b 	bl	8004cc8 <NRF24L01_WriteRegisterMulti>
	
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P2, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P2);
 8004f92:	21c3      	movs	r1, #195	; 0xc3
 8004f94:	200c      	movs	r0, #12
 8004f96:	f7ff fe65 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P3, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P3);
 8004f9a:	21c4      	movs	r1, #196	; 0xc4
 8004f9c:	200d      	movs	r0, #13
 8004f9e:	f7ff fe61 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P4, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P4);
 8004fa2:	21c5      	movs	r1, #197	; 0xc5
 8004fa4:	200e      	movs	r0, #14
 8004fa6:	f7ff fe5d 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P5, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P5);
 8004faa:	21c6      	movs	r1, #198	; 0xc6
 8004fac:	200f      	movs	r0, #15
 8004fae:	f7ff fe59 	bl	8004c64 <NRF24L01_WriteRegister>
	
	//TX
	data[0] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_0;
 8004fb2:	003b      	movs	r3, r7
 8004fb4:	22e7      	movs	r2, #231	; 0xe7
 8004fb6:	701a      	strb	r2, [r3, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_1;
 8004fb8:	003b      	movs	r3, r7
 8004fba:	22e7      	movs	r2, #231	; 0xe7
 8004fbc:	705a      	strb	r2, [r3, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_2;
 8004fbe:	003b      	movs	r3, r7
 8004fc0:	22e7      	movs	r2, #231	; 0xe7
 8004fc2:	709a      	strb	r2, [r3, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_3;
 8004fc4:	003b      	movs	r3, r7
 8004fc6:	22e7      	movs	r2, #231	; 0xe7
 8004fc8:	70da      	strb	r2, [r3, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_4;
 8004fca:	003b      	movs	r3, r7
 8004fcc:	22e7      	movs	r2, #231	; 0xe7
 8004fce:	711a      	strb	r2, [r3, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_TX_ADDR, data, 5);
 8004fd0:	003b      	movs	r3, r7
 8004fd2:	2205      	movs	r2, #5
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	2010      	movs	r0, #16
 8004fd8:	f7ff fe76 	bl	8004cc8 <NRF24L01_WriteRegisterMulti>
	
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P0, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P0);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	2011      	movs	r0, #17
 8004fe0:	f7ff fe40 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P1, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P1);
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	2012      	movs	r0, #18
 8004fe8:	f7ff fe3c 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P2, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P2);
 8004fec:	2100      	movs	r1, #0
 8004fee:	2013      	movs	r0, #19
 8004ff0:	f7ff fe38 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P3, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P3);
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	2014      	movs	r0, #20
 8004ff8:	f7ff fe34 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P4, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P4);
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	2015      	movs	r0, #21
 8005000:	f7ff fe30 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P5, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P5);
 8005004:	2100      	movs	r1, #0
 8005006:	2016      	movs	r0, #22
 8005008:	f7ff fe2c 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_FIFO_STATUS, NRF24L01_REG_DEFAULT_VAL_FIFO_STATUS);
 800500c:	2111      	movs	r1, #17
 800500e:	2017      	movs	r0, #23
 8005010:	f7ff fe28 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_DYNPD, 		NRF24L01_REG_DEFAULT_VAL_DYNPD);
 8005014:	2100      	movs	r1, #0
 8005016:	201c      	movs	r0, #28
 8005018:	f7ff fe24 	bl	8004c64 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_FEATURE, 	NRF24L01_REG_DEFAULT_VAL_FEATURE);
 800501c:	2100      	movs	r1, #0
 800501e:	201d      	movs	r0, #29
 8005020:	f7ff fe20 	bl	8004c64 <NRF24L01_WriteRegister>
}
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b002      	add	sp, #8
 800502a:	bd80      	pop	{r7, pc}

0800502c <NRF24L01_SetChannel>:
uint8_t NRF24L01_GetRetransmissionsCount(void) {
	/* Low 4 bits */
	return NRF24L01_ReadRegister(NRF24L01_REG_OBSERVE_TX) & 0x0F;
}

void NRF24L01_SetChannel(uint8_t channel) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	0002      	movs	r2, r0
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	701a      	strb	r2, [r3, #0]
	if (channel <= 125 && channel != NRF24L01_Struct.Channel) {
 8005038:	1dfb      	adds	r3, r7, #7
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b7d      	cmp	r3, #125	; 0x7d
 800503e:	d80f      	bhi.n	8005060 <NRF24L01_SetChannel+0x34>
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <NRF24L01_SetChannel+0x3c>)
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	1dfa      	adds	r2, r7, #7
 8005046:	7812      	ldrb	r2, [r2, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d009      	beq.n	8005060 <NRF24L01_SetChannel+0x34>
		/* Store new channel setting */
		NRF24L01_Struct.Channel = channel;
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <NRF24L01_SetChannel+0x3c>)
 800504e:	1dfa      	adds	r2, r7, #7
 8005050:	7812      	ldrb	r2, [r2, #0]
 8005052:	705a      	strb	r2, [r3, #1]
		/* Write channel */
		NRF24L01_WriteRegister(NRF24L01_REG_RF_CH, channel);
 8005054:	1dfb      	adds	r3, r7, #7
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	0019      	movs	r1, r3
 800505a:	2005      	movs	r0, #5
 800505c:	f7ff fe02 	bl	8004c64 <NRF24L01_WriteRegister>
	}
}
 8005060:	46c0      	nop			; (mov r8, r8)
 8005062:	46bd      	mov	sp, r7
 8005064:	b002      	add	sp, #8
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000450 	.word	0x20000450

0800506c <NRF24L01_SetRF>:

void NRF24L01_SetRF(NRF24L01_DataRate_t DataRate, NRF24L01_OutputPower_t OutPwr) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	0002      	movs	r2, r0
 8005074:	1dfb      	adds	r3, r7, #7
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	1dbb      	adds	r3, r7, #6
 800507a:	1c0a      	adds	r2, r1, #0
 800507c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 800507e:	230f      	movs	r3, #15
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
	NRF24L01_Struct.DataRate = DataRate;
 8005086:	4b26      	ldr	r3, [pc, #152]	; (8005120 <NRF24L01_SetRF+0xb4>)
 8005088:	1dfa      	adds	r2, r7, #7
 800508a:	7812      	ldrb	r2, [r2, #0]
 800508c:	70da      	strb	r2, [r3, #3]
	NRF24L01_Struct.OutPwr = OutPwr;
 800508e:	4b24      	ldr	r3, [pc, #144]	; (8005120 <NRF24L01_SetRF+0xb4>)
 8005090:	1dba      	adds	r2, r7, #6
 8005092:	7812      	ldrb	r2, [r2, #0]
 8005094:	709a      	strb	r2, [r3, #2]
	
	if (DataRate == NRF24L01_DataRate_2M) {
 8005096:	1dfb      	adds	r3, r7, #7
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d107      	bne.n	80050ae <NRF24L01_SetRF+0x42>
		tmp |= 1 << NRF24L01_RF_DR_HIGH;
 800509e:	220f      	movs	r2, #15
 80050a0:	18bb      	adds	r3, r7, r2
 80050a2:	18ba      	adds	r2, r7, r2
 80050a4:	7812      	ldrb	r2, [r2, #0]
 80050a6:	2108      	movs	r1, #8
 80050a8:	430a      	orrs	r2, r1
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	e00a      	b.n	80050c4 <NRF24L01_SetRF+0x58>
	} else if (DataRate == NRF24L01_DataRate_250k) {
 80050ae:	1dfb      	adds	r3, r7, #7
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d106      	bne.n	80050c4 <NRF24L01_SetRF+0x58>
		tmp |= 1 << NRF24L01_RF_DR_LOW;
 80050b6:	220f      	movs	r2, #15
 80050b8:	18bb      	adds	r3, r7, r2
 80050ba:	18ba      	adds	r2, r7, r2
 80050bc:	7812      	ldrb	r2, [r2, #0]
 80050be:	2120      	movs	r1, #32
 80050c0:	430a      	orrs	r2, r1
 80050c2:	701a      	strb	r2, [r3, #0]
	}
	/* If 1Mbps, all bits set to 0 */
	
	if (OutPwr == NRF24L01_OutputPower_0dBm) {
 80050c4:	1dbb      	adds	r3, r7, #6
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d107      	bne.n	80050dc <NRF24L01_SetRF+0x70>
		tmp |= 3 << NRF24L01_RF_PWR;
 80050cc:	220f      	movs	r2, #15
 80050ce:	18bb      	adds	r3, r7, r2
 80050d0:	18ba      	adds	r2, r7, r2
 80050d2:	7812      	ldrb	r2, [r2, #0]
 80050d4:	2106      	movs	r1, #6
 80050d6:	430a      	orrs	r2, r1
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e016      	b.n	800510a <NRF24L01_SetRF+0x9e>
	} else if (OutPwr == NRF24L01_OutputPower_M6dBm) {
 80050dc:	1dbb      	adds	r3, r7, #6
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d107      	bne.n	80050f4 <NRF24L01_SetRF+0x88>
		tmp |= 2 << NRF24L01_RF_PWR;
 80050e4:	220f      	movs	r2, #15
 80050e6:	18bb      	adds	r3, r7, r2
 80050e8:	18ba      	adds	r2, r7, r2
 80050ea:	7812      	ldrb	r2, [r2, #0]
 80050ec:	2104      	movs	r1, #4
 80050ee:	430a      	orrs	r2, r1
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	e00a      	b.n	800510a <NRF24L01_SetRF+0x9e>
	} else if (OutPwr == NRF24L01_OutputPower_M12dBm) {
 80050f4:	1dbb      	adds	r3, r7, #6
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d106      	bne.n	800510a <NRF24L01_SetRF+0x9e>
		tmp |= 1 << NRF24L01_RF_PWR;
 80050fc:	220f      	movs	r2, #15
 80050fe:	18bb      	adds	r3, r7, r2
 8005100:	18ba      	adds	r2, r7, r2
 8005102:	7812      	ldrb	r2, [r2, #0]
 8005104:	2102      	movs	r1, #2
 8005106:	430a      	orrs	r2, r1
 8005108:	701a      	strb	r2, [r3, #0]
	}
	
	NRF24L01_WriteRegister(NRF24L01_REG_RF_SETUP, tmp);
 800510a:	230f      	movs	r3, #15
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	0019      	movs	r1, r3
 8005112:	2006      	movs	r0, #6
 8005114:	f7ff fda6 	bl	8004c64 <NRF24L01_WriteRegister>
}
 8005118:	46c0      	nop			; (mov r8, r8)
 800511a:	46bd      	mov	sp, r7
 800511c:	b004      	add	sp, #16
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20000450 	.word	0x20000450

08005124 <NRF24L01_Clear_Interrupts>:
uint8_t NRF24L01_Read_Interrupts(NRF24L01_IRQ_t* IRQ) {
	IRQ->Status = NRF24L01_GetStatus();
	return IRQ->Status;
}

uint8_t NRF24L01_Clear_Interrupts(void) {
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
	return NRF24L01_WriteRegister(0x07, 0x70);
 8005128:	2170      	movs	r1, #112	; 0x70
 800512a:	2007      	movs	r0, #7
 800512c:	f7ff fd9a 	bl	8004c64 <NRF24L01_WriteRegister>
 8005130:	0003      	movs	r3, r0
}
 8005132:	0018      	movs	r0, r3
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <NRF24L01_SPI_Send>:
extern SPI_HandleTypeDef NRF24L01_SPI_HANDLE;



uint8_t NRF24L01_SPI_Send(uint8_t data)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	0002      	movs	r2, r0
 8005140:	1dfb      	adds	r3, r7, #7
 8005142:	701a      	strb	r2, [r3, #0]
	while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 8005144:	46c0      	nop			; (mov r8, r8)
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <NRF24L01_SPI_Send+0x50>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2202      	movs	r2, #2
 800514e:	4013      	ands	r3, r2
 8005150:	d0f9      	beq.n	8005146 <NRF24L01_SPI_Send+0xe>
	*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = data;
 8005152:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <NRF24L01_SPI_Send+0x50>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	1dfa      	adds	r2, r7, #7
 800515a:	7812      	ldrb	r2, [r2, #0]
 800515c:	701a      	strb	r2, [r3, #0]
	while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <NRF24L01_SPI_Send+0x50>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2201      	movs	r2, #1
 8005168:	4013      	ands	r3, r2
 800516a:	d0f9      	beq.n	8005160 <NRF24L01_SPI_Send+0x28>
	data = *(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <NRF24L01_SPI_Send+0x50>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	001a      	movs	r2, r3
 8005174:	1dfb      	adds	r3, r7, #7
 8005176:	7812      	ldrb	r2, [r2, #0]
 8005178:	701a      	strb	r2, [r3, #0]

	return data;
 800517a:	1dfb      	adds	r3, r7, #7
 800517c:	781b      	ldrb	r3, [r3, #0]
}
 800517e:	0018      	movs	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	b002      	add	sp, #8
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	2000011c 	.word	0x2000011c

0800518c <NRF24L01_SPI_WriteMulti>:



void NRF24L01_SPI_WriteMulti(uint8_t* dataOut, uint32_t count)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
	while(count > 0)
 8005196:	e01d      	b.n	80051d4 <NRF24L01_SPI_WriteMulti+0x48>
	{
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <NRF24L01_SPI_WriteMulti+0x58>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2202      	movs	r2, #2
 80051a2:	4013      	ands	r3, r2
 80051a4:	d0f9      	beq.n	800519a <NRF24L01_SPI_WriteMulti+0xe>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = *dataOut;
 80051a6:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <NRF24L01_SPI_WriteMulti+0x58>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	7812      	ldrb	r2, [r2, #0]
 80051b0:	701a      	strb	r2, [r3, #0]
		dataOut++;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3301      	adds	r3, #1
 80051b6:	607b      	str	r3, [r7, #4]
		count--;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	603b      	str	r3, [r7, #0]
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <NRF24L01_SPI_WriteMulti+0x58>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2201      	movs	r2, #1
 80051c8:	4013      	ands	r3, r2
 80051ca:	d0f9      	beq.n	80051c0 <NRF24L01_SPI_WriteMulti+0x34>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <NRF24L01_SPI_WriteMulti+0x58>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	781b      	ldrb	r3, [r3, #0]
	while(count > 0)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1de      	bne.n	8005198 <NRF24L01_SPI_WriteMulti+0xc>
	}
}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	46bd      	mov	sp, r7
 80051de:	b002      	add	sp, #8
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	2000011c 	.word	0x2000011c

080051e8 <NRF24L01_SPI_SendMulti>:
	}
}


void NRF24L01_SPI_SendMulti(uint8_t* dataOut, uint8_t* dataIn, uint32_t count)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
	while(count > 0)
 80051f4:	e023      	b.n	800523e <NRF24L01_SPI_SendMulti+0x56>
	{
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	4b14      	ldr	r3, [pc, #80]	; (800524c <NRF24L01_SPI_SendMulti+0x64>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2202      	movs	r2, #2
 8005200:	4013      	ands	r3, r2
 8005202:	d0f9      	beq.n	80051f8 <NRF24L01_SPI_SendMulti+0x10>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = *dataOut;
 8005204:	4b11      	ldr	r3, [pc, #68]	; (800524c <NRF24L01_SPI_SendMulti+0x64>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	701a      	strb	r2, [r3, #0]
		dataOut++;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
		count--;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3b01      	subs	r3, #1
 800521a:	607b      	str	r3, [r7, #4]
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <NRF24L01_SPI_SendMulti+0x64>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2201      	movs	r2, #1
 8005226:	4013      	ands	r3, r2
 8005228:	d0f9      	beq.n	800521e <NRF24L01_SPI_SendMulti+0x36>
		*dataIn = *(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 800522a:	4b08      	ldr	r3, [pc, #32]	; (800524c <NRF24L01_SPI_SendMulti+0x64>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	330c      	adds	r3, #12
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	b2da      	uxtb	r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	701a      	strb	r2, [r3, #0]
		dataIn++;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	3301      	adds	r3, #1
 800523c:	60bb      	str	r3, [r7, #8]
	while(count > 0)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1d8      	bne.n	80051f6 <NRF24L01_SPI_SendMulti+0xe>
	}
}
 8005244:	46c0      	nop			; (mov r8, r8)
 8005246:	46bd      	mov	sp, r7
 8005248:	b004      	add	sp, #16
 800524a:	bd80      	pop	{r7, pc}
 800524c:	2000011c 	.word	0x2000011c

08005250 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005256:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <HAL_MspInit+0x44>)
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <HAL_MspInit+0x44>)
 800525c:	2101      	movs	r1, #1
 800525e:	430a      	orrs	r2, r1
 8005260:	619a      	str	r2, [r3, #24]
 8005262:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <HAL_MspInit+0x44>)
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2201      	movs	r2, #1
 8005268:	4013      	ands	r3, r2
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	4b09      	ldr	r3, [pc, #36]	; (8005294 <HAL_MspInit+0x44>)
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	4b08      	ldr	r3, [pc, #32]	; (8005294 <HAL_MspInit+0x44>)
 8005274:	2180      	movs	r1, #128	; 0x80
 8005276:	0549      	lsls	r1, r1, #21
 8005278:	430a      	orrs	r2, r1
 800527a:	61da      	str	r2, [r3, #28]
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_MspInit+0x44>)
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	055b      	lsls	r3, r3, #21
 8005284:	4013      	ands	r3, r2
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	46bd      	mov	sp, r7
 800528e:	b002      	add	sp, #8
 8005290:	bd80      	pop	{r7, pc}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	40021000 	.word	0x40021000

08005298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	; 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a0:	2314      	movs	r3, #20
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	0018      	movs	r0, r3
 80052a6:	2314      	movs	r3, #20
 80052a8:	001a      	movs	r2, r3
 80052aa:	2100      	movs	r1, #0
 80052ac:	f003 fd1c 	bl	8008ce8 <memset>
  if(hadc->Instance==ADC1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a19      	ldr	r2, [pc, #100]	; (800531c <HAL_ADC_MspInit+0x84>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d12c      	bne.n	8005314 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80052ba:	4b19      	ldr	r3, [pc, #100]	; (8005320 <HAL_ADC_MspInit+0x88>)
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	4b18      	ldr	r3, [pc, #96]	; (8005320 <HAL_ADC_MspInit+0x88>)
 80052c0:	2180      	movs	r1, #128	; 0x80
 80052c2:	0089      	lsls	r1, r1, #2
 80052c4:	430a      	orrs	r2, r1
 80052c6:	619a      	str	r2, [r3, #24]
 80052c8:	4b15      	ldr	r3, [pc, #84]	; (8005320 <HAL_ADC_MspInit+0x88>)
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4013      	ands	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d6:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_ADC_MspInit+0x88>)
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	4b11      	ldr	r3, [pc, #68]	; (8005320 <HAL_ADC_MspInit+0x88>)
 80052dc:	2180      	movs	r1, #128	; 0x80
 80052de:	0289      	lsls	r1, r1, #10
 80052e0:	430a      	orrs	r2, r1
 80052e2:	615a      	str	r2, [r3, #20]
 80052e4:	4b0e      	ldr	r3, [pc, #56]	; (8005320 <HAL_ADC_MspInit+0x88>)
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	2380      	movs	r3, #128	; 0x80
 80052ea:	029b      	lsls	r3, r3, #10
 80052ec:	4013      	ands	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = TEMP_Pin;
 80052f2:	2114      	movs	r1, #20
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	2202      	movs	r2, #2
 80052f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052fa:	187b      	adds	r3, r7, r1
 80052fc:	2203      	movs	r2, #3
 80052fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005300:	187b      	adds	r3, r7, r1
 8005302:	2200      	movs	r2, #0
 8005304:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);
 8005306:	187a      	adds	r2, r7, r1
 8005308:	2390      	movs	r3, #144	; 0x90
 800530a:	05db      	lsls	r3, r3, #23
 800530c:	0011      	movs	r1, r2
 800530e:	0018      	movs	r0, r3
 8005310:	f001 f97e 	bl	8006610 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005314:	46c0      	nop			; (mov r8, r8)
 8005316:	46bd      	mov	sp, r7
 8005318:	b00a      	add	sp, #40	; 0x28
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40012400 	.word	0x40012400
 8005320:	40021000 	.word	0x40021000

08005324 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	; 0x28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800532c:	2314      	movs	r3, #20
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	0018      	movs	r0, r3
 8005332:	2314      	movs	r3, #20
 8005334:	001a      	movs	r2, r3
 8005336:	2100      	movs	r1, #0
 8005338:	f003 fcd6 	bl	8008ce8 <memset>
  if(hspi->Instance==SPI1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a43      	ldr	r2, [pc, #268]	; (8005450 <HAL_SPI_MspInit+0x12c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d000      	beq.n	8005348 <HAL_SPI_MspInit+0x24>
 8005346:	e07e      	b.n	8005446 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005348:	4b42      	ldr	r3, [pc, #264]	; (8005454 <HAL_SPI_MspInit+0x130>)
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	4b41      	ldr	r3, [pc, #260]	; (8005454 <HAL_SPI_MspInit+0x130>)
 800534e:	2180      	movs	r1, #128	; 0x80
 8005350:	0149      	lsls	r1, r1, #5
 8005352:	430a      	orrs	r2, r1
 8005354:	619a      	str	r2, [r3, #24]
 8005356:	4b3f      	ldr	r3, [pc, #252]	; (8005454 <HAL_SPI_MspInit+0x130>)
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	015b      	lsls	r3, r3, #5
 800535e:	4013      	ands	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005364:	4b3b      	ldr	r3, [pc, #236]	; (8005454 <HAL_SPI_MspInit+0x130>)
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	4b3a      	ldr	r3, [pc, #232]	; (8005454 <HAL_SPI_MspInit+0x130>)
 800536a:	2180      	movs	r1, #128	; 0x80
 800536c:	0289      	lsls	r1, r1, #10
 800536e:	430a      	orrs	r2, r1
 8005370:	615a      	str	r2, [r3, #20]
 8005372:	4b38      	ldr	r3, [pc, #224]	; (8005454 <HAL_SPI_MspInit+0x130>)
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	029b      	lsls	r3, r3, #10
 800537a:	4013      	ands	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = NRF_CSN_Pin|NRF_SCK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 8005380:	2114      	movs	r1, #20
 8005382:	187b      	adds	r3, r7, r1
 8005384:	22f0      	movs	r2, #240	; 0xf0
 8005386:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005388:	187b      	adds	r3, r7, r1
 800538a:	2202      	movs	r2, #2
 800538c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538e:	187b      	adds	r3, r7, r1
 8005390:	2200      	movs	r2, #0
 8005392:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005394:	187b      	adds	r3, r7, r1
 8005396:	2203      	movs	r2, #3
 8005398:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800539a:	187b      	adds	r3, r7, r1
 800539c:	2200      	movs	r2, #0
 800539e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a0:	187a      	adds	r2, r7, r1
 80053a2:	2390      	movs	r3, #144	; 0x90
 80053a4:	05db      	lsls	r3, r3, #23
 80053a6:	0011      	movs	r1, r2
 80053a8:	0018      	movs	r0, r3
 80053aa:	f001 f931 	bl	8006610 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80053ae:	4b2a      	ldr	r3, [pc, #168]	; (8005458 <HAL_SPI_MspInit+0x134>)
 80053b0:	4a2a      	ldr	r2, [pc, #168]	; (800545c <HAL_SPI_MspInit+0x138>)
 80053b2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053b4:	4b28      	ldr	r3, [pc, #160]	; (8005458 <HAL_SPI_MspInit+0x134>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053ba:	4b27      	ldr	r3, [pc, #156]	; (8005458 <HAL_SPI_MspInit+0x134>)
 80053bc:	2200      	movs	r2, #0
 80053be:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053c0:	4b25      	ldr	r3, [pc, #148]	; (8005458 <HAL_SPI_MspInit+0x134>)
 80053c2:	2280      	movs	r2, #128	; 0x80
 80053c4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <HAL_SPI_MspInit+0x134>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053cc:	4b22      	ldr	r3, [pc, #136]	; (8005458 <HAL_SPI_MspInit+0x134>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80053d2:	4b21      	ldr	r3, [pc, #132]	; (8005458 <HAL_SPI_MspInit+0x134>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053d8:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <HAL_SPI_MspInit+0x134>)
 80053da:	2200      	movs	r2, #0
 80053dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80053de:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <HAL_SPI_MspInit+0x134>)
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 ff7d 	bl	80062e0 <HAL_DMA_Init>
 80053e6:	1e03      	subs	r3, r0, #0
 80053e8:	d001      	beq.n	80053ee <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80053ea:	f7ff fb83 	bl	8004af4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a19      	ldr	r2, [pc, #100]	; (8005458 <HAL_SPI_MspInit+0x134>)
 80053f2:	659a      	str	r2, [r3, #88]	; 0x58
 80053f4:	4b18      	ldr	r3, [pc, #96]	; (8005458 <HAL_SPI_MspInit+0x134>)
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80053fa:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_SPI_MspInit+0x13c>)
 80053fc:	4a19      	ldr	r2, [pc, #100]	; (8005464 <HAL_SPI_MspInit+0x140>)
 80053fe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005400:	4b17      	ldr	r3, [pc, #92]	; (8005460 <HAL_SPI_MspInit+0x13c>)
 8005402:	2210      	movs	r2, #16
 8005404:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005406:	4b16      	ldr	r3, [pc, #88]	; (8005460 <HAL_SPI_MspInit+0x13c>)
 8005408:	2200      	movs	r2, #0
 800540a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800540c:	4b14      	ldr	r3, [pc, #80]	; (8005460 <HAL_SPI_MspInit+0x13c>)
 800540e:	2280      	movs	r2, #128	; 0x80
 8005410:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005412:	4b13      	ldr	r3, [pc, #76]	; (8005460 <HAL_SPI_MspInit+0x13c>)
 8005414:	2200      	movs	r2, #0
 8005416:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005418:	4b11      	ldr	r3, [pc, #68]	; (8005460 <HAL_SPI_MspInit+0x13c>)
 800541a:	2200      	movs	r2, #0
 800541c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800541e:	4b10      	ldr	r3, [pc, #64]	; (8005460 <HAL_SPI_MspInit+0x13c>)
 8005420:	2200      	movs	r2, #0
 8005422:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <HAL_SPI_MspInit+0x13c>)
 8005426:	2200      	movs	r2, #0
 8005428:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <HAL_SPI_MspInit+0x13c>)
 800542c:	0018      	movs	r0, r3
 800542e:	f000 ff57 	bl	80062e0 <HAL_DMA_Init>
 8005432:	1e03      	subs	r3, r0, #0
 8005434:	d001      	beq.n	800543a <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 8005436:	f7ff fb5d 	bl	8004af4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a08      	ldr	r2, [pc, #32]	; (8005460 <HAL_SPI_MspInit+0x13c>)
 800543e:	655a      	str	r2, [r3, #84]	; 0x54
 8005440:	4b07      	ldr	r3, [pc, #28]	; (8005460 <HAL_SPI_MspInit+0x13c>)
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	46bd      	mov	sp, r7
 800544a:	b00a      	add	sp, #40	; 0x28
 800544c:	bd80      	pop	{r7, pc}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	40013000 	.word	0x40013000
 8005454:	40021000 	.word	0x40021000
 8005458:	20000180 	.word	0x20000180
 800545c:	4002001c 	.word	0x4002001c
 8005460:	200001c4 	.word	0x200001c4
 8005464:	40020030 	.word	0x40020030

08005468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1d      	ldr	r2, [pc, #116]	; (80054ec <HAL_TIM_Base_MspInit+0x84>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d10e      	bne.n	8005498 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800547a:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <HAL_TIM_Base_MspInit+0x88>)
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <HAL_TIM_Base_MspInit+0x88>)
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	0109      	lsls	r1, r1, #4
 8005484:	430a      	orrs	r2, r1
 8005486:	619a      	str	r2, [r3, #24]
 8005488:	4b19      	ldr	r3, [pc, #100]	; (80054f0 <HAL_TIM_Base_MspInit+0x88>)
 800548a:	699a      	ldr	r2, [r3, #24]
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	4013      	ands	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005496:	e024      	b.n	80054e2 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM3)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a15      	ldr	r2, [pc, #84]	; (80054f4 <HAL_TIM_Base_MspInit+0x8c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d10c      	bne.n	80054bc <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <HAL_TIM_Base_MspInit+0x88>)
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_TIM_Base_MspInit+0x88>)
 80054a8:	2102      	movs	r1, #2
 80054aa:	430a      	orrs	r2, r1
 80054ac:	61da      	str	r2, [r3, #28]
 80054ae:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <HAL_TIM_Base_MspInit+0x88>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	2202      	movs	r2, #2
 80054b4:	4013      	ands	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	693b      	ldr	r3, [r7, #16]
}
 80054ba:	e012      	b.n	80054e2 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM17)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a0d      	ldr	r2, [pc, #52]	; (80054f8 <HAL_TIM_Base_MspInit+0x90>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d10d      	bne.n	80054e2 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <HAL_TIM_Base_MspInit+0x88>)
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_TIM_Base_MspInit+0x88>)
 80054cc:	2180      	movs	r1, #128	; 0x80
 80054ce:	02c9      	lsls	r1, r1, #11
 80054d0:	430a      	orrs	r2, r1
 80054d2:	619a      	str	r2, [r3, #24]
 80054d4:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <HAL_TIM_Base_MspInit+0x88>)
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	02db      	lsls	r3, r3, #11
 80054dc:	4013      	ands	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b006      	add	sp, #24
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40014800 	.word	0x40014800

080054fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	; 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005504:	2314      	movs	r3, #20
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	0018      	movs	r0, r3
 800550a:	2314      	movs	r3, #20
 800550c:	001a      	movs	r2, r3
 800550e:	2100      	movs	r1, #0
 8005510:	f003 fbea 	bl	8008ce8 <memset>
  if(htim->Instance==TIM1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a40      	ldr	r2, [pc, #256]	; (800561c <HAL_TIM_MspPostInit+0x120>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d126      	bne.n	800556c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800551e:	4b40      	ldr	r3, [pc, #256]	; (8005620 <HAL_TIM_MspPostInit+0x124>)
 8005520:	695a      	ldr	r2, [r3, #20]
 8005522:	4b3f      	ldr	r3, [pc, #252]	; (8005620 <HAL_TIM_MspPostInit+0x124>)
 8005524:	2180      	movs	r1, #128	; 0x80
 8005526:	0289      	lsls	r1, r1, #10
 8005528:	430a      	orrs	r2, r1
 800552a:	615a      	str	r2, [r3, #20]
 800552c:	4b3c      	ldr	r3, [pc, #240]	; (8005620 <HAL_TIM_MspPostInit+0x124>)
 800552e:	695a      	ldr	r2, [r3, #20]
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	029b      	lsls	r3, r3, #10
 8005534:	4013      	ands	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = LED_R_FAST_Pin|LED_G_FAST_Pin|LED_B_FAST_Pin|LED_W_FAST_Pin;
 800553a:	2114      	movs	r1, #20
 800553c:	187b      	adds	r3, r7, r1
 800553e:	22f0      	movs	r2, #240	; 0xf0
 8005540:	0112      	lsls	r2, r2, #4
 8005542:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005544:	187b      	adds	r3, r7, r1
 8005546:	2202      	movs	r2, #2
 8005548:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554a:	187b      	adds	r3, r7, r1
 800554c:	2200      	movs	r2, #0
 800554e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005550:	187b      	adds	r3, r7, r1
 8005552:	2203      	movs	r2, #3
 8005554:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005556:	187b      	adds	r3, r7, r1
 8005558:	2202      	movs	r2, #2
 800555a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800555c:	187a      	adds	r2, r7, r1
 800555e:	2390      	movs	r3, #144	; 0x90
 8005560:	05db      	lsls	r3, r3, #23
 8005562:	0011      	movs	r1, r2
 8005564:	0018      	movs	r0, r3
 8005566:	f001 f853 	bl	8006610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800556a:	e053      	b.n	8005614 <HAL_TIM_MspPostInit+0x118>
  else if(htim->Instance==TIM3)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <HAL_TIM_MspPostInit+0x128>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d124      	bne.n	80055c0 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005576:	4b2a      	ldr	r3, [pc, #168]	; (8005620 <HAL_TIM_MspPostInit+0x124>)
 8005578:	695a      	ldr	r2, [r3, #20]
 800557a:	4b29      	ldr	r3, [pc, #164]	; (8005620 <HAL_TIM_MspPostInit+0x124>)
 800557c:	2180      	movs	r1, #128	; 0x80
 800557e:	02c9      	lsls	r1, r1, #11
 8005580:	430a      	orrs	r2, r1
 8005582:	615a      	str	r2, [r3, #20]
 8005584:	4b26      	ldr	r3, [pc, #152]	; (8005620 <HAL_TIM_MspPostInit+0x124>)
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	02db      	lsls	r3, r3, #11
 800558c:	4013      	ands	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_R_SLOW_Pin|LED_G_SLOW_Pin|LED_B_SLOW_Pin|LED_W_SLOW_Pin;
 8005592:	2114      	movs	r1, #20
 8005594:	187b      	adds	r3, r7, r1
 8005596:	2233      	movs	r2, #51	; 0x33
 8005598:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800559a:	187b      	adds	r3, r7, r1
 800559c:	2212      	movs	r2, #18
 800559e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a0:	187b      	adds	r3, r7, r1
 80055a2:	2200      	movs	r2, #0
 80055a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a6:	187b      	adds	r3, r7, r1
 80055a8:	2200      	movs	r2, #0
 80055aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80055ac:	187b      	adds	r3, r7, r1
 80055ae:	2201      	movs	r2, #1
 80055b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055b2:	187b      	adds	r3, r7, r1
 80055b4:	4a1c      	ldr	r2, [pc, #112]	; (8005628 <HAL_TIM_MspPostInit+0x12c>)
 80055b6:	0019      	movs	r1, r3
 80055b8:	0010      	movs	r0, r2
 80055ba:	f001 f829 	bl	8006610 <HAL_GPIO_Init>
}
 80055be:	e029      	b.n	8005614 <HAL_TIM_MspPostInit+0x118>
  else if(htim->Instance==TIM17)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a19      	ldr	r2, [pc, #100]	; (800562c <HAL_TIM_MspPostInit+0x130>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d124      	bne.n	8005614 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <HAL_TIM_MspPostInit+0x124>)
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	4b14      	ldr	r3, [pc, #80]	; (8005620 <HAL_TIM_MspPostInit+0x124>)
 80055d0:	2180      	movs	r1, #128	; 0x80
 80055d2:	02c9      	lsls	r1, r1, #11
 80055d4:	430a      	orrs	r2, r1
 80055d6:	615a      	str	r2, [r3, #20]
 80055d8:	4b11      	ldr	r3, [pc, #68]	; (8005620 <HAL_TIM_MspPostInit+0x124>)
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	02db      	lsls	r3, r3, #11
 80055e0:	4013      	ands	r3, r2
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 80055e6:	2114      	movs	r1, #20
 80055e8:	187b      	adds	r3, r7, r1
 80055ea:	2280      	movs	r2, #128	; 0x80
 80055ec:	0092      	lsls	r2, r2, #2
 80055ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f0:	187b      	adds	r3, r7, r1
 80055f2:	2202      	movs	r2, #2
 80055f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055f6:	187b      	adds	r3, r7, r1
 80055f8:	2201      	movs	r2, #1
 80055fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80055fc:	187b      	adds	r3, r7, r1
 80055fe:	2201      	movs	r2, #1
 8005600:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8005602:	187b      	adds	r3, r7, r1
 8005604:	2202      	movs	r2, #2
 8005606:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8005608:	187b      	adds	r3, r7, r1
 800560a:	4a07      	ldr	r2, [pc, #28]	; (8005628 <HAL_TIM_MspPostInit+0x12c>)
 800560c:	0019      	movs	r1, r3
 800560e:	0010      	movs	r0, r2
 8005610:	f000 fffe 	bl	8006610 <HAL_GPIO_Init>
}
 8005614:	46c0      	nop			; (mov r8, r8)
 8005616:	46bd      	mov	sp, r7
 8005618:	b00a      	add	sp, #40	; 0x28
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40021000 	.word	0x40021000
 8005624:	40000400 	.word	0x40000400
 8005628:	48000400 	.word	0x48000400
 800562c:	40014800 	.word	0x40014800

08005630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005630:	b590      	push	{r4, r7, lr}
 8005632:	b08d      	sub	sp, #52	; 0x34
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005638:	231c      	movs	r3, #28
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	0018      	movs	r0, r3
 800563e:	2314      	movs	r3, #20
 8005640:	001a      	movs	r2, r3
 8005642:	2100      	movs	r1, #0
 8005644:	f003 fb50 	bl	8008ce8 <memset>
  if(huart->Instance==USART1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a7e      	ldr	r2, [pc, #504]	; (8005848 <HAL_UART_MspInit+0x218>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d000      	beq.n	8005654 <HAL_UART_MspInit+0x24>
 8005652:	e0a5      	b.n	80057a0 <HAL_UART_MspInit+0x170>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005654:	4b7d      	ldr	r3, [pc, #500]	; (800584c <HAL_UART_MspInit+0x21c>)
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	4b7c      	ldr	r3, [pc, #496]	; (800584c <HAL_UART_MspInit+0x21c>)
 800565a:	2180      	movs	r1, #128	; 0x80
 800565c:	01c9      	lsls	r1, r1, #7
 800565e:	430a      	orrs	r2, r1
 8005660:	619a      	str	r2, [r3, #24]
 8005662:	4b7a      	ldr	r3, [pc, #488]	; (800584c <HAL_UART_MspInit+0x21c>)
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	01db      	lsls	r3, r3, #7
 800566a:	4013      	ands	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005670:	4b76      	ldr	r3, [pc, #472]	; (800584c <HAL_UART_MspInit+0x21c>)
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	4b75      	ldr	r3, [pc, #468]	; (800584c <HAL_UART_MspInit+0x21c>)
 8005676:	2180      	movs	r1, #128	; 0x80
 8005678:	02c9      	lsls	r1, r1, #11
 800567a:	430a      	orrs	r2, r1
 800567c:	615a      	str	r2, [r3, #20]
 800567e:	4b73      	ldr	r3, [pc, #460]	; (800584c <HAL_UART_MspInit+0x21c>)
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	2380      	movs	r3, #128	; 0x80
 8005684:	02db      	lsls	r3, r3, #11
 8005686:	4013      	ands	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = UART_TX_Pin;
 800568c:	211c      	movs	r1, #28
 800568e:	187b      	adds	r3, r7, r1
 8005690:	2240      	movs	r2, #64	; 0x40
 8005692:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005694:	187b      	adds	r3, r7, r1
 8005696:	2202      	movs	r2, #2
 8005698:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569a:	187b      	adds	r3, r7, r1
 800569c:	2200      	movs	r2, #0
 800569e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056a0:	187b      	adds	r3, r7, r1
 80056a2:	2203      	movs	r2, #3
 80056a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80056a6:	187b      	adds	r3, r7, r1
 80056a8:	2200      	movs	r2, #0
 80056aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 80056ac:	000c      	movs	r4, r1
 80056ae:	187b      	adds	r3, r7, r1
 80056b0:	4a67      	ldr	r2, [pc, #412]	; (8005850 <HAL_UART_MspInit+0x220>)
 80056b2:	0019      	movs	r1, r3
 80056b4:	0010      	movs	r0, r2
 80056b6:	f000 ffab 	bl	8006610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_RX_Pin;
 80056ba:	0021      	movs	r1, r4
 80056bc:	187b      	adds	r3, r7, r1
 80056be:	2280      	movs	r2, #128	; 0x80
 80056c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056c2:	187b      	adds	r3, r7, r1
 80056c4:	2212      	movs	r2, #18
 80056c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056c8:	187b      	adds	r3, r7, r1
 80056ca:	2201      	movs	r2, #1
 80056cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056ce:	187b      	adds	r3, r7, r1
 80056d0:	2203      	movs	r2, #3
 80056d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80056d4:	187b      	adds	r3, r7, r1
 80056d6:	2200      	movs	r2, #0
 80056d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 80056da:	187b      	adds	r3, r7, r1
 80056dc:	4a5c      	ldr	r2, [pc, #368]	; (8005850 <HAL_UART_MspInit+0x220>)
 80056de:	0019      	movs	r1, r3
 80056e0:	0010      	movs	r0, r2
 80056e2:	f000 ff95 	bl	8006610 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80056e6:	4b5b      	ldr	r3, [pc, #364]	; (8005854 <HAL_UART_MspInit+0x224>)
 80056e8:	4a5b      	ldr	r2, [pc, #364]	; (8005858 <HAL_UART_MspInit+0x228>)
 80056ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056ec:	4b59      	ldr	r3, [pc, #356]	; (8005854 <HAL_UART_MspInit+0x224>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056f2:	4b58      	ldr	r3, [pc, #352]	; (8005854 <HAL_UART_MspInit+0x224>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056f8:	4b56      	ldr	r3, [pc, #344]	; (8005854 <HAL_UART_MspInit+0x224>)
 80056fa:	2280      	movs	r2, #128	; 0x80
 80056fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056fe:	4b55      	ldr	r3, [pc, #340]	; (8005854 <HAL_UART_MspInit+0x224>)
 8005700:	2200      	movs	r2, #0
 8005702:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005704:	4b53      	ldr	r3, [pc, #332]	; (8005854 <HAL_UART_MspInit+0x224>)
 8005706:	2200      	movs	r2, #0
 8005708:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800570a:	4b52      	ldr	r3, [pc, #328]	; (8005854 <HAL_UART_MspInit+0x224>)
 800570c:	2220      	movs	r2, #32
 800570e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005710:	4b50      	ldr	r3, [pc, #320]	; (8005854 <HAL_UART_MspInit+0x224>)
 8005712:	2280      	movs	r2, #128	; 0x80
 8005714:	0152      	lsls	r2, r2, #5
 8005716:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005718:	4b4e      	ldr	r3, [pc, #312]	; (8005854 <HAL_UART_MspInit+0x224>)
 800571a:	0018      	movs	r0, r3
 800571c:	f000 fde0 	bl	80062e0 <HAL_DMA_Init>
 8005720:	1e03      	subs	r3, r0, #0
 8005722:	d001      	beq.n	8005728 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8005724:	f7ff f9e6 	bl	8004af4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_RX_DMA_CH5);
 8005728:	4b4c      	ldr	r3, [pc, #304]	; (800585c <HAL_UART_MspInit+0x22c>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b4b      	ldr	r3, [pc, #300]	; (800585c <HAL_UART_MspInit+0x22c>)
 800572e:	2180      	movs	r1, #128	; 0x80
 8005730:	00c9      	lsls	r1, r1, #3
 8005732:	430a      	orrs	r2, r1
 8005734:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a46      	ldr	r2, [pc, #280]	; (8005854 <HAL_UART_MspInit+0x224>)
 800573a:	66da      	str	r2, [r3, #108]	; 0x6c
 800573c:	4b45      	ldr	r3, [pc, #276]	; (8005854 <HAL_UART_MspInit+0x224>)
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005742:	4b47      	ldr	r3, [pc, #284]	; (8005860 <HAL_UART_MspInit+0x230>)
 8005744:	4a47      	ldr	r2, [pc, #284]	; (8005864 <HAL_UART_MspInit+0x234>)
 8005746:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005748:	4b45      	ldr	r3, [pc, #276]	; (8005860 <HAL_UART_MspInit+0x230>)
 800574a:	2210      	movs	r2, #16
 800574c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800574e:	4b44      	ldr	r3, [pc, #272]	; (8005860 <HAL_UART_MspInit+0x230>)
 8005750:	2200      	movs	r2, #0
 8005752:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005754:	4b42      	ldr	r3, [pc, #264]	; (8005860 <HAL_UART_MspInit+0x230>)
 8005756:	2280      	movs	r2, #128	; 0x80
 8005758:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800575a:	4b41      	ldr	r3, [pc, #260]	; (8005860 <HAL_UART_MspInit+0x230>)
 800575c:	2200      	movs	r2, #0
 800575e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005760:	4b3f      	ldr	r3, [pc, #252]	; (8005860 <HAL_UART_MspInit+0x230>)
 8005762:	2200      	movs	r2, #0
 8005764:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8005766:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <HAL_UART_MspInit+0x230>)
 8005768:	2220      	movs	r2, #32
 800576a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800576c:	4b3c      	ldr	r3, [pc, #240]	; (8005860 <HAL_UART_MspInit+0x230>)
 800576e:	2280      	movs	r2, #128	; 0x80
 8005770:	0152      	lsls	r2, r2, #5
 8005772:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005774:	4b3a      	ldr	r3, [pc, #232]	; (8005860 <HAL_UART_MspInit+0x230>)
 8005776:	0018      	movs	r0, r3
 8005778:	f000 fdb2 	bl	80062e0 <HAL_DMA_Init>
 800577c:	1e03      	subs	r3, r0, #0
 800577e:	d001      	beq.n	8005784 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8005780:	f7ff f9b8 	bl	8004af4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8005784:	4b35      	ldr	r3, [pc, #212]	; (800585c <HAL_UART_MspInit+0x22c>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b34      	ldr	r3, [pc, #208]	; (800585c <HAL_UART_MspInit+0x22c>)
 800578a:	2180      	movs	r1, #128	; 0x80
 800578c:	0089      	lsls	r1, r1, #2
 800578e:	430a      	orrs	r2, r1
 8005790:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a32      	ldr	r2, [pc, #200]	; (8005860 <HAL_UART_MspInit+0x230>)
 8005796:	669a      	str	r2, [r3, #104]	; 0x68
 8005798:	4b31      	ldr	r3, [pc, #196]	; (8005860 <HAL_UART_MspInit+0x230>)
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800579e:	e04e      	b.n	800583e <HAL_UART_MspInit+0x20e>
  else if(huart->Instance==USART2)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a30      	ldr	r2, [pc, #192]	; (8005868 <HAL_UART_MspInit+0x238>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d149      	bne.n	800583e <HAL_UART_MspInit+0x20e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80057aa:	4b28      	ldr	r3, [pc, #160]	; (800584c <HAL_UART_MspInit+0x21c>)
 80057ac:	69da      	ldr	r2, [r3, #28]
 80057ae:	4b27      	ldr	r3, [pc, #156]	; (800584c <HAL_UART_MspInit+0x21c>)
 80057b0:	2180      	movs	r1, #128	; 0x80
 80057b2:	0289      	lsls	r1, r1, #10
 80057b4:	430a      	orrs	r2, r1
 80057b6:	61da      	str	r2, [r3, #28]
 80057b8:	4b24      	ldr	r3, [pc, #144]	; (800584c <HAL_UART_MspInit+0x21c>)
 80057ba:	69da      	ldr	r2, [r3, #28]
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	4013      	ands	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057c6:	4b21      	ldr	r3, [pc, #132]	; (800584c <HAL_UART_MspInit+0x21c>)
 80057c8:	695a      	ldr	r2, [r3, #20]
 80057ca:	4b20      	ldr	r3, [pc, #128]	; (800584c <HAL_UART_MspInit+0x21c>)
 80057cc:	2180      	movs	r1, #128	; 0x80
 80057ce:	0289      	lsls	r1, r1, #10
 80057d0:	430a      	orrs	r2, r1
 80057d2:	615a      	str	r2, [r3, #20]
 80057d4:	4b1d      	ldr	r3, [pc, #116]	; (800584c <HAL_UART_MspInit+0x21c>)
 80057d6:	695a      	ldr	r2, [r3, #20]
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	029b      	lsls	r3, r3, #10
 80057dc:	4013      	ands	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 80057e2:	241c      	movs	r4, #28
 80057e4:	193b      	adds	r3, r7, r4
 80057e6:	2204      	movs	r2, #4
 80057e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ea:	193b      	adds	r3, r7, r4
 80057ec:	2202      	movs	r2, #2
 80057ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f0:	193b      	adds	r3, r7, r4
 80057f2:	2200      	movs	r2, #0
 80057f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80057f6:	193b      	adds	r3, r7, r4
 80057f8:	2203      	movs	r2, #3
 80057fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80057fc:	193b      	adds	r3, r7, r4
 80057fe:	2201      	movs	r2, #1
 8005800:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 8005802:	193a      	adds	r2, r7, r4
 8005804:	2390      	movs	r3, #144	; 0x90
 8005806:	05db      	lsls	r3, r3, #23
 8005808:	0011      	movs	r1, r2
 800580a:	0018      	movs	r0, r3
 800580c:	f000 ff00 	bl	8006610 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_RX_Pin;
 8005810:	0021      	movs	r1, r4
 8005812:	187b      	adds	r3, r7, r1
 8005814:	2208      	movs	r2, #8
 8005816:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005818:	187b      	adds	r3, r7, r1
 800581a:	2212      	movs	r2, #18
 800581c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800581e:	187b      	adds	r3, r7, r1
 8005820:	2201      	movs	r2, #1
 8005822:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005824:	187b      	adds	r3, r7, r1
 8005826:	2203      	movs	r2, #3
 8005828:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800582a:	187b      	adds	r3, r7, r1
 800582c:	2201      	movs	r2, #1
 800582e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DMX_RX_GPIO_Port, &GPIO_InitStruct);
 8005830:	187a      	adds	r2, r7, r1
 8005832:	2390      	movs	r3, #144	; 0x90
 8005834:	05db      	lsls	r3, r3, #23
 8005836:	0011      	movs	r1, r2
 8005838:	0018      	movs	r0, r3
 800583a:	f000 fee9 	bl	8006610 <HAL_GPIO_Init>
}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	46bd      	mov	sp, r7
 8005842:	b00d      	add	sp, #52	; 0x34
 8005844:	bd90      	pop	{r4, r7, pc}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	40013800 	.word	0x40013800
 800584c:	40021000 	.word	0x40021000
 8005850:	48000400 	.word	0x48000400
 8005854:	200003c8 	.word	0x200003c8
 8005858:	40020058 	.word	0x40020058
 800585c:	40010000 	.word	0x40010000
 8005860:	2000040c 	.word	0x2000040c
 8005864:	40020044 	.word	0x40020044
 8005868:	40004400 	.word	0x40004400

0800586c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800587a:	e7fe      	b.n	800587a <HardFault_Handler+0x4>

0800587c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005894:	f000 f8f6 	bl	8005a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80058a2:	2004      	movs	r0, #4
 80058a4:	f001 f842 	bl	800692c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80058a8:	46c0      	nop			; (mov r8, r8)
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <DMA1_Channel2_3_IRQHandler+0x1c>)
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 fdc0 	bl	800643c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80058bc:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <DMA1_Channel2_3_IRQHandler+0x20>)
 80058be:	0018      	movs	r0, r3
 80058c0:	f000 fdbc 	bl	800643c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80058c4:	46c0      	nop			; (mov r8, r8)
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	20000180 	.word	0x20000180
 80058d0:	200001c4 	.word	0x200001c4

080058d4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <DMA1_Channel4_5_IRQHandler+0x1c>)
 80058da:	0018      	movs	r0, r3
 80058dc:	f000 fdae 	bl	800643c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80058e0:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <DMA1_Channel4_5_IRQHandler+0x20>)
 80058e2:	0018      	movs	r0, r3
 80058e4:	f000 fdaa 	bl	800643c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80058e8:	46c0      	nop			; (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	2000040c 	.word	0x2000040c
 80058f4:	200003c8 	.word	0x200003c8

080058f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
	return 1;
 80058fc:	2301      	movs	r3, #1
}
 80058fe:	0018      	movs	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <_kill>:

int _kill(int pid, int sig)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800590e:	f003 f9b7 	bl	8008c80 <__errno>
 8005912:	0003      	movs	r3, r0
 8005914:	2216      	movs	r2, #22
 8005916:	601a      	str	r2, [r3, #0]
	return -1;
 8005918:	2301      	movs	r3, #1
 800591a:	425b      	negs	r3, r3
}
 800591c:	0018      	movs	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	b002      	add	sp, #8
 8005922:	bd80      	pop	{r7, pc}

08005924 <_exit>:

void _exit (int status)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800592c:	2301      	movs	r3, #1
 800592e:	425a      	negs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	0011      	movs	r1, r2
 8005934:	0018      	movs	r0, r3
 8005936:	f7ff ffe5 	bl	8005904 <_kill>
	while (1) {}		/* Make sure we hang here */
 800593a:	e7fe      	b.n	800593a <_exit+0x16>

0800593c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005944:	4b11      	ldr	r3, [pc, #68]	; (800598c <_sbrk+0x50>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <_sbrk+0x16>
		heap_end = &end;
 800594c:	4b0f      	ldr	r3, [pc, #60]	; (800598c <_sbrk+0x50>)
 800594e:	4a10      	ldr	r2, [pc, #64]	; (8005990 <_sbrk+0x54>)
 8005950:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005952:	4b0e      	ldr	r3, [pc, #56]	; (800598c <_sbrk+0x50>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005958:	4b0c      	ldr	r3, [pc, #48]	; (800598c <_sbrk+0x50>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	18d3      	adds	r3, r2, r3
 8005960:	466a      	mov	r2, sp
 8005962:	4293      	cmp	r3, r2
 8005964:	d907      	bls.n	8005976 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005966:	f003 f98b 	bl	8008c80 <__errno>
 800596a:	0003      	movs	r3, r0
 800596c:	220c      	movs	r2, #12
 800596e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005970:	2301      	movs	r3, #1
 8005972:	425b      	negs	r3, r3
 8005974:	e006      	b.n	8005984 <_sbrk+0x48>
	}

	heap_end += incr;
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <_sbrk+0x50>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	18d2      	adds	r2, r2, r3
 800597e:	4b03      	ldr	r3, [pc, #12]	; (800598c <_sbrk+0x50>)
 8005980:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	b004      	add	sp, #16
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20000454 	.word	0x20000454
 8005990:	20000470 	.word	0x20000470

08005994 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005998:	46c0      	nop			; (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80059a0:	480d      	ldr	r0, [pc, #52]	; (80059d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80059a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059a4:	480d      	ldr	r0, [pc, #52]	; (80059dc <LoopForever+0x6>)
  ldr r1, =_edata
 80059a6:	490e      	ldr	r1, [pc, #56]	; (80059e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80059a8:	4a0e      	ldr	r2, [pc, #56]	; (80059e4 <LoopForever+0xe>)
  movs r3, #0
 80059aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059ac:	e002      	b.n	80059b4 <LoopCopyDataInit>

080059ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059b2:	3304      	adds	r3, #4

080059b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059b8:	d3f9      	bcc.n	80059ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059ba:	4a0b      	ldr	r2, [pc, #44]	; (80059e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80059bc:	4c0b      	ldr	r4, [pc, #44]	; (80059ec <LoopForever+0x16>)
  movs r3, #0
 80059be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059c0:	e001      	b.n	80059c6 <LoopFillZerobss>

080059c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059c4:	3204      	adds	r2, #4

080059c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059c8:	d3fb      	bcc.n	80059c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80059ca:	f7ff ffe3 	bl	8005994 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80059ce:	f003 f95d 	bl	8008c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80059d2:	f7fe fbe5 	bl	80041a0 <main>

080059d6 <LoopForever>:

LoopForever:
    b LoopForever
 80059d6:	e7fe      	b.n	80059d6 <LoopForever>
  ldr   r0, =_estack
 80059d8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80059dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059e0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80059e4:	08009094 	.word	0x08009094
  ldr r2, =_sbss
 80059e8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80059ec:	2000046c 	.word	0x2000046c

080059f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80059f0:	e7fe      	b.n	80059f0 <ADC1_IRQHandler>
	...

080059f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059f8:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <HAL_Init+0x24>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <HAL_Init+0x24>)
 80059fe:	2110      	movs	r1, #16
 8005a00:	430a      	orrs	r2, r1
 8005a02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8005a04:	2000      	movs	r0, #0
 8005a06:	f000 f809 	bl	8005a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a0a:	f7ff fc21 	bl	8005250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	40022000 	.word	0x40022000

08005a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a1c:	b590      	push	{r4, r7, lr}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a24:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <HAL_InitTick+0x5c>)
 8005a26:	681c      	ldr	r4, [r3, #0]
 8005a28:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <HAL_InitTick+0x60>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	0019      	movs	r1, r3
 8005a2e:	23fa      	movs	r3, #250	; 0xfa
 8005a30:	0098      	lsls	r0, r3, #2
 8005a32:	f7fa fb69 	bl	8000108 <__udivsi3>
 8005a36:	0003      	movs	r3, r0
 8005a38:	0019      	movs	r1, r3
 8005a3a:	0020      	movs	r0, r4
 8005a3c:	f7fa fb64 	bl	8000108 <__udivsi3>
 8005a40:	0003      	movs	r3, r0
 8005a42:	0018      	movs	r0, r3
 8005a44:	f000 fc3f 	bl	80062c6 <HAL_SYSTICK_Config>
 8005a48:	1e03      	subs	r3, r0, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e00f      	b.n	8005a70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d80b      	bhi.n	8005a6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	2301      	movs	r3, #1
 8005a5a:	425b      	negs	r3, r3
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f000 fc0c 	bl	800627c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_InitTick+0x64>)
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e000      	b.n	8005a70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
}
 8005a70:	0018      	movs	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b003      	add	sp, #12
 8005a76:	bd90      	pop	{r4, r7, pc}
 8005a78:	20000008 	.word	0x20000008
 8005a7c:	20000010 	.word	0x20000010
 8005a80:	2000000c 	.word	0x2000000c

08005a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a88:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <HAL_IncTick+0x1c>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	001a      	movs	r2, r3
 8005a8e:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <HAL_IncTick+0x20>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	18d2      	adds	r2, r2, r3
 8005a94:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <HAL_IncTick+0x20>)
 8005a96:	601a      	str	r2, [r3, #0]
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	20000010 	.word	0x20000010
 8005aa4:	20000464 	.word	0x20000464

08005aa8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8005aac:	4b02      	ldr	r3, [pc, #8]	; (8005ab8 <HAL_GetTick+0x10>)
 8005aae:	681b      	ldr	r3, [r3, #0]
}
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	20000464 	.word	0x20000464

08005abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ac4:	f7ff fff0 	bl	8005aa8 <HAL_GetTick>
 8005ac8:	0003      	movs	r3, r0
 8005aca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	d005      	beq.n	8005ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ad6:	4b09      	ldr	r3, [pc, #36]	; (8005afc <HAL_Delay+0x40>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	001a      	movs	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	189b      	adds	r3, r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	f7ff ffe0 	bl	8005aa8 <HAL_GetTick>
 8005ae8:	0002      	movs	r2, r0
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d8f7      	bhi.n	8005ae4 <HAL_Delay+0x28>
  {
  }
}
 8005af4:	46c0      	nop			; (mov r8, r8)
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b004      	add	sp, #16
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000010 	.word	0x20000010

08005b00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b08:	230f      	movs	r3, #15
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e125      	b.n	8005d6a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2234      	movs	r2, #52	; 0x34
 8005b30:	2100      	movs	r1, #0
 8005b32:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7ff fbae 	bl	8005298 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	2210      	movs	r2, #16
 8005b42:	4013      	ands	r3, r2
 8005b44:	d000      	beq.n	8005b48 <HAL_ADC_Init+0x48>
 8005b46:	e103      	b.n	8005d50 <HAL_ADC_Init+0x250>
 8005b48:	230f      	movs	r3, #15
 8005b4a:	18fb      	adds	r3, r7, r3
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d000      	beq.n	8005b54 <HAL_ADC_Init+0x54>
 8005b52:	e0fd      	b.n	8005d50 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2204      	movs	r2, #4
 8005b5c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8005b5e:	d000      	beq.n	8005b62 <HAL_ADC_Init+0x62>
 8005b60:	e0f6      	b.n	8005d50 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	4a83      	ldr	r2, [pc, #524]	; (8005d74 <HAL_ADC_Init+0x274>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2203      	movs	r2, #3
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d112      	bne.n	8005ba6 <HAL_ADC_Init+0xa6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2201      	movs	r2, #1
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d009      	beq.n	8005ba2 <HAL_ADC_Init+0xa2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	401a      	ands	r2, r3
 8005b9a:	2380      	movs	r3, #128	; 0x80
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d101      	bne.n	8005ba6 <HAL_ADC_Init+0xa6>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <HAL_ADC_Init+0xa8>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d116      	bne.n	8005bda <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2218      	movs	r2, #24
 8005bb4:	4393      	bics	r3, r2
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	0899      	lsrs	r1, r3, #2
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4964      	ldr	r1, [pc, #400]	; (8005d78 <HAL_ADC_Init+0x278>)
 8005be6:	400a      	ands	r2, r1
 8005be8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	7e1b      	ldrb	r3, [r3, #24]
 8005bee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	7e5b      	ldrb	r3, [r3, #25]
 8005bf4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005bf6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	7e9b      	ldrb	r3, [r3, #26]
 8005bfc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005bfe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d002      	beq.n	8005c0e <HAL_ADC_Init+0x10e>
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	015b      	lsls	r3, r3, #5
 8005c0c:	e000      	b.n	8005c10 <HAL_ADC_Init+0x110>
 8005c0e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005c10:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005c16:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d101      	bne.n	8005c24 <HAL_ADC_Init+0x124>
 8005c20:	2304      	movs	r3, #4
 8005c22:	e000      	b.n	8005c26 <HAL_ADC_Init+0x126>
 8005c24:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8005c26:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2124      	movs	r1, #36	; 0x24
 8005c2c:	5c5b      	ldrb	r3, [r3, r1]
 8005c2e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005c30:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	7edb      	ldrb	r3, [r3, #27]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d115      	bne.n	8005c6c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	7e9b      	ldrb	r3, [r3, #26]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2280      	movs	r2, #128	; 0x80
 8005c4c:	0252      	lsls	r2, r2, #9
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	e00b      	b.n	8005c6c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	2220      	movs	r2, #32
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c64:	2201      	movs	r2, #1
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	23c2      	movs	r3, #194	; 0xc2
 8005c72:	33ff      	adds	r3, #255	; 0xff
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d007      	beq.n	8005c88 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8005c80:	4313      	orrs	r3, r2
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68d9      	ldr	r1, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	055b      	lsls	r3, r3, #21
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d01b      	beq.n	8005cdc <HAL_ADC_Init+0x1dc>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d017      	beq.n	8005cdc <HAL_ADC_Init+0x1dc>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d013      	beq.n	8005cdc <HAL_ADC_Init+0x1dc>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d00f      	beq.n	8005cdc <HAL_ADC_Init+0x1dc>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d00b      	beq.n	8005cdc <HAL_ADC_Init+0x1dc>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	2b05      	cmp	r3, #5
 8005cca:	d007      	beq.n	8005cdc <HAL_ADC_Init+0x1dc>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	2b06      	cmp	r3, #6
 8005cd2:	d003      	beq.n	8005cdc <HAL_ADC_Init+0x1dc>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	2b07      	cmp	r3, #7
 8005cda:	d112      	bne.n	8005d02 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695a      	ldr	r2, [r3, #20]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2107      	movs	r1, #7
 8005ce8:	438a      	bics	r2, r1
 8005cea:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6959      	ldr	r1, [r3, #20]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	2207      	movs	r2, #7
 8005cf8:	401a      	ands	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <HAL_ADC_Init+0x27c>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d10b      	bne.n	8005d2a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	4393      	bics	r3, r2
 8005d20:	2201      	movs	r2, #1
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005d28:	e01c      	b.n	8005d64 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	2212      	movs	r2, #18
 8005d30:	4393      	bics	r3, r2
 8005d32:	2210      	movs	r2, #16
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3e:	2201      	movs	r2, #1
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8005d46:	230f      	movs	r3, #15
 8005d48:	18fb      	adds	r3, r7, r3
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005d4e:	e009      	b.n	8005d64 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	2210      	movs	r2, #16
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8005d5c:	230f      	movs	r3, #15
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	2201      	movs	r2, #1
 8005d62:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005d64:	230f      	movs	r3, #15
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	781b      	ldrb	r3, [r3, #0]
}
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b004      	add	sp, #16
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	fffffefd 	.word	0xfffffefd
 8005d78:	fffe0219 	.word	0xfffe0219
 8005d7c:	833fffe7 	.word	0x833fffe7

08005d80 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005d80:	b590      	push	{r4, r7, lr}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d88:	230f      	movs	r3, #15
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2204      	movs	r2, #4
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d138      	bne.n	8005e0e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2234      	movs	r2, #52	; 0x34
 8005da0:	5c9b      	ldrb	r3, [r3, r2]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_ADC_Start+0x2a>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e038      	b.n	8005e1c <HAL_ADC_Start+0x9c>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2234      	movs	r2, #52	; 0x34
 8005dae:	2101      	movs	r1, #1
 8005db0:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	7e5b      	ldrb	r3, [r3, #25]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d007      	beq.n	8005dca <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005dba:	230f      	movs	r3, #15
 8005dbc:	18fc      	adds	r4, r7, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f000 f933 	bl	800602c <ADC_Enable>
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005dca:	230f      	movs	r3, #15
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d120      	bne.n	8005e16 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <HAL_ADC_Start+0xa4>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2280      	movs	r2, #128	; 0x80
 8005dde:	0052      	lsls	r2, r2, #1
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2234      	movs	r2, #52	; 0x34
 8005df0:	2100      	movs	r1, #0
 8005df2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	221c      	movs	r2, #28
 8005dfa:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2104      	movs	r1, #4
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	e003      	b.n	8005e16 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005e0e:	230f      	movs	r3, #15
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	2202      	movs	r2, #2
 8005e14:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005e16:	230f      	movs	r3, #15
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	781b      	ldrb	r3, [r3, #0]
}
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b005      	add	sp, #20
 8005e22:	bd90      	pop	{r4, r7, pc}
 8005e24:	fffff0fe 	.word	0xfffff0fe

08005e28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005e36:	0018      	movs	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b002      	add	sp, #8
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e4a:	230f      	movs	r3, #15
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	2200      	movs	r2, #0
 8005e50:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5a:	2380      	movs	r3, #128	; 0x80
 8005e5c:	055b      	lsls	r3, r3, #21
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d011      	beq.n	8005e86 <HAL_ADC_ConfigChannel+0x46>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d00d      	beq.n	8005e86 <HAL_ADC_ConfigChannel+0x46>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d009      	beq.n	8005e86 <HAL_ADC_ConfigChannel+0x46>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d005      	beq.n	8005e86 <HAL_ADC_ConfigChannel+0x46>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d001      	beq.n	8005e86 <HAL_ADC_ConfigChannel+0x46>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2234      	movs	r2, #52	; 0x34
 8005e8a:	5c9b      	ldrb	r3, [r3, r2]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_ADC_ConfigChannel+0x54>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e0bb      	b.n	800600c <HAL_ADC_ConfigChannel+0x1cc>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2234      	movs	r2, #52	; 0x34
 8005e98:	2101      	movs	r1, #1
 8005e9a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d000      	beq.n	8005eaa <HAL_ADC_ConfigChannel+0x6a>
 8005ea8:	e09f      	b.n	8005fea <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	4a59      	ldr	r2, [pc, #356]	; (8006014 <HAL_ADC_ConfigChannel+0x1d4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d100      	bne.n	8005eb6 <HAL_ADC_ConfigChannel+0x76>
 8005eb4:	e077      	b.n	8005fa6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	409a      	lsls	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed0:	2380      	movs	r3, #128	; 0x80
 8005ed2:	055b      	lsls	r3, r3, #21
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d037      	beq.n	8005f48 <HAL_ADC_ConfigChannel+0x108>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d033      	beq.n	8005f48 <HAL_ADC_ConfigChannel+0x108>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d02f      	beq.n	8005f48 <HAL_ADC_ConfigChannel+0x108>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d02b      	beq.n	8005f48 <HAL_ADC_ConfigChannel+0x108>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d027      	beq.n	8005f48 <HAL_ADC_ConfigChannel+0x108>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	d023      	beq.n	8005f48 <HAL_ADC_ConfigChannel+0x108>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	2b06      	cmp	r3, #6
 8005f06:	d01f      	beq.n	8005f48 <HAL_ADC_ConfigChannel+0x108>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	2b07      	cmp	r3, #7
 8005f0e:	d01b      	beq.n	8005f48 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	2107      	movs	r1, #7
 8005f1c:	400b      	ands	r3, r1
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d012      	beq.n	8005f48 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2107      	movs	r1, #7
 8005f2e:	438a      	bics	r2, r1
 8005f30:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6959      	ldr	r1, [r3, #20]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2207      	movs	r2, #7
 8005f3e:	401a      	ands	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d003      	beq.n	8005f58 <HAL_ADC_ConfigChannel+0x118>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b11      	cmp	r3, #17
 8005f56:	d152      	bne.n	8005ffe <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005f58:	4b2f      	ldr	r3, [pc, #188]	; (8006018 <HAL_ADC_ConfigChannel+0x1d8>)
 8005f5a:	6819      	ldr	r1, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d102      	bne.n	8005f6a <HAL_ADC_ConfigChannel+0x12a>
 8005f64:	2380      	movs	r3, #128	; 0x80
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	e001      	b.n	8005f6e <HAL_ADC_ConfigChannel+0x12e>
 8005f6a:	2380      	movs	r3, #128	; 0x80
 8005f6c:	03db      	lsls	r3, r3, #15
 8005f6e:	4a2a      	ldr	r2, [pc, #168]	; (8006018 <HAL_ADC_ConfigChannel+0x1d8>)
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b10      	cmp	r3, #16
 8005f7a:	d140      	bne.n	8005ffe <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f7c:	4b27      	ldr	r3, [pc, #156]	; (800601c <HAL_ADC_ConfigChannel+0x1dc>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4927      	ldr	r1, [pc, #156]	; (8006020 <HAL_ADC_ConfigChannel+0x1e0>)
 8005f82:	0018      	movs	r0, r3
 8005f84:	f7fa f8c0 	bl	8000108 <__udivsi3>
 8005f88:	0003      	movs	r3, r0
 8005f8a:	001a      	movs	r2, r3
 8005f8c:	0013      	movs	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	189b      	adds	r3, r3, r2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005f96:	e002      	b.n	8005f9e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f9      	bne.n	8005f98 <HAL_ADC_ConfigChannel+0x158>
 8005fa4:	e02b      	b.n	8005ffe <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4099      	lsls	r1, r3
 8005fb4:	000b      	movs	r3, r1
 8005fb6:	43d9      	mvns	r1, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	400a      	ands	r2, r1
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d003      	beq.n	8005fd0 <HAL_ADC_ConfigChannel+0x190>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b11      	cmp	r3, #17
 8005fce:	d116      	bne.n	8005ffe <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005fd0:	4b11      	ldr	r3, [pc, #68]	; (8006018 <HAL_ADC_ConfigChannel+0x1d8>)
 8005fd2:	6819      	ldr	r1, [r3, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d101      	bne.n	8005fe0 <HAL_ADC_ConfigChannel+0x1a0>
 8005fdc:	4a11      	ldr	r2, [pc, #68]	; (8006024 <HAL_ADC_ConfigChannel+0x1e4>)
 8005fde:	e000      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1a2>
 8005fe0:	4a11      	ldr	r2, [pc, #68]	; (8006028 <HAL_ADC_ConfigChannel+0x1e8>)
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <HAL_ADC_ConfigChannel+0x1d8>)
 8005fe4:	400a      	ands	r2, r1
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	e009      	b.n	8005ffe <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	2220      	movs	r2, #32
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8005ff6:	230f      	movs	r3, #15
 8005ff8:	18fb      	adds	r3, r7, r3
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2234      	movs	r2, #52	; 0x34
 8006002:	2100      	movs	r1, #0
 8006004:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006006:	230f      	movs	r3, #15
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	781b      	ldrb	r3, [r3, #0]
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b004      	add	sp, #16
 8006012:	bd80      	pop	{r7, pc}
 8006014:	00001001 	.word	0x00001001
 8006018:	40012708 	.word	0x40012708
 800601c:	20000008 	.word	0x20000008
 8006020:	000f4240 	.word	0x000f4240
 8006024:	ff7fffff 	.word	0xff7fffff
 8006028:	ffbfffff 	.word	0xffbfffff

0800602c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2203      	movs	r2, #3
 8006044:	4013      	ands	r3, r2
 8006046:	2b01      	cmp	r3, #1
 8006048:	d112      	bne.n	8006070 <ADC_Enable+0x44>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2201      	movs	r2, #1
 8006052:	4013      	ands	r3, r2
 8006054:	2b01      	cmp	r3, #1
 8006056:	d009      	beq.n	800606c <ADC_Enable+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	401a      	ands	r2, r3
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	429a      	cmp	r2, r3
 800606a:	d101      	bne.n	8006070 <ADC_Enable+0x44>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <ADC_Enable+0x46>
 8006070:	2300      	movs	r3, #0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d14b      	bne.n	800610e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	4a26      	ldr	r2, [pc, #152]	; (8006118 <ADC_Enable+0xec>)
 800607e:	4013      	ands	r3, r2
 8006080:	d00d      	beq.n	800609e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	2210      	movs	r2, #16
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	2201      	movs	r2, #1
 8006094:	431a      	orrs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e038      	b.n	8006110 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2101      	movs	r1, #1
 80060aa:	430a      	orrs	r2, r1
 80060ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80060ae:	4b1b      	ldr	r3, [pc, #108]	; (800611c <ADC_Enable+0xf0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	491b      	ldr	r1, [pc, #108]	; (8006120 <ADC_Enable+0xf4>)
 80060b4:	0018      	movs	r0, r3
 80060b6:	f7fa f827 	bl	8000108 <__udivsi3>
 80060ba:	0003      	movs	r3, r0
 80060bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80060be:	e002      	b.n	80060c6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1f9      	bne.n	80060c0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80060cc:	f7ff fcec 	bl	8005aa8 <HAL_GetTick>
 80060d0:	0003      	movs	r3, r0
 80060d2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80060d4:	e014      	b.n	8006100 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80060d6:	f7ff fce7 	bl	8005aa8 <HAL_GetTick>
 80060da:	0002      	movs	r2, r0
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d90d      	bls.n	8006100 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	2210      	movs	r2, #16
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	2201      	movs	r2, #1
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e007      	b.n	8006110 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2201      	movs	r2, #1
 8006108:	4013      	ands	r3, r2
 800610a:	2b01      	cmp	r3, #1
 800610c:	d1e3      	bne.n	80060d6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	0018      	movs	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	b004      	add	sp, #16
 8006116:	bd80      	pop	{r7, pc}
 8006118:	80000017 	.word	0x80000017
 800611c:	20000008 	.word	0x20000008
 8006120:	000f4240 	.word	0x000f4240

08006124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	0002      	movs	r2, r0
 800612c:	1dfb      	adds	r3, r7, #7
 800612e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006130:	1dfb      	adds	r3, r7, #7
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b7f      	cmp	r3, #127	; 0x7f
 8006136:	d809      	bhi.n	800614c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006138:	1dfb      	adds	r3, r7, #7
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	001a      	movs	r2, r3
 800613e:	231f      	movs	r3, #31
 8006140:	401a      	ands	r2, r3
 8006142:	4b04      	ldr	r3, [pc, #16]	; (8006154 <__NVIC_EnableIRQ+0x30>)
 8006144:	2101      	movs	r1, #1
 8006146:	4091      	lsls	r1, r2
 8006148:	000a      	movs	r2, r1
 800614a:	601a      	str	r2, [r3, #0]
  }
}
 800614c:	46c0      	nop			; (mov r8, r8)
 800614e:	46bd      	mov	sp, r7
 8006150:	b002      	add	sp, #8
 8006152:	bd80      	pop	{r7, pc}
 8006154:	e000e100 	.word	0xe000e100

08006158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	0002      	movs	r2, r0
 8006160:	6039      	str	r1, [r7, #0]
 8006162:	1dfb      	adds	r3, r7, #7
 8006164:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006166:	1dfb      	adds	r3, r7, #7
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b7f      	cmp	r3, #127	; 0x7f
 800616c:	d828      	bhi.n	80061c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800616e:	4a2f      	ldr	r2, [pc, #188]	; (800622c <__NVIC_SetPriority+0xd4>)
 8006170:	1dfb      	adds	r3, r7, #7
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	b25b      	sxtb	r3, r3
 8006176:	089b      	lsrs	r3, r3, #2
 8006178:	33c0      	adds	r3, #192	; 0xc0
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	589b      	ldr	r3, [r3, r2]
 800617e:	1dfa      	adds	r2, r7, #7
 8006180:	7812      	ldrb	r2, [r2, #0]
 8006182:	0011      	movs	r1, r2
 8006184:	2203      	movs	r2, #3
 8006186:	400a      	ands	r2, r1
 8006188:	00d2      	lsls	r2, r2, #3
 800618a:	21ff      	movs	r1, #255	; 0xff
 800618c:	4091      	lsls	r1, r2
 800618e:	000a      	movs	r2, r1
 8006190:	43d2      	mvns	r2, r2
 8006192:	401a      	ands	r2, r3
 8006194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	019b      	lsls	r3, r3, #6
 800619a:	22ff      	movs	r2, #255	; 0xff
 800619c:	401a      	ands	r2, r3
 800619e:	1dfb      	adds	r3, r7, #7
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	0018      	movs	r0, r3
 80061a4:	2303      	movs	r3, #3
 80061a6:	4003      	ands	r3, r0
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80061ac:	481f      	ldr	r0, [pc, #124]	; (800622c <__NVIC_SetPriority+0xd4>)
 80061ae:	1dfb      	adds	r3, r7, #7
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	b25b      	sxtb	r3, r3
 80061b4:	089b      	lsrs	r3, r3, #2
 80061b6:	430a      	orrs	r2, r1
 80061b8:	33c0      	adds	r3, #192	; 0xc0
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80061be:	e031      	b.n	8006224 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80061c0:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <__NVIC_SetPriority+0xd8>)
 80061c2:	1dfb      	adds	r3, r7, #7
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	0019      	movs	r1, r3
 80061c8:	230f      	movs	r3, #15
 80061ca:	400b      	ands	r3, r1
 80061cc:	3b08      	subs	r3, #8
 80061ce:	089b      	lsrs	r3, r3, #2
 80061d0:	3306      	adds	r3, #6
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	18d3      	adds	r3, r2, r3
 80061d6:	3304      	adds	r3, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	1dfa      	adds	r2, r7, #7
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	0011      	movs	r1, r2
 80061e0:	2203      	movs	r2, #3
 80061e2:	400a      	ands	r2, r1
 80061e4:	00d2      	lsls	r2, r2, #3
 80061e6:	21ff      	movs	r1, #255	; 0xff
 80061e8:	4091      	lsls	r1, r2
 80061ea:	000a      	movs	r2, r1
 80061ec:	43d2      	mvns	r2, r2
 80061ee:	401a      	ands	r2, r3
 80061f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	019b      	lsls	r3, r3, #6
 80061f6:	22ff      	movs	r2, #255	; 0xff
 80061f8:	401a      	ands	r2, r3
 80061fa:	1dfb      	adds	r3, r7, #7
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	0018      	movs	r0, r3
 8006200:	2303      	movs	r3, #3
 8006202:	4003      	ands	r3, r0
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006208:	4809      	ldr	r0, [pc, #36]	; (8006230 <__NVIC_SetPriority+0xd8>)
 800620a:	1dfb      	adds	r3, r7, #7
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	001c      	movs	r4, r3
 8006210:	230f      	movs	r3, #15
 8006212:	4023      	ands	r3, r4
 8006214:	3b08      	subs	r3, #8
 8006216:	089b      	lsrs	r3, r3, #2
 8006218:	430a      	orrs	r2, r1
 800621a:	3306      	adds	r3, #6
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	18c3      	adds	r3, r0, r3
 8006220:	3304      	adds	r3, #4
 8006222:	601a      	str	r2, [r3, #0]
}
 8006224:	46c0      	nop			; (mov r8, r8)
 8006226:	46bd      	mov	sp, r7
 8006228:	b003      	add	sp, #12
 800622a:	bd90      	pop	{r4, r7, pc}
 800622c:	e000e100 	.word	0xe000e100
 8006230:	e000ed00 	.word	0xe000ed00

08006234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3b01      	subs	r3, #1
 8006240:	4a0c      	ldr	r2, [pc, #48]	; (8006274 <SysTick_Config+0x40>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d901      	bls.n	800624a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006246:	2301      	movs	r3, #1
 8006248:	e010      	b.n	800626c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <SysTick_Config+0x44>)
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	3a01      	subs	r2, #1
 8006250:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006252:	2301      	movs	r3, #1
 8006254:	425b      	negs	r3, r3
 8006256:	2103      	movs	r1, #3
 8006258:	0018      	movs	r0, r3
 800625a:	f7ff ff7d 	bl	8006158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <SysTick_Config+0x44>)
 8006260:	2200      	movs	r2, #0
 8006262:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <SysTick_Config+0x44>)
 8006266:	2207      	movs	r2, #7
 8006268:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800626a:	2300      	movs	r3, #0
}
 800626c:	0018      	movs	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	b002      	add	sp, #8
 8006272:	bd80      	pop	{r7, pc}
 8006274:	00ffffff 	.word	0x00ffffff
 8006278:	e000e010 	.word	0xe000e010

0800627c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	210f      	movs	r1, #15
 8006288:	187b      	adds	r3, r7, r1
 800628a:	1c02      	adds	r2, r0, #0
 800628c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	187b      	adds	r3, r7, r1
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	b25b      	sxtb	r3, r3
 8006296:	0011      	movs	r1, r2
 8006298:	0018      	movs	r0, r3
 800629a:	f7ff ff5d 	bl	8006158 <__NVIC_SetPriority>
}
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	46bd      	mov	sp, r7
 80062a2:	b004      	add	sp, #16
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	0002      	movs	r2, r0
 80062ae:	1dfb      	adds	r3, r7, #7
 80062b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062b2:	1dfb      	adds	r3, r7, #7
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	b25b      	sxtb	r3, r3
 80062b8:	0018      	movs	r0, r3
 80062ba:	f7ff ff33 	bl	8006124 <__NVIC_EnableIRQ>
}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	46bd      	mov	sp, r7
 80062c2:	b002      	add	sp, #8
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7ff ffaf 	bl	8006234 <SysTick_Config>
 80062d6:	0003      	movs	r3, r0
}
 80062d8:	0018      	movs	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	b002      	add	sp, #8
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e036      	b.n	8006364 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2221      	movs	r2, #33	; 0x21
 80062fa:	2102      	movs	r1, #2
 80062fc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4a18      	ldr	r2, [pc, #96]	; (800636c <HAL_DMA_Init+0x8c>)
 800630a:	4013      	ands	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006316:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800632e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	0018      	movs	r0, r3
 8006348:	f000 f946 	bl	80065d8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2221      	movs	r2, #33	; 0x21
 8006356:	2101      	movs	r1, #1
 8006358:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	2100      	movs	r1, #0
 8006360:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}  
 8006364:	0018      	movs	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	b004      	add	sp, #16
 800636a:	bd80      	pop	{r7, pc}
 800636c:	ffffc00f 	.word	0xffffc00f

08006370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800637e:	2317      	movs	r3, #23
 8006380:	18fb      	adds	r3, r7, r3
 8006382:	2200      	movs	r2, #0
 8006384:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2220      	movs	r2, #32
 800638a:	5c9b      	ldrb	r3, [r3, r2]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_DMA_Start_IT+0x24>
 8006390:	2302      	movs	r3, #2
 8006392:	e04f      	b.n	8006434 <HAL_DMA_Start_IT+0xc4>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	2101      	movs	r1, #1
 800639a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2221      	movs	r2, #33	; 0x21
 80063a0:	5c9b      	ldrb	r3, [r3, r2]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d13a      	bne.n	800641e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2221      	movs	r2, #33	; 0x21
 80063ac:	2102      	movs	r1, #2
 80063ae:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2101      	movs	r1, #1
 80063c2:	438a      	bics	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f8d7 	bl	8006580 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d008      	beq.n	80063ec <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	210e      	movs	r1, #14
 80063e6:	430a      	orrs	r2, r1
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	e00f      	b.n	800640c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	210a      	movs	r1, #10
 80063f8:	430a      	orrs	r2, r1
 80063fa:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2104      	movs	r1, #4
 8006408:	438a      	bics	r2, r1
 800640a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2101      	movs	r1, #1
 8006418:	430a      	orrs	r2, r1
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	e007      	b.n	800642e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2220      	movs	r2, #32
 8006422:	2100      	movs	r1, #0
 8006424:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006426:	2317      	movs	r3, #23
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	2202      	movs	r2, #2
 800642c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800642e:	2317      	movs	r3, #23
 8006430:	18fb      	adds	r3, r7, r3
 8006432:	781b      	ldrb	r3, [r3, #0]
} 
 8006434:	0018      	movs	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	b006      	add	sp, #24
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006458:	2204      	movs	r2, #4
 800645a:	409a      	lsls	r2, r3
 800645c:	0013      	movs	r3, r2
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4013      	ands	r3, r2
 8006462:	d024      	beq.n	80064ae <HAL_DMA_IRQHandler+0x72>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2204      	movs	r2, #4
 8006468:	4013      	ands	r3, r2
 800646a:	d020      	beq.n	80064ae <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2220      	movs	r2, #32
 8006474:	4013      	ands	r3, r2
 8006476:	d107      	bne.n	8006488 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2104      	movs	r1, #4
 8006484:	438a      	bics	r2, r1
 8006486:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006490:	2104      	movs	r1, #4
 8006492:	4091      	lsls	r1, r2
 8006494:	000a      	movs	r2, r1
 8006496:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d100      	bne.n	80064a2 <HAL_DMA_IRQHandler+0x66>
 80064a0:	e06a      	b.n	8006578 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	0010      	movs	r0, r2
 80064aa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80064ac:	e064      	b.n	8006578 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	2202      	movs	r2, #2
 80064b4:	409a      	lsls	r2, r3
 80064b6:	0013      	movs	r3, r2
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4013      	ands	r3, r2
 80064bc:	d02b      	beq.n	8006516 <HAL_DMA_IRQHandler+0xda>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2202      	movs	r2, #2
 80064c2:	4013      	ands	r3, r2
 80064c4:	d027      	beq.n	8006516 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2220      	movs	r2, #32
 80064ce:	4013      	ands	r3, r2
 80064d0:	d10b      	bne.n	80064ea <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	210a      	movs	r1, #10
 80064de:	438a      	bics	r2, r1
 80064e0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2221      	movs	r2, #33	; 0x21
 80064e6:	2101      	movs	r1, #1
 80064e8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f2:	2102      	movs	r1, #2
 80064f4:	4091      	lsls	r1, r2
 80064f6:	000a      	movs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	2100      	movs	r1, #0
 8006500:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d036      	beq.n	8006578 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	0010      	movs	r0, r2
 8006512:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006514:	e030      	b.n	8006578 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	2208      	movs	r2, #8
 800651c:	409a      	lsls	r2, r3
 800651e:	0013      	movs	r3, r2
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4013      	ands	r3, r2
 8006524:	d028      	beq.n	8006578 <HAL_DMA_IRQHandler+0x13c>
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2208      	movs	r2, #8
 800652a:	4013      	ands	r3, r2
 800652c:	d024      	beq.n	8006578 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	210e      	movs	r1, #14
 800653a:	438a      	bics	r2, r1
 800653c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	2101      	movs	r1, #1
 8006548:	4091      	lsls	r1, r2
 800654a:	000a      	movs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2221      	movs	r2, #33	; 0x21
 8006558:	2101      	movs	r1, #1
 800655a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2220      	movs	r2, #32
 8006560:	2100      	movs	r1, #0
 8006562:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	0010      	movs	r0, r2
 8006574:	4798      	blx	r3
    }
   }
}  
 8006576:	e7ff      	b.n	8006578 <HAL_DMA_IRQHandler+0x13c>
 8006578:	46c0      	nop			; (mov r8, r8)
 800657a:	46bd      	mov	sp, r7
 800657c:	b004      	add	sp, #16
 800657e:	bd80      	pop	{r7, pc}

08006580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006596:	2101      	movs	r1, #1
 8006598:	4091      	lsls	r1, r2
 800659a:	000a      	movs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b10      	cmp	r3, #16
 80065ac:	d108      	bne.n	80065c0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80065be:	e007      	b.n	80065d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	60da      	str	r2, [r3, #12]
}
 80065d0:	46c0      	nop			; (mov r8, r8)
 80065d2:	46bd      	mov	sp, r7
 80065d4:	b004      	add	sp, #16
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a08      	ldr	r2, [pc, #32]	; (8006608 <DMA_CalcBaseAndBitshift+0x30>)
 80065e6:	4694      	mov	ip, r2
 80065e8:	4463      	add	r3, ip
 80065ea:	2114      	movs	r1, #20
 80065ec:	0018      	movs	r0, r3
 80065ee:	f7f9 fd8b 	bl	8000108 <__udivsi3>
 80065f2:	0003      	movs	r3, r0
 80065f4:	009a      	lsls	r2, r3, #2
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a03      	ldr	r2, [pc, #12]	; (800660c <DMA_CalcBaseAndBitshift+0x34>)
 80065fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8006600:	46c0      	nop			; (mov r8, r8)
 8006602:	46bd      	mov	sp, r7
 8006604:	b002      	add	sp, #8
 8006606:	bd80      	pop	{r7, pc}
 8006608:	bffdfff8 	.word	0xbffdfff8
 800660c:	40020000 	.word	0x40020000

08006610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800661e:	e14f      	b.n	80068c0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2101      	movs	r1, #1
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4091      	lsls	r1, r2
 800662a:	000a      	movs	r2, r1
 800662c:	4013      	ands	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d100      	bne.n	8006638 <HAL_GPIO_Init+0x28>
 8006636:	e140      	b.n	80068ba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d003      	beq.n	8006648 <HAL_GPIO_Init+0x38>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b12      	cmp	r3, #18
 8006646:	d123      	bne.n	8006690 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	08da      	lsrs	r2, r3, #3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3208      	adds	r2, #8
 8006650:	0092      	lsls	r2, r2, #2
 8006652:	58d3      	ldr	r3, [r2, r3]
 8006654:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2207      	movs	r2, #7
 800665a:	4013      	ands	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	220f      	movs	r2, #15
 8006660:	409a      	lsls	r2, r3
 8006662:	0013      	movs	r3, r2
 8006664:	43da      	mvns	r2, r3
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4013      	ands	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2107      	movs	r1, #7
 8006674:	400b      	ands	r3, r1
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	409a      	lsls	r2, r3
 800667a:	0013      	movs	r3, r2
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	08da      	lsrs	r2, r3, #3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3208      	adds	r2, #8
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	6939      	ldr	r1, [r7, #16]
 800668e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	2203      	movs	r2, #3
 800669c:	409a      	lsls	r2, r3
 800669e:	0013      	movs	r3, r2
 80066a0:	43da      	mvns	r2, r3
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4013      	ands	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2203      	movs	r2, #3
 80066ae:	401a      	ands	r2, r3
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	409a      	lsls	r2, r3
 80066b6:	0013      	movs	r3, r2
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d00b      	beq.n	80066e4 <HAL_GPIO_Init+0xd4>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d007      	beq.n	80066e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066d8:	2b11      	cmp	r3, #17
 80066da:	d003      	beq.n	80066e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b12      	cmp	r3, #18
 80066e2:	d130      	bne.n	8006746 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	2203      	movs	r2, #3
 80066f0:	409a      	lsls	r2, r3
 80066f2:	0013      	movs	r3, r2
 80066f4:	43da      	mvns	r2, r3
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4013      	ands	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	409a      	lsls	r2, r3
 8006706:	0013      	movs	r3, r2
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800671a:	2201      	movs	r2, #1
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	409a      	lsls	r2, r3
 8006720:	0013      	movs	r3, r2
 8006722:	43da      	mvns	r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4013      	ands	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	091b      	lsrs	r3, r3, #4
 8006730:	2201      	movs	r2, #1
 8006732:	401a      	ands	r2, r3
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	409a      	lsls	r2, r3
 8006738:	0013      	movs	r3, r2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	2203      	movs	r2, #3
 8006752:	409a      	lsls	r2, r3
 8006754:	0013      	movs	r3, r2
 8006756:	43da      	mvns	r2, r3
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	4013      	ands	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	409a      	lsls	r2, r3
 8006768:	0013      	movs	r3, r2
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	2380      	movs	r3, #128	; 0x80
 800677c:	055b      	lsls	r3, r3, #21
 800677e:	4013      	ands	r3, r2
 8006780:	d100      	bne.n	8006784 <HAL_GPIO_Init+0x174>
 8006782:	e09a      	b.n	80068ba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006784:	4b54      	ldr	r3, [pc, #336]	; (80068d8 <HAL_GPIO_Init+0x2c8>)
 8006786:	699a      	ldr	r2, [r3, #24]
 8006788:	4b53      	ldr	r3, [pc, #332]	; (80068d8 <HAL_GPIO_Init+0x2c8>)
 800678a:	2101      	movs	r1, #1
 800678c:	430a      	orrs	r2, r1
 800678e:	619a      	str	r2, [r3, #24]
 8006790:	4b51      	ldr	r3, [pc, #324]	; (80068d8 <HAL_GPIO_Init+0x2c8>)
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	2201      	movs	r2, #1
 8006796:	4013      	ands	r3, r2
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800679c:	4a4f      	ldr	r2, [pc, #316]	; (80068dc <HAL_GPIO_Init+0x2cc>)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	089b      	lsrs	r3, r3, #2
 80067a2:	3302      	adds	r3, #2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	589b      	ldr	r3, [r3, r2]
 80067a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2203      	movs	r2, #3
 80067ae:	4013      	ands	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	220f      	movs	r2, #15
 80067b4:	409a      	lsls	r2, r3
 80067b6:	0013      	movs	r3, r2
 80067b8:	43da      	mvns	r2, r3
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4013      	ands	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	2390      	movs	r3, #144	; 0x90
 80067c4:	05db      	lsls	r3, r3, #23
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d013      	beq.n	80067f2 <HAL_GPIO_Init+0x1e2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a44      	ldr	r2, [pc, #272]	; (80068e0 <HAL_GPIO_Init+0x2d0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00d      	beq.n	80067ee <HAL_GPIO_Init+0x1de>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a43      	ldr	r2, [pc, #268]	; (80068e4 <HAL_GPIO_Init+0x2d4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d007      	beq.n	80067ea <HAL_GPIO_Init+0x1da>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a42      	ldr	r2, [pc, #264]	; (80068e8 <HAL_GPIO_Init+0x2d8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d101      	bne.n	80067e6 <HAL_GPIO_Init+0x1d6>
 80067e2:	2303      	movs	r3, #3
 80067e4:	e006      	b.n	80067f4 <HAL_GPIO_Init+0x1e4>
 80067e6:	2305      	movs	r3, #5
 80067e8:	e004      	b.n	80067f4 <HAL_GPIO_Init+0x1e4>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e002      	b.n	80067f4 <HAL_GPIO_Init+0x1e4>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <HAL_GPIO_Init+0x1e4>
 80067f2:	2300      	movs	r3, #0
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	2103      	movs	r1, #3
 80067f8:	400a      	ands	r2, r1
 80067fa:	0092      	lsls	r2, r2, #2
 80067fc:	4093      	lsls	r3, r2
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006804:	4935      	ldr	r1, [pc, #212]	; (80068dc <HAL_GPIO_Init+0x2cc>)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	089b      	lsrs	r3, r3, #2
 800680a:	3302      	adds	r3, #2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006812:	4b36      	ldr	r3, [pc, #216]	; (80068ec <HAL_GPIO_Init+0x2dc>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	43da      	mvns	r2, r3
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4013      	ands	r3, r2
 8006820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	2380      	movs	r3, #128	; 0x80
 8006828:	025b      	lsls	r3, r3, #9
 800682a:	4013      	ands	r3, r2
 800682c:	d003      	beq.n	8006836 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006836:	4b2d      	ldr	r3, [pc, #180]	; (80068ec <HAL_GPIO_Init+0x2dc>)
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800683c:	4b2b      	ldr	r3, [pc, #172]	; (80068ec <HAL_GPIO_Init+0x2dc>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	43da      	mvns	r2, r3
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4013      	ands	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	029b      	lsls	r3, r3, #10
 8006854:	4013      	ands	r3, r2
 8006856:	d003      	beq.n	8006860 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006860:	4b22      	ldr	r3, [pc, #136]	; (80068ec <HAL_GPIO_Init+0x2dc>)
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006866:	4b21      	ldr	r3, [pc, #132]	; (80068ec <HAL_GPIO_Init+0x2dc>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	43da      	mvns	r2, r3
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	4013      	ands	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	2380      	movs	r3, #128	; 0x80
 800687c:	035b      	lsls	r3, r3, #13
 800687e:	4013      	ands	r3, r2
 8006880:	d003      	beq.n	800688a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800688a:	4b18      	ldr	r3, [pc, #96]	; (80068ec <HAL_GPIO_Init+0x2dc>)
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006890:	4b16      	ldr	r3, [pc, #88]	; (80068ec <HAL_GPIO_Init+0x2dc>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	43da      	mvns	r2, r3
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4013      	ands	r3, r2
 800689e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	2380      	movs	r3, #128	; 0x80
 80068a6:	039b      	lsls	r3, r3, #14
 80068a8:	4013      	ands	r3, r2
 80068aa:	d003      	beq.n	80068b4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80068b4:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <HAL_GPIO_Init+0x2dc>)
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	3301      	adds	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	40da      	lsrs	r2, r3
 80068c8:	1e13      	subs	r3, r2, #0
 80068ca:	d000      	beq.n	80068ce <HAL_GPIO_Init+0x2be>
 80068cc:	e6a8      	b.n	8006620 <HAL_GPIO_Init+0x10>
  } 
}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	46bd      	mov	sp, r7
 80068d2:	b006      	add	sp, #24
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	40021000 	.word	0x40021000
 80068dc:	40010000 	.word	0x40010000
 80068e0:	48000400 	.word	0x48000400
 80068e4:	48000800 	.word	0x48000800
 80068e8:	48000c00 	.word	0x48000c00
 80068ec:	40010400 	.word	0x40010400

080068f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	0008      	movs	r0, r1
 80068fa:	0011      	movs	r1, r2
 80068fc:	1cbb      	adds	r3, r7, #2
 80068fe:	1c02      	adds	r2, r0, #0
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	1c7b      	adds	r3, r7, #1
 8006904:	1c0a      	adds	r2, r1, #0
 8006906:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006908:	1c7b      	adds	r3, r7, #1
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006910:	1cbb      	adds	r3, r7, #2
 8006912:	881a      	ldrh	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006918:	e003      	b.n	8006922 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800691a:	1cbb      	adds	r3, r7, #2
 800691c:	881a      	ldrh	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	46bd      	mov	sp, r7
 8006926:	b002      	add	sp, #8
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	0002      	movs	r2, r0
 8006934:	1dbb      	adds	r3, r7, #6
 8006936:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006938:	4b09      	ldr	r3, [pc, #36]	; (8006960 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	1dba      	adds	r2, r7, #6
 800693e:	8812      	ldrh	r2, [r2, #0]
 8006940:	4013      	ands	r3, r2
 8006942:	d008      	beq.n	8006956 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006944:	4b06      	ldr	r3, [pc, #24]	; (8006960 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006946:	1dba      	adds	r2, r7, #6
 8006948:	8812      	ldrh	r2, [r2, #0]
 800694a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800694c:	1dbb      	adds	r3, r7, #6
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	0018      	movs	r0, r3
 8006952:	f7fb ffab 	bl	80028ac <HAL_GPIO_EXTI_Callback>
  }
}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	46bd      	mov	sp, r7
 800695a:	b002      	add	sp, #8
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	40010400 	.word	0x40010400

08006964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e303      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2201      	movs	r2, #1
 800697c:	4013      	ands	r3, r2
 800697e:	d100      	bne.n	8006982 <HAL_RCC_OscConfig+0x1e>
 8006980:	e08d      	b.n	8006a9e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006982:	4bc4      	ldr	r3, [pc, #784]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	220c      	movs	r2, #12
 8006988:	4013      	ands	r3, r2
 800698a:	2b04      	cmp	r3, #4
 800698c:	d00e      	beq.n	80069ac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800698e:	4bc1      	ldr	r3, [pc, #772]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	220c      	movs	r2, #12
 8006994:	4013      	ands	r3, r2
 8006996:	2b08      	cmp	r3, #8
 8006998:	d116      	bne.n	80069c8 <HAL_RCC_OscConfig+0x64>
 800699a:	4bbe      	ldr	r3, [pc, #760]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	2380      	movs	r3, #128	; 0x80
 80069a0:	025b      	lsls	r3, r3, #9
 80069a2:	401a      	ands	r2, r3
 80069a4:	2380      	movs	r3, #128	; 0x80
 80069a6:	025b      	lsls	r3, r3, #9
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d10d      	bne.n	80069c8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ac:	4bb9      	ldr	r3, [pc, #740]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	2380      	movs	r3, #128	; 0x80
 80069b2:	029b      	lsls	r3, r3, #10
 80069b4:	4013      	ands	r3, r2
 80069b6:	d100      	bne.n	80069ba <HAL_RCC_OscConfig+0x56>
 80069b8:	e070      	b.n	8006a9c <HAL_RCC_OscConfig+0x138>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d000      	beq.n	80069c4 <HAL_RCC_OscConfig+0x60>
 80069c2:	e06b      	b.n	8006a9c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e2da      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d107      	bne.n	80069e0 <HAL_RCC_OscConfig+0x7c>
 80069d0:	4bb0      	ldr	r3, [pc, #704]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4baf      	ldr	r3, [pc, #700]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 80069d6:	2180      	movs	r1, #128	; 0x80
 80069d8:	0249      	lsls	r1, r1, #9
 80069da:	430a      	orrs	r2, r1
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	e02f      	b.n	8006a40 <HAL_RCC_OscConfig+0xdc>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10c      	bne.n	8006a02 <HAL_RCC_OscConfig+0x9e>
 80069e8:	4baa      	ldr	r3, [pc, #680]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	4ba9      	ldr	r3, [pc, #676]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 80069ee:	49aa      	ldr	r1, [pc, #680]	; (8006c98 <HAL_RCC_OscConfig+0x334>)
 80069f0:	400a      	ands	r2, r1
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	4ba7      	ldr	r3, [pc, #668]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	4ba6      	ldr	r3, [pc, #664]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 80069fa:	49a8      	ldr	r1, [pc, #672]	; (8006c9c <HAL_RCC_OscConfig+0x338>)
 80069fc:	400a      	ands	r2, r1
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	e01e      	b.n	8006a40 <HAL_RCC_OscConfig+0xdc>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b05      	cmp	r3, #5
 8006a08:	d10e      	bne.n	8006a28 <HAL_RCC_OscConfig+0xc4>
 8006a0a:	4ba2      	ldr	r3, [pc, #648]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4ba1      	ldr	r3, [pc, #644]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006a10:	2180      	movs	r1, #128	; 0x80
 8006a12:	02c9      	lsls	r1, r1, #11
 8006a14:	430a      	orrs	r2, r1
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	4b9e      	ldr	r3, [pc, #632]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	4b9d      	ldr	r3, [pc, #628]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006a1e:	2180      	movs	r1, #128	; 0x80
 8006a20:	0249      	lsls	r1, r1, #9
 8006a22:	430a      	orrs	r2, r1
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	e00b      	b.n	8006a40 <HAL_RCC_OscConfig+0xdc>
 8006a28:	4b9a      	ldr	r3, [pc, #616]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	4b99      	ldr	r3, [pc, #612]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006a2e:	499a      	ldr	r1, [pc, #616]	; (8006c98 <HAL_RCC_OscConfig+0x334>)
 8006a30:	400a      	ands	r2, r1
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	4b97      	ldr	r3, [pc, #604]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	4b96      	ldr	r3, [pc, #600]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006a3a:	4998      	ldr	r1, [pc, #608]	; (8006c9c <HAL_RCC_OscConfig+0x338>)
 8006a3c:	400a      	ands	r2, r1
 8006a3e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d014      	beq.n	8006a72 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a48:	f7ff f82e 	bl	8005aa8 <HAL_GetTick>
 8006a4c:	0003      	movs	r3, r0
 8006a4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a50:	e008      	b.n	8006a64 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a52:	f7ff f829 	bl	8005aa8 <HAL_GetTick>
 8006a56:	0002      	movs	r2, r0
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b64      	cmp	r3, #100	; 0x64
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e28c      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a64:	4b8b      	ldr	r3, [pc, #556]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	2380      	movs	r3, #128	; 0x80
 8006a6a:	029b      	lsls	r3, r3, #10
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	d0f0      	beq.n	8006a52 <HAL_RCC_OscConfig+0xee>
 8006a70:	e015      	b.n	8006a9e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a72:	f7ff f819 	bl	8005aa8 <HAL_GetTick>
 8006a76:	0003      	movs	r3, r0
 8006a78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a7c:	f7ff f814 	bl	8005aa8 <HAL_GetTick>
 8006a80:	0002      	movs	r2, r0
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b64      	cmp	r3, #100	; 0x64
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e277      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8e:	4b81      	ldr	r3, [pc, #516]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	2380      	movs	r3, #128	; 0x80
 8006a94:	029b      	lsls	r3, r3, #10
 8006a96:	4013      	ands	r3, r2
 8006a98:	d1f0      	bne.n	8006a7c <HAL_RCC_OscConfig+0x118>
 8006a9a:	e000      	b.n	8006a9e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a9c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d100      	bne.n	8006aaa <HAL_RCC_OscConfig+0x146>
 8006aa8:	e069      	b.n	8006b7e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006aaa:	4b7a      	ldr	r3, [pc, #488]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	220c      	movs	r2, #12
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	d00b      	beq.n	8006acc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006ab4:	4b77      	ldr	r3, [pc, #476]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	220c      	movs	r2, #12
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d11c      	bne.n	8006afa <HAL_RCC_OscConfig+0x196>
 8006ac0:	4b74      	ldr	r3, [pc, #464]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	2380      	movs	r3, #128	; 0x80
 8006ac6:	025b      	lsls	r3, r3, #9
 8006ac8:	4013      	ands	r3, r2
 8006aca:	d116      	bne.n	8006afa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006acc:	4b71      	ldr	r3, [pc, #452]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d005      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x17e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d001      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e24d      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae2:	4b6c      	ldr	r3, [pc, #432]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	22f8      	movs	r2, #248	; 0xf8
 8006ae8:	4393      	bics	r3, r2
 8006aea:	0019      	movs	r1, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	00da      	lsls	r2, r3, #3
 8006af2:	4b68      	ldr	r3, [pc, #416]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006af4:	430a      	orrs	r2, r1
 8006af6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006af8:	e041      	b.n	8006b7e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d024      	beq.n	8006b4c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b02:	4b64      	ldr	r3, [pc, #400]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4b63      	ldr	r3, [pc, #396]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006b08:	2101      	movs	r1, #1
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b0e:	f7fe ffcb 	bl	8005aa8 <HAL_GetTick>
 8006b12:	0003      	movs	r3, r0
 8006b14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b18:	f7fe ffc6 	bl	8005aa8 <HAL_GetTick>
 8006b1c:	0002      	movs	r2, r0
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e229      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2a:	4b5a      	ldr	r3, [pc, #360]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	4013      	ands	r3, r2
 8006b32:	d0f1      	beq.n	8006b18 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b34:	4b57      	ldr	r3, [pc, #348]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	22f8      	movs	r2, #248	; 0xf8
 8006b3a:	4393      	bics	r3, r2
 8006b3c:	0019      	movs	r1, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	00da      	lsls	r2, r3, #3
 8006b44:	4b53      	ldr	r3, [pc, #332]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006b46:	430a      	orrs	r2, r1
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e018      	b.n	8006b7e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b4c:	4b51      	ldr	r3, [pc, #324]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	4b50      	ldr	r3, [pc, #320]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006b52:	2101      	movs	r1, #1
 8006b54:	438a      	bics	r2, r1
 8006b56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b58:	f7fe ffa6 	bl	8005aa8 <HAL_GetTick>
 8006b5c:	0003      	movs	r3, r0
 8006b5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b60:	e008      	b.n	8006b74 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b62:	f7fe ffa1 	bl	8005aa8 <HAL_GetTick>
 8006b66:	0002      	movs	r2, r0
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e204      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b74:	4b47      	ldr	r3, [pc, #284]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	d1f1      	bne.n	8006b62 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2208      	movs	r2, #8
 8006b84:	4013      	ands	r3, r2
 8006b86:	d036      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d019      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b90:	4b40      	ldr	r3, [pc, #256]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b94:	4b3f      	ldr	r3, [pc, #252]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006b96:	2101      	movs	r1, #1
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b9c:	f7fe ff84 	bl	8005aa8 <HAL_GetTick>
 8006ba0:	0003      	movs	r3, r0
 8006ba2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ba6:	f7fe ff7f 	bl	8005aa8 <HAL_GetTick>
 8006baa:	0002      	movs	r2, r0
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e1e2      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bb8:	4b36      	ldr	r3, [pc, #216]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	d0f1      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x242>
 8006bc2:	e018      	b.n	8006bf6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bc4:	4b33      	ldr	r3, [pc, #204]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bc8:	4b32      	ldr	r3, [pc, #200]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006bca:	2101      	movs	r1, #1
 8006bcc:	438a      	bics	r2, r1
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bd0:	f7fe ff6a 	bl	8005aa8 <HAL_GetTick>
 8006bd4:	0003      	movs	r3, r0
 8006bd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd8:	e008      	b.n	8006bec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bda:	f7fe ff65 	bl	8005aa8 <HAL_GetTick>
 8006bde:	0002      	movs	r2, r0
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e1c8      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bec:	4b29      	ldr	r3, [pc, #164]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d1f1      	bne.n	8006bda <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	d100      	bne.n	8006c02 <HAL_RCC_OscConfig+0x29e>
 8006c00:	e0b6      	b.n	8006d70 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c02:	231f      	movs	r3, #31
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	2200      	movs	r2, #0
 8006c08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c0a:	4b22      	ldr	r3, [pc, #136]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006c0c:	69da      	ldr	r2, [r3, #28]
 8006c0e:	2380      	movs	r3, #128	; 0x80
 8006c10:	055b      	lsls	r3, r3, #21
 8006c12:	4013      	ands	r3, r2
 8006c14:	d111      	bne.n	8006c3a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c16:	4b1f      	ldr	r3, [pc, #124]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006c18:	69da      	ldr	r2, [r3, #28]
 8006c1a:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006c1c:	2180      	movs	r1, #128	; 0x80
 8006c1e:	0549      	lsls	r1, r1, #21
 8006c20:	430a      	orrs	r2, r1
 8006c22:	61da      	str	r2, [r3, #28]
 8006c24:	4b1b      	ldr	r3, [pc, #108]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	055b      	lsls	r3, r3, #21
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c32:	231f      	movs	r3, #31
 8006c34:	18fb      	adds	r3, r7, r3
 8006c36:	2201      	movs	r2, #1
 8006c38:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3a:	4b19      	ldr	r3, [pc, #100]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	2380      	movs	r3, #128	; 0x80
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	4013      	ands	r3, r2
 8006c44:	d11a      	bne.n	8006c7c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c46:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006c4c:	2180      	movs	r1, #128	; 0x80
 8006c4e:	0049      	lsls	r1, r1, #1
 8006c50:	430a      	orrs	r2, r1
 8006c52:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c54:	f7fe ff28 	bl	8005aa8 <HAL_GetTick>
 8006c58:	0003      	movs	r3, r0
 8006c5a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c5c:	e008      	b.n	8006c70 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c5e:	f7fe ff23 	bl	8005aa8 <HAL_GetTick>
 8006c62:	0002      	movs	r2, r0
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b64      	cmp	r3, #100	; 0x64
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e186      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c70:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	2380      	movs	r3, #128	; 0x80
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	4013      	ands	r3, r2
 8006c7a:	d0f0      	beq.n	8006c5e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d10f      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x340>
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006c86:	6a1a      	ldr	r2, [r3, #32]
 8006c88:	4b02      	ldr	r3, [pc, #8]	; (8006c94 <HAL_RCC_OscConfig+0x330>)
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	621a      	str	r2, [r3, #32]
 8006c90:	e036      	b.n	8006d00 <HAL_RCC_OscConfig+0x39c>
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	40021000 	.word	0x40021000
 8006c98:	fffeffff 	.word	0xfffeffff
 8006c9c:	fffbffff 	.word	0xfffbffff
 8006ca0:	40007000 	.word	0x40007000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10c      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x362>
 8006cac:	4bb6      	ldr	r3, [pc, #728]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006cae:	6a1a      	ldr	r2, [r3, #32]
 8006cb0:	4bb5      	ldr	r3, [pc, #724]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	438a      	bics	r2, r1
 8006cb6:	621a      	str	r2, [r3, #32]
 8006cb8:	4bb3      	ldr	r3, [pc, #716]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006cba:	6a1a      	ldr	r2, [r3, #32]
 8006cbc:	4bb2      	ldr	r3, [pc, #712]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006cbe:	2104      	movs	r1, #4
 8006cc0:	438a      	bics	r2, r1
 8006cc2:	621a      	str	r2, [r3, #32]
 8006cc4:	e01c      	b.n	8006d00 <HAL_RCC_OscConfig+0x39c>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	2b05      	cmp	r3, #5
 8006ccc:	d10c      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x384>
 8006cce:	4bae      	ldr	r3, [pc, #696]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006cd0:	6a1a      	ldr	r2, [r3, #32]
 8006cd2:	4bad      	ldr	r3, [pc, #692]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006cd4:	2104      	movs	r1, #4
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	621a      	str	r2, [r3, #32]
 8006cda:	4bab      	ldr	r3, [pc, #684]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006cdc:	6a1a      	ldr	r2, [r3, #32]
 8006cde:	4baa      	ldr	r3, [pc, #680]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	621a      	str	r2, [r3, #32]
 8006ce6:	e00b      	b.n	8006d00 <HAL_RCC_OscConfig+0x39c>
 8006ce8:	4ba7      	ldr	r3, [pc, #668]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006cea:	6a1a      	ldr	r2, [r3, #32]
 8006cec:	4ba6      	ldr	r3, [pc, #664]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006cee:	2101      	movs	r1, #1
 8006cf0:	438a      	bics	r2, r1
 8006cf2:	621a      	str	r2, [r3, #32]
 8006cf4:	4ba4      	ldr	r3, [pc, #656]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006cf6:	6a1a      	ldr	r2, [r3, #32]
 8006cf8:	4ba3      	ldr	r3, [pc, #652]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006cfa:	2104      	movs	r1, #4
 8006cfc:	438a      	bics	r2, r1
 8006cfe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d014      	beq.n	8006d32 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d08:	f7fe fece 	bl	8005aa8 <HAL_GetTick>
 8006d0c:	0003      	movs	r3, r0
 8006d0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d10:	e009      	b.n	8006d26 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d12:	f7fe fec9 	bl	8005aa8 <HAL_GetTick>
 8006d16:	0002      	movs	r2, r0
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	4a9b      	ldr	r2, [pc, #620]	; (8006f8c <HAL_RCC_OscConfig+0x628>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e12b      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d26:	4b98      	ldr	r3, [pc, #608]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCC_OscConfig+0x3ae>
 8006d30:	e013      	b.n	8006d5a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d32:	f7fe feb9 	bl	8005aa8 <HAL_GetTick>
 8006d36:	0003      	movs	r3, r0
 8006d38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d3a:	e009      	b.n	8006d50 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d3c:	f7fe feb4 	bl	8005aa8 <HAL_GetTick>
 8006d40:	0002      	movs	r2, r0
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	4a91      	ldr	r2, [pc, #580]	; (8006f8c <HAL_RCC_OscConfig+0x628>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d901      	bls.n	8006d50 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e116      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d50:	4b8d      	ldr	r3, [pc, #564]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	2202      	movs	r2, #2
 8006d56:	4013      	ands	r3, r2
 8006d58:	d1f0      	bne.n	8006d3c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006d5a:	231f      	movs	r3, #31
 8006d5c:	18fb      	adds	r3, r7, r3
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d105      	bne.n	8006d70 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d64:	4b88      	ldr	r3, [pc, #544]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	4b87      	ldr	r3, [pc, #540]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006d6a:	4989      	ldr	r1, [pc, #548]	; (8006f90 <HAL_RCC_OscConfig+0x62c>)
 8006d6c:	400a      	ands	r2, r1
 8006d6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2210      	movs	r2, #16
 8006d76:	4013      	ands	r3, r2
 8006d78:	d063      	beq.n	8006e42 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d12a      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006d82:	4b81      	ldr	r3, [pc, #516]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d86:	4b80      	ldr	r3, [pc, #512]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006d88:	2104      	movs	r1, #4
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006d8e:	4b7e      	ldr	r3, [pc, #504]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d92:	4b7d      	ldr	r3, [pc, #500]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006d94:	2101      	movs	r1, #1
 8006d96:	430a      	orrs	r2, r1
 8006d98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d9a:	f7fe fe85 	bl	8005aa8 <HAL_GetTick>
 8006d9e:	0003      	movs	r3, r0
 8006da0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006da2:	e008      	b.n	8006db6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006da4:	f7fe fe80 	bl	8005aa8 <HAL_GetTick>
 8006da8:	0002      	movs	r2, r0
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d901      	bls.n	8006db6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e0e3      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006db6:	4b74      	ldr	r3, [pc, #464]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	2202      	movs	r2, #2
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d0f1      	beq.n	8006da4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006dc0:	4b71      	ldr	r3, [pc, #452]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc4:	22f8      	movs	r2, #248	; 0xf8
 8006dc6:	4393      	bics	r3, r2
 8006dc8:	0019      	movs	r1, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	00da      	lsls	r2, r3, #3
 8006dd0:	4b6d      	ldr	r3, [pc, #436]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8006dd6:	e034      	b.n	8006e42 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	3305      	adds	r3, #5
 8006dde:	d111      	bne.n	8006e04 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006de0:	4b69      	ldr	r3, [pc, #420]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de4:	4b68      	ldr	r3, [pc, #416]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006de6:	2104      	movs	r1, #4
 8006de8:	438a      	bics	r2, r1
 8006dea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006dec:	4b66      	ldr	r3, [pc, #408]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df0:	22f8      	movs	r2, #248	; 0xf8
 8006df2:	4393      	bics	r3, r2
 8006df4:	0019      	movs	r1, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	00da      	lsls	r2, r3, #3
 8006dfc:	4b62      	ldr	r3, [pc, #392]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	635a      	str	r2, [r3, #52]	; 0x34
 8006e02:	e01e      	b.n	8006e42 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006e04:	4b60      	ldr	r3, [pc, #384]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e08:	4b5f      	ldr	r3, [pc, #380]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006e0a:	2104      	movs	r1, #4
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006e10:	4b5d      	ldr	r3, [pc, #372]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e14:	4b5c      	ldr	r3, [pc, #368]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006e16:	2101      	movs	r1, #1
 8006e18:	438a      	bics	r2, r1
 8006e1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e1c:	f7fe fe44 	bl	8005aa8 <HAL_GetTick>
 8006e20:	0003      	movs	r3, r0
 8006e22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006e24:	e008      	b.n	8006e38 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006e26:	f7fe fe3f 	bl	8005aa8 <HAL_GetTick>
 8006e2a:	0002      	movs	r2, r0
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e0a2      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006e38:	4b53      	ldr	r3, [pc, #332]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	4013      	ands	r3, r2
 8006e40:	d1f1      	bne.n	8006e26 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d100      	bne.n	8006e4c <HAL_RCC_OscConfig+0x4e8>
 8006e4a:	e097      	b.n	8006f7c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e4c:	4b4e      	ldr	r3, [pc, #312]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	220c      	movs	r2, #12
 8006e52:	4013      	ands	r3, r2
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d100      	bne.n	8006e5a <HAL_RCC_OscConfig+0x4f6>
 8006e58:	e06b      	b.n	8006f32 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d14c      	bne.n	8006efc <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e62:	4b49      	ldr	r3, [pc, #292]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4b48      	ldr	r3, [pc, #288]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006e68:	494a      	ldr	r1, [pc, #296]	; (8006f94 <HAL_RCC_OscConfig+0x630>)
 8006e6a:	400a      	ands	r2, r1
 8006e6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6e:	f7fe fe1b 	bl	8005aa8 <HAL_GetTick>
 8006e72:	0003      	movs	r3, r0
 8006e74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e78:	f7fe fe16 	bl	8005aa8 <HAL_GetTick>
 8006e7c:	0002      	movs	r2, r0
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e079      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e8a:	4b3f      	ldr	r3, [pc, #252]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	2380      	movs	r3, #128	; 0x80
 8006e90:	049b      	lsls	r3, r3, #18
 8006e92:	4013      	ands	r3, r2
 8006e94:	d1f0      	bne.n	8006e78 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e96:	4b3c      	ldr	r3, [pc, #240]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	220f      	movs	r2, #15
 8006e9c:	4393      	bics	r3, r2
 8006e9e:	0019      	movs	r1, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	4b38      	ldr	r3, [pc, #224]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8006eaa:	4b37      	ldr	r3, [pc, #220]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	4a3a      	ldr	r2, [pc, #232]	; (8006f98 <HAL_RCC_OscConfig+0x634>)
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	0019      	movs	r1, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	4b32      	ldr	r3, [pc, #200]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ec4:	4b30      	ldr	r3, [pc, #192]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	4b2f      	ldr	r3, [pc, #188]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006eca:	2180      	movs	r1, #128	; 0x80
 8006ecc:	0449      	lsls	r1, r1, #17
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed2:	f7fe fde9 	bl	8005aa8 <HAL_GetTick>
 8006ed6:	0003      	movs	r3, r0
 8006ed8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006edc:	f7fe fde4 	bl	8005aa8 <HAL_GetTick>
 8006ee0:	0002      	movs	r2, r0
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e047      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006eee:	4b26      	ldr	r3, [pc, #152]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	2380      	movs	r3, #128	; 0x80
 8006ef4:	049b      	lsls	r3, r3, #18
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	d0f0      	beq.n	8006edc <HAL_RCC_OscConfig+0x578>
 8006efa:	e03f      	b.n	8006f7c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006efc:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	4b21      	ldr	r3, [pc, #132]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006f02:	4924      	ldr	r1, [pc, #144]	; (8006f94 <HAL_RCC_OscConfig+0x630>)
 8006f04:	400a      	ands	r2, r1
 8006f06:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f08:	f7fe fdce 	bl	8005aa8 <HAL_GetTick>
 8006f0c:	0003      	movs	r3, r0
 8006f0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f10:	e008      	b.n	8006f24 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f12:	f7fe fdc9 	bl	8005aa8 <HAL_GetTick>
 8006f16:	0002      	movs	r2, r0
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e02c      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f24:	4b18      	ldr	r3, [pc, #96]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	2380      	movs	r3, #128	; 0x80
 8006f2a:	049b      	lsls	r3, r3, #18
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	d1f0      	bne.n	8006f12 <HAL_RCC_OscConfig+0x5ae>
 8006f30:	e024      	b.n	8006f7c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d101      	bne.n	8006f3e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e01f      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006f3e:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006f44:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <HAL_RCC_OscConfig+0x624>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	2380      	movs	r3, #128	; 0x80
 8006f4e:	025b      	lsls	r3, r3, #9
 8006f50:	401a      	ands	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d10e      	bne.n	8006f78 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	220f      	movs	r2, #15
 8006f5e:	401a      	ands	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d107      	bne.n	8006f78 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	23f0      	movs	r3, #240	; 0xf0
 8006f6c:	039b      	lsls	r3, r3, #14
 8006f6e:	401a      	ands	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d001      	beq.n	8006f7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	0018      	movs	r0, r3
 8006f80:	46bd      	mov	sp, r7
 8006f82:	b008      	add	sp, #32
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	00001388 	.word	0x00001388
 8006f90:	efffffff 	.word	0xefffffff
 8006f94:	feffffff 	.word	0xfeffffff
 8006f98:	ffc2ffff 	.word	0xffc2ffff

08006f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0b3      	b.n	8007118 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fb0:	4b5b      	ldr	r3, [pc, #364]	; (8007120 <HAL_RCC_ClockConfig+0x184>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d911      	bls.n	8006fe2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fbe:	4b58      	ldr	r3, [pc, #352]	; (8007120 <HAL_RCC_ClockConfig+0x184>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	4393      	bics	r3, r2
 8006fc6:	0019      	movs	r1, r3
 8006fc8:	4b55      	ldr	r3, [pc, #340]	; (8007120 <HAL_RCC_ClockConfig+0x184>)
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd0:	4b53      	ldr	r3, [pc, #332]	; (8007120 <HAL_RCC_ClockConfig+0x184>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d001      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e09a      	b.n	8007118 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	4013      	ands	r3, r2
 8006fea:	d015      	beq.n	8007018 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	d006      	beq.n	8007004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006ff6:	4b4b      	ldr	r3, [pc, #300]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	4b4a      	ldr	r3, [pc, #296]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 8006ffc:	21e0      	movs	r1, #224	; 0xe0
 8006ffe:	00c9      	lsls	r1, r1, #3
 8007000:	430a      	orrs	r2, r1
 8007002:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007004:	4b47      	ldr	r3, [pc, #284]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	22f0      	movs	r2, #240	; 0xf0
 800700a:	4393      	bics	r3, r2
 800700c:	0019      	movs	r1, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	4b44      	ldr	r3, [pc, #272]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2201      	movs	r2, #1
 800701e:	4013      	ands	r3, r2
 8007020:	d040      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d107      	bne.n	800703a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800702a:	4b3e      	ldr	r3, [pc, #248]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	2380      	movs	r3, #128	; 0x80
 8007030:	029b      	lsls	r3, r3, #10
 8007032:	4013      	ands	r3, r2
 8007034:	d114      	bne.n	8007060 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e06e      	b.n	8007118 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d107      	bne.n	8007052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007042:	4b38      	ldr	r3, [pc, #224]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	2380      	movs	r3, #128	; 0x80
 8007048:	049b      	lsls	r3, r3, #18
 800704a:	4013      	ands	r3, r2
 800704c:	d108      	bne.n	8007060 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e062      	b.n	8007118 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007052:	4b34      	ldr	r3, [pc, #208]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2202      	movs	r2, #2
 8007058:	4013      	ands	r3, r2
 800705a:	d101      	bne.n	8007060 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e05b      	b.n	8007118 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007060:	4b30      	ldr	r3, [pc, #192]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2203      	movs	r2, #3
 8007066:	4393      	bics	r3, r2
 8007068:	0019      	movs	r1, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	4b2d      	ldr	r3, [pc, #180]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 8007070:	430a      	orrs	r2, r1
 8007072:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007074:	f7fe fd18 	bl	8005aa8 <HAL_GetTick>
 8007078:	0003      	movs	r3, r0
 800707a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800707c:	e009      	b.n	8007092 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800707e:	f7fe fd13 	bl	8005aa8 <HAL_GetTick>
 8007082:	0002      	movs	r2, r0
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	4a27      	ldr	r2, [pc, #156]	; (8007128 <HAL_RCC_ClockConfig+0x18c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e042      	b.n	8007118 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007092:	4b24      	ldr	r3, [pc, #144]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	220c      	movs	r2, #12
 8007098:	401a      	ands	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d1ec      	bne.n	800707e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070a4:	4b1e      	ldr	r3, [pc, #120]	; (8007120 <HAL_RCC_ClockConfig+0x184>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2201      	movs	r2, #1
 80070aa:	4013      	ands	r3, r2
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d211      	bcs.n	80070d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b2:	4b1b      	ldr	r3, [pc, #108]	; (8007120 <HAL_RCC_ClockConfig+0x184>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2201      	movs	r2, #1
 80070b8:	4393      	bics	r3, r2
 80070ba:	0019      	movs	r1, r3
 80070bc:	4b18      	ldr	r3, [pc, #96]	; (8007120 <HAL_RCC_ClockConfig+0x184>)
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070c4:	4b16      	ldr	r3, [pc, #88]	; (8007120 <HAL_RCC_ClockConfig+0x184>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2201      	movs	r2, #1
 80070ca:	4013      	ands	r3, r2
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d001      	beq.n	80070d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e020      	b.n	8007118 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2204      	movs	r2, #4
 80070dc:	4013      	ands	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80070e0:	4b10      	ldr	r3, [pc, #64]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	4a11      	ldr	r2, [pc, #68]	; (800712c <HAL_RCC_ClockConfig+0x190>)
 80070e6:	4013      	ands	r3, r2
 80070e8:	0019      	movs	r1, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 80070f0:	430a      	orrs	r2, r1
 80070f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80070f4:	f000 f820 	bl	8007138 <HAL_RCC_GetSysClockFreq>
 80070f8:	0001      	movs	r1, r0
 80070fa:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <HAL_RCC_ClockConfig+0x188>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	091b      	lsrs	r3, r3, #4
 8007100:	220f      	movs	r2, #15
 8007102:	4013      	ands	r3, r2
 8007104:	4a0a      	ldr	r2, [pc, #40]	; (8007130 <HAL_RCC_ClockConfig+0x194>)
 8007106:	5cd3      	ldrb	r3, [r2, r3]
 8007108:	000a      	movs	r2, r1
 800710a:	40da      	lsrs	r2, r3
 800710c:	4b09      	ldr	r3, [pc, #36]	; (8007134 <HAL_RCC_ClockConfig+0x198>)
 800710e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007110:	2000      	movs	r0, #0
 8007112:	f7fe fc83 	bl	8005a1c <HAL_InitTick>
  
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	0018      	movs	r0, r3
 800711a:	46bd      	mov	sp, r7
 800711c:	b004      	add	sp, #16
 800711e:	bd80      	pop	{r7, pc}
 8007120:	40022000 	.word	0x40022000
 8007124:	40021000 	.word	0x40021000
 8007128:	00001388 	.word	0x00001388
 800712c:	fffff8ff 	.word	0xfffff8ff
 8007130:	08009074 	.word	0x08009074
 8007134:	20000008 	.word	0x20000008

08007138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007138:	b590      	push	{r4, r7, lr}
 800713a:	b08f      	sub	sp, #60	; 0x3c
 800713c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800713e:	2314      	movs	r3, #20
 8007140:	18fb      	adds	r3, r7, r3
 8007142:	4a2b      	ldr	r2, [pc, #172]	; (80071f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007144:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007146:	c313      	stmia	r3!, {r0, r1, r4}
 8007148:	6812      	ldr	r2, [r2, #0]
 800714a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800714c:	1d3b      	adds	r3, r7, #4
 800714e:	4a29      	ldr	r2, [pc, #164]	; (80071f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007150:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007152:	c313      	stmia	r3!, {r0, r1, r4}
 8007154:	6812      	ldr	r2, [r2, #0]
 8007156:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800715c:	2300      	movs	r3, #0
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007160:	2300      	movs	r3, #0
 8007162:	637b      	str	r3, [r7, #52]	; 0x34
 8007164:	2300      	movs	r3, #0
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800716c:	4b22      	ldr	r3, [pc, #136]	; (80071f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	220c      	movs	r2, #12
 8007176:	4013      	ands	r3, r2
 8007178:	2b04      	cmp	r3, #4
 800717a:	d002      	beq.n	8007182 <HAL_RCC_GetSysClockFreq+0x4a>
 800717c:	2b08      	cmp	r3, #8
 800717e:	d003      	beq.n	8007188 <HAL_RCC_GetSysClockFreq+0x50>
 8007180:	e02d      	b.n	80071de <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007182:	4b1e      	ldr	r3, [pc, #120]	; (80071fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8007184:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007186:	e02d      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	0c9b      	lsrs	r3, r3, #18
 800718c:	220f      	movs	r2, #15
 800718e:	4013      	ands	r3, r2
 8007190:	2214      	movs	r2, #20
 8007192:	18ba      	adds	r2, r7, r2
 8007194:	5cd3      	ldrb	r3, [r2, r3]
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007198:	4b17      	ldr	r3, [pc, #92]	; (80071f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	220f      	movs	r2, #15
 800719e:	4013      	ands	r3, r2
 80071a0:	1d3a      	adds	r2, r7, #4
 80071a2:	5cd3      	ldrb	r3, [r2, r3]
 80071a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80071a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a8:	2380      	movs	r3, #128	; 0x80
 80071aa:	025b      	lsls	r3, r3, #9
 80071ac:	4013      	ands	r3, r2
 80071ae:	d009      	beq.n	80071c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80071b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071b2:	4812      	ldr	r0, [pc, #72]	; (80071fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80071b4:	f7f8 ffa8 	bl	8000108 <__udivsi3>
 80071b8:	0003      	movs	r3, r0
 80071ba:	001a      	movs	r2, r3
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	4353      	muls	r3, r2
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
 80071c2:	e009      	b.n	80071d8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80071c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071c6:	000a      	movs	r2, r1
 80071c8:	0152      	lsls	r2, r2, #5
 80071ca:	1a52      	subs	r2, r2, r1
 80071cc:	0193      	lsls	r3, r2, #6
 80071ce:	1a9b      	subs	r3, r3, r2
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	185b      	adds	r3, r3, r1
 80071d4:	021b      	lsls	r3, r3, #8
 80071d6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80071dc:	e002      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80071de:	4b07      	ldr	r3, [pc, #28]	; (80071fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80071e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80071e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80071e6:	0018      	movs	r0, r3
 80071e8:	46bd      	mov	sp, r7
 80071ea:	b00f      	add	sp, #60	; 0x3c
 80071ec:	bd90      	pop	{r4, r7, pc}
 80071ee:	46c0      	nop			; (mov r8, r8)
 80071f0:	08008f34 	.word	0x08008f34
 80071f4:	08008f44 	.word	0x08008f44
 80071f8:	40021000 	.word	0x40021000
 80071fc:	007a1200 	.word	0x007a1200

08007200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007204:	4b02      	ldr	r3, [pc, #8]	; (8007210 <HAL_RCC_GetHCLKFreq+0x10>)
 8007206:	681b      	ldr	r3, [r3, #0]
}
 8007208:	0018      	movs	r0, r3
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	20000008 	.word	0x20000008

08007214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8007218:	f7ff fff2 	bl	8007200 <HAL_RCC_GetHCLKFreq>
 800721c:	0001      	movs	r1, r0
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	2207      	movs	r2, #7
 8007226:	4013      	ands	r3, r2
 8007228:	4a04      	ldr	r2, [pc, #16]	; (800723c <HAL_RCC_GetPCLK1Freq+0x28>)
 800722a:	5cd3      	ldrb	r3, [r2, r3]
 800722c:	40d9      	lsrs	r1, r3
 800722e:	000b      	movs	r3, r1
}    
 8007230:	0018      	movs	r0, r3
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	46c0      	nop			; (mov r8, r8)
 8007238:	40021000 	.word	0x40021000
 800723c:	08009084 	.word	0x08009084

08007240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	2380      	movs	r3, #128	; 0x80
 8007256:	025b      	lsls	r3, r3, #9
 8007258:	4013      	ands	r3, r2
 800725a:	d100      	bne.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800725c:	e08f      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800725e:	2317      	movs	r3, #23
 8007260:	18fb      	adds	r3, r7, r3
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007266:	4b57      	ldr	r3, [pc, #348]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007268:	69da      	ldr	r2, [r3, #28]
 800726a:	2380      	movs	r3, #128	; 0x80
 800726c:	055b      	lsls	r3, r3, #21
 800726e:	4013      	ands	r3, r2
 8007270:	d111      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007272:	4b54      	ldr	r3, [pc, #336]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007274:	69da      	ldr	r2, [r3, #28]
 8007276:	4b53      	ldr	r3, [pc, #332]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007278:	2180      	movs	r1, #128	; 0x80
 800727a:	0549      	lsls	r1, r1, #21
 800727c:	430a      	orrs	r2, r1
 800727e:	61da      	str	r2, [r3, #28]
 8007280:	4b50      	ldr	r3, [pc, #320]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	2380      	movs	r3, #128	; 0x80
 8007286:	055b      	lsls	r3, r3, #21
 8007288:	4013      	ands	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]
 800728c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800728e:	2317      	movs	r3, #23
 8007290:	18fb      	adds	r3, r7, r3
 8007292:	2201      	movs	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007296:	4b4c      	ldr	r3, [pc, #304]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	2380      	movs	r3, #128	; 0x80
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	4013      	ands	r3, r2
 80072a0:	d11a      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072a2:	4b49      	ldr	r3, [pc, #292]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4b48      	ldr	r3, [pc, #288]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80072a8:	2180      	movs	r1, #128	; 0x80
 80072aa:	0049      	lsls	r1, r1, #1
 80072ac:	430a      	orrs	r2, r1
 80072ae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072b0:	f7fe fbfa 	bl	8005aa8 <HAL_GetTick>
 80072b4:	0003      	movs	r3, r0
 80072b6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b8:	e008      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ba:	f7fe fbf5 	bl	8005aa8 <HAL_GetTick>
 80072be:	0002      	movs	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b64      	cmp	r3, #100	; 0x64
 80072c6:	d901      	bls.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e077      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072cc:	4b3e      	ldr	r3, [pc, #248]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	2380      	movs	r3, #128	; 0x80
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	4013      	ands	r3, r2
 80072d6:	d0f0      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072d8:	4b3a      	ldr	r3, [pc, #232]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80072da:	6a1a      	ldr	r2, [r3, #32]
 80072dc:	23c0      	movs	r3, #192	; 0xc0
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4013      	ands	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d034      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	23c0      	movs	r3, #192	; 0xc0
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4013      	ands	r3, r2
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d02c      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072fa:	4b32      	ldr	r3, [pc, #200]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	4a33      	ldr	r2, [pc, #204]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8007300:	4013      	ands	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007304:	4b2f      	ldr	r3, [pc, #188]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007306:	6a1a      	ldr	r2, [r3, #32]
 8007308:	4b2e      	ldr	r3, [pc, #184]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800730a:	2180      	movs	r1, #128	; 0x80
 800730c:	0249      	lsls	r1, r1, #9
 800730e:	430a      	orrs	r2, r1
 8007310:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007312:	4b2c      	ldr	r3, [pc, #176]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007314:	6a1a      	ldr	r2, [r3, #32]
 8007316:	4b2b      	ldr	r3, [pc, #172]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007318:	492d      	ldr	r1, [pc, #180]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800731a:	400a      	ands	r2, r1
 800731c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800731e:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	4013      	ands	r3, r2
 800732a:	d013      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800732c:	f7fe fbbc 	bl	8005aa8 <HAL_GetTick>
 8007330:	0003      	movs	r3, r0
 8007332:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007334:	e009      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007336:	f7fe fbb7 	bl	8005aa8 <HAL_GetTick>
 800733a:	0002      	movs	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	4a24      	ldr	r2, [pc, #144]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e038      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800734a:	4b1e      	ldr	r3, [pc, #120]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	2202      	movs	r2, #2
 8007350:	4013      	ands	r3, r2
 8007352:	d0f0      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007354:	4b1b      	ldr	r3, [pc, #108]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	4a1c      	ldr	r2, [pc, #112]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800735a:	4013      	ands	r3, r2
 800735c:	0019      	movs	r1, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	4b18      	ldr	r3, [pc, #96]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007364:	430a      	orrs	r2, r1
 8007366:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007368:	2317      	movs	r3, #23
 800736a:	18fb      	adds	r3, r7, r3
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d105      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007372:	4b14      	ldr	r3, [pc, #80]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007374:	69da      	ldr	r2, [r3, #28]
 8007376:	4b13      	ldr	r3, [pc, #76]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007378:	4917      	ldr	r1, [pc, #92]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800737a:	400a      	ands	r2, r1
 800737c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2201      	movs	r2, #1
 8007384:	4013      	ands	r3, r2
 8007386:	d009      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007388:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738c:	2203      	movs	r2, #3
 800738e:	4393      	bics	r3, r2
 8007390:	0019      	movs	r1, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8007398:	430a      	orrs	r2, r1
 800739a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2220      	movs	r2, #32
 80073a2:	4013      	ands	r3, r2
 80073a4:	d009      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073a6:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	2210      	movs	r2, #16
 80073ac:	4393      	bics	r3, r2
 80073ae:	0019      	movs	r1, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	4b03      	ldr	r3, [pc, #12]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80073b6:	430a      	orrs	r2, r1
 80073b8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	0018      	movs	r0, r3
 80073be:	46bd      	mov	sp, r7
 80073c0:	b006      	add	sp, #24
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40021000 	.word	0x40021000
 80073c8:	40007000 	.word	0x40007000
 80073cc:	fffffcff 	.word	0xfffffcff
 80073d0:	fffeffff 	.word	0xfffeffff
 80073d4:	00001388 	.word	0x00001388
 80073d8:	efffffff 	.word	0xefffffff

080073dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e08a      	b.n	8007504 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	225d      	movs	r2, #93	; 0x5d
 80073f8:	5c9b      	ldrb	r3, [r3, r2]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d107      	bne.n	8007410 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	225c      	movs	r2, #92	; 0x5c
 8007404:	2100      	movs	r1, #0
 8007406:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	0018      	movs	r0, r3
 800740c:	f7fd ff8a 	bl	8005324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	225d      	movs	r2, #93	; 0x5d
 8007414:	2102      	movs	r1, #2
 8007416:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2140      	movs	r1, #64	; 0x40
 8007424:	438a      	bics	r2, r1
 8007426:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	23e0      	movs	r3, #224	; 0xe0
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	429a      	cmp	r2, r3
 8007432:	d902      	bls.n	800743a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	e002      	b.n	8007440 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800743a:	2380      	movs	r3, #128	; 0x80
 800743c:	015b      	lsls	r3, r3, #5
 800743e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68da      	ldr	r2, [r3, #12]
 8007444:	23f0      	movs	r3, #240	; 0xf0
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	429a      	cmp	r2, r3
 800744a:	d008      	beq.n	800745e <HAL_SPI_Init+0x82>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	23e0      	movs	r3, #224	; 0xe0
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	429a      	cmp	r2, r3
 8007456:	d002      	beq.n	800745e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10c      	bne.n	8007480 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	23e0      	movs	r3, #224	; 0xe0
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	429a      	cmp	r2, r3
 8007470:	d903      	bls.n	800747a <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2202      	movs	r2, #2
 8007476:	631a      	str	r2, [r3, #48]	; 0x30
 8007478:	e002      	b.n	8007480 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6999      	ldr	r1, [r3, #24]
 800749a:	2380      	movs	r3, #128	; 0x80
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	400b      	ands	r3, r1
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	0011      	movs	r1, r2
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	0c1b      	lsrs	r3, r3, #16
 80074c2:	2204      	movs	r2, #4
 80074c4:	401a      	ands	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	0011      	movs	r1, r2
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69da      	ldr	r2, [r3, #28]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4907      	ldr	r1, [pc, #28]	; (800750c <HAL_SPI_Init+0x130>)
 80074f0:	400a      	ands	r2, r1
 80074f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	225d      	movs	r2, #93	; 0x5d
 80074fe:	2101      	movs	r1, #1
 8007500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	0018      	movs	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	b004      	add	sp, #16
 800750a:	bd80      	pop	{r7, pc}
 800750c:	fffff7ff 	.word	0xfffff7ff

08007510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e01e      	b.n	8007560 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	223d      	movs	r2, #61	; 0x3d
 8007526:	5c9b      	ldrb	r3, [r3, r2]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d107      	bne.n	800753e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	223c      	movs	r2, #60	; 0x3c
 8007532:	2100      	movs	r1, #0
 8007534:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	0018      	movs	r0, r3
 800753a:	f7fd ff95 	bl	8005468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	223d      	movs	r2, #61	; 0x3d
 8007542:	2102      	movs	r1, #2
 8007544:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3304      	adds	r3, #4
 800754e:	0019      	movs	r1, r3
 8007550:	0010      	movs	r0, r2
 8007552:	f000 f9ff 	bl	8007954 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	223d      	movs	r2, #61	; 0x3d
 800755a:	2101      	movs	r1, #1
 800755c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	0018      	movs	r0, r3
 8007562:	46bd      	mov	sp, r7
 8007564:	b002      	add	sp, #8
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e01e      	b.n	80075b8 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	223d      	movs	r2, #61	; 0x3d
 800757e:	5c9b      	ldrb	r3, [r3, r2]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d107      	bne.n	8007596 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	223c      	movs	r2, #60	; 0x3c
 800758a:	2100      	movs	r1, #0
 800758c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	0018      	movs	r0, r3
 8007592:	f000 f815 	bl	80075c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	223d      	movs	r2, #61	; 0x3d
 800759a:	2102      	movs	r1, #2
 800759c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3304      	adds	r3, #4
 80075a6:	0019      	movs	r1, r3
 80075a8:	0010      	movs	r0, r2
 80075aa:	f000 f9d3 	bl	8007954 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	223d      	movs	r2, #61	; 0x3d
 80075b2:	2101      	movs	r1, #1
 80075b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	0018      	movs	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b002      	add	sp, #8
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075c8:	46c0      	nop			; (mov r8, r8)
 80075ca:	46bd      	mov	sp, r7
 80075cc:	b002      	add	sp, #8
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	2201      	movs	r2, #1
 80075e2:	0018      	movs	r0, r3
 80075e4:	f000 fcc2 	bl	8007f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1a      	ldr	r2, [pc, #104]	; (8007658 <HAL_TIM_PWM_Start+0x88>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00e      	beq.n	8007610 <HAL_TIM_PWM_Start+0x40>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a19      	ldr	r2, [pc, #100]	; (800765c <HAL_TIM_PWM_Start+0x8c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d009      	beq.n	8007610 <HAL_TIM_PWM_Start+0x40>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a17      	ldr	r2, [pc, #92]	; (8007660 <HAL_TIM_PWM_Start+0x90>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d004      	beq.n	8007610 <HAL_TIM_PWM_Start+0x40>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a16      	ldr	r2, [pc, #88]	; (8007664 <HAL_TIM_PWM_Start+0x94>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d101      	bne.n	8007614 <HAL_TIM_PWM_Start+0x44>
 8007610:	2301      	movs	r3, #1
 8007612:	e000      	b.n	8007616 <HAL_TIM_PWM_Start+0x46>
 8007614:	2300      	movs	r3, #0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d008      	beq.n	800762c <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2180      	movs	r1, #128	; 0x80
 8007626:	0209      	lsls	r1, r1, #8
 8007628:	430a      	orrs	r2, r1
 800762a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	2207      	movs	r2, #7
 8007634:	4013      	ands	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b06      	cmp	r3, #6
 800763c:	d007      	beq.n	800764e <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2101      	movs	r1, #1
 800764a:	430a      	orrs	r2, r1
 800764c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	0018      	movs	r0, r3
 8007652:	46bd      	mov	sp, r7
 8007654:	b004      	add	sp, #16
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40012c00 	.word	0x40012c00
 800765c:	40014000 	.word	0x40014000
 8007660:	40014400 	.word	0x40014400
 8007664:	40014800 	.word	0x40014800

08007668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	223c      	movs	r2, #60	; 0x3c
 8007678:	5c9b      	ldrb	r3, [r3, r2]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800767e:	2302      	movs	r3, #2
 8007680:	e0a4      	b.n	80077cc <HAL_TIM_PWM_ConfigChannel+0x164>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	223c      	movs	r2, #60	; 0x3c
 8007686:	2101      	movs	r1, #1
 8007688:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	223d      	movs	r2, #61	; 0x3d
 800768e:	2102      	movs	r1, #2
 8007690:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b04      	cmp	r3, #4
 8007696:	d029      	beq.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x84>
 8007698:	d802      	bhi.n	80076a0 <HAL_TIM_PWM_ConfigChannel+0x38>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800769e:	e08c      	b.n	80077ba <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d046      	beq.n	8007732 <HAL_TIM_PWM_ConfigChannel+0xca>
 80076a4:	2b0c      	cmp	r3, #12
 80076a6:	d065      	beq.n	8007774 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80076a8:	e087      	b.n	80077ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	0011      	movs	r1, r2
 80076b2:	0018      	movs	r0, r3
 80076b4:	f000 f9c4 	bl	8007a40 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2108      	movs	r1, #8
 80076c4:	430a      	orrs	r2, r1
 80076c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2104      	movs	r1, #4
 80076d4:	438a      	bics	r2, r1
 80076d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6999      	ldr	r1, [r3, #24]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	691a      	ldr	r2, [r3, #16]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	619a      	str	r2, [r3, #24]
      break;
 80076ea:	e066      	b.n	80077ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	0011      	movs	r1, r2
 80076f4:	0018      	movs	r0, r3
 80076f6:	f000 fa2b 	bl	8007b50 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	699a      	ldr	r2, [r3, #24]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2180      	movs	r1, #128	; 0x80
 8007706:	0109      	lsls	r1, r1, #4
 8007708:	430a      	orrs	r2, r1
 800770a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	492f      	ldr	r1, [pc, #188]	; (80077d4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007718:	400a      	ands	r2, r1
 800771a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6999      	ldr	r1, [r3, #24]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	021a      	lsls	r2, r3, #8
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	619a      	str	r2, [r3, #24]
      break;
 8007730:	e043      	b.n	80077ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	0011      	movs	r1, r2
 800773a:	0018      	movs	r0, r3
 800773c:	f000 fa8c 	bl	8007c58 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	69da      	ldr	r2, [r3, #28]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2108      	movs	r1, #8
 800774c:	430a      	orrs	r2, r1
 800774e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	69da      	ldr	r2, [r3, #28]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2104      	movs	r1, #4
 800775c:	438a      	bics	r2, r1
 800775e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69d9      	ldr	r1, [r3, #28]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	691a      	ldr	r2, [r3, #16]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	61da      	str	r2, [r3, #28]
      break;
 8007772:	e022      	b.n	80077ba <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	0011      	movs	r1, r2
 800777c:	0018      	movs	r0, r3
 800777e:	f000 faf1 	bl	8007d64 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69da      	ldr	r2, [r3, #28]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2180      	movs	r1, #128	; 0x80
 800778e:	0109      	lsls	r1, r1, #4
 8007790:	430a      	orrs	r2, r1
 8007792:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69da      	ldr	r2, [r3, #28]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	490d      	ldr	r1, [pc, #52]	; (80077d4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80077a0:	400a      	ands	r2, r1
 80077a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69d9      	ldr	r1, [r3, #28]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	021a      	lsls	r2, r3, #8
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	61da      	str	r2, [r3, #28]
      break;
 80077b8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	223d      	movs	r2, #61	; 0x3d
 80077be:	2101      	movs	r1, #1
 80077c0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	223c      	movs	r2, #60	; 0x3c
 80077c6:	2100      	movs	r1, #0
 80077c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	0018      	movs	r0, r3
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b004      	add	sp, #16
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	fffffbff 	.word	0xfffffbff

080077d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	223c      	movs	r2, #60	; 0x3c
 80077e6:	5c9b      	ldrb	r3, [r3, r2]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d101      	bne.n	80077f0 <HAL_TIM_ConfigClockSource+0x18>
 80077ec:	2302      	movs	r3, #2
 80077ee:	e0ab      	b.n	8007948 <HAL_TIM_ConfigClockSource+0x170>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	223c      	movs	r2, #60	; 0x3c
 80077f4:	2101      	movs	r1, #1
 80077f6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	223d      	movs	r2, #61	; 0x3d
 80077fc:	2102      	movs	r1, #2
 80077fe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2277      	movs	r2, #119	; 0x77
 800780c:	4393      	bics	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4a4f      	ldr	r2, [pc, #316]	; (8007950 <HAL_TIM_ConfigClockSource+0x178>)
 8007814:	4013      	ands	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b40      	cmp	r3, #64	; 0x40
 8007826:	d100      	bne.n	800782a <HAL_TIM_ConfigClockSource+0x52>
 8007828:	e06b      	b.n	8007902 <HAL_TIM_ConfigClockSource+0x12a>
 800782a:	d80e      	bhi.n	800784a <HAL_TIM_ConfigClockSource+0x72>
 800782c:	2b10      	cmp	r3, #16
 800782e:	d100      	bne.n	8007832 <HAL_TIM_ConfigClockSource+0x5a>
 8007830:	e077      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x14a>
 8007832:	d803      	bhi.n	800783c <HAL_TIM_ConfigClockSource+0x64>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d100      	bne.n	800783a <HAL_TIM_ConfigClockSource+0x62>
 8007838:	e073      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800783a:	e07c      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800783c:	2b20      	cmp	r3, #32
 800783e:	d100      	bne.n	8007842 <HAL_TIM_ConfigClockSource+0x6a>
 8007840:	e06f      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x14a>
 8007842:	2b30      	cmp	r3, #48	; 0x30
 8007844:	d100      	bne.n	8007848 <HAL_TIM_ConfigClockSource+0x70>
 8007846:	e06c      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007848:	e075      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800784a:	2b70      	cmp	r3, #112	; 0x70
 800784c:	d00e      	beq.n	800786c <HAL_TIM_ConfigClockSource+0x94>
 800784e:	d804      	bhi.n	800785a <HAL_TIM_ConfigClockSource+0x82>
 8007850:	2b50      	cmp	r3, #80	; 0x50
 8007852:	d036      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0xea>
 8007854:	2b60      	cmp	r3, #96	; 0x60
 8007856:	d044      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007858:	e06d      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800785a:	2280      	movs	r2, #128	; 0x80
 800785c:	0152      	lsls	r2, r2, #5
 800785e:	4293      	cmp	r3, r2
 8007860:	d068      	beq.n	8007934 <HAL_TIM_ConfigClockSource+0x15c>
 8007862:	2280      	movs	r2, #128	; 0x80
 8007864:	0192      	lsls	r2, r2, #6
 8007866:	4293      	cmp	r3, r2
 8007868:	d017      	beq.n	800789a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800786a:	e064      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6818      	ldr	r0, [r3, #0]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	6899      	ldr	r1, [r3, #8]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f000 fb56 	bl	8007f2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2277      	movs	r2, #119	; 0x77
 800788c:	4313      	orrs	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	609a      	str	r2, [r3, #8]
      break;
 8007898:	e04d      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	6899      	ldr	r1, [r3, #8]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f000 fb3f 	bl	8007f2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2180      	movs	r1, #128	; 0x80
 80078ba:	01c9      	lsls	r1, r1, #7
 80078bc:	430a      	orrs	r2, r1
 80078be:	609a      	str	r2, [r3, #8]
      break;
 80078c0:	e039      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	6859      	ldr	r1, [r3, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	001a      	movs	r2, r3
 80078d0:	f000 fab2 	bl	8007e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2150      	movs	r1, #80	; 0x50
 80078da:	0018      	movs	r0, r3
 80078dc:	f000 fb0c 	bl	8007ef8 <TIM_ITRx_SetConfig>
      break;
 80078e0:	e029      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	6859      	ldr	r1, [r3, #4]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	001a      	movs	r2, r3
 80078f0:	f000 fad0 	bl	8007e94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2160      	movs	r1, #96	; 0x60
 80078fa:	0018      	movs	r0, r3
 80078fc:	f000 fafc 	bl	8007ef8 <TIM_ITRx_SetConfig>
      break;
 8007900:	e019      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	6859      	ldr	r1, [r3, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	001a      	movs	r2, r3
 8007910:	f000 fa92 	bl	8007e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2140      	movs	r1, #64	; 0x40
 800791a:	0018      	movs	r0, r3
 800791c:	f000 faec 	bl	8007ef8 <TIM_ITRx_SetConfig>
      break;
 8007920:	e009      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	0019      	movs	r1, r3
 800792c:	0010      	movs	r0, r2
 800792e:	f000 fae3 	bl	8007ef8 <TIM_ITRx_SetConfig>
      break;
 8007932:	e000      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8007934:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	223d      	movs	r2, #61	; 0x3d
 800793a:	2101      	movs	r1, #1
 800793c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	223c      	movs	r2, #60	; 0x3c
 8007942:	2100      	movs	r1, #0
 8007944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	0018      	movs	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	b004      	add	sp, #16
 800794e:	bd80      	pop	{r7, pc}
 8007950:	ffff00ff 	.word	0xffff00ff

08007954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a2f      	ldr	r2, [pc, #188]	; (8007a24 <TIM_Base_SetConfig+0xd0>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_Base_SetConfig+0x20>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a2e      	ldr	r2, [pc, #184]	; (8007a28 <TIM_Base_SetConfig+0xd4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d108      	bne.n	8007986 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2270      	movs	r2, #112	; 0x70
 8007978:	4393      	bics	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a26      	ldr	r2, [pc, #152]	; (8007a24 <TIM_Base_SetConfig+0xd0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d013      	beq.n	80079b6 <TIM_Base_SetConfig+0x62>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a25      	ldr	r2, [pc, #148]	; (8007a28 <TIM_Base_SetConfig+0xd4>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00f      	beq.n	80079b6 <TIM_Base_SetConfig+0x62>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a24      	ldr	r2, [pc, #144]	; (8007a2c <TIM_Base_SetConfig+0xd8>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00b      	beq.n	80079b6 <TIM_Base_SetConfig+0x62>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a23      	ldr	r2, [pc, #140]	; (8007a30 <TIM_Base_SetConfig+0xdc>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d007      	beq.n	80079b6 <TIM_Base_SetConfig+0x62>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a22      	ldr	r2, [pc, #136]	; (8007a34 <TIM_Base_SetConfig+0xe0>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d003      	beq.n	80079b6 <TIM_Base_SetConfig+0x62>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a21      	ldr	r2, [pc, #132]	; (8007a38 <TIM_Base_SetConfig+0xe4>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d108      	bne.n	80079c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	4a20      	ldr	r2, [pc, #128]	; (8007a3c <TIM_Base_SetConfig+0xe8>)
 80079ba:	4013      	ands	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2280      	movs	r2, #128	; 0x80
 80079cc:	4393      	bics	r3, r2
 80079ce:	001a      	movs	r2, r3
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a0c      	ldr	r2, [pc, #48]	; (8007a24 <TIM_Base_SetConfig+0xd0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d00b      	beq.n	8007a0e <TIM_Base_SetConfig+0xba>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a0d      	ldr	r2, [pc, #52]	; (8007a30 <TIM_Base_SetConfig+0xdc>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d007      	beq.n	8007a0e <TIM_Base_SetConfig+0xba>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a0c      	ldr	r2, [pc, #48]	; (8007a34 <TIM_Base_SetConfig+0xe0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d003      	beq.n	8007a0e <TIM_Base_SetConfig+0xba>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a0b      	ldr	r2, [pc, #44]	; (8007a38 <TIM_Base_SetConfig+0xe4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d103      	bne.n	8007a16 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	691a      	ldr	r2, [r3, #16]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	615a      	str	r2, [r3, #20]
}
 8007a1c:	46c0      	nop			; (mov r8, r8)
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	b004      	add	sp, #16
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40012c00 	.word	0x40012c00
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40002000 	.word	0x40002000
 8007a30:	40014000 	.word	0x40014000
 8007a34:	40014400 	.word	0x40014400
 8007a38:	40014800 	.word	0x40014800
 8007a3c:	fffffcff 	.word	0xfffffcff

08007a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	4393      	bics	r3, r2
 8007a52:	001a      	movs	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2270      	movs	r2, #112	; 0x70
 8007a6e:	4393      	bics	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2203      	movs	r2, #3
 8007a76:	4393      	bics	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2202      	movs	r2, #2
 8007a88:	4393      	bics	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a27      	ldr	r2, [pc, #156]	; (8007b38 <TIM_OC1_SetConfig+0xf8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00b      	beq.n	8007ab6 <TIM_OC1_SetConfig+0x76>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a26      	ldr	r2, [pc, #152]	; (8007b3c <TIM_OC1_SetConfig+0xfc>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d007      	beq.n	8007ab6 <TIM_OC1_SetConfig+0x76>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a25      	ldr	r2, [pc, #148]	; (8007b40 <TIM_OC1_SetConfig+0x100>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <TIM_OC1_SetConfig+0x76>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a24      	ldr	r2, [pc, #144]	; (8007b44 <TIM_OC1_SetConfig+0x104>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d10c      	bne.n	8007ad0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2208      	movs	r2, #8
 8007aba:	4393      	bics	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2204      	movs	r2, #4
 8007acc:	4393      	bics	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a19      	ldr	r2, [pc, #100]	; (8007b38 <TIM_OC1_SetConfig+0xf8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d00b      	beq.n	8007af0 <TIM_OC1_SetConfig+0xb0>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a18      	ldr	r2, [pc, #96]	; (8007b3c <TIM_OC1_SetConfig+0xfc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d007      	beq.n	8007af0 <TIM_OC1_SetConfig+0xb0>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a17      	ldr	r2, [pc, #92]	; (8007b40 <TIM_OC1_SetConfig+0x100>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d003      	beq.n	8007af0 <TIM_OC1_SetConfig+0xb0>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a16      	ldr	r2, [pc, #88]	; (8007b44 <TIM_OC1_SetConfig+0x104>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d111      	bne.n	8007b14 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <TIM_OC1_SetConfig+0x108>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	4a14      	ldr	r2, [pc, #80]	; (8007b4c <TIM_OC1_SetConfig+0x10c>)
 8007afc:	4013      	ands	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	621a      	str	r2, [r3, #32]
}
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	46bd      	mov	sp, r7
 8007b32:	b006      	add	sp, #24
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	46c0      	nop			; (mov r8, r8)
 8007b38:	40012c00 	.word	0x40012c00
 8007b3c:	40014000 	.word	0x40014000
 8007b40:	40014400 	.word	0x40014400
 8007b44:	40014800 	.word	0x40014800
 8007b48:	fffffeff 	.word	0xfffffeff
 8007b4c:	fffffdff 	.word	0xfffffdff

08007b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	2210      	movs	r2, #16
 8007b60:	4393      	bics	r3, r2
 8007b62:	001a      	movs	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4a2e      	ldr	r2, [pc, #184]	; (8007c38 <TIM_OC2_SetConfig+0xe8>)
 8007b7e:	4013      	ands	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4a2d      	ldr	r2, [pc, #180]	; (8007c3c <TIM_OC2_SetConfig+0xec>)
 8007b86:	4013      	ands	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	021b      	lsls	r3, r3, #8
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	4393      	bics	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a24      	ldr	r2, [pc, #144]	; (8007c40 <TIM_OC2_SetConfig+0xf0>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d10d      	bne.n	8007bce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2280      	movs	r2, #128	; 0x80
 8007bb6:	4393      	bics	r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2240      	movs	r2, #64	; 0x40
 8007bca:	4393      	bics	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a1b      	ldr	r2, [pc, #108]	; (8007c40 <TIM_OC2_SetConfig+0xf0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00b      	beq.n	8007bee <TIM_OC2_SetConfig+0x9e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a1a      	ldr	r2, [pc, #104]	; (8007c44 <TIM_OC2_SetConfig+0xf4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d007      	beq.n	8007bee <TIM_OC2_SetConfig+0x9e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a19      	ldr	r2, [pc, #100]	; (8007c48 <TIM_OC2_SetConfig+0xf8>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d003      	beq.n	8007bee <TIM_OC2_SetConfig+0x9e>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a18      	ldr	r2, [pc, #96]	; (8007c4c <TIM_OC2_SetConfig+0xfc>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d113      	bne.n	8007c16 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	4a17      	ldr	r2, [pc, #92]	; (8007c50 <TIM_OC2_SetConfig+0x100>)
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	4a16      	ldr	r2, [pc, #88]	; (8007c54 <TIM_OC2_SetConfig+0x104>)
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	621a      	str	r2, [r3, #32]
}
 8007c30:	46c0      	nop			; (mov r8, r8)
 8007c32:	46bd      	mov	sp, r7
 8007c34:	b006      	add	sp, #24
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	ffff8fff 	.word	0xffff8fff
 8007c3c:	fffffcff 	.word	0xfffffcff
 8007c40:	40012c00 	.word	0x40012c00
 8007c44:	40014000 	.word	0x40014000
 8007c48:	40014400 	.word	0x40014400
 8007c4c:	40014800 	.word	0x40014800
 8007c50:	fffffbff 	.word	0xfffffbff
 8007c54:	fffff7ff 	.word	0xfffff7ff

08007c58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	4a35      	ldr	r2, [pc, #212]	; (8007d3c <TIM_OC3_SetConfig+0xe4>)
 8007c68:	401a      	ands	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2270      	movs	r2, #112	; 0x70
 8007c84:	4393      	bics	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	4393      	bics	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	4a28      	ldr	r2, [pc, #160]	; (8007d40 <TIM_OC3_SetConfig+0xe8>)
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a24      	ldr	r2, [pc, #144]	; (8007d44 <TIM_OC3_SetConfig+0xec>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d10d      	bne.n	8007cd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	4a23      	ldr	r2, [pc, #140]	; (8007d48 <TIM_OC3_SetConfig+0xf0>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	4a1f      	ldr	r2, [pc, #124]	; (8007d4c <TIM_OC3_SetConfig+0xf4>)
 8007cce:	4013      	ands	r3, r2
 8007cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a1b      	ldr	r2, [pc, #108]	; (8007d44 <TIM_OC3_SetConfig+0xec>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00b      	beq.n	8007cf2 <TIM_OC3_SetConfig+0x9a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a1c      	ldr	r2, [pc, #112]	; (8007d50 <TIM_OC3_SetConfig+0xf8>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d007      	beq.n	8007cf2 <TIM_OC3_SetConfig+0x9a>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a1b      	ldr	r2, [pc, #108]	; (8007d54 <TIM_OC3_SetConfig+0xfc>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d003      	beq.n	8007cf2 <TIM_OC3_SetConfig+0x9a>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a1a      	ldr	r2, [pc, #104]	; (8007d58 <TIM_OC3_SetConfig+0x100>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d113      	bne.n	8007d1a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	4a19      	ldr	r2, [pc, #100]	; (8007d5c <TIM_OC3_SetConfig+0x104>)
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	4a18      	ldr	r2, [pc, #96]	; (8007d60 <TIM_OC3_SetConfig+0x108>)
 8007cfe:	4013      	ands	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	621a      	str	r2, [r3, #32]
}
 8007d34:	46c0      	nop			; (mov r8, r8)
 8007d36:	46bd      	mov	sp, r7
 8007d38:	b006      	add	sp, #24
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	fffffeff 	.word	0xfffffeff
 8007d40:	fffffdff 	.word	0xfffffdff
 8007d44:	40012c00 	.word	0x40012c00
 8007d48:	fffff7ff 	.word	0xfffff7ff
 8007d4c:	fffffbff 	.word	0xfffffbff
 8007d50:	40014000 	.word	0x40014000
 8007d54:	40014400 	.word	0x40014400
 8007d58:	40014800 	.word	0x40014800
 8007d5c:	ffffefff 	.word	0xffffefff
 8007d60:	ffffdfff 	.word	0xffffdfff

08007d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	4a28      	ldr	r2, [pc, #160]	; (8007e14 <TIM_OC4_SetConfig+0xb0>)
 8007d74:	401a      	ands	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a22      	ldr	r2, [pc, #136]	; (8007e18 <TIM_OC4_SetConfig+0xb4>)
 8007d90:	4013      	ands	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4a21      	ldr	r2, [pc, #132]	; (8007e1c <TIM_OC4_SetConfig+0xb8>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	021b      	lsls	r3, r3, #8
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	4a1d      	ldr	r2, [pc, #116]	; (8007e20 <TIM_OC4_SetConfig+0xbc>)
 8007dac:	4013      	ands	r3, r2
 8007dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	031b      	lsls	r3, r3, #12
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a19      	ldr	r2, [pc, #100]	; (8007e24 <TIM_OC4_SetConfig+0xc0>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d00b      	beq.n	8007ddc <TIM_OC4_SetConfig+0x78>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a18      	ldr	r2, [pc, #96]	; (8007e28 <TIM_OC4_SetConfig+0xc4>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d007      	beq.n	8007ddc <TIM_OC4_SetConfig+0x78>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a17      	ldr	r2, [pc, #92]	; (8007e2c <TIM_OC4_SetConfig+0xc8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d003      	beq.n	8007ddc <TIM_OC4_SetConfig+0x78>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a16      	ldr	r2, [pc, #88]	; (8007e30 <TIM_OC4_SetConfig+0xcc>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d109      	bne.n	8007df0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	4a15      	ldr	r2, [pc, #84]	; (8007e34 <TIM_OC4_SetConfig+0xd0>)
 8007de0:	4013      	ands	r3, r2
 8007de2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	019b      	lsls	r3, r3, #6
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	621a      	str	r2, [r3, #32]
}
 8007e0a:	46c0      	nop			; (mov r8, r8)
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b006      	add	sp, #24
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	46c0      	nop			; (mov r8, r8)
 8007e14:	ffffefff 	.word	0xffffefff
 8007e18:	ffff8fff 	.word	0xffff8fff
 8007e1c:	fffffcff 	.word	0xfffffcff
 8007e20:	ffffdfff 	.word	0xffffdfff
 8007e24:	40012c00 	.word	0x40012c00
 8007e28:	40014000 	.word	0x40014000
 8007e2c:	40014400 	.word	0x40014400
 8007e30:	40014800 	.word	0x40014800
 8007e34:	ffffbfff 	.word	0xffffbfff

08007e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	4393      	bics	r3, r2
 8007e52:	001a      	movs	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	22f0      	movs	r2, #240	; 0xf0
 8007e62:	4393      	bics	r3, r2
 8007e64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	220a      	movs	r2, #10
 8007e74:	4393      	bics	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	621a      	str	r2, [r3, #32]
}
 8007e8c:	46c0      	nop			; (mov r8, r8)
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	b006      	add	sp, #24
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	2210      	movs	r2, #16
 8007ea6:	4393      	bics	r3, r2
 8007ea8:	001a      	movs	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	4a0d      	ldr	r2, [pc, #52]	; (8007ef4 <TIM_TI2_ConfigInputStage+0x60>)
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	031b      	lsls	r3, r3, #12
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	22a0      	movs	r2, #160	; 0xa0
 8007ed0:	4393      	bics	r3, r2
 8007ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	011b      	lsls	r3, r3, #4
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	621a      	str	r2, [r3, #32]
}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b006      	add	sp, #24
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	ffff0fff 	.word	0xffff0fff

08007ef8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2270      	movs	r2, #112	; 0x70
 8007f0c:	4393      	bics	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	2207      	movs	r2, #7
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	609a      	str	r2, [r3, #8]
}
 8007f22:	46c0      	nop			; (mov r8, r8)
 8007f24:	46bd      	mov	sp, r7
 8007f26:	b004      	add	sp, #16
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	4a09      	ldr	r2, [pc, #36]	; (8007f68 <TIM_ETR_SetConfig+0x3c>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	021a      	lsls	r2, r3, #8
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	609a      	str	r2, [r3, #8]
}
 8007f60:	46c0      	nop			; (mov r8, r8)
 8007f62:	46bd      	mov	sp, r7
 8007f64:	b006      	add	sp, #24
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	ffff00ff 	.word	0xffff00ff

08007f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	221f      	movs	r2, #31
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	2201      	movs	r2, #1
 8007f80:	409a      	lsls	r2, r3
 8007f82:	0013      	movs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	43d2      	mvns	r2, r2
 8007f8e:	401a      	ands	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a1a      	ldr	r2, [r3, #32]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	211f      	movs	r1, #31
 8007f9c:	400b      	ands	r3, r1
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	4099      	lsls	r1, r3
 8007fa2:	000b      	movs	r3, r1
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	621a      	str	r2, [r3, #32]
}
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	46bd      	mov	sp, r7
 8007fae:	b006      	add	sp, #24
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	223c      	movs	r2, #60	; 0x3c
 8007fc2:	5c9b      	ldrb	r3, [r3, r2]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e041      	b.n	8008050 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	223c      	movs	r2, #60	; 0x3c
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	223d      	movs	r2, #61	; 0x3d
 8007fd8:	2102      	movs	r1, #2
 8007fda:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2270      	movs	r2, #112	; 0x70
 8007ff0:	4393      	bics	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a13      	ldr	r2, [pc, #76]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d009      	beq.n	8008024 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a11      	ldr	r2, [pc, #68]	; (800805c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d004      	beq.n	8008024 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a10      	ldr	r2, [pc, #64]	; (8008060 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d10c      	bne.n	800803e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2280      	movs	r2, #128	; 0x80
 8008028:	4393      	bics	r3, r2
 800802a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	4313      	orrs	r3, r2
 8008034:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	223d      	movs	r2, #61	; 0x3d
 8008042:	2101      	movs	r1, #1
 8008044:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	223c      	movs	r2, #60	; 0x3c
 800804a:	2100      	movs	r1, #0
 800804c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	0018      	movs	r0, r3
 8008052:	46bd      	mov	sp, r7
 8008054:	b004      	add	sp, #16
 8008056:	bd80      	pop	{r7, pc}
 8008058:	40012c00 	.word	0x40012c00
 800805c:	40000400 	.word	0x40000400
 8008060:	40014000 	.word	0x40014000

08008064 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	223c      	movs	r2, #60	; 0x3c
 8008076:	5c9b      	ldrb	r3, [r3, r2]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d101      	bne.n	8008080 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800807c:	2302      	movs	r3, #2
 800807e:	e03e      	b.n	80080fe <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	223c      	movs	r2, #60	; 0x3c
 8008084:	2101      	movs	r1, #1
 8008086:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	22ff      	movs	r2, #255	; 0xff
 800808c:	4393      	bics	r3, r2
 800808e:	001a      	movs	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4a1b      	ldr	r2, [pc, #108]	; (8008108 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800809c:	401a      	ands	r2, r3
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4a18      	ldr	r2, [pc, #96]	; (800810c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80080aa:	401a      	ands	r2, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4a16      	ldr	r2, [pc, #88]	; (8008110 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80080b8:	401a      	ands	r2, r3
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4a13      	ldr	r2, [pc, #76]	; (8008114 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80080c6:	401a      	ands	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4a11      	ldr	r2, [pc, #68]	; (8008118 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80080d4:	401a      	ands	r2, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4a0e      	ldr	r2, [pc, #56]	; (800811c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80080e2:	401a      	ands	r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	223c      	movs	r2, #60	; 0x3c
 80080f8:	2100      	movs	r1, #0
 80080fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	0018      	movs	r0, r3
 8008100:	46bd      	mov	sp, r7
 8008102:	b004      	add	sp, #16
 8008104:	bd80      	pop	{r7, pc}
 8008106:	46c0      	nop			; (mov r8, r8)
 8008108:	fffffcff 	.word	0xfffffcff
 800810c:	fffffbff 	.word	0xfffffbff
 8008110:	fffff7ff 	.word	0xfffff7ff
 8008114:	ffffefff 	.word	0xffffefff
 8008118:	ffffdfff 	.word	0xffffdfff
 800811c:	ffffbfff 	.word	0xffffbfff

08008120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e044      	b.n	80081bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008136:	2b00      	cmp	r3, #0
 8008138:	d107      	bne.n	800814a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2270      	movs	r2, #112	; 0x70
 800813e:	2100      	movs	r1, #0
 8008140:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	0018      	movs	r0, r3
 8008146:	f7fd fa73 	bl	8005630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2224      	movs	r2, #36	; 0x24
 800814e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2101      	movs	r1, #1
 800815c:	438a      	bics	r2, r1
 800815e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	0018      	movs	r0, r3
 8008164:	f000 f980 	bl	8008468 <UART_SetConfig>
 8008168:	0003      	movs	r3, r0
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e024      	b.n	80081bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	0018      	movs	r0, r3
 800817e:	f000 faf9 	bl	8008774 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	490d      	ldr	r1, [pc, #52]	; (80081c4 <HAL_UART_Init+0xa4>)
 800818e:	400a      	ands	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2108      	movs	r1, #8
 800819e:	438a      	bics	r2, r1
 80081a0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2101      	movs	r1, #1
 80081ae:	430a      	orrs	r2, r1
 80081b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	0018      	movs	r0, r3
 80081b6:	f000 fb91 	bl	80088dc <UART_CheckIdleState>
 80081ba:	0003      	movs	r3, r0
}
 80081bc:	0018      	movs	r0, r3
 80081be:	46bd      	mov	sp, r7
 80081c0:	b002      	add	sp, #8
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	fffff7ff 	.word	0xfffff7ff

080081c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	1dbb      	adds	r3, r7, #6
 80081d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081da:	2b20      	cmp	r3, #32
 80081dc:	d000      	beq.n	80081e0 <HAL_UART_Transmit_DMA+0x18>
 80081de:	e077      	b.n	80082d0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <HAL_UART_Transmit_DMA+0x26>
 80081e6:	1dbb      	adds	r3, r7, #6
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e06f      	b.n	80082d2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	2380      	movs	r3, #128	; 0x80
 80081f8:	015b      	lsls	r3, r3, #5
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d109      	bne.n	8008212 <HAL_UART_Transmit_DMA+0x4a>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d105      	bne.n	8008212 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2201      	movs	r2, #1
 800820a:	4013      	ands	r3, r2
 800820c:	d001      	beq.n	8008212 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e05f      	b.n	80082d2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    __HAL_LOCK(huart);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2270      	movs	r2, #112	; 0x70
 8008216:	5c9b      	ldrb	r3, [r3, r2]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_UART_Transmit_DMA+0x58>
 800821c:	2302      	movs	r3, #2
 800821e:	e058      	b.n	80082d2 <HAL_UART_Transmit_DMA+0x10a>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2270      	movs	r2, #112	; 0x70
 8008224:	2101      	movs	r1, #1
 8008226:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1dba      	adds	r2, r7, #6
 8008232:	2150      	movs	r1, #80	; 0x50
 8008234:	8812      	ldrh	r2, [r2, #0]
 8008236:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	1dba      	adds	r2, r7, #6
 800823c:	2152      	movs	r1, #82	; 0x52
 800823e:	8812      	ldrh	r2, [r2, #0]
 8008240:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2221      	movs	r2, #33	; 0x21
 800824c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008252:	2b00      	cmp	r3, #0
 8008254:	d02a      	beq.n	80082ac <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800825a:	4a20      	ldr	r2, [pc, #128]	; (80082dc <HAL_UART_Transmit_DMA+0x114>)
 800825c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008262:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <HAL_UART_Transmit_DMA+0x118>)
 8008264:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800826a:	4a1e      	ldr	r2, [pc, #120]	; (80082e4 <HAL_UART_Transmit_DMA+0x11c>)
 800826c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008272:	2200      	movs	r2, #0
 8008274:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827e:	0019      	movs	r1, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3328      	adds	r3, #40	; 0x28
 8008286:	001a      	movs	r2, r3
 8008288:	1dbb      	adds	r3, r7, #6
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	f7fe f870 	bl	8006370 <HAL_DMA_Start_IT>
 8008290:	1e03      	subs	r3, r0, #0
 8008292:	d00b      	beq.n	80082ac <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2210      	movs	r2, #16
 8008298:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2270      	movs	r2, #112	; 0x70
 800829e:	2100      	movs	r1, #0
 80082a0:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2220      	movs	r2, #32
 80082a6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e012      	b.n	80082d2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2240      	movs	r2, #64	; 0x40
 80082b2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2270      	movs	r2, #112	; 0x70
 80082b8:	2100      	movs	r1, #0
 80082ba:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2180      	movs	r1, #128	; 0x80
 80082c8:	430a      	orrs	r2, r1
 80082ca:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e000      	b.n	80082d2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80082d0:	2302      	movs	r3, #2
  }
}
 80082d2:	0018      	movs	r0, r3
 80082d4:	46bd      	mov	sp, r7
 80082d6:	b004      	add	sp, #16
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	46c0      	nop			; (mov r8, r8)
 80082dc:	08008acd 	.word	0x08008acd
 80082e0:	08008b1d 	.word	0x08008b1d
 80082e4:	08008bc3 	.word	0x08008bc3

080082e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	1dbb      	adds	r3, r7, #6
 80082f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d000      	beq.n	8008300 <HAL_UART_Receive_DMA+0x18>
 80082fe:	e07f      	b.n	8008400 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_UART_Receive_DMA+0x26>
 8008306:	1dbb      	adds	r3, r7, #6
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e077      	b.n	8008402 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	689a      	ldr	r2, [r3, #8]
 8008316:	2380      	movs	r3, #128	; 0x80
 8008318:	015b      	lsls	r3, r3, #5
 800831a:	429a      	cmp	r2, r3
 800831c:	d109      	bne.n	8008332 <HAL_UART_Receive_DMA+0x4a>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d105      	bne.n	8008332 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2201      	movs	r2, #1
 800832a:	4013      	ands	r3, r2
 800832c:	d001      	beq.n	8008332 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e067      	b.n	8008402 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2270      	movs	r2, #112	; 0x70
 8008336:	5c9b      	ldrb	r3, [r3, r2]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d101      	bne.n	8008340 <HAL_UART_Receive_DMA+0x58>
 800833c:	2302      	movs	r3, #2
 800833e:	e060      	b.n	8008402 <HAL_UART_Receive_DMA+0x11a>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2270      	movs	r2, #112	; 0x70
 8008344:	2101      	movs	r1, #1
 8008346:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1dba      	adds	r2, r7, #6
 8008352:	2158      	movs	r1, #88	; 0x58
 8008354:	8812      	ldrh	r2, [r2, #0]
 8008356:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2222      	movs	r2, #34	; 0x22
 8008362:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008368:	2b00      	cmp	r3, #0
 800836a:	d02a      	beq.n	80083c2 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008370:	4a26      	ldr	r2, [pc, #152]	; (800840c <HAL_UART_Receive_DMA+0x124>)
 8008372:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008378:	4a25      	ldr	r2, [pc, #148]	; (8008410 <HAL_UART_Receive_DMA+0x128>)
 800837a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008380:	4a24      	ldr	r2, [pc, #144]	; (8008414 <HAL_UART_Receive_DMA+0x12c>)
 8008382:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008388:	2200      	movs	r2, #0
 800838a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3324      	adds	r3, #36	; 0x24
 8008396:	0019      	movs	r1, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839c:	001a      	movs	r2, r3
 800839e:	1dbb      	adds	r3, r7, #6
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	f7fd ffe5 	bl	8006370 <HAL_DMA_Start_IT>
 80083a6:	1e03      	subs	r3, r0, #0
 80083a8:	d00b      	beq.n	80083c2 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2210      	movs	r2, #16
 80083ae:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2270      	movs	r2, #112	; 0x70
 80083b4:	2100      	movs	r1, #0
 80083b6:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2220      	movs	r2, #32
 80083bc:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e01f      	b.n	8008402 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2270      	movs	r2, #112	; 0x70
 80083c6:	2100      	movs	r1, #0
 80083c8:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2180      	movs	r1, #128	; 0x80
 80083d6:	0049      	lsls	r1, r1, #1
 80083d8:	430a      	orrs	r2, r1
 80083da:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2101      	movs	r1, #1
 80083e8:	430a      	orrs	r2, r1
 80083ea:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2140      	movs	r1, #64	; 0x40
 80083f8:	430a      	orrs	r2, r1
 80083fa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e000      	b.n	8008402 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008400:	2302      	movs	r3, #2
  }
}
 8008402:	0018      	movs	r0, r3
 8008404:	46bd      	mov	sp, r7
 8008406:	b004      	add	sp, #16
 8008408:	bd80      	pop	{r7, pc}
 800840a:	46c0      	nop			; (mov r8, r8)
 800840c:	08008b3d 	.word	0x08008b3d
 8008410:	08008ba5 	.word	0x08008ba5
 8008414:	08008bc3 	.word	0x08008bc3

08008418 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008420:	46c0      	nop			; (mov r8, r8)
 8008422:	46bd      	mov	sp, r7
 8008424:	b002      	add	sp, #8
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008430:	46c0      	nop			; (mov r8, r8)
 8008432:	46bd      	mov	sp, r7
 8008434:	b002      	add	sp, #8
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008440:	46c0      	nop			; (mov r8, r8)
 8008442:	46bd      	mov	sp, r7
 8008444:	b002      	add	sp, #8
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008450:	46c0      	nop			; (mov r8, r8)
 8008452:	46bd      	mov	sp, r7
 8008454:	b002      	add	sp, #8
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008460:	46c0      	nop			; (mov r8, r8)
 8008462:	46bd      	mov	sp, r7
 8008464:	b002      	add	sp, #8
 8008466:	bd80      	pop	{r7, pc}

08008468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008470:	2300      	movs	r3, #0
 8008472:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008474:	2317      	movs	r3, #23
 8008476:	18fb      	adds	r3, r7, r3
 8008478:	2200      	movs	r2, #0
 800847a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	431a      	orrs	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4aad      	ldr	r2, [pc, #692]	; (8008750 <UART_SetConfig+0x2e8>)
 800849c:	4013      	ands	r3, r2
 800849e:	0019      	movs	r1, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	4aa8      	ldr	r2, [pc, #672]	; (8008754 <UART_SetConfig+0x2ec>)
 80084b2:	4013      	ands	r3, r2
 80084b4:	0019      	movs	r1, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68da      	ldr	r2, [r3, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	4a9f      	ldr	r2, [pc, #636]	; (8008758 <UART_SetConfig+0x2f0>)
 80084da:	4013      	ands	r3, r2
 80084dc:	0019      	movs	r1, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a9b      	ldr	r2, [pc, #620]	; (800875c <UART_SetConfig+0x2f4>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d125      	bne.n	800853e <UART_SetConfig+0xd6>
 80084f2:	4b9b      	ldr	r3, [pc, #620]	; (8008760 <UART_SetConfig+0x2f8>)
 80084f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f6:	2203      	movs	r2, #3
 80084f8:	4013      	ands	r3, r2
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d00f      	beq.n	800851e <UART_SetConfig+0xb6>
 80084fe:	d304      	bcc.n	800850a <UART_SetConfig+0xa2>
 8008500:	2b02      	cmp	r3, #2
 8008502:	d011      	beq.n	8008528 <UART_SetConfig+0xc0>
 8008504:	2b03      	cmp	r3, #3
 8008506:	d005      	beq.n	8008514 <UART_SetConfig+0xac>
 8008508:	e013      	b.n	8008532 <UART_SetConfig+0xca>
 800850a:	231f      	movs	r3, #31
 800850c:	18fb      	adds	r3, r7, r3
 800850e:	2200      	movs	r2, #0
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	e022      	b.n	800855a <UART_SetConfig+0xf2>
 8008514:	231f      	movs	r3, #31
 8008516:	18fb      	adds	r3, r7, r3
 8008518:	2202      	movs	r2, #2
 800851a:	701a      	strb	r2, [r3, #0]
 800851c:	e01d      	b.n	800855a <UART_SetConfig+0xf2>
 800851e:	231f      	movs	r3, #31
 8008520:	18fb      	adds	r3, r7, r3
 8008522:	2204      	movs	r2, #4
 8008524:	701a      	strb	r2, [r3, #0]
 8008526:	e018      	b.n	800855a <UART_SetConfig+0xf2>
 8008528:	231f      	movs	r3, #31
 800852a:	18fb      	adds	r3, r7, r3
 800852c:	2208      	movs	r2, #8
 800852e:	701a      	strb	r2, [r3, #0]
 8008530:	e013      	b.n	800855a <UART_SetConfig+0xf2>
 8008532:	231f      	movs	r3, #31
 8008534:	18fb      	adds	r3, r7, r3
 8008536:	2210      	movs	r2, #16
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	e00d      	b.n	800855a <UART_SetConfig+0xf2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a88      	ldr	r2, [pc, #544]	; (8008764 <UART_SetConfig+0x2fc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d104      	bne.n	8008552 <UART_SetConfig+0xea>
 8008548:	231f      	movs	r3, #31
 800854a:	18fb      	adds	r3, r7, r3
 800854c:	2200      	movs	r2, #0
 800854e:	701a      	strb	r2, [r3, #0]
 8008550:	e003      	b.n	800855a <UART_SetConfig+0xf2>
 8008552:	231f      	movs	r3, #31
 8008554:	18fb      	adds	r3, r7, r3
 8008556:	2210      	movs	r2, #16
 8008558:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69da      	ldr	r2, [r3, #28]
 800855e:	2380      	movs	r3, #128	; 0x80
 8008560:	021b      	lsls	r3, r3, #8
 8008562:	429a      	cmp	r2, r3
 8008564:	d000      	beq.n	8008568 <UART_SetConfig+0x100>
 8008566:	e07d      	b.n	8008664 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8008568:	231f      	movs	r3, #31
 800856a:	18fb      	adds	r3, r7, r3
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d01c      	beq.n	80085ac <UART_SetConfig+0x144>
 8008572:	dc02      	bgt.n	800857a <UART_SetConfig+0x112>
 8008574:	2b00      	cmp	r3, #0
 8008576:	d005      	beq.n	8008584 <UART_SetConfig+0x11c>
 8008578:	e04b      	b.n	8008612 <UART_SetConfig+0x1aa>
 800857a:	2b04      	cmp	r3, #4
 800857c:	d025      	beq.n	80085ca <UART_SetConfig+0x162>
 800857e:	2b08      	cmp	r3, #8
 8008580:	d037      	beq.n	80085f2 <UART_SetConfig+0x18a>
 8008582:	e046      	b.n	8008612 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008584:	f7fe fe46 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 8008588:	0003      	movs	r3, r0
 800858a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	005a      	lsls	r2, r3, #1
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	085b      	lsrs	r3, r3, #1
 8008596:	18d2      	adds	r2, r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	0019      	movs	r1, r3
 800859e:	0010      	movs	r0, r2
 80085a0:	f7f7 fdb2 	bl	8000108 <__udivsi3>
 80085a4:	0003      	movs	r3, r0
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	61bb      	str	r3, [r7, #24]
        break;
 80085aa:	e037      	b.n	800861c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	085b      	lsrs	r3, r3, #1
 80085b2:	4a6d      	ldr	r2, [pc, #436]	; (8008768 <UART_SetConfig+0x300>)
 80085b4:	189a      	adds	r2, r3, r2
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	0019      	movs	r1, r3
 80085bc:	0010      	movs	r0, r2
 80085be:	f7f7 fda3 	bl	8000108 <__udivsi3>
 80085c2:	0003      	movs	r3, r0
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	61bb      	str	r3, [r7, #24]
        break;
 80085c8:	e028      	b.n	800861c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085ca:	f7fe fdb5 	bl	8007138 <HAL_RCC_GetSysClockFreq>
 80085ce:	0003      	movs	r3, r0
 80085d0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	005a      	lsls	r2, r3, #1
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	085b      	lsrs	r3, r3, #1
 80085dc:	18d2      	adds	r2, r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	0019      	movs	r1, r3
 80085e4:	0010      	movs	r0, r2
 80085e6:	f7f7 fd8f 	bl	8000108 <__udivsi3>
 80085ea:	0003      	movs	r3, r0
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	61bb      	str	r3, [r7, #24]
        break;
 80085f0:	e014      	b.n	800861c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	085b      	lsrs	r3, r3, #1
 80085f8:	2280      	movs	r2, #128	; 0x80
 80085fa:	0252      	lsls	r2, r2, #9
 80085fc:	189a      	adds	r2, r3, r2
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	0019      	movs	r1, r3
 8008604:	0010      	movs	r0, r2
 8008606:	f7f7 fd7f 	bl	8000108 <__udivsi3>
 800860a:	0003      	movs	r3, r0
 800860c:	b29b      	uxth	r3, r3
 800860e:	61bb      	str	r3, [r7, #24]
        break;
 8008610:	e004      	b.n	800861c <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8008612:	2317      	movs	r3, #23
 8008614:	18fb      	adds	r3, r7, r3
 8008616:	2201      	movs	r2, #1
 8008618:	701a      	strb	r2, [r3, #0]
        break;
 800861a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	2b0f      	cmp	r3, #15
 8008620:	d91b      	bls.n	800865a <UART_SetConfig+0x1f2>
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	4a51      	ldr	r2, [pc, #324]	; (800876c <UART_SetConfig+0x304>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d817      	bhi.n	800865a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	b29a      	uxth	r2, r3
 800862e:	200a      	movs	r0, #10
 8008630:	183b      	adds	r3, r7, r0
 8008632:	210f      	movs	r1, #15
 8008634:	438a      	bics	r2, r1
 8008636:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	b29b      	uxth	r3, r3
 800863e:	2207      	movs	r2, #7
 8008640:	4013      	ands	r3, r2
 8008642:	b299      	uxth	r1, r3
 8008644:	183b      	adds	r3, r7, r0
 8008646:	183a      	adds	r2, r7, r0
 8008648:	8812      	ldrh	r2, [r2, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	183a      	adds	r2, r7, r0
 8008654:	8812      	ldrh	r2, [r2, #0]
 8008656:	60da      	str	r2, [r3, #12]
 8008658:	e06c      	b.n	8008734 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800865a:	2317      	movs	r3, #23
 800865c:	18fb      	adds	r3, r7, r3
 800865e:	2201      	movs	r2, #1
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	e067      	b.n	8008734 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8008664:	231f      	movs	r3, #31
 8008666:	18fb      	adds	r3, r7, r3
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b02      	cmp	r3, #2
 800866c:	d01b      	beq.n	80086a6 <UART_SetConfig+0x23e>
 800866e:	dc02      	bgt.n	8008676 <UART_SetConfig+0x20e>
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <UART_SetConfig+0x218>
 8008674:	e049      	b.n	800870a <UART_SetConfig+0x2a2>
 8008676:	2b04      	cmp	r3, #4
 8008678:	d024      	beq.n	80086c4 <UART_SetConfig+0x25c>
 800867a:	2b08      	cmp	r3, #8
 800867c:	d035      	beq.n	80086ea <UART_SetConfig+0x282>
 800867e:	e044      	b.n	800870a <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008680:	f7fe fdc8 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 8008684:	0003      	movs	r3, r0
 8008686:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	085a      	lsrs	r2, r3, #1
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	18d2      	adds	r2, r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	0019      	movs	r1, r3
 8008698:	0010      	movs	r0, r2
 800869a:	f7f7 fd35 	bl	8000108 <__udivsi3>
 800869e:	0003      	movs	r3, r0
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	61bb      	str	r3, [r7, #24]
        break;
 80086a4:	e036      	b.n	8008714 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	085b      	lsrs	r3, r3, #1
 80086ac:	4a30      	ldr	r2, [pc, #192]	; (8008770 <UART_SetConfig+0x308>)
 80086ae:	189a      	adds	r2, r3, r2
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	0019      	movs	r1, r3
 80086b6:	0010      	movs	r0, r2
 80086b8:	f7f7 fd26 	bl	8000108 <__udivsi3>
 80086bc:	0003      	movs	r3, r0
 80086be:	b29b      	uxth	r3, r3
 80086c0:	61bb      	str	r3, [r7, #24]
        break;
 80086c2:	e027      	b.n	8008714 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086c4:	f7fe fd38 	bl	8007138 <HAL_RCC_GetSysClockFreq>
 80086c8:	0003      	movs	r3, r0
 80086ca:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	085a      	lsrs	r2, r3, #1
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	18d2      	adds	r2, r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	0019      	movs	r1, r3
 80086dc:	0010      	movs	r0, r2
 80086de:	f7f7 fd13 	bl	8000108 <__udivsi3>
 80086e2:	0003      	movs	r3, r0
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	61bb      	str	r3, [r7, #24]
        break;
 80086e8:	e014      	b.n	8008714 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	085b      	lsrs	r3, r3, #1
 80086f0:	2280      	movs	r2, #128	; 0x80
 80086f2:	0212      	lsls	r2, r2, #8
 80086f4:	189a      	adds	r2, r3, r2
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	0019      	movs	r1, r3
 80086fc:	0010      	movs	r0, r2
 80086fe:	f7f7 fd03 	bl	8000108 <__udivsi3>
 8008702:	0003      	movs	r3, r0
 8008704:	b29b      	uxth	r3, r3
 8008706:	61bb      	str	r3, [r7, #24]
        break;
 8008708:	e004      	b.n	8008714 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 800870a:	2317      	movs	r3, #23
 800870c:	18fb      	adds	r3, r7, r3
 800870e:	2201      	movs	r2, #1
 8008710:	701a      	strb	r2, [r3, #0]
        break;
 8008712:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	2b0f      	cmp	r3, #15
 8008718:	d908      	bls.n	800872c <UART_SetConfig+0x2c4>
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	4a13      	ldr	r2, [pc, #76]	; (800876c <UART_SetConfig+0x304>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d804      	bhi.n	800872c <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	60da      	str	r2, [r3, #12]
 800872a:	e003      	b.n	8008734 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800872c:	2317      	movs	r3, #23
 800872e:	18fb      	adds	r3, r7, r3
 8008730:	2201      	movs	r2, #1
 8008732:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008740:	2317      	movs	r3, #23
 8008742:	18fb      	adds	r3, r7, r3
 8008744:	781b      	ldrb	r3, [r3, #0]
}
 8008746:	0018      	movs	r0, r3
 8008748:	46bd      	mov	sp, r7
 800874a:	b008      	add	sp, #32
 800874c:	bd80      	pop	{r7, pc}
 800874e:	46c0      	nop			; (mov r8, r8)
 8008750:	ffff69f3 	.word	0xffff69f3
 8008754:	ffffcfff 	.word	0xffffcfff
 8008758:	fffff4ff 	.word	0xfffff4ff
 800875c:	40013800 	.word	0x40013800
 8008760:	40021000 	.word	0x40021000
 8008764:	40004400 	.word	0x40004400
 8008768:	00f42400 	.word	0x00f42400
 800876c:	0000ffff 	.word	0x0000ffff
 8008770:	007a1200 	.word	0x007a1200

08008774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	2201      	movs	r2, #1
 8008782:	4013      	ands	r3, r2
 8008784:	d00b      	beq.n	800879e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	4a4a      	ldr	r2, [pc, #296]	; (80088b8 <UART_AdvFeatureConfig+0x144>)
 800878e:	4013      	ands	r3, r2
 8008790:	0019      	movs	r1, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	2202      	movs	r2, #2
 80087a4:	4013      	ands	r3, r2
 80087a6:	d00b      	beq.n	80087c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	4a43      	ldr	r2, [pc, #268]	; (80088bc <UART_AdvFeatureConfig+0x148>)
 80087b0:	4013      	ands	r3, r2
 80087b2:	0019      	movs	r1, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2204      	movs	r2, #4
 80087c6:	4013      	ands	r3, r2
 80087c8:	d00b      	beq.n	80087e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	4a3b      	ldr	r2, [pc, #236]	; (80088c0 <UART_AdvFeatureConfig+0x14c>)
 80087d2:	4013      	ands	r3, r2
 80087d4:	0019      	movs	r1, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2208      	movs	r2, #8
 80087e8:	4013      	ands	r3, r2
 80087ea:	d00b      	beq.n	8008804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	4a34      	ldr	r2, [pc, #208]	; (80088c4 <UART_AdvFeatureConfig+0x150>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	0019      	movs	r1, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	2210      	movs	r2, #16
 800880a:	4013      	ands	r3, r2
 800880c:	d00b      	beq.n	8008826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	4a2c      	ldr	r2, [pc, #176]	; (80088c8 <UART_AdvFeatureConfig+0x154>)
 8008816:	4013      	ands	r3, r2
 8008818:	0019      	movs	r1, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882a:	2220      	movs	r2, #32
 800882c:	4013      	ands	r3, r2
 800882e:	d00b      	beq.n	8008848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	4a25      	ldr	r2, [pc, #148]	; (80088cc <UART_AdvFeatureConfig+0x158>)
 8008838:	4013      	ands	r3, r2
 800883a:	0019      	movs	r1, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	2240      	movs	r2, #64	; 0x40
 800884e:	4013      	ands	r3, r2
 8008850:	d01d      	beq.n	800888e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4a1d      	ldr	r2, [pc, #116]	; (80088d0 <UART_AdvFeatureConfig+0x15c>)
 800885a:	4013      	ands	r3, r2
 800885c:	0019      	movs	r1, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800886e:	2380      	movs	r3, #128	; 0x80
 8008870:	035b      	lsls	r3, r3, #13
 8008872:	429a      	cmp	r2, r3
 8008874:	d10b      	bne.n	800888e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	4a15      	ldr	r2, [pc, #84]	; (80088d4 <UART_AdvFeatureConfig+0x160>)
 800887e:	4013      	ands	r3, r2
 8008880:	0019      	movs	r1, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	2280      	movs	r2, #128	; 0x80
 8008894:	4013      	ands	r3, r2
 8008896:	d00b      	beq.n	80088b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	4a0e      	ldr	r2, [pc, #56]	; (80088d8 <UART_AdvFeatureConfig+0x164>)
 80088a0:	4013      	ands	r3, r2
 80088a2:	0019      	movs	r1, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	605a      	str	r2, [r3, #4]
  }
}
 80088b0:	46c0      	nop			; (mov r8, r8)
 80088b2:	46bd      	mov	sp, r7
 80088b4:	b002      	add	sp, #8
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	fffdffff 	.word	0xfffdffff
 80088bc:	fffeffff 	.word	0xfffeffff
 80088c0:	fffbffff 	.word	0xfffbffff
 80088c4:	ffff7fff 	.word	0xffff7fff
 80088c8:	ffffefff 	.word	0xffffefff
 80088cc:	ffffdfff 	.word	0xffffdfff
 80088d0:	ffefffff 	.word	0xffefffff
 80088d4:	ff9fffff 	.word	0xff9fffff
 80088d8:	fff7ffff 	.word	0xfff7ffff

080088dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80088ea:	f7fd f8dd 	bl	8005aa8 <HAL_GetTick>
 80088ee:	0003      	movs	r3, r0
 80088f0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2208      	movs	r2, #8
 80088fa:	4013      	ands	r3, r2
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d10d      	bne.n	800891c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	2380      	movs	r3, #128	; 0x80
 8008904:	0399      	lsls	r1, r3, #14
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4b16      	ldr	r3, [pc, #88]	; (8008964 <UART_CheckIdleState+0x88>)
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	0013      	movs	r3, r2
 800890e:	2200      	movs	r2, #0
 8008910:	f000 f82a 	bl	8008968 <UART_WaitOnFlagUntilTimeout>
 8008914:	1e03      	subs	r3, r0, #0
 8008916:	d001      	beq.n	800891c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e01f      	b.n	800895c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2204      	movs	r2, #4
 8008924:	4013      	ands	r3, r2
 8008926:	2b04      	cmp	r3, #4
 8008928:	d10d      	bne.n	8008946 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	2380      	movs	r3, #128	; 0x80
 800892e:	03d9      	lsls	r1, r3, #15
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <UART_CheckIdleState+0x88>)
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	0013      	movs	r3, r2
 8008938:	2200      	movs	r2, #0
 800893a:	f000 f815 	bl	8008968 <UART_WaitOnFlagUntilTimeout>
 800893e:	1e03      	subs	r3, r0, #0
 8008940:	d001      	beq.n	8008946 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e00a      	b.n	800895c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2220      	movs	r2, #32
 800894a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2270      	movs	r2, #112	; 0x70
 8008956:	2100      	movs	r1, #0
 8008958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	0018      	movs	r0, r3
 800895e:	46bd      	mov	sp, r7
 8008960:	b004      	add	sp, #16
 8008962:	bd80      	pop	{r7, pc}
 8008964:	01ffffff 	.word	0x01ffffff

08008968 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	1dfb      	adds	r3, r7, #7
 8008976:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008978:	e05d      	b.n	8008a36 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	3301      	adds	r3, #1
 800897e:	d05a      	beq.n	8008a36 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008980:	f7fd f892 	bl	8005aa8 <HAL_GetTick>
 8008984:	0002      	movs	r2, r0
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	429a      	cmp	r2, r3
 800898e:	d302      	bcc.n	8008996 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d11b      	bne.n	80089ce <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	492f      	ldr	r1, [pc, #188]	; (8008a60 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80089a2:	400a      	ands	r2, r1
 80089a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2101      	movs	r1, #1
 80089b2:	438a      	bics	r2, r1
 80089b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2220      	movs	r2, #32
 80089ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2220      	movs	r2, #32
 80089c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2270      	movs	r2, #112	; 0x70
 80089c6:	2100      	movs	r1, #0
 80089c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e043      	b.n	8008a56 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2204      	movs	r2, #4
 80089d6:	4013      	ands	r3, r2
 80089d8:	d02d      	beq.n	8008a36 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69da      	ldr	r2, [r3, #28]
 80089e0:	2380      	movs	r3, #128	; 0x80
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	401a      	ands	r2, r3
 80089e6:	2380      	movs	r3, #128	; 0x80
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d123      	bne.n	8008a36 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2280      	movs	r2, #128	; 0x80
 80089f4:	0112      	lsls	r2, r2, #4
 80089f6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4917      	ldr	r1, [pc, #92]	; (8008a60 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8008a04:	400a      	ands	r2, r1
 8008a06:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2101      	movs	r1, #1
 8008a14:	438a      	bics	r2, r1
 8008a16:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2220      	movs	r2, #32
 8008a22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2220      	movs	r2, #32
 8008a28:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2270      	movs	r2, #112	; 0x70
 8008a2e:	2100      	movs	r1, #0
 8008a30:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e00f      	b.n	8008a56 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	425a      	negs	r2, r3
 8008a46:	4153      	adcs	r3, r2
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	001a      	movs	r2, r3
 8008a4c:	1dfb      	adds	r3, r7, #7
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d092      	beq.n	800897a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	0018      	movs	r0, r3
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	b004      	add	sp, #16
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	46c0      	nop			; (mov r8, r8)
 8008a60:	fffffe5f 	.word	0xfffffe5f

08008a64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	21c0      	movs	r1, #192	; 0xc0
 8008a78:	438a      	bics	r2, r1
 8008a7a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008a82:	46c0      	nop			; (mov r8, r8)
 8008a84:	46bd      	mov	sp, r7
 8008a86:	b002      	add	sp, #8
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	490a      	ldr	r1, [pc, #40]	; (8008ac8 <UART_EndRxTransfer+0x3c>)
 8008aa0:	400a      	ands	r2, r1
 8008aa2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2101      	movs	r1, #1
 8008ab0:	438a      	bics	r2, r1
 8008ab2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008ac0:	46c0      	nop			; (mov r8, r8)
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	b002      	add	sp, #8
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	fffffedf 	.word	0xfffffedf

08008acc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	d014      	beq.n	8008b0c <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2252      	movs	r2, #82	; 0x52
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2180      	movs	r1, #128	; 0x80
 8008af6:	438a      	bics	r2, r1
 8008af8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2140      	movs	r1, #64	; 0x40
 8008b06:	430a      	orrs	r2, r1
 8008b08:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b0a:	e003      	b.n	8008b14 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	0018      	movs	r0, r3
 8008b10:	f7ff fc82 	bl	8008418 <HAL_UART_TxCpltCallback>
}
 8008b14:	46c0      	nop			; (mov r8, r8)
 8008b16:	46bd      	mov	sp, r7
 8008b18:	b004      	add	sp, #16
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	f7ff fc7b 	bl	8008428 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	46bd      	mov	sp, r7
 8008b36:	b004      	add	sp, #16
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	d01e      	beq.n	8008b90 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	225a      	movs	r2, #90	; 0x5a
 8008b56:	2100      	movs	r1, #0
 8008b58:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	490e      	ldr	r1, [pc, #56]	; (8008ba0 <UART_DMAReceiveCplt+0x64>)
 8008b66:	400a      	ands	r2, r1
 8008b68:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689a      	ldr	r2, [r3, #8]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2101      	movs	r1, #1
 8008b76:	438a      	bics	r2, r1
 8008b78:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2140      	movs	r1, #64	; 0x40
 8008b86:	438a      	bics	r2, r1
 8008b88:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	0018      	movs	r0, r3
 8008b94:	f7ff fc50 	bl	8008438 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b98:	46c0      	nop			; (mov r8, r8)
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	b004      	add	sp, #16
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	fffffeff 	.word	0xfffffeff

08008ba4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f7ff fc47 	bl	8008448 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bba:	46c0      	nop			; (mov r8, r8)
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	b004      	add	sp, #16
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b086      	sub	sp, #24
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	2280      	movs	r2, #128	; 0x80
 8008be4:	4013      	ands	r3, r2
 8008be6:	2b80      	cmp	r3, #128	; 0x80
 8008be8:	d10a      	bne.n	8008c00 <UART_DMAError+0x3e>
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b21      	cmp	r3, #33	; 0x21
 8008bee:	d107      	bne.n	8008c00 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	2252      	movs	r2, #82	; 0x52
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f7ff ff32 	bl	8008a64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	2240      	movs	r2, #64	; 0x40
 8008c08:	4013      	ands	r3, r2
 8008c0a:	2b40      	cmp	r3, #64	; 0x40
 8008c0c:	d10a      	bne.n	8008c24 <UART_DMAError+0x62>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b22      	cmp	r3, #34	; 0x22
 8008c12:	d107      	bne.n	8008c24 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	225a      	movs	r2, #90	; 0x5a
 8008c18:	2100      	movs	r1, #0
 8008c1a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f7ff ff34 	bl	8008a8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c28:	2210      	movs	r2, #16
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	0018      	movs	r0, r3
 8008c34:	f7ff fc10 	bl	8008458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c38:	46c0      	nop			; (mov r8, r8)
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	b006      	add	sp, #24
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <_Znwj>:
 8008c40:	b510      	push	{r4, lr}
 8008c42:	1e04      	subs	r4, r0, #0
 8008c44:	d100      	bne.n	8008c48 <_Znwj+0x8>
 8008c46:	3401      	adds	r4, #1
 8008c48:	0020      	movs	r0, r4
 8008c4a:	f000 f843 	bl	8008cd4 <malloc>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d107      	bne.n	8008c62 <_Znwj+0x22>
 8008c52:	f000 f807 	bl	8008c64 <_ZSt15get_new_handlerv>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d101      	bne.n	8008c5e <_Znwj+0x1e>
 8008c5a:	f000 f809 	bl	8008c70 <abort>
 8008c5e:	4780      	blx	r0
 8008c60:	e7f2      	b.n	8008c48 <_Znwj+0x8>
 8008c62:	bd10      	pop	{r4, pc}

08008c64 <_ZSt15get_new_handlerv>:
 8008c64:	4b01      	ldr	r3, [pc, #4]	; (8008c6c <_ZSt15get_new_handlerv+0x8>)
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	4770      	bx	lr
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	20000458 	.word	0x20000458

08008c70 <abort>:
 8008c70:	b510      	push	{r4, lr}
 8008c72:	2006      	movs	r0, #6
 8008c74:	f000 f8da 	bl	8008e2c <raise>
 8008c78:	2001      	movs	r0, #1
 8008c7a:	f7fc fe53 	bl	8005924 <_exit>
	...

08008c80 <__errno>:
 8008c80:	4b01      	ldr	r3, [pc, #4]	; (8008c88 <__errno+0x8>)
 8008c82:	6818      	ldr	r0, [r3, #0]
 8008c84:	4770      	bx	lr
 8008c86:	46c0      	nop			; (mov r8, r8)
 8008c88:	20000014 	.word	0x20000014

08008c8c <__libc_init_array>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	2600      	movs	r6, #0
 8008c90:	4d0c      	ldr	r5, [pc, #48]	; (8008cc4 <__libc_init_array+0x38>)
 8008c92:	4c0d      	ldr	r4, [pc, #52]	; (8008cc8 <__libc_init_array+0x3c>)
 8008c94:	1b64      	subs	r4, r4, r5
 8008c96:	10a4      	asrs	r4, r4, #2
 8008c98:	42a6      	cmp	r6, r4
 8008c9a:	d109      	bne.n	8008cb0 <__libc_init_array+0x24>
 8008c9c:	2600      	movs	r6, #0
 8008c9e:	f000 f8e7 	bl	8008e70 <_init>
 8008ca2:	4d0a      	ldr	r5, [pc, #40]	; (8008ccc <__libc_init_array+0x40>)
 8008ca4:	4c0a      	ldr	r4, [pc, #40]	; (8008cd0 <__libc_init_array+0x44>)
 8008ca6:	1b64      	subs	r4, r4, r5
 8008ca8:	10a4      	asrs	r4, r4, #2
 8008caa:	42a6      	cmp	r6, r4
 8008cac:	d105      	bne.n	8008cba <__libc_init_array+0x2e>
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	00b3      	lsls	r3, r6, #2
 8008cb2:	58eb      	ldr	r3, [r5, r3]
 8008cb4:	4798      	blx	r3
 8008cb6:	3601      	adds	r6, #1
 8008cb8:	e7ee      	b.n	8008c98 <__libc_init_array+0xc>
 8008cba:	00b3      	lsls	r3, r6, #2
 8008cbc:	58eb      	ldr	r3, [r5, r3]
 8008cbe:	4798      	blx	r3
 8008cc0:	3601      	adds	r6, #1
 8008cc2:	e7f2      	b.n	8008caa <__libc_init_array+0x1e>
 8008cc4:	0800908c 	.word	0x0800908c
 8008cc8:	0800908c 	.word	0x0800908c
 8008ccc:	0800908c 	.word	0x0800908c
 8008cd0:	08009090 	.word	0x08009090

08008cd4 <malloc>:
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	4b03      	ldr	r3, [pc, #12]	; (8008ce4 <malloc+0x10>)
 8008cd8:	0001      	movs	r1, r0
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	f000 f80c 	bl	8008cf8 <_malloc_r>
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	46c0      	nop			; (mov r8, r8)
 8008ce4:	20000014 	.word	0x20000014

08008ce8 <memset>:
 8008ce8:	0003      	movs	r3, r0
 8008cea:	1812      	adds	r2, r2, r0
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d100      	bne.n	8008cf2 <memset+0xa>
 8008cf0:	4770      	bx	lr
 8008cf2:	7019      	strb	r1, [r3, #0]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	e7f9      	b.n	8008cec <memset+0x4>

08008cf8 <_malloc_r>:
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	b570      	push	{r4, r5, r6, lr}
 8008cfc:	1ccd      	adds	r5, r1, #3
 8008cfe:	439d      	bics	r5, r3
 8008d00:	3508      	adds	r5, #8
 8008d02:	0006      	movs	r6, r0
 8008d04:	2d0c      	cmp	r5, #12
 8008d06:	d21e      	bcs.n	8008d46 <_malloc_r+0x4e>
 8008d08:	250c      	movs	r5, #12
 8008d0a:	42a9      	cmp	r1, r5
 8008d0c:	d81d      	bhi.n	8008d4a <_malloc_r+0x52>
 8008d0e:	0030      	movs	r0, r6
 8008d10:	f000 f8ac 	bl	8008e6c <__malloc_lock>
 8008d14:	4a25      	ldr	r2, [pc, #148]	; (8008dac <_malloc_r+0xb4>)
 8008d16:	6814      	ldr	r4, [r2, #0]
 8008d18:	0021      	movs	r1, r4
 8008d1a:	2900      	cmp	r1, #0
 8008d1c:	d119      	bne.n	8008d52 <_malloc_r+0x5a>
 8008d1e:	4c24      	ldr	r4, [pc, #144]	; (8008db0 <_malloc_r+0xb8>)
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d103      	bne.n	8008d2e <_malloc_r+0x36>
 8008d26:	0030      	movs	r0, r6
 8008d28:	f000 f844 	bl	8008db4 <_sbrk_r>
 8008d2c:	6020      	str	r0, [r4, #0]
 8008d2e:	0029      	movs	r1, r5
 8008d30:	0030      	movs	r0, r6
 8008d32:	f000 f83f 	bl	8008db4 <_sbrk_r>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	d12b      	bne.n	8008d92 <_malloc_r+0x9a>
 8008d3a:	230c      	movs	r3, #12
 8008d3c:	0030      	movs	r0, r6
 8008d3e:	6033      	str	r3, [r6, #0]
 8008d40:	f000 f895 	bl	8008e6e <__malloc_unlock>
 8008d44:	e003      	b.n	8008d4e <_malloc_r+0x56>
 8008d46:	2d00      	cmp	r5, #0
 8008d48:	dadf      	bge.n	8008d0a <_malloc_r+0x12>
 8008d4a:	230c      	movs	r3, #12
 8008d4c:	6033      	str	r3, [r6, #0]
 8008d4e:	2000      	movs	r0, #0
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
 8008d52:	680b      	ldr	r3, [r1, #0]
 8008d54:	1b5b      	subs	r3, r3, r5
 8008d56:	d419      	bmi.n	8008d8c <_malloc_r+0x94>
 8008d58:	2b0b      	cmp	r3, #11
 8008d5a:	d903      	bls.n	8008d64 <_malloc_r+0x6c>
 8008d5c:	600b      	str	r3, [r1, #0]
 8008d5e:	18cc      	adds	r4, r1, r3
 8008d60:	6025      	str	r5, [r4, #0]
 8008d62:	e003      	b.n	8008d6c <_malloc_r+0x74>
 8008d64:	684b      	ldr	r3, [r1, #4]
 8008d66:	428c      	cmp	r4, r1
 8008d68:	d10d      	bne.n	8008d86 <_malloc_r+0x8e>
 8008d6a:	6013      	str	r3, [r2, #0]
 8008d6c:	0030      	movs	r0, r6
 8008d6e:	f000 f87e 	bl	8008e6e <__malloc_unlock>
 8008d72:	0020      	movs	r0, r4
 8008d74:	2207      	movs	r2, #7
 8008d76:	300b      	adds	r0, #11
 8008d78:	1d23      	adds	r3, r4, #4
 8008d7a:	4390      	bics	r0, r2
 8008d7c:	1ac3      	subs	r3, r0, r3
 8008d7e:	d0e7      	beq.n	8008d50 <_malloc_r+0x58>
 8008d80:	425a      	negs	r2, r3
 8008d82:	50e2      	str	r2, [r4, r3]
 8008d84:	e7e4      	b.n	8008d50 <_malloc_r+0x58>
 8008d86:	6063      	str	r3, [r4, #4]
 8008d88:	000c      	movs	r4, r1
 8008d8a:	e7ef      	b.n	8008d6c <_malloc_r+0x74>
 8008d8c:	000c      	movs	r4, r1
 8008d8e:	6849      	ldr	r1, [r1, #4]
 8008d90:	e7c3      	b.n	8008d1a <_malloc_r+0x22>
 8008d92:	2303      	movs	r3, #3
 8008d94:	1cc4      	adds	r4, r0, #3
 8008d96:	439c      	bics	r4, r3
 8008d98:	42a0      	cmp	r0, r4
 8008d9a:	d0e1      	beq.n	8008d60 <_malloc_r+0x68>
 8008d9c:	1a21      	subs	r1, r4, r0
 8008d9e:	0030      	movs	r0, r6
 8008da0:	f000 f808 	bl	8008db4 <_sbrk_r>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d1db      	bne.n	8008d60 <_malloc_r+0x68>
 8008da8:	e7c7      	b.n	8008d3a <_malloc_r+0x42>
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	2000045c 	.word	0x2000045c
 8008db0:	20000460 	.word	0x20000460

08008db4 <_sbrk_r>:
 8008db4:	2300      	movs	r3, #0
 8008db6:	b570      	push	{r4, r5, r6, lr}
 8008db8:	4c06      	ldr	r4, [pc, #24]	; (8008dd4 <_sbrk_r+0x20>)
 8008dba:	0005      	movs	r5, r0
 8008dbc:	0008      	movs	r0, r1
 8008dbe:	6023      	str	r3, [r4, #0]
 8008dc0:	f7fc fdbc 	bl	800593c <_sbrk>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d103      	bne.n	8008dd0 <_sbrk_r+0x1c>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d000      	beq.n	8008dd0 <_sbrk_r+0x1c>
 8008dce:	602b      	str	r3, [r5, #0]
 8008dd0:	bd70      	pop	{r4, r5, r6, pc}
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	20000468 	.word	0x20000468

08008dd8 <_raise_r>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	0004      	movs	r4, r0
 8008ddc:	000d      	movs	r5, r1
 8008dde:	291f      	cmp	r1, #31
 8008de0:	d904      	bls.n	8008dec <_raise_r+0x14>
 8008de2:	2316      	movs	r3, #22
 8008de4:	6003      	str	r3, [r0, #0]
 8008de6:	2001      	movs	r0, #1
 8008de8:	4240      	negs	r0, r0
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d004      	beq.n	8008dfc <_raise_r+0x24>
 8008df2:	008a      	lsls	r2, r1, #2
 8008df4:	189b      	adds	r3, r3, r2
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	2a00      	cmp	r2, #0
 8008dfa:	d108      	bne.n	8008e0e <_raise_r+0x36>
 8008dfc:	0020      	movs	r0, r4
 8008dfe:	f000 f831 	bl	8008e64 <_getpid_r>
 8008e02:	002a      	movs	r2, r5
 8008e04:	0001      	movs	r1, r0
 8008e06:	0020      	movs	r0, r4
 8008e08:	f000 f81a 	bl	8008e40 <_kill_r>
 8008e0c:	e7ed      	b.n	8008dea <_raise_r+0x12>
 8008e0e:	2000      	movs	r0, #0
 8008e10:	2a01      	cmp	r2, #1
 8008e12:	d0ea      	beq.n	8008dea <_raise_r+0x12>
 8008e14:	1c51      	adds	r1, r2, #1
 8008e16:	d103      	bne.n	8008e20 <_raise_r+0x48>
 8008e18:	2316      	movs	r3, #22
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	e7e4      	b.n	8008dea <_raise_r+0x12>
 8008e20:	2400      	movs	r4, #0
 8008e22:	0028      	movs	r0, r5
 8008e24:	601c      	str	r4, [r3, #0]
 8008e26:	4790      	blx	r2
 8008e28:	0020      	movs	r0, r4
 8008e2a:	e7de      	b.n	8008dea <_raise_r+0x12>

08008e2c <raise>:
 8008e2c:	b510      	push	{r4, lr}
 8008e2e:	4b03      	ldr	r3, [pc, #12]	; (8008e3c <raise+0x10>)
 8008e30:	0001      	movs	r1, r0
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	f7ff ffd0 	bl	8008dd8 <_raise_r>
 8008e38:	bd10      	pop	{r4, pc}
 8008e3a:	46c0      	nop			; (mov r8, r8)
 8008e3c:	20000014 	.word	0x20000014

08008e40 <_kill_r>:
 8008e40:	2300      	movs	r3, #0
 8008e42:	b570      	push	{r4, r5, r6, lr}
 8008e44:	4c06      	ldr	r4, [pc, #24]	; (8008e60 <_kill_r+0x20>)
 8008e46:	0005      	movs	r5, r0
 8008e48:	0008      	movs	r0, r1
 8008e4a:	0011      	movs	r1, r2
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	f7fc fd59 	bl	8005904 <_kill>
 8008e52:	1c43      	adds	r3, r0, #1
 8008e54:	d103      	bne.n	8008e5e <_kill_r+0x1e>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d000      	beq.n	8008e5e <_kill_r+0x1e>
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	20000468 	.word	0x20000468

08008e64 <_getpid_r>:
 8008e64:	b510      	push	{r4, lr}
 8008e66:	f7fc fd47 	bl	80058f8 <_getpid>
 8008e6a:	bd10      	pop	{r4, pc}

08008e6c <__malloc_lock>:
 8008e6c:	4770      	bx	lr

08008e6e <__malloc_unlock>:
 8008e6e:	4770      	bx	lr

08008e70 <_init>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	46c0      	nop			; (mov r8, r8)
 8008e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e76:	bc08      	pop	{r3}
 8008e78:	469e      	mov	lr, r3
 8008e7a:	4770      	bx	lr

08008e7c <_fini>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr
