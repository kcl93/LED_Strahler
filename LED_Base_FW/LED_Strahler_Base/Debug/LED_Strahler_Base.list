
LED_Strahler_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000926c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08009410  08009410  00019410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800975c  0800975c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800975c  0800975c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800975c  0800975c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800975c  0800975c  0001975c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009760  08009760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001dc  08009940  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08009940  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b6a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fd6  00000000  00000000  00033d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  00036d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  00037b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000222ed  00000000  00000000  00038868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee92  00000000  00000000  0005ab55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b712a  00000000  00000000  000699e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120b11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004890  00000000  00000000  00120b8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093f4 	.word	0x080093f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080093f4 	.word	0x080093f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <_Z14LED_Base_Setupv>:
LED_SerialParser *PC_parser;
uint32_t sync_time;


void LED_Base_Setup(void)
{
 8000bb8:	b598      	push	{r3, r4, r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	BT_uart = new USART_Handler(BT_UART_HANDLE);
 8000bbc:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000bc0:	f005 fe7e 	bl	80068c0 <_Znwj>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461c      	mov	r4, r3
 8000bc8:	491b      	ldr	r1, [pc, #108]	; (8000c38 <_Z14LED_Base_Setupv+0x80>)
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f000 fc93 	bl	80014f6 <_ZN13USART_HandlerC1ER20__UART_HandleTypeDef>
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <_Z14LED_Base_Setupv+0x84>)
 8000bd2:	601c      	str	r4, [r3, #0]
	PC_uart = new USART_Handler(PC_UART_HANDLE);
 8000bd4:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000bd8:	f005 fe72 	bl	80068c0 <_Znwj>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461c      	mov	r4, r3
 8000be0:	4917      	ldr	r1, [pc, #92]	; (8000c40 <_Z14LED_Base_Setupv+0x88>)
 8000be2:	4620      	mov	r0, r4
 8000be4:	f000 fc87 	bl	80014f6 <_ZN13USART_HandlerC1ER20__UART_HandleTypeDef>
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <_Z14LED_Base_Setupv+0x8c>)
 8000bea:	601c      	str	r4, [r3, #0]

	BT_parser = new LED_SerialParser(BT_uart);
 8000bec:	2054      	movs	r0, #84	; 0x54
 8000bee:	f005 fe67 	bl	80068c0 <_Znwj>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461c      	mov	r4, r3
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_Z14LED_Base_Setupv+0x84>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f000 f9f9 	bl	8000ff4 <_ZN16LED_SerialParserC1EP13USART_Handler>
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_Z14LED_Base_Setupv+0x90>)
 8000c04:	601c      	str	r4, [r3, #0]
	PC_parser = new LED_SerialParser(PC_uart);
 8000c06:	2054      	movs	r0, #84	; 0x54
 8000c08:	f005 fe5a 	bl	80068c0 <_Znwj>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461c      	mov	r4, r3
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <_Z14LED_Base_Setupv+0x8c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4620      	mov	r0, r4
 8000c18:	f000 f9ec 	bl	8000ff4 <_ZN16LED_SerialParserC1EP13USART_Handler>
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <_Z14LED_Base_Setupv+0x94>)
 8000c1e:	601c      	str	r4, [r3, #0]

	LED_NRF24L01_Init();
 8000c20:	f000 f942 	bl	8000ea8 <_Z17LED_NRF24L01_Initv>

	sync_time = HAL_GetTick() - TIMEBASE_SYNC_PERIOD;
 8000c24:	f001 fefa 	bl	8002a1c <HAL_GetTick>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000c2e:	3b08      	subs	r3, #8
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <_Z14LED_Base_Setupv+0x98>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	bd98      	pop	{r3, r4, r7, pc}
 8000c38:	200002fc 	.word	0x200002fc
 8000c3c:	200001f8 	.word	0x200001f8
 8000c40:	2000037c 	.word	0x2000037c
 8000c44:	200001fc 	.word	0x200001fc
 8000c48:	20000200 	.word	0x20000200
 8000c4c:	20000204 	.word	0x20000204
 8000c50:	20000208 	.word	0x20000208

08000c54 <_Z15LED_Base_Handlev>:



void LED_Base_Handle(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
	NRF24L01_DataPacket cmd;
	cmd.CMD = CMD_IGNORE;
 8000c5a:	23ff      	movs	r3, #255	; 0xff
 8000c5c:	713b      	strb	r3, [r7, #4]

	//Parse inputs for new data
	BT_parser->Parse();
 8000c5e:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <_Z15LED_Base_Handlev+0xd4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f9e7 	bl	8001036 <_ZN16LED_SerialParser5ParseEv>
	PC_parser->Parse();
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <_Z15LED_Base_Handlev+0xd8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f9e2 	bl	8001036 <_ZN16LED_SerialParser5ParseEv>

	//Check for new data
	if(BT_parser->Available() == true)
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <_Z15LED_Base_Handlev+0xd4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 fc18 	bl	80014ac <_ZN16LED_SerialParser9AvailableEv>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d007      	beq.n	8000c92 <_Z15LED_Base_Handlev+0x3e>
	{
		BT_parser->ReadCMD(&cmd);
 8000c82:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <_Z15LED_Base_Handlev+0xd4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	1d3a      	adds	r2, r7, #4
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fc1b 	bl	80014c6 <_ZN16LED_SerialParser7ReadCMDEP19NRF24L01_DataPacket>
 8000c90:	e00e      	b.n	8000cb0 <_Z15LED_Base_Handlev+0x5c>
	}
	else if(PC_parser->Available() == true)
 8000c92:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <_Z15LED_Base_Handlev+0xd8>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fc08 	bl	80014ac <_ZN16LED_SerialParser9AvailableEv>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <_Z15LED_Base_Handlev+0x5c>
	{
		PC_parser->ReadCMD(&cmd);
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <_Z15LED_Base_Handlev+0xd8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1d3a      	adds	r2, r7, #4
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fc0b 	bl	80014c6 <_ZN16LED_SerialParser7ReadCMDEP19NRF24L01_DataPacket>
	}

	//Check if a new command was received
	if(cmd.CMD == CMD_IGNORE)
 8000cb0:	793b      	ldrb	r3, [r7, #4]
 8000cb2:	2bff      	cmp	r3, #255	; 0xff
 8000cb4:	d11e      	bne.n	8000cf4 <_Z15LED_Base_Handlev+0xa0>
	{
		//No new command received! Handle timebase sync commands instead
		if((HAL_GetTick() - sync_time) >= TIMEBASE_SYNC_PERIOD)
 8000cb6:	f001 feb1 	bl	8002a1c <HAL_GetTick>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <_Z15LED_Base_Handlev+0xdc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	f241 3287 	movw	r2, #4999	; 0x1387
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	bf8c      	ite	hi
 8000cca:	2301      	movhi	r3, #1
 8000ccc:	2300      	movls	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d025      	beq.n	8000d20 <_Z15LED_Base_Handlev+0xcc>
		{
			sync_time = HAL_GetTick();
 8000cd4:	f001 fea2 	bl	8002a1c <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <_Z15LED_Base_Handlev+0xdc>)
 8000cdc:	601a      	str	r2, [r3, #0]
			cmd.SetTimebase.CMD = CMD_SETTIMEBASE;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	713b      	strb	r3, [r7, #4]
			cmd.SetTimebase.Timebase = sync_time;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_Z15LED_Base_Handlev+0xdc>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f8c7 3005 	str.w	r3, [r7, #5]
			LED_NRF24L01_Send(cmd.Data);
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f96a 	bl	8000fc6 <_Z17LED_NRF24L01_SendPh>
 8000cf2:	e016      	b.n	8000d22 <_Z15LED_Base_Handlev+0xce>
		}
		return;
	}

	//Execute new command
	switch(cmd.CMD)
 8000cf4:	793b      	ldrb	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <_Z15LED_Base_Handlev+0xac>
 8000cfa:	2b10      	cmp	r3, #16
 8000cfc:	d005      	beq.n	8000d0a <_Z15LED_Base_Handlev+0xb6>
 8000cfe:	e009      	b.n	8000d14 <_Z15LED_Base_Handlev+0xc0>
	{
	case CMD_PINGREQUEST:
		ExecPingRequest(&cmd);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f816 	bl	8000d34 <_Z15ExecPingRequestP19NRF24L01_DataPacket>
		break;
 8000d08:	e00b      	b.n	8000d22 <_Z15LED_Base_Handlev+0xce>

	case CMD_GETTEMPERATURE:
		ExecGetTemperature(&cmd);
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f86d 	bl	8000dec <_Z18ExecGetTemperatureP19NRF24L01_DataPacket>
		break;
 8000d12:	e006      	b.n	8000d22 <_Z15LED_Base_Handlev+0xce>

	default:
		LED_NRF24L01_Send(cmd.Data);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f955 	bl	8000fc6 <_Z17LED_NRF24L01_SendPh>
		break;
 8000d1c:	bf00      	nop
 8000d1e:	e000      	b.n	8000d22 <_Z15LED_Base_Handlev+0xce>
		return;
 8000d20:	bf00      	nop
	}
}
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000200 	.word	0x20000200
 8000d2c:	20000204 	.word	0x20000204
 8000d30:	20000208 	.word	0x20000208

08000d34 <_Z15ExecPingRequestP19NRF24L01_DataPacket>:



inline void ExecPingRequest(NRF24L01_DataPacket *cmd)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	uint32_t time;
	char buf[16];

	cmd->CMD = CMD_PINGREQUEST;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
	LED_NRF24L01_Send(cmd->Data); //Ping all slaves to see which are present
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f93e 	bl	8000fc6 <_Z17LED_NRF24L01_SendPh>

	//Wait for transfer to finish or timeout
	LED_NRF24L01_WaitTx(5);
 8000d4a:	2005      	movs	r0, #5
 8000d4c:	f000 f917 	bl	8000f7e <_Z19LED_NRF24L01_WaitTxh>

	/* Go to RX mode */
	NRF24L01_PowerUpRx();
 8000d50:	f001 f85a 	bl	8001e08 <NRF24L01_PowerUpRx>

	time = HAL_GetTick();
 8000d54:	f001 fe62 	bl	8002a1c <HAL_GetTick>
 8000d58:	61f8      	str	r0, [r7, #28]
	while((HAL_GetTick() - time) >= PING_TIMEOUT)
 8000d5a:	f001 fe5f 	bl	8002a1c <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	f240 424b 	movw	r2, #1099	; 0x44b
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	bf8c      	ite	hi
 8000d6c:	2301      	movhi	r3, #1
 8000d6e:	2300      	movls	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d02d      	beq.n	8000dd2 <_Z15ExecPingRequestP19NRF24L01_DataPacket+0x9e>
	{
		if (NRF24L01_GetStatus() & (1 << NRF24L01_RX_DR))
 8000d76:	f001 f8c5 	bl	8001f04 <NRF24L01_GetStatus>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bf14      	ite	ne
 8000d84:	2301      	movne	r3, #1
 8000d86:	2300      	moveq	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0e5      	beq.n	8000d5a <_Z15ExecPingRequestP19NRF24L01_DataPacket+0x26>
		{
			/* Get data from NRF24L01+ */
			NRF24L01_GetData(cmd->Data);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 f893 	bl	8001ebc <NRF24L01_GetData>

			if(cmd->CMD == CMD_PINGREQUESTANSWER)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b80      	cmp	r3, #128	; 0x80
 8000d9c:	d1dd      	bne.n	8000d5a <_Z15ExecPingRequestP19NRF24L01_DataPacket+0x26>
			{
				//Print answer to both serials
				sprintf(buf, "P: %u\n", (unsigned int)cmd->PingAnswer.SlaveAddress);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	490d      	ldr	r1, [pc, #52]	; (8000de0 <_Z15ExecPingRequestP19NRF24L01_DataPacket+0xac>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f006 fb3c 	bl	8007428 <siprintf>
				BT_uart->Print(buf);
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_Z15ExecPingRequestP19NRF24L01_DataPacket+0xb0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f107 020c 	add.w	r2, r7, #12
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fbf8 	bl	80015b0 <_ZN13USART_Handler5PrintEPc>
				PC_uart->Print(buf);
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <_Z15ExecPingRequestP19NRF24L01_DataPacket+0xb4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f107 020c 	add.w	r2, r7, #12
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fbf0 	bl	80015b0 <_ZN13USART_Handler5PrintEPc>
	while((HAL_GetTick() - time) >= PING_TIMEOUT)
 8000dd0:	e7c3      	b.n	8000d5a <_Z15ExecPingRequestP19NRF24L01_DataPacket+0x26>
			}
		}
	}

	/* Go to TX mode */
	NRF24L01_PowerUpTx();
 8000dd2:	f000 fff5 	bl	8001dc0 <NRF24L01_PowerUpTx>
}
 8000dd6:	bf00      	nop
 8000dd8:	3720      	adds	r7, #32
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	08009410 	.word	0x08009410
 8000de4:	200001f8 	.word	0x200001f8
 8000de8:	200001fc 	.word	0x200001fc

08000dec <_Z18ExecGetTemperatureP19NRF24L01_DataPacket>:



inline void ExecGetTemperature(NRF24L01_DataPacket *cmd)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	uint32_t time;
	char buf[16];

	cmd->CMD = CMD_GETTEMPERATURE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2210      	movs	r2, #16
 8000df8:	701a      	strb	r2, [r3, #0]
	LED_NRF24L01_Send(cmd->Data); //Ask for temperature
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f8e2 	bl	8000fc6 <_Z17LED_NRF24L01_SendPh>

	//Wait for transfer to finish or timeout
	LED_NRF24L01_WaitTx(5);
 8000e02:	2005      	movs	r0, #5
 8000e04:	f000 f8bb 	bl	8000f7e <_Z19LED_NRF24L01_WaitTxh>

	/* Go to RX mode */
	NRF24L01_PowerUpRx();
 8000e08:	f000 fffe 	bl	8001e08 <NRF24L01_PowerUpRx>

	time = HAL_GetTick();
 8000e0c:	f001 fe06 	bl	8002a1c <HAL_GetTick>
 8000e10:	61f8      	str	r0, [r7, #28]
	while((HAL_GetTick() - time) >= GET_INFO_TIMEOUT)
 8000e12:	f001 fe03 	bl	8002a1c <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b13      	cmp	r3, #19
 8000e1e:	bf8c      	ite	hi
 8000e20:	2301      	movhi	r3, #1
 8000e22:	2300      	movls	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d033      	beq.n	8000e92 <_Z18ExecGetTemperatureP19NRF24L01_DataPacket+0xa6>
	{
		if (NRF24L01_GetStatus() & (1 << NRF24L01_RX_DR))
 8000e2a:	f001 f86b 	bl	8001f04 <NRF24L01_GetStatus>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0e7      	beq.n	8000e12 <_Z18ExecGetTemperatureP19NRF24L01_DataPacket+0x26>
		{
			/* Get data from NRF24L01+ */
			NRF24L01_GetData(cmd->Data);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 f839 	bl	8001ebc <NRF24L01_GetData>

			if(cmd->CMD == CMD_GETTEMPERATUREANSWER)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b90      	cmp	r3, #144	; 0x90
 8000e50:	d1df      	bne.n	8000e12 <_Z18ExecGetTemperatureP19NRF24L01_DataPacket+0x26>
			{
				//Print answer to both serials
				sprintf(buf, "T: %.1f\n", cmd->GetTemperatureAnswer.LED_Temperature);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb7d 	bl	8000558 <__aeabi_f2d>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460c      	mov	r4, r1
 8000e62:	f107 000c 	add.w	r0, r7, #12
 8000e66:	461a      	mov	r2, r3
 8000e68:	4623      	mov	r3, r4
 8000e6a:	490c      	ldr	r1, [pc, #48]	; (8000e9c <_Z18ExecGetTemperatureP19NRF24L01_DataPacket+0xb0>)
 8000e6c:	f006 fadc 	bl	8007428 <siprintf>
				BT_uart->Print(buf);
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <_Z18ExecGetTemperatureP19NRF24L01_DataPacket+0xb4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f107 020c 	add.w	r2, r7, #12
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fb98 	bl	80015b0 <_ZN13USART_Handler5PrintEPc>
				PC_uart->Print(buf);
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_Z18ExecGetTemperatureP19NRF24L01_DataPacket+0xb8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f107 020c 	add.w	r2, r7, #12
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fb90 	bl	80015b0 <_ZN13USART_Handler5PrintEPc>
 8000e90:	e001      	b.n	8000e96 <_Z18ExecGetTemperatureP19NRF24L01_DataPacket+0xaa>
			}
		}
	}

	/* Go to TX mode */
	NRF24L01_PowerUpTx();
 8000e92:	f000 ff95 	bl	8001dc0 <NRF24L01_PowerUpTx>
}
 8000e96:	3724      	adds	r7, #36	; 0x24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd90      	pop	{r4, r7, pc}
 8000e9c:	08009418 	.word	0x08009418
 8000ea0:	200001f8 	.word	0x200001f8
 8000ea4:	200001fc 	.word	0x200001fc

08000ea8 <_Z17LED_NRF24L01_Initv>:
NRF24L01_IRQ_t NRF_IRQ;



void LED_NRF24L01_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	OwnGroup = 0;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <_Z17LED_NRF24L01_Initv+0x68>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]

	//Init SPI interface
	NRF24L01_SPI_Send(0x55);
 8000eb2:	2055      	movs	r0, #85	; 0x55
 8000eb4:	f001 f95c 	bl	8002170 <NRF24L01_SPI_Send>

	NRF24L01_Init(LED_NRF24L01_CHANNEL, LED_NRF24L01_PAYLOAD); // Do basic init
 8000eb8:	210c      	movs	r1, #12
 8000eba:	2073      	movs	r0, #115	; 0x73
 8000ebc:	f000 fe94 	bl	8001be8 <NRF24L01_Init>

	NRF24L01_SetRF(LED_NRF24L01_DATARATE, LED_NRF24L01_OUTPUT_POWER); /* Set RF settings */
 8000ec0:	2103      	movs	r1, #3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f001 f908 	bl	80020d8 <NRF24L01_SetRF>

	NRF24L01_CE_LOW;
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2104      	movs	r1, #4
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <_Z17LED_NRF24L01_Initv+0x6c>)
 8000ece:	f002 ffa5 	bl	8003e1c <HAL_GPIO_WritePin>
	OwnAddress = LED_NRF24L01_BROADCAST_ADDR;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_Z17LED_NRF24L01_Initv+0x70>)
 8000ed4:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <_Z17LED_NRF24L01_Initv+0x74>)
 8000ed6:	601a      	str	r2, [r3, #0]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_TX_ADDR, (uint8_t*)&OwnAddress, 4);	//Setup transmit address
 8000ed8:	2204      	movs	r2, #4
 8000eda:	490f      	ldr	r1, [pc, #60]	; (8000f18 <_Z17LED_NRF24L01_Initv+0x70>)
 8000edc:	2010      	movs	r0, #16
 8000ede:	f000 ff47 	bl	8001d70 <NRF24L01_WriteRegisterMulti>
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P0, (uint8_t*)&OwnAddress, 4);	//Setup receive address
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <_Z17LED_NRF24L01_Initv+0x70>)
 8000ee6:	200a      	movs	r0, #10
 8000ee8:	f000 ff42 	bl	8001d70 <NRF24L01_WriteRegisterMulti>
	OwnAddress = LED_NRF24L01_BASE_ADDR;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <_Z17LED_NRF24L01_Initv+0x70>)
 8000eee:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <_Z17LED_NRF24L01_Initv+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P1, (uint8_t*)&OwnAddress, 4);	//Setup receive address
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4908      	ldr	r1, [pc, #32]	; (8000f18 <_Z17LED_NRF24L01_Initv+0x70>)
 8000ef6:	200b      	movs	r0, #11
 8000ef8:	f000 ff3a 	bl	8001d70 <NRF24L01_WriteRegisterMulti>
	NRF24L01_CE_HIGH;
 8000efc:	2201      	movs	r2, #1
 8000efe:	2104      	movs	r1, #4
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <_Z17LED_NRF24L01_Initv+0x6c>)
 8000f02:	f002 ff8b 	bl	8003e1c <HAL_GPIO_WritePin>

	/* Go to RX mode */
	NRF24L01_PowerUpTx();
 8000f06:	f000 ff5b 	bl	8001dc0 <NRF24L01_PowerUpTx>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000210 	.word	0x20000210
 8000f14:	48000400 	.word	0x48000400
 8000f18:	2000020c 	.word	0x2000020c
 8000f1c:	12345678 	.word	0x12345678
 8000f20:	87654321 	.word	0x87654321

08000f24 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF_IRQ_Pin)
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	2b10      	cmp	r3, #16
 8000f32:	d101      	bne.n	8000f38 <HAL_GPIO_EXTI_Callback+0x14>
	{
		LED_NRF24L01_IRQ();
 8000f34:	f000 f804 	bl	8000f40 <_Z16LED_NRF24L01_IRQv>
	}
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_Z16LED_NRF24L01_IRQv>:


void LED_NRF24L01_IRQ(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
	union NRF24L01_DataPacket packet;
	uint8_t status;

	/* Read interrupts, If data is ready on NRF24L01+ */
	status = NRF24L01_Clear_Interrupts(); //Reads status register and then clears it
 8000f46:	f001 f909 	bl	800215c <NRF24L01_Clear_Interrupts>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]
	if (status & (1 << NRF24L01_RX_DR))
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <_Z16LED_NRF24L01_IRQv+0x20>
	{
		/* Get data from NRF24L01+ */
		NRF24L01_GetData(packet.Data);
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 ffae 	bl	8001ebc <NRF24L01_GetData>
	}
	if(status & (1 << NRF24L01_TX_DS))
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <_Z16LED_NRF24L01_IRQv+0x36>
	{
		//Reset LED as data was sent
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f002 ff53 	bl	8003e1c <HAL_GPIO_WritePin>
	}
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_Z19LED_NRF24L01_WaitTxh>:


void LED_NRF24L01_WaitTx(uint8_t timeout)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	71fb      	strb	r3, [r7, #7]
	uint32_t starttime;
	uint8_t status;

	//Wait for previous transfer to finish or timeout
	starttime = HAL_GetTick();
 8000f88:	f001 fd48 	bl	8002a1c <HAL_GetTick>
 8000f8c:	60f8      	str	r0, [r7, #12]
	while((HAL_GetTick() - starttime) < timeout)
 8000f8e:	f001 fd45 	bl	8002a1c <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	1ad2      	subs	r2, r2, r3
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	bf34      	ite	cc
 8000f9e:	2301      	movcc	r3, #1
 8000fa0:	2300      	movcs	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00a      	beq.n	8000fbe <_Z19LED_NRF24L01_WaitTxh+0x40>
	{
		status = NRF24L01_GetStatus();
 8000fa8:	f000 ffac 	bl	8001f04 <NRF24L01_GetStatus>
 8000fac:	4603      	mov	r3, r0
 8000fae:	72fb      	strb	r3, [r7, #11]
		if (!NRF24L01_CHECK_BIT(status, NRF24L01_TX_FULL))
 8000fb0:	7afb      	ldrb	r3, [r7, #11]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d000      	beq.n	8000fbc <_Z19LED_NRF24L01_WaitTxh+0x3e>
	while((HAL_GetTick() - starttime) < timeout)
 8000fba:	e7e8      	b.n	8000f8e <_Z19LED_NRF24L01_WaitTxh+0x10>
		{
			break; //New data can be sent once there is some free room in the TX FIFO :)
 8000fbc:	bf00      	nop
		}
	}
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_Z17LED_NRF24L01_SendPh>:


void LED_NRF24L01_Send(uint8_t* data)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	//Wait for previous transfer to finish or timeout
	LED_NRF24L01_WaitTx(5);
 8000fce:	2005      	movs	r0, #5
 8000fd0:	f7ff ffd5 	bl	8000f7e <_Z19LED_NRF24L01_WaitTxh>
	//Set LED that new data will be sent
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f002 ff1e 	bl	8003e1c <HAL_GPIO_WritePin>
	//Send new data
	NRF24L01_Transmit(data);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 ff35 	bl	8001e50 <NRF24L01_Transmit>
	//Delay after sending so that data is acutally send (don't know why this is neccessary)
	HAL_Delay(2);
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f001 fd24 	bl	8002a34 <HAL_Delay>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_ZN16LED_SerialParserC1EP13USART_Handler>:
#include <stdio.h>




LED_SerialParser::LED_SerialParser(USART_Handler *_uart)
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
{
	uint8_t i;

	this->uart = _uart;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	601a      	str	r2, [r3, #0]

	for(i = 0; i < SERIALPARSER_CMD_BUFFER_SIZE; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2b3f      	cmp	r3, #63	; 0x3f
 800100c:	d808      	bhi.n	8001020 <_ZN16LED_SerialParserC1EP13USART_Handler+0x2c>
	{
		this->cmd_buf[i] = 0x00;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	2200      	movs	r2, #0
 8001016:	711a      	strb	r2, [r3, #4]
	for(i = 0; i < SERIALPARSER_CMD_BUFFER_SIZE; i++)
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	3301      	adds	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e7f3      	b.n	8001008 <_ZN16LED_SerialParserC1EP13USART_Handler+0x14>
	}
	this->cmd_buf_index = 0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_ZN16LED_SerialParser5ParseEv>:


void LED_SerialParser::Parse(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
	char byte;

	while(this->uart->Available())
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fa73 	bl	800152e <_ZN13USART_Handler9AvailableEv>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf14      	ite	ne
 800104e:	2301      	movne	r3, #1
 8001050:	2300      	moveq	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d050      	beq.n	80010fa <_ZN16LED_SerialParser5ParseEv+0xc4>
	{
		byte = this->uart->Read();
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fa82 	bl	8001566 <_ZN13USART_Handler4ReadEv>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
		if(this->cmd_buf_index == 0)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10a      	bne.n	8001086 <_ZN16LED_SerialParser5ParseEv+0x50>
		{ //Search for valid start byte
			if(byte == 'G')
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b47      	cmp	r3, #71	; 0x47
 8001074:	d1e3      	bne.n	800103e <_ZN16LED_SerialParser5ParseEv+0x8>
			{
				this->cmd_buf[0] = byte;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	711a      	strb	r2, [r3, #4]
				this->cmd_buf_index = 1;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001084:	e7db      	b.n	800103e <_ZN16LED_SerialParser5ParseEv+0x8>
			}
		}
		else if(this->cmd_buf_index < SERIALPARSER_CMD_BUFFER_SIZE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800108c:	2b3f      	cmp	r3, #63	; 0x3f
 800108e:	d82f      	bhi.n	80010f0 <_ZN16LED_SerialParser5ParseEv+0xba>
		{ //Parse new string until end of buffer or new line is reached
			if(byte == 'G')
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	2b47      	cmp	r3, #71	; 0x47
 8001094:	d107      	bne.n	80010a6 <_ZN16LED_SerialParser5ParseEv+0x70>
			{ //Reset command as new start of CMD was received
				this->cmd_buf[0] = byte;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	711a      	strb	r2, [r3, #4]
				this->cmd_buf_index = 1;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010a4:	e7cb      	b.n	800103e <_ZN16LED_SerialParser5ParseEv+0x8>
			}
			else
			{ //Fill command buffer with new characters
				this->cmd_buf[this->cmd_buf_index] = byte;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	711a      	strb	r2, [r3, #4]
				if(byte == '\n')
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b0a      	cmp	r3, #10
 80010ba:	d110      	bne.n	80010de <_ZN16LED_SerialParser5ParseEv+0xa8>
				{ //Command seems to be finished
					this->cmd_buf[this->cmd_buf_index] = 0x00;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	2200      	movs	r2, #0
 80010ca:	711a      	strb	r2, [r3, #4]
					this->Decode();
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f819 	bl	8001104 <_ZN16LED_SerialParser6DecodeEv>
					this->cmd_buf_index = 0;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					break;
 80010da:	bf00      	nop
		else
		{ //Buffer overflow! Drop current command buffer!
			this->cmd_buf_index = 0;
		}
	}
}
 80010dc:	e00d      	b.n	80010fa <_ZN16LED_SerialParser5ParseEv+0xc4>
				this->cmd_buf_index++;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010e4:	3301      	adds	r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010ee:	e7a6      	b.n	800103e <_ZN16LED_SerialParser5ParseEv+0x8>
			this->cmd_buf_index = 0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while(this->uart->Available())
 80010f8:	e7a1      	b.n	800103e <_ZN16LED_SerialParser5ParseEv+0x8>
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <_ZN16LED_SerialParser6DecodeEv>:


void LED_SerialParser::Decode(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b092      	sub	sp, #72	; 0x48
 8001108:	af06      	add	r7, sp, #24
 800110a:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	unsigned int u32Tmp[8] = {0};
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2220      	movs	r2, #32
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f005 fc24 	bl	8006968 <memset>

	//Get command
	ret = sscanf(this->cmd_buf, "G%u %u %u %u %u %u %u %u", &u32Tmp[0], &u32Tmp[1], &u32Tmp[2], &u32Tmp[3], &u32Tmp[4], &u32Tmp[5], &u32Tmp[6], &u32Tmp[7]);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	1d18      	adds	r0, r3, #4
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	1d19      	adds	r1, r3, #4
 800112a:	f107 020c 	add.w	r2, r7, #12
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	331c      	adds	r3, #28
 8001134:	9305      	str	r3, [sp, #20]
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	3318      	adds	r3, #24
 800113c:	9304      	str	r3, [sp, #16]
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	3314      	adds	r3, #20
 8001144:	9303      	str	r3, [sp, #12]
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	3310      	adds	r3, #16
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	330c      	adds	r3, #12
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	3308      	adds	r3, #8
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	460b      	mov	r3, r1
 8001160:	49aa      	ldr	r1, [pc, #680]	; (800140c <_ZN16LED_SerialParser6DecodeEv+0x308>)
 8001162:	f006 f981 	bl	8007468 <siscanf>
 8001166:	4603      	mov	r3, r0
 8001168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(ret == 0)
 800116c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 817f 	beq.w	8001474 <_ZN16LED_SerialParser6DecodeEv+0x370>
	{
		return; //Could not fetch command!
	}
	this->cmd.CMD = (uint8_t)u32Tmp[0];
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	//Decode based on command
	switch(this->cmd.CMD)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001186:	2b10      	cmp	r3, #16
 8001188:	f200 8176 	bhi.w	8001478 <_ZN16LED_SerialParser6DecodeEv+0x374>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <_ZN16LED_SerialParser6DecodeEv+0x90>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	08001469 	.word	0x08001469
 8001198:	080011d9 	.word	0x080011d9
 800119c:	08001479 	.word	0x08001479
 80011a0:	080011f7 	.word	0x080011f7
 80011a4:	0800122b 	.word	0x0800122b
 80011a8:	08001269 	.word	0x08001269
 80011ac:	0800129d 	.word	0x0800129d
 80011b0:	080012e5 	.word	0x080012e5
 80011b4:	08001337 	.word	0x08001337
 80011b8:	0800137f 	.word	0x0800137f
 80011bc:	080013c7 	.word	0x080013c7
 80011c0:	08001411 	.word	0x08001411
 80011c4:	08001479 	.word	0x08001479
 80011c8:	08001479 	.word	0x08001479
 80011cc:	08001479 	.word	0x08001479
 80011d0:	08001479 	.word	0x08001479
 80011d4:	08001457 	.word	0x08001457
	{
		case CMD_PINGREQUEST:
			break; //Nothing to do

		case CMD_SETGROUP:
			if(ret != 3)
 80011d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011dc:	2b03      	cmp	r3, #3
 80011de:	f040 814d 	bne.w	800147c <_ZN16LED_SerialParser6DecodeEv+0x378>
			{
				return; //Error fetching command
			}
			this->cmd.SetGroup.SlaveAddress = u32Tmp[1];
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f8c3 2046 	str.w	r2, [r3, #70]	; 0x46
			this->cmd.SetGroup.GroupID = (uint8_t)u32Tmp[2];
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			break;
 80011f4:	e139      	b.n	800146a <_ZN16LED_SerialParser6DecodeEv+0x366>
			}
			this->cmd.SetTimebase.Timebase = u32Tmp[1];
			break;*/

		case CMD_SETRGB:
			if(ret != 5)
 80011f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	f040 8140 	bne.w	8001480 <_ZN16LED_SerialParser6DecodeEv+0x37c>
			{
				return; //Error fetching command
			}
			this->cmd.SetRGB.GroupID = (uint8_t)u32Tmp[1];
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.SetRGB.Red = (uint16_t)u32Tmp[2];
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	b29a      	uxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.SetRGB.Green = (uint16_t)u32Tmp[3];
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.SetRGB.Blue = (uint16_t)u32Tmp[4];
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	b29a      	uxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			break;
 8001228:	e11f      	b.n	800146a <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_SETRGBW:
			if(ret != 6)
 800122a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800122e:	2b06      	cmp	r3, #6
 8001230:	f040 8128 	bne.w	8001484 <_ZN16LED_SerialParser6DecodeEv+0x380>
			{
				return; //Error fetching command
			}
			this->cmd.SetRGBW.GroupID = (uint8_t)u32Tmp[1];
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.SetRGBW.Red = (uint16_t)u32Tmp[2];
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.SetRGBW.Green = (uint16_t)u32Tmp[3];
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.SetRGBW.Blue = (uint16_t)u32Tmp[4];
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.SetRGBW.White = (uint16_t)u32Tmp[5];
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	b29a      	uxth	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			break;
 8001266:	e100      	b.n	800146a <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_SETHSV:
			if(ret != 5)
 8001268:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800126c:	2b05      	cmp	r3, #5
 800126e:	f040 810b 	bne.w	8001488 <_ZN16LED_SerialParser6DecodeEv+0x384>
			{
				return; //Error fetching command
			}
			this->cmd.SetHSV.GroupID = (uint8_t)u32Tmp[1];
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.SetHSV.Hue = (uint16_t)u32Tmp[2];
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	b29a      	uxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.SetHSV.Saturation = (uint16_t)u32Tmp[3];
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.SetHSV.Value = (uint16_t)u32Tmp[4];
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			break;
 800129a:	e0e6      	b.n	800146a <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_STROBERGB:
			if(ret != 7)
 800129c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012a0:	2b07      	cmp	r3, #7
 80012a2:	f040 80f3 	bne.w	800148c <_ZN16LED_SerialParser6DecodeEv+0x388>
			{
				return; //Error fetching command
			}
			this->cmd.StrobeRGB.GroupID = (uint8_t)u32Tmp[1];
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.StrobeRGB.Period = (uint8_t)u32Tmp[2];
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			this->cmd.StrobeRGB.Count = (uint8_t)u32Tmp[3];
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			this->cmd.StrobeRGB.Red = (uint16_t)u32Tmp[4];
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.StrobeRGB.Green = (uint16_t)u32Tmp[5];
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.StrobeRGB.Blue = (uint16_t)u32Tmp[6];
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			break;
 80012e2:	e0c2      	b.n	800146a <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_STROBERGBW:
			if(ret != 8)
 80012e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	f040 80d1 	bne.w	8001490 <_ZN16LED_SerialParser6DecodeEv+0x38c>
			{
				return; //Error fetching command
			}
			this->cmd.StrobeRGBW.GroupID = (uint8_t)u32Tmp[1];
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.StrobeRGBW.Period = (uint8_t)u32Tmp[2];
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			this->cmd.StrobeRGBW.Count = (uint8_t)u32Tmp[3];
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			this->cmd.StrobeRGBW.Red = (uint16_t)u32Tmp[4];
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	b29a      	uxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.StrobeRGBW.Green = (uint16_t)u32Tmp[5];
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.StrobeRGBW.Blue = (uint16_t)u32Tmp[6];
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			this->cmd.StrobeRGBW.White = (uint16_t)u32Tmp[7];
 800132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132c:	b29a      	uxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f8a3 204f 	strh.w	r2, [r3, #79]	; 0x4f
			break;
 8001334:	e099      	b.n	800146a <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_STROBEHSV:
			if(ret != 7)
 8001336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800133a:	2b07      	cmp	r3, #7
 800133c:	f040 80aa 	bne.w	8001494 <_ZN16LED_SerialParser6DecodeEv+0x390>
			{
				return; //Error fetching command
			}
			this->cmd.StrobeHSV.GroupID = (uint8_t)u32Tmp[1];
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.StrobeHSV.Period = (uint8_t)u32Tmp[2];
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			this->cmd.StrobeHSV.Count = (uint8_t)u32Tmp[3];
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			this->cmd.StrobeHSV.Hue = (uint16_t)u32Tmp[4];
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.StrobeHSV.Saturation = (uint16_t)u32Tmp[5];
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.StrobeHSV.Value = (uint16_t)u32Tmp[6];
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	b29a      	uxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			break;
 800137c:	e075      	b.n	800146a <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_FADEHUE:
			if(ret != 7)
 800137e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001382:	2b07      	cmp	r3, #7
 8001384:	f040 8088 	bne.w	8001498 <_ZN16LED_SerialParser6DecodeEv+0x394>
			{
				return; //Error fetching command
			}
			this->cmd.FadeHue.GroupID = (uint8_t)u32Tmp[1];
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.FadeHue.Period = (uint16_t)u32Tmp[2];
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.FadeHue.Hue_Max = (uint16_t)u32Tmp[3];
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.FadeHue.Hue_Min = (uint16_t)u32Tmp[4];
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.FadeHue.Saturation = (uint16_t)u32Tmp[5];
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			this->cmd.FadeHue.Value = (uint16_t)u32Tmp[6];
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	b29a      	uxth	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f8a3 204f 	strh.w	r2, [r3, #79]	; 0x4f
			break;
 80013c4:	e051      	b.n	800146a <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_FADESATURATION:
			if(ret != 7)
 80013c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ca:	2b07      	cmp	r3, #7
 80013cc:	d166      	bne.n	800149c <_ZN16LED_SerialParser6DecodeEv+0x398>
			{
				return; //Error fetching command
			}
			this->cmd.FadeSaturation.GroupID = (uint8_t)u32Tmp[1];
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.FadeSaturation.Period = (uint16_t)u32Tmp[2];
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.FadeSaturation.Hue = (uint16_t)u32Tmp[3];
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.FadeSaturation.Saturation_Max = (uint16_t)u32Tmp[4];
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.FadeSaturation.Saturation_Min = (uint16_t)u32Tmp[5];
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			this->cmd.FadeSaturation.Value = (uint16_t)u32Tmp[6];
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	b29a      	uxth	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8a3 204f 	strh.w	r2, [r3, #79]	; 0x4f
			break;
 800140a:	e02e      	b.n	800146a <_ZN16LED_SerialParser6DecodeEv+0x366>
 800140c:	08009424 	.word	0x08009424

		case CMD_FADEVALUE:
			if(ret != 7)
 8001410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001414:	2b07      	cmp	r3, #7
 8001416:	d143      	bne.n	80014a0 <_ZN16LED_SerialParser6DecodeEv+0x39c>
			{
				return; //Error fetching command
			}
			this->cmd.FadeValue.GroupID = (uint8_t)u32Tmp[1];
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.FadeValue.Period = (uint16_t)u32Tmp[2];
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.FadeValue.Hue = (uint16_t)u32Tmp[3];
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.FadeValue.Saturation = (uint16_t)u32Tmp[4];
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	b29a      	uxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.FadeValue.Value_Max = (uint16_t)u32Tmp[5];
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	b29a      	uxth	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			this->cmd.FadeValue.Value_Min = (uint16_t)u32Tmp[6];
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	b29a      	uxth	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8a3 204f 	strh.w	r2, [r3, #79]	; 0x4f
			break;
 8001454:	e009      	b.n	800146a <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_GETTEMPERATURE:
			if(ret != 2)
 8001456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800145a:	2b02      	cmp	r3, #2
 800145c:	d122      	bne.n	80014a4 <_ZN16LED_SerialParser6DecodeEv+0x3a0>
			{
				return; //Error fetching command
			}
			this->cmd.GetTemperature.SlaveAddress = u32Tmp[1];
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8c3 2046 	str.w	r2, [r3, #70]	; 0x46
			break; //Nothing to do
 8001466:	e000      	b.n	800146a <_ZN16LED_SerialParser6DecodeEv+0x366>
			break; //Nothing to do
 8001468:	bf00      	nop
		default:
			return; //No valid command received!
	}

	//A valid command was received and decoded successfully!
	this->cmd_available = true;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001472:	e018      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
		return; //Could not fetch command!
 8001474:	bf00      	nop
 8001476:	e016      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
			return; //No valid command received!
 8001478:	bf00      	nop
 800147a:	e014      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 800147c:	bf00      	nop
 800147e:	e012      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 8001480:	bf00      	nop
 8001482:	e010      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 8001484:	bf00      	nop
 8001486:	e00e      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 8001488:	bf00      	nop
 800148a:	e00c      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 800148c:	bf00      	nop
 800148e:	e00a      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 8001490:	bf00      	nop
 8001492:	e008      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 8001494:	bf00      	nop
 8001496:	e006      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 8001498:	bf00      	nop
 800149a:	e004      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 800149c:	bf00      	nop
 800149e:	e002      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80014a0:	bf00      	nop
 80014a2:	e000      	b.n	80014a6 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80014a4:	bf00      	nop
}
 80014a6:	3730      	adds	r7, #48	; 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_ZN16LED_SerialParser9AvailableEv>:


bool LED_SerialParser::Available(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	return this->cmd_available;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_ZN16LED_SerialParser7ReadCMDEP19NRF24L01_DataPacket>:


void LED_SerialParser::ReadCMD(NRF24L01_DataPacket *_cmd)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
	*_cmd = this->cmd; //Copy data
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3345      	adds	r3, #69	; 0x45
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	6859      	ldr	r1, [r3, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	6010      	str	r0, [r2, #0]
 80014de:	6051      	str	r1, [r2, #4]
 80014e0:	6093      	str	r3, [r2, #8]
	this->cmd_available = false;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_ZN13USART_HandlerC1ER20__UART_HandleTypeDef>:
#include "USART_Handler.h"




USART_Handler::USART_Handler(UART_HandleTypeDef &_huart)
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
{
	this->huart = &_huart;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	//Register UART RX buffers
	HAL_UART_Receive_DMA(this->huart, this->rx_buffer, UART_RX_BUFFER_SIZE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fb3d 	bl	8005b94 <HAL_UART_Receive_DMA>
	rx_ptr = UART_RX_BUFFER_SIZE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001520:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
}
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_ZN13USART_Handler9AvailableEv>:



uint16_t USART_Handler::Available(void)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
	return ((this->rx_ptr - (uint16_t)this->huart->hdmarx->Instance->CNDTR) % UART_RX_BUFFER_SIZE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800153c:	461a      	mov	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	425a      	negs	r2, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	bf58      	it	pl
 8001556:	4253      	negpl	r3, r2
 8001558:	b29b      	uxth	r3, r3
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_ZN13USART_Handler4ReadEv>:
}



uint8_t USART_Handler::Read(void)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	uint8_t ret;

	ret = this->rx_buffer[UART_RX_BUFFER_SIZE - rx_ptr];
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8001574:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	73fb      	strb	r3, [r7, #15]

	rx_ptr--;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8001584:	3b01      	subs	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	if(rx_ptr == 0)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8001594:	2b00      	cmp	r3, #0
 8001596:	d104      	bne.n	80015a2 <_ZN13USART_Handler4ReadEv+0x3c>
	{
		rx_ptr = UART_RX_BUFFER_SIZE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	}

	return ret;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZN13USART_Handler5PrintEPc>:
}



void USART_Handler::Print(char *c)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	uint16_t i;

	while(this->Busy());
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f82b 	bl	8001616 <_ZN13USART_Handler4BusyEv>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d000      	beq.n	80015c8 <_ZN13USART_Handler5PrintEPc+0x18>
 80015c6:	e7f8      	b.n	80015ba <_ZN13USART_Handler5PrintEPc+0xa>

	for(i = 0; ((i < UART_TX_BUFFER_SIZE) && (c[i] != 0x00)); i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	81fb      	strh	r3, [r7, #14]
 80015cc:	89fb      	ldrh	r3, [r7, #14]
 80015ce:	2bff      	cmp	r3, #255	; 0xff
 80015d0:	d813      	bhi.n	80015fa <_ZN13USART_Handler5PrintEPc+0x4a>
 80015d2:	89fb      	ldrh	r3, [r7, #14]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00d      	beq.n	80015fa <_ZN13USART_Handler5PrintEPc+0x4a>
	{
		this->tx_buffer[i] = c[i];
 80015de:	89fb      	ldrh	r3, [r7, #14]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	441a      	add	r2, r3
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	7811      	ldrb	r1, [r2, #0]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4413      	add	r3, r2
 80015ec:	460a      	mov	r2, r1
 80015ee:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	for(i = 0; ((i < UART_TX_BUFFER_SIZE) && (c[i] != 0x00)); i++)
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	3301      	adds	r3, #1
 80015f6:	81fb      	strh	r3, [r7, #14]
 80015f8:	e7e8      	b.n	80015cc <_ZN13USART_Handler5PrintEPc+0x1c>
	}

	HAL_UART_Transmit_DMA(this->huart, this->tx_buffer, i);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001606:	89fa      	ldrh	r2, [r7, #14]
 8001608:	4619      	mov	r1, r3
 800160a:	f004 fa47 	bl	8005a9c <HAL_UART_Transmit_DMA>
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_ZN13USART_Handler4BusyEv>:
	HAL_UART_Transmit_DMA(this->huart, this->tx_buffer, (i+1));
}


bool USART_Handler::Busy(void)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	if(/*(this->huart->hdmatx->State == HAL_DMA_STATE_BUSY) || */(huart->gState != HAL_UART_STATE_READY))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001626:	2b20      	cmp	r3, #32
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <_ZN13USART_Handler4BusyEv+0x22>
	{
		return true;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <_ZN13USART_Handler4BusyEv+0x24>
	}
	return false;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164a:	f001 f98d 	bl	8002968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800164e:	f000 f813 	bl	8001678 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001652:	f000 fa09 	bl	8001a68 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001656:	f000 f967 	bl	8001928 <_ZL19MX_USART2_UART_Initv>
  MX_DMA_Init();
 800165a:	f000 f9cf 	bl	80019fc <_ZL11MX_DMA_Initv>
  MX_ADC2_Init();
 800165e:	f000 f87d 	bl	800175c <_ZL12MX_ADC2_Initv>
  MX_OPAMP2_Init();
 8001662:	f000 f8e3 	bl	800182c <_ZL14MX_OPAMP2_Initv>
  MX_SPI2_Init();
 8001666:	f000 f90d 	bl	8001884 <_ZL12MX_SPI2_Initv>
  MX_USART3_UART_Init();
 800166a:	f000 f991 	bl	8001990 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  LED_Base_Setup();
 800166e:	f7ff faa3 	bl	8000bb8 <_Z14LED_Base_Setupv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 	LED_Base_Handle();
 8001672:	f7ff faef 	bl	8000c54 <_Z15LED_Base_Handlev>
 8001676:	e7fc      	b.n	8001672 <main+0x2c>

08001678 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0a6      	sub	sp, #152	; 0x98
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001682:	2228      	movs	r2, #40	; 0x28
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f005 f96e 	bl	8006968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2258      	movs	r2, #88	; 0x58
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 f960 	bl	8006968 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a8:	2302      	movs	r3, #2
 80016aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ac:	2301      	movs	r3, #1
 80016ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b0:	2310      	movs	r3, #16
 80016b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fc76 	bl	8003fc8 <HAL_RCC_OscConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf14      	ite	ne
 80016e2:	2301      	movne	r3, #1
 80016e4:	2300      	moveq	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 80016ec:	f000 fa64 	bl	8001bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f0:	230f      	movs	r3, #15
 80016f2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2302      	movs	r3, #2
 80016f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001700:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001706:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800170a:	2102      	movs	r1, #2
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fb71 	bl	8004df4 <HAL_RCC_ClockConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf14      	ite	ne
 8001718:	2301      	movne	r3, #1
 800171a:	2300      	moveq	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8001722:	f000 fa49 	bl	8001bb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001726:	2386      	movs	r3, #134	; 0x86
 8001728:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fd90 	bl	8005260 <HAL_RCCEx_PeriphCLKConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	bf14      	ite	ne
 8001746:	2301      	movne	r3, #1
 8001748:	2300      	moveq	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <_Z18SystemClock_Configv+0xdc>
  {
    Error_Handler();
 8001750:	f000 fa32 	bl	8001bb8 <Error_Handler>
  }
}
 8001754:	bf00      	nop
 8001756:	3798      	adds	r7, #152	; 0x98
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8001772:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 8001774:	4a2c      	ldr	r2, [pc, #176]	; (8001828 <_ZL12MX_ADC2_Initv+0xcc>)
 8001776:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800177e:	4b29      	ldr	r3, [pc, #164]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 800178c:	2200      	movs	r2, #0
 800178e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 800179a:	2200      	movs	r2, #0
 800179c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 80017ba:	2204      	movs	r2, #4
 80017bc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017ca:	4816      	ldr	r0, [pc, #88]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 80017cc:	f001 f954 	bl	8002a78 <HAL_ADC_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 80017e0:	f000 f9ea 	bl	8001bb8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017e4:	2303      	movs	r3, #3
 80017e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	4808      	ldr	r0, [pc, #32]	; (8001824 <_ZL12MX_ADC2_Initv+0xc8>)
 8001802:	f001 fb33 	bl	8002e6c <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <_ZL12MX_ADC2_Initv+0xbe>
  {
    Error_Handler();
 8001816:	f000 f9cf 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000214 	.word	0x20000214
 8001828:	50000100 	.word	0x50000100

0800182c <_ZL14MX_OPAMP2_Initv>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <_ZL14MX_OPAMP2_Initv+0x50>)
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <_ZL14MX_OPAMP2_Initv+0x54>)
 8001834:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <_ZL14MX_OPAMP2_Initv+0x50>)
 8001838:	2240      	movs	r2, #64	; 0x40
 800183a:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <_ZL14MX_OPAMP2_Initv+0x50>)
 800183e:	220c      	movs	r2, #12
 8001840:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <_ZL14MX_OPAMP2_Initv+0x50>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <_ZL14MX_OPAMP2_Initv+0x50>)
 800184a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800184e:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2;
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <_ZL14MX_OPAMP2_Initv+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <_ZL14MX_OPAMP2_Initv+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800185c:	4807      	ldr	r0, [pc, #28]	; (800187c <_ZL14MX_OPAMP2_Initv+0x50>)
 800185e:	f002 fb0d 	bl	8003e7c <HAL_OPAMP_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf14      	ite	ne
 8001868:	2301      	movne	r3, #1
 800186a:	2300      	moveq	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <_ZL14MX_OPAMP2_Initv+0x4a>
  {
    Error_Handler();
 8001872:	f000 f9a1 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000264 	.word	0x20000264
 8001880:	4001003c 	.word	0x4001003c

08001884 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 800188a:	4a26      	ldr	r2, [pc, #152]	; (8001924 <_ZL12MX_SPI2_Initv+0xa0>)
 800188c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 8001890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001894:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 800189e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018ba:	2218      	movs	r2, #24
 80018bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018d2:	2207      	movs	r2, #7
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018e2:	480f      	ldr	r0, [pc, #60]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018e4:	f003 feda 	bl	800569c <HAL_SPI_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 80018f8:	f000 f95e 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* full duplex master, 8 bit transfer, default phase and polarity */
  hspi2.Instance->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 7251 	orr.w	r2, r2, #836	; 0x344
 800190a:	601a      	str	r2, [r3, #0]
  /* Disable receive FIFO, it'd complicate things when there is an odd number of bytes to transfer */
  hspi2.Instance->CR2 |= SPI_CR2_FRXTH;
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4b03      	ldr	r3, [pc, #12]	; (8001920 <_ZL12MX_SPI2_Initv+0x9c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800191a:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI2_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000298 	.word	0x20000298
 8001924:	40003800 	.word	0x40003800

08001928 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <_ZL19MX_USART2_UART_Initv+0x60>)
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <_ZL19MX_USART2_UART_Initv+0x64>)
 8001930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001934:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <_ZL19MX_USART2_UART_Initv+0x60>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <_ZL19MX_USART2_UART_Initv+0x60>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <_ZL19MX_USART2_UART_Initv+0x60>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <_ZL19MX_USART2_UART_Initv+0x60>)
 800196c:	f004 f847 	bl	80059fe <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	bf14      	ite	ne
 8001976:	2301      	movne	r3, #1
 8001978:	2300      	moveq	r3, #0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8001980:	f000 f91a 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200002fc 	.word	0x200002fc
 800198c:	40004400 	.word	0x40004400

08001990 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <_ZL19MX_USART3_UART_Initv+0x64>)
 8001998:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800199c:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <_ZL19MX_USART3_UART_Initv+0x68>)
 800199e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019ac:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80019b4:	220c      	movs	r2, #12
 80019b6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019d0:	4807      	ldr	r0, [pc, #28]	; (80019f0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80019d2:	f004 f814 	bl	80059fe <HAL_UART_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf14      	ite	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	2300      	moveq	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <_ZL19MX_USART3_UART_Initv+0x5a>
  {
    Error_Handler();
 80019e6:	f000 f8e7 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000037c 	.word	0x2000037c
 80019f4:	40004800 	.word	0x40004800
 80019f8:	0007a120 	.word	0x0007a120

080019fc <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <_ZL11MX_DMA_Initv+0x68>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <_ZL11MX_DMA_Initv+0x68>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6153      	str	r3, [r2, #20]
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <_ZL11MX_DMA_Initv+0x68>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	200c      	movs	r0, #12
 8001a20:	f001 fe4b 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a24:	200c      	movs	r0, #12
 8001a26:	f001 fe64 	bl	80036f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	200d      	movs	r0, #13
 8001a30:	f001 fe43 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a34:	200d      	movs	r0, #13
 8001a36:	f001 fe5c 	bl	80036f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2010      	movs	r0, #16
 8001a40:	f001 fe3b 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001a44:	2010      	movs	r0, #16
 8001a46:	f001 fe54 	bl	80036f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2011      	movs	r0, #17
 8001a50:	f001 fe33 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001a54:	2011      	movs	r0, #17
 8001a56:	f001 fe4c 	bl	80036f2 <HAL_NVIC_EnableIRQ>

}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000

08001a68 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4a49      	ldr	r2, [pc, #292]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a88:	6153      	str	r3, [r2, #20]
 8001a8a:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a96:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a43      	ldr	r2, [pc, #268]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001a9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b3e      	ldr	r3, [pc, #248]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4a3d      	ldr	r2, [pc, #244]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	6153      	str	r3, [r2, #20]
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4a37      	ldr	r2, [pc, #220]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad0:	6153      	str	r3, [r2, #20]
 8001ad2:	4b35      	ldr	r3, [pc, #212]	; (8001ba8 <_ZL12MX_GPIO_Initv+0x140>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_SET);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4832      	ldr	r0, [pc, #200]	; (8001bac <_ZL12MX_GPIO_Initv+0x144>)
 8001ae4:	f002 f99a 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2120      	movs	r1, #32
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f002 f994 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	2102      	movs	r1, #2
 8001af8:	482d      	ldr	r0, [pc, #180]	; (8001bb0 <_ZL12MX_GPIO_Initv+0x148>)
 8001afa:	f002 f98f 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2104      	movs	r1, #4
 8001b02:	482b      	ldr	r0, [pc, #172]	; (8001bb0 <_ZL12MX_GPIO_Initv+0x148>)
 8001b04:	f002 f98a 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_MODE_Pin BTN_PING_Pin BT_STA_Pin */
  GPIO_InitStruct.Pin = SW_MODE_Pin|BTN_PING_Pin|BT_STA_Pin;
 8001b08:	f24a 0302 	movw	r3, #40962	; 0xa002
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4823      	ldr	r0, [pc, #140]	; (8001bac <_ZL12MX_GPIO_Initv+0x144>)
 8001b1e:	f001 fff3 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_EN_Pin */
  GPIO_InitStruct.Pin = BT_EN_Pin;
 8001b22:	2301      	movs	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BT_EN_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	481c      	ldr	r0, [pc, #112]	; (8001bac <_ZL12MX_GPIO_Initv+0x144>)
 8001b3a:	f001 ffe5 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b58:	f001 ffd6 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8001b5c:	2310      	movs	r3, #16
 8001b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <_ZL12MX_GPIO_Initv+0x14c>)
 8001b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480f      	ldr	r0, [pc, #60]	; (8001bac <_ZL12MX_GPIO_Initv+0x144>)
 8001b70:	f001 ffca 	bl	8003b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CS_Pin|NRF_CE_Pin;
 8001b74:	2306      	movs	r3, #6
 8001b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b80:	2301      	movs	r3, #1
 8001b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <_ZL12MX_GPIO_Initv+0x148>)
 8001b8c:	f001 ffbc 	bl	8003b08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 5);
 8001b90:	2205      	movs	r2, #5
 8001b92:	2100      	movs	r1, #0
 8001b94:	200a      	movs	r0, #10
 8001b96:	f001 fd90 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f001 fda9 	bl	80036f2 <HAL_NVIC_EnableIRQ>

}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	; 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	10210000 	.word	0x10210000

08001bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <NRF24L01_InitPins>:
uint8_t NRF24L01_RxFifoEmpty(void);

/* NRF structure */
static NRF24L01_t NRF24L01_Struct;

void NRF24L01_InitPins(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	/* CSN high = disable SPI */
	NRF24L01_CSN_HIGH;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2102      	movs	r1, #2
 8001bd0:	4804      	ldr	r0, [pc, #16]	; (8001be4 <NRF24L01_InitPins+0x1c>)
 8001bd2:	f002 f923 	bl	8003e1c <HAL_GPIO_WritePin>
	
	/* CE low = disable TX/RX */
	NRF24L01_CE_LOW;
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2104      	movs	r1, #4
 8001bda:	4802      	ldr	r0, [pc, #8]	; (8001be4 <NRF24L01_InitPins+0x1c>)
 8001bdc:	f002 f91e 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	48000400 	.word	0x48000400

08001be8 <NRF24L01_Init>:

uint8_t NRF24L01_Init(uint8_t channel, uint8_t payload_size) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	71fb      	strb	r3, [r7, #7]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71bb      	strb	r3, [r7, #6]
	/* Initialize CE and CSN pins */
	NRF24L01_InitPins();
 8001bf8:	f7ff ffe6 	bl	8001bc8 <NRF24L01_InitPins>
	
	/* Max payload is 32bytes */
	if (payload_size > 32) {
 8001bfc:	79bb      	ldrb	r3, [r7, #6]
 8001bfe:	2b20      	cmp	r3, #32
 8001c00:	d901      	bls.n	8001c06 <NRF24L01_Init+0x1e>
		payload_size = 32;
 8001c02:	2320      	movs	r3, #32
 8001c04:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Fill structure */
	NRF24L01_Struct.Channel = !channel; /* Set channel to some different value for NRF24L01_SetChannel() function */
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c16:	705a      	strb	r2, [r3, #1]
	NRF24L01_Struct.PayloadSize = payload_size;
 8001c18:	4a3d      	ldr	r2, [pc, #244]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c1a:	79bb      	ldrb	r3, [r7, #6]
 8001c1c:	7013      	strb	r3, [r2, #0]
	NRF24L01_Struct.OutPwr = NRF24L01_OutputPower_0dBm;
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c20:	2203      	movs	r2, #3
 8001c22:	709a      	strb	r2, [r3, #2]
	NRF24L01_Struct.DataRate = NRF24L01_DataRate_1M;
 8001c24:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	70da      	strb	r2, [r3, #3]
	
	/* Reset nRF24L01+ to power on registers values */
	NRF24L01_SoftwareReset();
 8001c2a:	f000 f985 	bl	8001f38 <NRF24L01_SoftwareReset>
	
	NRF24L01_GetStatus();
 8001c2e:	f000 f969 	bl	8001f04 <NRF24L01_GetStatus>

	/* Channel select */
	NRF24L01_SetChannel(channel);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fa33 	bl	80020a0 <NRF24L01_SetChannel>
	
	/* Set pipeline to max possible 32 bytes */
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P0, NRF24L01_Struct.PayloadSize); // Auto-ACK pipe
 8001c3a:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	2011      	movs	r0, #17
 8001c42:	f000 f869 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P1, NRF24L01_Struct.PayloadSize); // Data payload pipe
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	2012      	movs	r0, #18
 8001c4e:	f000 f863 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P2, NRF24L01_Struct.PayloadSize);
 8001c52:	4b2f      	ldr	r3, [pc, #188]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4619      	mov	r1, r3
 8001c58:	2013      	movs	r0, #19
 8001c5a:	f000 f85d 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P3, NRF24L01_Struct.PayloadSize);
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	4619      	mov	r1, r3
 8001c64:	2014      	movs	r0, #20
 8001c66:	f000 f857 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P4, NRF24L01_Struct.PayloadSize);
 8001c6a:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	2015      	movs	r0, #21
 8001c72:	f000 f851 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P5, NRF24L01_Struct.PayloadSize);
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2016      	movs	r0, #22
 8001c7e:	f000 f84b 	bl	8001d18 <NRF24L01_WriteRegister>
	
	/* Set RF settings (1mbps, output power) */
	NRF24L01_SetRF(NRF24L01_Struct.DataRate, NRF24L01_Struct.OutPwr);
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c84:	78da      	ldrb	r2, [r3, #3]
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <NRF24L01_Init+0x128>)
 8001c88:	789b      	ldrb	r3, [r3, #2]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	f000 fa23 	bl	80020d8 <NRF24L01_SetRF>
	
	/* Config register */
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG);
 8001c92:	210c      	movs	r1, #12
 8001c94:	2000      	movs	r0, #0
 8001c96:	f000 f83f 	bl	8001d18 <NRF24L01_WriteRegister>
	
	/* Enable auto-acknowledgment for all pipes */
	//NRF24L01_WriteRegister(NRF24L01_REG_EN_AA, 0x3F);

	/* Disable auto-acknowledgment for all pipes */
	NRF24L01_WriteRegister(NRF24L01_REG_EN_AA, 0x00);
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f000 f83b 	bl	8001d18 <NRF24L01_WriteRegister>
	
	/* Enable RX addresses */
	//NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, 0x3F);

	/* Disable RX addresses beside pipeline 0 */
	NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, (1 << NRF24L01_ERX_P0));
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f000 f837 	bl	8001d18 <NRF24L01_WriteRegister>

	/* Auto retransmit delay: 1000 (4x250) us and Up to 15 retransmit trials */
	//NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, 0x4F);
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, 0x00);
 8001caa:	2100      	movs	r1, #0
 8001cac:	2004      	movs	r0, #4
 8001cae:	f000 f833 	bl	8001d18 <NRF24L01_WriteRegister>
	
	/* Dynamic length configurations: No dynamic length */
	NRF24L01_WriteRegister(NRF24L01_REG_DYNPD, (0 << NRF24L01_DPL_P0) | (0 << NRF24L01_DPL_P1) | (0 << NRF24L01_DPL_P2) | (0 << NRF24L01_DPL_P3) | (0 << NRF24L01_DPL_P4) | (0 << NRF24L01_DPL_P5));
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	201c      	movs	r0, #28
 8001cb6:	f000 f82f 	bl	8001d18 <NRF24L01_WriteRegister>
	
	// Set address length to 4 bytes
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_AW, (0x02 << NRF24L01_AW));
 8001cba:	2102      	movs	r1, #2
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 f82b 	bl	8001d18 <NRF24L01_WriteRegister>

	//Enable dynamic ACK
	NRF24L01_WriteRegister(NRF24L01_REG_FEATURE, 0x01);
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	201d      	movs	r0, #29
 8001cc6:	f000 f827 	bl	8001d18 <NRF24L01_WriteRegister>

	/* Clear FIFOs */
	NRF24L01_FLUSH_TX;
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2102      	movs	r1, #2
 8001cce:	4811      	ldr	r0, [pc, #68]	; (8001d14 <NRF24L01_Init+0x12c>)
 8001cd0:	f002 f8a4 	bl	8003e1c <HAL_GPIO_WritePin>
 8001cd4:	20e1      	movs	r0, #225	; 0xe1
 8001cd6:	f000 fa4b 	bl	8002170 <NRF24L01_SPI_Send>
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2102      	movs	r1, #2
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <NRF24L01_Init+0x12c>)
 8001ce0:	f002 f89c 	bl	8003e1c <HAL_GPIO_WritePin>
	NRF24L01_FLUSH_RX;
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	480a      	ldr	r0, [pc, #40]	; (8001d14 <NRF24L01_Init+0x12c>)
 8001cea:	f002 f897 	bl	8003e1c <HAL_GPIO_WritePin>
 8001cee:	20e2      	movs	r0, #226	; 0xe2
 8001cf0:	f000 fa3e 	bl	8002170 <NRF24L01_SPI_Send>
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	4806      	ldr	r0, [pc, #24]	; (8001d14 <NRF24L01_Init+0x12c>)
 8001cfa:	f002 f88f 	bl	8003e1c <HAL_GPIO_WritePin>
	
	/* Clear interrupts */
	NRF24L01_Clear_Interrupts();
 8001cfe:	f000 fa2d 	bl	800215c <NRF24L01_Clear_Interrupts>
	
	/* Go to RX mode */
	NRF24L01_PowerUpRx();
 8001d02:	f000 f881 	bl	8001e08 <NRF24L01_PowerUpRx>
	
	/* Return OK */
	return 1;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000050c 	.word	0x2000050c
 8001d14:	48000400 	.word	0x48000400

08001d18 <NRF24L01_WriteRegister>:
	NRF24L01_SPI_ReadMulti(data, NRF24L01_NOP_MASK, count);
	NRF24L01_CSN_HIGH;
}

uint8_t NRF24L01_WriteRegister(uint8_t reg, uint8_t value)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71bb      	strb	r3, [r7, #6]
	uint8_t Data[2];
	Data[0] = NRF24L01_WRITE_REGISTER_MASK(reg);
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f043 0320 	orr.w	r3, r3, #32
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	733b      	strb	r3, [r7, #12]
	Data[1] = value;
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	737b      	strb	r3, [r7, #13]
	NRF24L01_CSN_LOW;
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2102      	movs	r1, #2
 8001d40:	480a      	ldr	r0, [pc, #40]	; (8001d6c <NRF24L01_WriteRegister+0x54>)
 8001d42:	f002 f86b 	bl	8003e1c <HAL_GPIO_WritePin>
	NRF24L01_SPI_SendMulti(Data, Data, 2);
 8001d46:	f107 010c 	add.w	r1, r7, #12
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	2202      	movs	r2, #2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fa67 	bl	8002224 <NRF24L01_SPI_SendMulti>
	NRF24L01_CSN_HIGH;
 8001d56:	2201      	movs	r2, #1
 8001d58:	2102      	movs	r1, #2
 8001d5a:	4804      	ldr	r0, [pc, #16]	; (8001d6c <NRF24L01_WriteRegister+0x54>)
 8001d5c:	f002 f85e 	bl	8003e1c <HAL_GPIO_WritePin>
	return Data[0];
 8001d60:	7b3b      	ldrb	r3, [r7, #12]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	48000400 	.word	0x48000400

08001d70 <NRF24L01_WriteRegisterMulti>:

void NRF24L01_WriteRegisterMulti(uint8_t reg, uint8_t *data, uint8_t count) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71bb      	strb	r3, [r7, #6]
	NRF24L01_CSN_LOW;
 8001d80:	2200      	movs	r2, #0
 8001d82:	2102      	movs	r1, #2
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <NRF24L01_WriteRegisterMulti+0x4c>)
 8001d86:	f002 f849 	bl	8003e1c <HAL_GPIO_WritePin>
	NRF24L01_SPI_Send(NRF24L01_WRITE_REGISTER_MASK(reg));
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f043 0320 	orr.w	r3, r3, #32
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 f9e9 	bl	8002170 <NRF24L01_SPI_Send>
	NRF24L01_SPI_WriteMulti(data, count);
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	4619      	mov	r1, r3
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	f000 fa0c 	bl	80021c0 <NRF24L01_SPI_WriteMulti>
	NRF24L01_CSN_HIGH;
 8001da8:	2201      	movs	r2, #1
 8001daa:	2102      	movs	r1, #2
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <NRF24L01_WriteRegisterMulti+0x4c>)
 8001dae:	f002 f835 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	48000400 	.word	0x48000400

08001dc0 <NRF24L01_PowerUpTx>:

void NRF24L01_PowerUpTx(void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	/* Disable RX/TX mode */
	NRF24L01_CE_LOW;
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	480e      	ldr	r0, [pc, #56]	; (8001e04 <NRF24L01_PowerUpTx+0x44>)
 8001dca:	f002 f827 	bl	8003e1c <HAL_GPIO_WritePin>
	/* Clear RX buffer */
	NRF24L01_FLUSH_TX;
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	480c      	ldr	r0, [pc, #48]	; (8001e04 <NRF24L01_PowerUpTx+0x44>)
 8001dd4:	f002 f822 	bl	8003e1c <HAL_GPIO_WritePin>
 8001dd8:	20e1      	movs	r0, #225	; 0xe1
 8001dda:	f000 f9c9 	bl	8002170 <NRF24L01_SPI_Send>
 8001dde:	2201      	movs	r2, #1
 8001de0:	2102      	movs	r1, #2
 8001de2:	4808      	ldr	r0, [pc, #32]	; (8001e04 <NRF24L01_PowerUpTx+0x44>)
 8001de4:	f002 f81a 	bl	8003e1c <HAL_GPIO_WritePin>
	/* Clear interrupts */
	NRF24L01_Clear_Interrupts();
 8001de8:	f000 f9b8 	bl	800215c <NRF24L01_Clear_Interrupts>
	/* Setup RX mode */
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG | (0 << NRF24L01_PRIM_RX) | (1 << NRF24L01_PWR_UP));
 8001dec:	210e      	movs	r1, #14
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff ff92 	bl	8001d18 <NRF24L01_WriteRegister>
	/* Start listening */
	NRF24L01_CE_HIGH;
 8001df4:	2201      	movs	r2, #1
 8001df6:	2104      	movs	r1, #4
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <NRF24L01_PowerUpTx+0x44>)
 8001dfa:	f002 f80f 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	48000400 	.word	0x48000400

08001e08 <NRF24L01_PowerUpRx>:

void NRF24L01_PowerUpRx(void) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	/* Disable RX/TX mode */
	NRF24L01_CE_LOW;
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2104      	movs	r1, #4
 8001e10:	480e      	ldr	r0, [pc, #56]	; (8001e4c <NRF24L01_PowerUpRx+0x44>)
 8001e12:	f002 f803 	bl	8003e1c <HAL_GPIO_WritePin>
	/* Clear RX buffer */
	NRF24L01_FLUSH_RX;
 8001e16:	2200      	movs	r2, #0
 8001e18:	2102      	movs	r1, #2
 8001e1a:	480c      	ldr	r0, [pc, #48]	; (8001e4c <NRF24L01_PowerUpRx+0x44>)
 8001e1c:	f001 fffe 	bl	8003e1c <HAL_GPIO_WritePin>
 8001e20:	20e2      	movs	r0, #226	; 0xe2
 8001e22:	f000 f9a5 	bl	8002170 <NRF24L01_SPI_Send>
 8001e26:	2201      	movs	r2, #1
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4808      	ldr	r0, [pc, #32]	; (8001e4c <NRF24L01_PowerUpRx+0x44>)
 8001e2c:	f001 fff6 	bl	8003e1c <HAL_GPIO_WritePin>
	/* Clear interrupts */
	NRF24L01_Clear_Interrupts();
 8001e30:	f000 f994 	bl	800215c <NRF24L01_Clear_Interrupts>
	/* Setup RX mode */
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG | 1 << NRF24L01_PWR_UP | 1 << NRF24L01_PRIM_RX);
 8001e34:	210f      	movs	r1, #15
 8001e36:	2000      	movs	r0, #0
 8001e38:	f7ff ff6e 	bl	8001d18 <NRF24L01_WriteRegister>
	/* Start listening */
	NRF24L01_CE_HIGH;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2104      	movs	r1, #4
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <NRF24L01_PowerUpRx+0x44>)
 8001e42:	f001 ffeb 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	48000400 	.word	0x48000400

08001e50 <NRF24L01_Transmit>:
void NRF24L01_PowerDown(void) {
	NRF24L01_CE_LOW;
	NRF24L01_WriteBit(NRF24L01_REG_CONFIG, NRF24L01_PWR_UP, 0);
}

void NRF24L01_Transmit(uint8_t *data) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	uint8_t count = NRF24L01_Struct.PayloadSize;
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <NRF24L01_Transmit+0x64>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	73fb      	strb	r3, [r7, #15]

	/* Chip enable put to low, disable it */
	//NRF24L01_CE_LOW;
	
	/* Go to power up tx mode */
	NRF24L01_PowerUpTx();
 8001e5e:	f7ff ffaf 	bl	8001dc0 <NRF24L01_PowerUpTx>
	
	/* Clear TX FIFO from NRF24L01+ */
	NRF24L01_FLUSH_TX;
 8001e62:	2200      	movs	r2, #0
 8001e64:	2102      	movs	r1, #2
 8001e66:	4814      	ldr	r0, [pc, #80]	; (8001eb8 <NRF24L01_Transmit+0x68>)
 8001e68:	f001 ffd8 	bl	8003e1c <HAL_GPIO_WritePin>
 8001e6c:	20e1      	movs	r0, #225	; 0xe1
 8001e6e:	f000 f97f 	bl	8002170 <NRF24L01_SPI_Send>
 8001e72:	2201      	movs	r2, #1
 8001e74:	2102      	movs	r1, #2
 8001e76:	4810      	ldr	r0, [pc, #64]	; (8001eb8 <NRF24L01_Transmit+0x68>)
 8001e78:	f001 ffd0 	bl	8003e1c <HAL_GPIO_WritePin>
	
	/* Send payload to nRF24L01+ */
	NRF24L01_CSN_LOW;
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2102      	movs	r1, #2
 8001e80:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <NRF24L01_Transmit+0x68>)
 8001e82:	f001 ffcb 	bl	8003e1c <HAL_GPIO_WritePin>
	/* Send write payload command */
	//NRF24L01_SPI_Send(NRF24L01_W_TX_PAYLOAD_MASK);
	NRF24L01_SPI_Send(NRF24L01_W_TX_PAYLOAD_NOACK_MASK);
 8001e86:	20b0      	movs	r0, #176	; 0xb0
 8001e88:	f000 f972 	bl	8002170 <NRF24L01_SPI_Send>
	/* Fill payload with data*/
	NRF24L01_SPI_WriteMulti(data, count);
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f995 	bl	80021c0 <NRF24L01_SPI_WriteMulti>
	/* Disable SPI */
	NRF24L01_CSN_HIGH;
 8001e96:	2201      	movs	r2, #1
 8001e98:	2102      	movs	r1, #2
 8001e9a:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <NRF24L01_Transmit+0x68>)
 8001e9c:	f001 ffbe 	bl	8003e1c <HAL_GPIO_WritePin>
	
	/* Send data! */
	NRF24L01_CE_HIGH;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <NRF24L01_Transmit+0x68>)
 8001ea6:	f001 ffb9 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2000050c 	.word	0x2000050c
 8001eb8:	48000400 	.word	0x48000400

08001ebc <NRF24L01_GetData>:

void NRF24L01_GetData(uint8_t* data) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	/* Pull down chip select */
	NRF24L01_CSN_LOW;
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <NRF24L01_GetData+0x40>)
 8001eca:	f001 ffa7 	bl	8003e1c <HAL_GPIO_WritePin>
	/* Send read payload command*/
	NRF24L01_SPI_Send(NRF24L01_R_RX_PAYLOAD_MASK);
 8001ece:	2061      	movs	r0, #97	; 0x61
 8001ed0:	f000 f94e 	bl	8002170 <NRF24L01_SPI_Send>
	/* Read payload */
	NRF24L01_SPI_SendMulti(data, data, NRF24L01_Struct.PayloadSize);
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <NRF24L01_GetData+0x44>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f9a1 	bl	8002224 <NRF24L01_SPI_SendMulti>
	/* Pull up chip select */
	NRF24L01_CSN_HIGH;
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <NRF24L01_GetData+0x40>)
 8001ee8:	f001 ff98 	bl	8003e1c <HAL_GPIO_WritePin>
	
	/* Reset status register, clear RX_DR interrupt flag */
	NRF24L01_WriteRegister(NRF24L01_REG_STATUS, (1 << NRF24L01_RX_DR));
 8001eec:	2140      	movs	r1, #64	; 0x40
 8001eee:	2007      	movs	r0, #7
 8001ef0:	f7ff ff12 	bl	8001d18 <NRF24L01_WriteRegister>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	48000400 	.word	0x48000400
 8001f00:	2000050c 	.word	0x2000050c

08001f04 <NRF24L01_GetStatus>:
uint8_t NRF24L01_RxFifoEmpty(void) {
	uint8_t reg = NRF24L01_ReadRegister(NRF24L01_REG_FIFO_STATUS);
	return NRF24L01_CHECK_BIT(reg, NRF24L01_RX_EMPTY);
}

uint8_t NRF24L01_GetStatus(void) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
	uint8_t Data;
	
	NRF24L01_CSN_LOW;
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	4809      	ldr	r0, [pc, #36]	; (8001f34 <NRF24L01_GetStatus+0x30>)
 8001f10:	f001 ff84 	bl	8003e1c <HAL_GPIO_WritePin>
	/* First received byte is always status register */
	Data = NRF24L01_SPI_Send(NRF24L01_READ_REGISTER_MASK(NRF24L01_REG_STATUS));
 8001f14:	2007      	movs	r0, #7
 8001f16:	f000 f92b 	bl	8002170 <NRF24L01_SPI_Send>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
	/* Pull up chip select */
	NRF24L01_CSN_HIGH;
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2102      	movs	r1, #2
 8001f22:	4804      	ldr	r0, [pc, #16]	; (8001f34 <NRF24L01_GetStatus+0x30>)
 8001f24:	f001 ff7a 	bl	8003e1c <HAL_GPIO_WritePin>
	
	return Data;
 8001f28:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	48000400 	.word	0x48000400

08001f38 <NRF24L01_SoftwareReset>:
	
	/* Still sending */
	return NRF24L01_Transmit_Status_Sending;
}

void NRF24L01_SoftwareReset(void) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
	uint8_t data[5];
	
	//Disable chip
	NRF24L01_CE_LOW;
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2104      	movs	r1, #4
 8001f42:	4856      	ldr	r0, [pc, #344]	; (800209c <NRF24L01_SoftwareReset+0x164>)
 8001f44:	f001 ff6a 	bl	8003e1c <HAL_GPIO_WritePin>
	//Flush rx and Flush tx
	NRF24L01_CSN_LOW;
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	4853      	ldr	r0, [pc, #332]	; (800209c <NRF24L01_SoftwareReset+0x164>)
 8001f4e:	f001 ff65 	bl	8003e1c <HAL_GPIO_WritePin>
	NRF24L01_SPI_Send(NRF24L01_FLUSH_TX_MASK);
 8001f52:	20e1      	movs	r0, #225	; 0xe1
 8001f54:	f000 f90c 	bl	8002170 <NRF24L01_SPI_Send>
	NRF24L01_CSN_HIGH;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	484f      	ldr	r0, [pc, #316]	; (800209c <NRF24L01_SoftwareReset+0x164>)
 8001f5e:	f001 ff5d 	bl	8003e1c <HAL_GPIO_WritePin>
	NRF24L01_CSN_LOW;
 8001f62:	2200      	movs	r2, #0
 8001f64:	2102      	movs	r1, #2
 8001f66:	484d      	ldr	r0, [pc, #308]	; (800209c <NRF24L01_SoftwareReset+0x164>)
 8001f68:	f001 ff58 	bl	8003e1c <HAL_GPIO_WritePin>
	NRF24L01_SPI_Send(NRF24L01_FLUSH_RX_MASK);
 8001f6c:	20e2      	movs	r0, #226	; 0xe2
 8001f6e:	f000 f8ff 	bl	8002170 <NRF24L01_SPI_Send>
	NRF24L01_CSN_HIGH;
 8001f72:	2201      	movs	r2, #1
 8001f74:	2102      	movs	r1, #2
 8001f76:	4849      	ldr	r0, [pc, #292]	; (800209c <NRF24L01_SoftwareReset+0x164>)
 8001f78:	f001 ff50 	bl	8003e1c <HAL_GPIO_WritePin>

	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, 		NRF24L01_REG_DEFAULT_VAL_CONFIG);
 8001f7c:	2108      	movs	r1, #8
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff feca 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_EN_AA,		NRF24L01_REG_DEFAULT_VAL_EN_AA);
 8001f84:	213f      	movs	r1, #63	; 0x3f
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7ff fec6 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, 	NRF24L01_REG_DEFAULT_VAL_EN_RXADDR);
 8001f8c:	2103      	movs	r1, #3
 8001f8e:	2002      	movs	r0, #2
 8001f90:	f7ff fec2 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_AW, 	NRF24L01_REG_DEFAULT_VAL_SETUP_AW);
 8001f94:	2103      	movs	r1, #3
 8001f96:	2003      	movs	r0, #3
 8001f98:	f7ff febe 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, 	NRF24L01_REG_DEFAULT_VAL_SETUP_RETR);
 8001f9c:	2103      	movs	r1, #3
 8001f9e:	2004      	movs	r0, #4
 8001fa0:	f7ff feba 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RF_CH, 		NRF24L01_REG_DEFAULT_VAL_RF_CH);
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	2005      	movs	r0, #5
 8001fa8:	f7ff feb6 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RF_SETUP, 	NRF24L01_REG_DEFAULT_VAL_RF_SETUP);
 8001fac:	210e      	movs	r1, #14
 8001fae:	2006      	movs	r0, #6
 8001fb0:	f7ff feb2 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_STATUS, 		NRF24L01_REG_DEFAULT_VAL_STATUS);
 8001fb4:	210e      	movs	r1, #14
 8001fb6:	2007      	movs	r0, #7
 8001fb8:	f7ff feae 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_OBSERVE_TX, 	NRF24L01_REG_DEFAULT_VAL_OBSERVE_TX);
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2008      	movs	r0, #8
 8001fc0:	f7ff feaa 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RPD, 		NRF24L01_REG_DEFAULT_VAL_RPD);
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2009      	movs	r0, #9
 8001fc8:	f7ff fea6 	bl	8001d18 <NRF24L01_WriteRegister>
	
	//P0
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_0;
 8001fcc:	23e7      	movs	r3, #231	; 0xe7
 8001fce:	703b      	strb	r3, [r7, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_1;
 8001fd0:	23e7      	movs	r3, #231	; 0xe7
 8001fd2:	707b      	strb	r3, [r7, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_2;
 8001fd4:	23e7      	movs	r3, #231	; 0xe7
 8001fd6:	70bb      	strb	r3, [r7, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_3;
 8001fd8:	23e7      	movs	r3, #231	; 0xe7
 8001fda:	70fb      	strb	r3, [r7, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_4;
 8001fdc:	23e7      	movs	r3, #231	; 0xe7
 8001fde:	713b      	strb	r3, [r7, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P0, data, 5);
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2205      	movs	r2, #5
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	200a      	movs	r0, #10
 8001fe8:	f7ff fec2 	bl	8001d70 <NRF24L01_WriteRegisterMulti>
	
	//P1
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_0;
 8001fec:	23c2      	movs	r3, #194	; 0xc2
 8001fee:	703b      	strb	r3, [r7, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_1;
 8001ff0:	23c2      	movs	r3, #194	; 0xc2
 8001ff2:	707b      	strb	r3, [r7, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_2;
 8001ff4:	23c2      	movs	r3, #194	; 0xc2
 8001ff6:	70bb      	strb	r3, [r7, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_3;
 8001ff8:	23c2      	movs	r3, #194	; 0xc2
 8001ffa:	70fb      	strb	r3, [r7, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_4;
 8001ffc:	23c2      	movs	r3, #194	; 0xc2
 8001ffe:	713b      	strb	r3, [r7, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P1, data, 5);
 8002000:	463b      	mov	r3, r7
 8002002:	2205      	movs	r2, #5
 8002004:	4619      	mov	r1, r3
 8002006:	200b      	movs	r0, #11
 8002008:	f7ff feb2 	bl	8001d70 <NRF24L01_WriteRegisterMulti>
	
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P2, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P2);
 800200c:	21c3      	movs	r1, #195	; 0xc3
 800200e:	200c      	movs	r0, #12
 8002010:	f7ff fe82 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P3, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P3);
 8002014:	21c4      	movs	r1, #196	; 0xc4
 8002016:	200d      	movs	r0, #13
 8002018:	f7ff fe7e 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P4, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P4);
 800201c:	21c5      	movs	r1, #197	; 0xc5
 800201e:	200e      	movs	r0, #14
 8002020:	f7ff fe7a 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P5, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P5);
 8002024:	21c6      	movs	r1, #198	; 0xc6
 8002026:	200f      	movs	r0, #15
 8002028:	f7ff fe76 	bl	8001d18 <NRF24L01_WriteRegister>
	
	//TX
	data[0] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_0;
 800202c:	23e7      	movs	r3, #231	; 0xe7
 800202e:	703b      	strb	r3, [r7, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_1;
 8002030:	23e7      	movs	r3, #231	; 0xe7
 8002032:	707b      	strb	r3, [r7, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_2;
 8002034:	23e7      	movs	r3, #231	; 0xe7
 8002036:	70bb      	strb	r3, [r7, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_3;
 8002038:	23e7      	movs	r3, #231	; 0xe7
 800203a:	70fb      	strb	r3, [r7, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_4;
 800203c:	23e7      	movs	r3, #231	; 0xe7
 800203e:	713b      	strb	r3, [r7, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_TX_ADDR, data, 5);
 8002040:	463b      	mov	r3, r7
 8002042:	2205      	movs	r2, #5
 8002044:	4619      	mov	r1, r3
 8002046:	2010      	movs	r0, #16
 8002048:	f7ff fe92 	bl	8001d70 <NRF24L01_WriteRegisterMulti>
	
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P0, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P0);
 800204c:	2100      	movs	r1, #0
 800204e:	2011      	movs	r0, #17
 8002050:	f7ff fe62 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P1, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P1);
 8002054:	2100      	movs	r1, #0
 8002056:	2012      	movs	r0, #18
 8002058:	f7ff fe5e 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P2, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P2);
 800205c:	2100      	movs	r1, #0
 800205e:	2013      	movs	r0, #19
 8002060:	f7ff fe5a 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P3, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P3);
 8002064:	2100      	movs	r1, #0
 8002066:	2014      	movs	r0, #20
 8002068:	f7ff fe56 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P4, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P4);
 800206c:	2100      	movs	r1, #0
 800206e:	2015      	movs	r0, #21
 8002070:	f7ff fe52 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P5, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P5);
 8002074:	2100      	movs	r1, #0
 8002076:	2016      	movs	r0, #22
 8002078:	f7ff fe4e 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_FIFO_STATUS, NRF24L01_REG_DEFAULT_VAL_FIFO_STATUS);
 800207c:	2111      	movs	r1, #17
 800207e:	2017      	movs	r0, #23
 8002080:	f7ff fe4a 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_DYNPD, 		NRF24L01_REG_DEFAULT_VAL_DYNPD);
 8002084:	2100      	movs	r1, #0
 8002086:	201c      	movs	r0, #28
 8002088:	f7ff fe46 	bl	8001d18 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_FEATURE, 	NRF24L01_REG_DEFAULT_VAL_FEATURE);
 800208c:	2100      	movs	r1, #0
 800208e:	201d      	movs	r0, #29
 8002090:	f7ff fe42 	bl	8001d18 <NRF24L01_WriteRegister>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	48000400 	.word	0x48000400

080020a0 <NRF24L01_SetChannel>:
uint8_t NRF24L01_GetRetransmissionsCount(void) {
	/* Low 4 bits */
	return NRF24L01_ReadRegister(NRF24L01_REG_OBSERVE_TX) & 0x0F;
}

void NRF24L01_SetChannel(uint8_t channel) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
	if (channel <= 125 && channel != NRF24L01_Struct.Channel) {
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2b7d      	cmp	r3, #125	; 0x7d
 80020ae:	d80c      	bhi.n	80020ca <NRF24L01_SetChannel+0x2a>
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <NRF24L01_SetChannel+0x34>)
 80020b2:	785b      	ldrb	r3, [r3, #1]
 80020b4:	79fa      	ldrb	r2, [r7, #7]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d007      	beq.n	80020ca <NRF24L01_SetChannel+0x2a>
		/* Store new channel setting */
		NRF24L01_Struct.Channel = channel;
 80020ba:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <NRF24L01_SetChannel+0x34>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	7053      	strb	r3, [r2, #1]
		/* Write channel */
		NRF24L01_WriteRegister(NRF24L01_REG_RF_CH, channel);
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	4619      	mov	r1, r3
 80020c4:	2005      	movs	r0, #5
 80020c6:	f7ff fe27 	bl	8001d18 <NRF24L01_WriteRegister>
	}
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000050c 	.word	0x2000050c

080020d8 <NRF24L01_SetRF>:

void NRF24L01_SetRF(NRF24L01_DataRate_t DataRate, NRF24L01_OutputPower_t OutPwr) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	460a      	mov	r2, r1
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	4613      	mov	r3, r2
 80020e6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Struct.DataRate = DataRate;
 80020ec:	4a1a      	ldr	r2, [pc, #104]	; (8002158 <NRF24L01_SetRF+0x80>)
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	70d3      	strb	r3, [r2, #3]
	NRF24L01_Struct.OutPwr = OutPwr;
 80020f2:	4a19      	ldr	r2, [pc, #100]	; (8002158 <NRF24L01_SetRF+0x80>)
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	7093      	strb	r3, [r2, #2]
	
	if (DataRate == NRF24L01_DataRate_2M) {
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d104      	bne.n	8002108 <NRF24L01_SetRF+0x30>
		tmp |= 1 << NRF24L01_RF_DR_HIGH;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	e006      	b.n	8002116 <NRF24L01_SetRF+0x3e>
	} else if (DataRate == NRF24L01_DataRate_250k) {
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d103      	bne.n	8002116 <NRF24L01_SetRF+0x3e>
		tmp |= 1 << NRF24L01_RF_DR_LOW;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	f043 0320 	orr.w	r3, r3, #32
 8002114:	73fb      	strb	r3, [r7, #15]
	}
	/* If 1Mbps, all bits set to 0 */
	
	if (OutPwr == NRF24L01_OutputPower_0dBm) {
 8002116:	79bb      	ldrb	r3, [r7, #6]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d104      	bne.n	8002126 <NRF24L01_SetRF+0x4e>
		tmp |= 3 << NRF24L01_RF_PWR;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	f043 0306 	orr.w	r3, r3, #6
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	e00e      	b.n	8002144 <NRF24L01_SetRF+0x6c>
	} else if (OutPwr == NRF24L01_OutputPower_M6dBm) {
 8002126:	79bb      	ldrb	r3, [r7, #6]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d104      	bne.n	8002136 <NRF24L01_SetRF+0x5e>
		tmp |= 2 << NRF24L01_RF_PWR;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e006      	b.n	8002144 <NRF24L01_SetRF+0x6c>
	} else if (OutPwr == NRF24L01_OutputPower_M12dBm) {
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d103      	bne.n	8002144 <NRF24L01_SetRF+0x6c>
		tmp |= 1 << NRF24L01_RF_PWR;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	f043 0302 	orr.w	r3, r3, #2
 8002142:	73fb      	strb	r3, [r7, #15]
	}
	
	NRF24L01_WriteRegister(NRF24L01_REG_RF_SETUP, tmp);
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	4619      	mov	r1, r3
 8002148:	2006      	movs	r0, #6
 800214a:	f7ff fde5 	bl	8001d18 <NRF24L01_WriteRegister>
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000050c 	.word	0x2000050c

0800215c <NRF24L01_Clear_Interrupts>:
uint8_t NRF24L01_Read_Interrupts(NRF24L01_IRQ_t* IRQ) {
	IRQ->Status = NRF24L01_GetStatus();
	return IRQ->Status;
}

uint8_t NRF24L01_Clear_Interrupts(void) {
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
	return NRF24L01_WriteRegister(0x07, 0x70);
 8002160:	2170      	movs	r1, #112	; 0x70
 8002162:	2007      	movs	r0, #7
 8002164:	f7ff fdd8 	bl	8001d18 <NRF24L01_WriteRegister>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <NRF24L01_SPI_Send>:
extern SPI_HandleTypeDef NRF24L01_SPI_HANDLE;



uint8_t NRF24L01_SPI_Send(uint8_t data)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
	while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 800217a:	bf00      	nop
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <NRF24L01_SPI_Send+0x4c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f8      	beq.n	800217c <NRF24L01_SPI_Send+0xc>
	*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = data;
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <NRF24L01_SPI_Send+0x4c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	330c      	adds	r3, #12
 8002190:	79fa      	ldrb	r2, [r7, #7]
 8002192:	701a      	strb	r2, [r3, #0]
	while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 8002194:	bf00      	nop
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <NRF24L01_SPI_Send+0x4c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f8      	beq.n	8002196 <NRF24L01_SPI_Send+0x26>
	data = *(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <NRF24L01_SPI_Send+0x4c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	330c      	adds	r3, #12
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	71fb      	strb	r3, [r7, #7]

	return data;
 80021ae:	79fb      	ldrb	r3, [r7, #7]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	20000298 	.word	0x20000298

080021c0 <NRF24L01_SPI_WriteMulti>:



void NRF24L01_SPI_WriteMulti(uint8_t* dataOut, uint32_t count)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
	while(count > 0)
 80021ca:	e01f      	b.n	800220c <NRF24L01_SPI_WriteMulti+0x4c>
	{
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 80021cc:	bf00      	nop
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <NRF24L01_SPI_WriteMulti+0x60>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f8      	beq.n	80021ce <NRF24L01_SPI_WriteMulti+0xe>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = *dataOut;
 80021dc:	4b10      	ldr	r3, [pc, #64]	; (8002220 <NRF24L01_SPI_WriteMulti+0x60>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	330c      	adds	r3, #12
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	701a      	strb	r2, [r3, #0]
		dataOut++;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3301      	adds	r3, #1
 80021ec:	607b      	str	r3, [r7, #4]
		count--;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	603b      	str	r3, [r7, #0]
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 80021f4:	bf00      	nop
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <NRF24L01_SPI_WriteMulti+0x60>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f8      	beq.n	80021f6 <NRF24L01_SPI_WriteMulti+0x36>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <NRF24L01_SPI_WriteMulti+0x60>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	330c      	adds	r3, #12
 800220a:	781b      	ldrb	r3, [r3, #0]
	while(count > 0)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1dc      	bne.n	80021cc <NRF24L01_SPI_WriteMulti+0xc>
	}
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000298 	.word	0x20000298

08002224 <NRF24L01_SPI_SendMulti>:
	}
}


void NRF24L01_SPI_SendMulti(uint8_t* dataOut, uint8_t* dataIn, uint32_t count)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	while(count > 0)
 8002230:	e025      	b.n	800227e <NRF24L01_SPI_SendMulti+0x5a>
	{
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 8002232:	bf00      	nop
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <NRF24L01_SPI_SendMulti+0x6c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f8      	beq.n	8002234 <NRF24L01_SPI_SendMulti+0x10>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = *dataOut;
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <NRF24L01_SPI_SendMulti+0x6c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	701a      	strb	r2, [r3, #0]
		dataOut++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3301      	adds	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
		count--;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	607b      	str	r3, [r7, #4]
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 800225a:	bf00      	nop
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <NRF24L01_SPI_SendMulti+0x6c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f8      	beq.n	800225c <NRF24L01_SPI_SendMulti+0x38>
		*dataIn = *(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <NRF24L01_SPI_SendMulti+0x6c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	330c      	adds	r3, #12
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b2da      	uxtb	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	701a      	strb	r2, [r3, #0]
		dataIn++;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3301      	adds	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
	while(count > 0)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1d6      	bne.n	8002232 <NRF24L01_SPI_SendMulti+0xe>
	}
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	20000298 	.word	0x20000298

08002294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_MspInit+0x44>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <HAL_MspInit+0x44>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6193      	str	r3, [r2, #24]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_MspInit+0x44>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_MspInit+0x44>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <HAL_MspInit+0x44>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	61d3      	str	r3, [r2, #28]
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_MspInit+0x44>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022ca:	2007      	movs	r0, #7
 80022cc:	f001 f9ea 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000

080022dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a15      	ldr	r2, [pc, #84]	; (8002350 <HAL_ADC_MspInit+0x74>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d124      	bne.n	8002348 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_ADC_MspInit+0x78>)
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	4a14      	ldr	r2, [pc, #80]	; (8002354 <HAL_ADC_MspInit+0x78>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6153      	str	r3, [r2, #20]
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_ADC_MspInit+0x78>)
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_ADC_MspInit+0x78>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <HAL_ADC_MspInit+0x78>)
 800231c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002320:	6153      	str	r3, [r2, #20]
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <HAL_ADC_MspInit+0x78>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA6     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = OP_OUT_Pin;
 800232e:	2340      	movs	r3, #64	; 0x40
 8002330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002332:	2303      	movs	r3, #3
 8002334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OP_OUT_GPIO_Port, &GPIO_InitStruct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002344:	f001 fbe0 	bl	8003b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	; 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	50000100 	.word	0x50000100
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_OPAMP_MspInit+0x8c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d130      	bne.n	80023dc <HAL_OPAMP_MspInit+0x84>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_OPAMP_MspInit+0x90>)
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <HAL_OPAMP_MspInit+0x90>)
 8002380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002384:	6153      	str	r3, [r2, #20]
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_OPAMP_MspInit+0x90>)
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_OPAMP_MspInit+0x90>)
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <HAL_OPAMP_MspInit+0x90>)
 8002398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800239c:	6153      	str	r3, [r2, #20]
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_OPAMP_MspInit+0x90>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP2 GPIO Configuration    
    PA6     ------> OPAMP2_VOUT
    PA7     ------> OPAMP2_VINP
    PC5     ------> OPAMP2_VINM 
    */
    GPIO_InitStruct.Pin = OP_OUT_Pin|OP_INP_Pin;
 80023aa:	23c0      	movs	r3, #192	; 0xc0
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ae:	2303      	movs	r3, #3
 80023b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c0:	f001 fba2 	bl	8003b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OP_INM_Pin;
 80023c4:	2320      	movs	r3, #32
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023c8:	2303      	movs	r3, #3
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OP_INM_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4619      	mov	r1, r3
 80023d6:	4805      	ldr	r0, [pc, #20]	; (80023ec <HAL_OPAMP_MspInit+0x94>)
 80023d8:	f001 fb96 	bl	8003b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3728      	adds	r7, #40	; 0x28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	4001003c 	.word	0x4001003c
 80023e8:	40021000 	.word	0x40021000
 80023ec:	48000800 	.word	0x48000800

080023f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <HAL_SPI_MspInit+0xb0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d141      	bne.n	8002496 <HAL_SPI_MspInit+0xa6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_SPI_MspInit+0xb4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <HAL_SPI_MspInit+0xb4>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_SPI_MspInit+0xb4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <HAL_SPI_MspInit+0xb4>)
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_SPI_MspInit+0xb4>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002434:	6153      	str	r3, [r2, #20]
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_SPI_MspInit+0xb4>)
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = NRF_CLK_Pin|NRF_MOSI_Pin;
 8002442:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002450:	2301      	movs	r3, #1
 8002452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002454:	2305      	movs	r3, #5
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4619      	mov	r1, r3
 800245e:	4812      	ldr	r0, [pc, #72]	; (80024a8 <HAL_SPI_MspInit+0xb8>)
 8002460:	f001 fb52 	bl	8003b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8002464:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800246e:	2301      	movs	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002472:	2301      	movs	r3, #1
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002476:	2305      	movs	r3, #5
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4809      	ldr	r0, [pc, #36]	; (80024a8 <HAL_SPI_MspInit+0xb8>)
 8002482:	f001 fb41 	bl	8003b08 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	2024      	movs	r0, #36	; 0x24
 800248c:	f001 f915 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002490:	2024      	movs	r0, #36	; 0x24
 8002492:	f001 f92e 	bl	80036f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002496:	bf00      	nop
 8002498:	3728      	adds	r7, #40	; 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40003800 	.word	0x40003800
 80024a4:	40021000 	.word	0x40021000
 80024a8:	48000400 	.word	0x48000400

080024ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	; 0x30
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a96      	ldr	r2, [pc, #600]	; (8002724 <HAL_UART_MspInit+0x278>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	f040 8090 	bne.w	80025f0 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d0:	4b95      	ldr	r3, [pc, #596]	; (8002728 <HAL_UART_MspInit+0x27c>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	4a94      	ldr	r2, [pc, #592]	; (8002728 <HAL_UART_MspInit+0x27c>)
 80024d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024da:	61d3      	str	r3, [r2, #28]
 80024dc:	4b92      	ldr	r3, [pc, #584]	; (8002728 <HAL_UART_MspInit+0x27c>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e8:	4b8f      	ldr	r3, [pc, #572]	; (8002728 <HAL_UART_MspInit+0x27c>)
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	4a8e      	ldr	r2, [pc, #568]	; (8002728 <HAL_UART_MspInit+0x27c>)
 80024ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f2:	6153      	str	r3, [r2, #20]
 80024f4:	4b8c      	ldr	r3, [pc, #560]	; (8002728 <HAL_UART_MspInit+0x27c>)
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = BT_TX_Pin;
 8002500:	2304      	movs	r3, #4
 8002502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800250c:	2301      	movs	r3, #1
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002510:	2307      	movs	r3, #7
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BT_TX_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	4619      	mov	r1, r3
 800251a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251e:	f001 faf3 	bl	8003b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BT_RX_Pin;
 8002522:	2308      	movs	r3, #8
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800252a:	2301      	movs	r3, #1
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002532:	2307      	movs	r3, #7
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BT_RX_GPIO_Port, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002540:	f001 fae2 	bl	8003b08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002544:	4b79      	ldr	r3, [pc, #484]	; (800272c <HAL_UART_MspInit+0x280>)
 8002546:	4a7a      	ldr	r2, [pc, #488]	; (8002730 <HAL_UART_MspInit+0x284>)
 8002548:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800254a:	4b78      	ldr	r3, [pc, #480]	; (800272c <HAL_UART_MspInit+0x280>)
 800254c:	2200      	movs	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002550:	4b76      	ldr	r3, [pc, #472]	; (800272c <HAL_UART_MspInit+0x280>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002556:	4b75      	ldr	r3, [pc, #468]	; (800272c <HAL_UART_MspInit+0x280>)
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800255c:	4b73      	ldr	r3, [pc, #460]	; (800272c <HAL_UART_MspInit+0x280>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002562:	4b72      	ldr	r3, [pc, #456]	; (800272c <HAL_UART_MspInit+0x280>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002568:	4b70      	ldr	r3, [pc, #448]	; (800272c <HAL_UART_MspInit+0x280>)
 800256a:	2220      	movs	r2, #32
 800256c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800256e:	4b6f      	ldr	r3, [pc, #444]	; (800272c <HAL_UART_MspInit+0x280>)
 8002570:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002574:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002576:	486d      	ldr	r0, [pc, #436]	; (800272c <HAL_UART_MspInit+0x280>)
 8002578:	f001 f8d5 	bl	8003726 <HAL_DMA_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8002582:	f7ff fb19 	bl	8001bb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a68      	ldr	r2, [pc, #416]	; (800272c <HAL_UART_MspInit+0x280>)
 800258a:	66da      	str	r2, [r3, #108]	; 0x6c
 800258c:	4a67      	ldr	r2, [pc, #412]	; (800272c <HAL_UART_MspInit+0x280>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002592:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_UART_MspInit+0x288>)
 8002594:	4a68      	ldr	r2, [pc, #416]	; (8002738 <HAL_UART_MspInit+0x28c>)
 8002596:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002598:	4b66      	ldr	r3, [pc, #408]	; (8002734 <HAL_UART_MspInit+0x288>)
 800259a:	2210      	movs	r2, #16
 800259c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_UART_MspInit+0x288>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025a4:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_UART_MspInit+0x288>)
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025aa:	4b62      	ldr	r3, [pc, #392]	; (8002734 <HAL_UART_MspInit+0x288>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025b0:	4b60      	ldr	r3, [pc, #384]	; (8002734 <HAL_UART_MspInit+0x288>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025b6:	4b5f      	ldr	r3, [pc, #380]	; (8002734 <HAL_UART_MspInit+0x288>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025bc:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_UART_MspInit+0x288>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80025c2:	485c      	ldr	r0, [pc, #368]	; (8002734 <HAL_UART_MspInit+0x288>)
 80025c4:	f001 f8af 	bl	8003726 <HAL_DMA_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 80025ce:	f7ff faf3 	bl	8001bb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a57      	ldr	r2, [pc, #348]	; (8002734 <HAL_UART_MspInit+0x288>)
 80025d6:	669a      	str	r2, [r3, #104]	; 0x68
 80025d8:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_UART_MspInit+0x288>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 6);
 80025de:	2206      	movs	r2, #6
 80025e0:	2100      	movs	r1, #0
 80025e2:	2026      	movs	r0, #38	; 0x26
 80025e4:	f001 f869 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025e8:	2026      	movs	r0, #38	; 0x26
 80025ea:	f001 f882 	bl	80036f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025ee:	e095      	b.n	800271c <HAL_UART_MspInit+0x270>
  else if(huart->Instance==USART3)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a51      	ldr	r2, [pc, #324]	; (800273c <HAL_UART_MspInit+0x290>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	f040 8090 	bne.w	800271c <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025fc:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <HAL_UART_MspInit+0x27c>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	4a49      	ldr	r2, [pc, #292]	; (8002728 <HAL_UART_MspInit+0x27c>)
 8002602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002606:	61d3      	str	r3, [r2, #28]
 8002608:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_UART_MspInit+0x27c>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002614:	4b44      	ldr	r3, [pc, #272]	; (8002728 <HAL_UART_MspInit+0x27c>)
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	4a43      	ldr	r2, [pc, #268]	; (8002728 <HAL_UART_MspInit+0x27c>)
 800261a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800261e:	6153      	str	r3, [r2, #20]
 8002620:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_UART_MspInit+0x27c>)
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PC_TX_Pin;
 800262c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800263a:	2301      	movs	r3, #1
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800263e:	2307      	movs	r3, #7
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PC_TX_GPIO_Port, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	483d      	ldr	r0, [pc, #244]	; (8002740 <HAL_UART_MspInit+0x294>)
 800264a:	f001 fa5d 	bl	8003b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PC_RX_Pin;
 800264e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002658:	2301      	movs	r3, #1
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002660:	2307      	movs	r3, #7
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PC_RX_GPIO_Port, &GPIO_InitStruct);
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	4619      	mov	r1, r3
 800266a:	4835      	ldr	r0, [pc, #212]	; (8002740 <HAL_UART_MspInit+0x294>)
 800266c:	f001 fa4c 	bl	8003b08 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_UART_MspInit+0x298>)
 8002672:	4a35      	ldr	r2, [pc, #212]	; (8002748 <HAL_UART_MspInit+0x29c>)
 8002674:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002676:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_UART_MspInit+0x298>)
 8002678:	2200      	movs	r2, #0
 800267a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800267c:	4b31      	ldr	r3, [pc, #196]	; (8002744 <HAL_UART_MspInit+0x298>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002682:	4b30      	ldr	r3, [pc, #192]	; (8002744 <HAL_UART_MspInit+0x298>)
 8002684:	2280      	movs	r2, #128	; 0x80
 8002686:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002688:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <HAL_UART_MspInit+0x298>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800268e:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_UART_MspInit+0x298>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_UART_MspInit+0x298>)
 8002696:	2220      	movs	r2, #32
 8002698:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800269a:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <HAL_UART_MspInit+0x298>)
 800269c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80026a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026a2:	4828      	ldr	r0, [pc, #160]	; (8002744 <HAL_UART_MspInit+0x298>)
 80026a4:	f001 f83f 	bl	8003726 <HAL_DMA_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_UART_MspInit+0x206>
      Error_Handler();
 80026ae:	f7ff fa83 	bl	8001bb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a23      	ldr	r2, [pc, #140]	; (8002744 <HAL_UART_MspInit+0x298>)
 80026b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80026b8:	4a22      	ldr	r2, [pc, #136]	; (8002744 <HAL_UART_MspInit+0x298>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_UART_MspInit+0x2a0>)
 80026c0:	4a23      	ldr	r2, [pc, #140]	; (8002750 <HAL_UART_MspInit+0x2a4>)
 80026c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_UART_MspInit+0x2a0>)
 80026c6:	2210      	movs	r2, #16
 80026c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_UART_MspInit+0x2a0>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <HAL_UART_MspInit+0x2a0>)
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_UART_MspInit+0x2a0>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_UART_MspInit+0x2a0>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_UART_MspInit+0x2a0>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_UART_MspInit+0x2a0>)
 80026ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80026f0:	4816      	ldr	r0, [pc, #88]	; (800274c <HAL_UART_MspInit+0x2a0>)
 80026f2:	f001 f818 	bl	8003726 <HAL_DMA_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_UART_MspInit+0x254>
      Error_Handler();
 80026fc:	f7ff fa5c 	bl	8001bb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <HAL_UART_MspInit+0x2a0>)
 8002704:	669a      	str	r2, [r3, #104]	; 0x68
 8002706:	4a11      	ldr	r2, [pc, #68]	; (800274c <HAL_UART_MspInit+0x2a0>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 6);
 800270c:	2206      	movs	r2, #6
 800270e:	2100      	movs	r1, #0
 8002710:	2027      	movs	r0, #39	; 0x27
 8002712:	f000 ffd2 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002716:	2027      	movs	r0, #39	; 0x27
 8002718:	f000 ffeb 	bl	80036f2 <HAL_NVIC_EnableIRQ>
}
 800271c:	bf00      	nop
 800271e:	3730      	adds	r7, #48	; 0x30
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40004400 	.word	0x40004400
 8002728:	40021000 	.word	0x40021000
 800272c:	200003fc 	.word	0x200003fc
 8002730:	4002006c 	.word	0x4002006c
 8002734:	20000440 	.word	0x20000440
 8002738:	40020080 	.word	0x40020080
 800273c:	40004800 	.word	0x40004800
 8002740:	48000800 	.word	0x48000800
 8002744:	20000484 	.word	0x20000484
 8002748:	40020030 	.word	0x40020030
 800274c:	200004c8 	.word	0x200004c8
 8002750:	4002001c 	.word	0x4002001c

08002754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <HardFault_Handler+0x4>

08002768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <MemManage_Handler+0x4>

0800276e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002772:	e7fe      	b.n	8002772 <BusFault_Handler+0x4>

08002774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <UsageFault_Handler+0x4>

0800277a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a8:	f000 f924 	bl	80029f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80027b4:	2010      	movs	r0, #16
 80027b6:	f001 fb49 	bl	8003e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <DMA1_Channel2_IRQHandler+0x10>)
 80027c6:	f001 f892 	bl	80038ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200004c8 	.word	0x200004c8

080027d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <DMA1_Channel3_IRQHandler+0x10>)
 80027da:	f001 f888 	bl	80038ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000484 	.word	0x20000484

080027e8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <DMA1_Channel6_IRQHandler+0x10>)
 80027ee:	f001 f87e 	bl	80038ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200003fc 	.word	0x200003fc

080027fc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <DMA1_Channel7_IRQHandler+0x10>)
 8002802:	f001 f874 	bl	80038ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000440 	.word	0x20000440

08002810 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <SPI2_IRQHandler+0x10>)
 8002816:	f002 ffd3 	bl	80057c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000298 	.word	0x20000298

08002824 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <USART2_IRQHandler+0x10>)
 800282a:	f003 fa37 	bl	8005c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200002fc 	.word	0x200002fc

08002838 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <USART3_IRQHandler+0x10>)
 800283e:	f003 fa2d 	bl	8005c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2000037c 	.word	0x2000037c

0800284c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
	return 1;
 8002850:	2301      	movs	r3, #1
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <_kill>:

int _kill(int pid, int sig)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002866:	f004 f84d 	bl	8006904 <__errno>
 800286a:	4602      	mov	r2, r0
 800286c:	2316      	movs	r3, #22
 800286e:	6013      	str	r3, [r2, #0]
	return -1;
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <_exit>:

void _exit (int status)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002884:	f04f 31ff 	mov.w	r1, #4294967295
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ffe7 	bl	800285c <_kill>
	while (1) {}		/* Make sure we hang here */
 800288e:	e7fe      	b.n	800288e <_exit+0x12>

08002890 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <_sbrk+0x50>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <_sbrk+0x16>
		heap_end = &end;
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <_sbrk+0x50>)
 80028a2:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <_sbrk+0x54>)
 80028a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <_sbrk+0x50>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <_sbrk+0x50>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	466a      	mov	r2, sp
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d907      	bls.n	80028ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80028ba:	f004 f823 	bl	8006904 <__errno>
 80028be:	4602      	mov	r2, r0
 80028c0:	230c      	movs	r3, #12
 80028c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
 80028c8:	e006      	b.n	80028d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <_sbrk+0x50>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <_sbrk+0x50>)
 80028d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80028d6:	68fb      	ldr	r3, [r7, #12]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000510 	.word	0x20000510
 80028e4:	20000528 	.word	0x20000528

080028e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <SystemInit+0x28>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	4a07      	ldr	r2, [pc, #28]	; (8002910 <SystemInit+0x28>)
 80028f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <SystemInit+0x28>)
 80028fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002902:	609a      	str	r2, [r3, #8]
#endif
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800294c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002918:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800291a:	e003      	b.n	8002924 <LoopCopyDataInit>

0800291c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800291e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002920:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002922:	3104      	adds	r1, #4

08002924 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002924:	480b      	ldr	r0, [pc, #44]	; (8002954 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002928:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800292a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800292c:	d3f6      	bcc.n	800291c <CopyDataInit>
	ldr	r2, =_sbss
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002930:	e002      	b.n	8002938 <LoopFillZerobss>

08002932 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002932:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002934:	f842 3b04 	str.w	r3, [r2], #4

08002938 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <LoopForever+0x16>)
	cmp	r2, r3
 800293a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800293c:	d3f9      	bcc.n	8002932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800293e:	f7ff ffd3 	bl	80028e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002942:	f003 ffe5 	bl	8006910 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002946:	f7fe fe7e 	bl	8001646 <main>

0800294a <LoopForever>:

LoopForever:
    b LoopForever
 800294a:	e7fe      	b.n	800294a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800294c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002950:	08009764 	.word	0x08009764
	ldr	r0, =_sdata
 8002954:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002958:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 800295c:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002960:	20000528 	.word	0x20000528

08002964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002964:	e7fe      	b.n	8002964 <ADC1_2_IRQHandler>
	...

08002968 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_Init+0x28>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a07      	ldr	r2, [pc, #28]	; (8002990 <HAL_Init+0x28>)
 8002972:	f043 0310 	orr.w	r3, r3, #16
 8002976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002978:	2003      	movs	r0, #3
 800297a:	f000 fe93 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297e:	2000      	movs	r0, #0
 8002980:	f000 f808 	bl	8002994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002984:	f7ff fc86 	bl	8002294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40022000 	.word	0x40022000

08002994 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_InitTick+0x54>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x58>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 feab 	bl	800370e <HAL_SYSTICK_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e00e      	b.n	80029e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b0f      	cmp	r3, #15
 80029c6:	d80a      	bhi.n	80029de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c8:	2200      	movs	r2, #0
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	f000 fe73 	bl	80036ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d4:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <HAL_InitTick+0x5c>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000008 	.word	0x20000008
 80029f0:	20000004 	.word	0x20000004

080029f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_IncTick+0x20>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_IncTick+0x24>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <HAL_IncTick+0x24>)
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000008 	.word	0x20000008
 8002a18:	20000520 	.word	0x20000520

08002a1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <HAL_GetTick+0x14>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000520 	.word	0x20000520

08002a34 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a3c:	f7ff ffee 	bl	8002a1c <HAL_GetTick>
 8002a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d005      	beq.n	8002a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_Delay+0x40>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4413      	add	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002a5a:	bf00      	nop
 8002a5c:	f7ff ffde 	bl	8002a1c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d8f7      	bhi.n	8002a5c <HAL_Delay+0x28>
  {
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000008 	.word	0x20000008

08002a78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b09a      	sub	sp, #104	; 0x68
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e1e3      	b.n	8002e60 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d176      	bne.n	8002b98 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d152      	bne.n	8002b58 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fc05 	bl	80022dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d13b      	bne.n	8002b58 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fcaf 	bl	8003444 <ADC_Disable>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d12f      	bne.n	8002b58 <HAL_ADC_Init+0xe0>
 8002af8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d12b      	bne.n	8002b58 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b08:	f023 0302 	bic.w	r3, r3, #2
 8002b0c:	f043 0202 	orr.w	r2, r3, #2
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b22:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b32:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b34:	4b92      	ldr	r3, [pc, #584]	; (8002d80 <HAL_ADC_Init+0x308>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a92      	ldr	r2, [pc, #584]	; (8002d84 <HAL_ADC_Init+0x30c>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0c9a      	lsrs	r2, r3, #18
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b4a:	e002      	b.n	8002b52 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f9      	bne.n	8002b4c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b74:	d110      	bne.n	8002b98 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f023 0312 	bic.w	r3, r3, #18
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f040 8150 	bne.w	8002e46 <HAL_ADC_Init+0x3ce>
 8002ba6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 814b 	bne.w	8002e46 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 8143 	bne.w	8002e46 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bc8:	f043 0202 	orr.w	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd8:	d004      	beq.n	8002be4 <HAL_ADC_Init+0x16c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6a      	ldr	r2, [pc, #424]	; (8002d88 <HAL_ADC_Init+0x310>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_Init+0x170>
 8002be4:	4b69      	ldr	r3, [pc, #420]	; (8002d8c <HAL_ADC_Init+0x314>)
 8002be6:	e000      	b.n	8002bea <HAL_ADC_Init+0x172>
 8002be8:	4b69      	ldr	r3, [pc, #420]	; (8002d90 <HAL_ADC_Init+0x318>)
 8002bea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf4:	d102      	bne.n	8002bfc <HAL_ADC_Init+0x184>
 8002bf6:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <HAL_ADC_Init+0x310>)
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e01a      	b.n	8002c32 <HAL_ADC_Init+0x1ba>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a61      	ldr	r2, [pc, #388]	; (8002d88 <HAL_ADC_Init+0x310>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d103      	bne.n	8002c0e <HAL_ADC_Init+0x196>
 8002c06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e011      	b.n	8002c32 <HAL_ADC_Init+0x1ba>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a60      	ldr	r2, [pc, #384]	; (8002d94 <HAL_ADC_Init+0x31c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d102      	bne.n	8002c1e <HAL_ADC_Init+0x1a6>
 8002c18:	4b5f      	ldr	r3, [pc, #380]	; (8002d98 <HAL_ADC_Init+0x320>)
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e009      	b.n	8002c32 <HAL_ADC_Init+0x1ba>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5d      	ldr	r2, [pc, #372]	; (8002d98 <HAL_ADC_Init+0x320>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d102      	bne.n	8002c2e <HAL_ADC_Init+0x1b6>
 8002c28:	4b5a      	ldr	r3, [pc, #360]	; (8002d94 <HAL_ADC_Init+0x31c>)
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e001      	b.n	8002c32 <HAL_ADC_Init+0x1ba>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d108      	bne.n	8002c52 <HAL_ADC_Init+0x1da>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_Init+0x1da>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_ADC_Init+0x1dc>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11c      	bne.n	8002c92 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_ADC_Init+0x202>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_Init+0x202>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_ADC_Init+0x204>
 8002c7a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d108      	bne.n	8002c92 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c90:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7e5b      	ldrb	r3, [r3, #25]
 8002c96:	035b      	lsls	r3, r3, #13
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c9c:	2a01      	cmp	r2, #1
 8002c9e:	d002      	beq.n	8002ca6 <HAL_ADC_Init+0x22e>
 8002ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ca4:	e000      	b.n	8002ca8 <HAL_ADC_Init+0x230>
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d11b      	bne.n	8002cfe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7e5b      	ldrb	r3, [r3, #25]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	045a      	lsls	r2, r3, #17
 8002cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	663b      	str	r3, [r7, #96]	; 0x60
 8002ce0:	e00d      	b.n	8002cfe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d054      	beq.n	8002db0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <HAL_ADC_Init+0x31c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_ADC_Init+0x2a2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <HAL_ADC_Init+0x320>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d140      	bne.n	8002d9c <HAL_ADC_Init+0x324>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002d22:	d02a      	beq.n	8002d7a <HAL_ADC_Init+0x302>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2c:	d022      	beq.n	8002d74 <HAL_ADC_Init+0x2fc>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002d36:	d01a      	beq.n	8002d6e <HAL_ADC_Init+0x2f6>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002d40:	d012      	beq.n	8002d68 <HAL_ADC_Init+0x2f0>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002d4a:	d00a      	beq.n	8002d62 <HAL_ADC_Init+0x2ea>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002d54:	d002      	beq.n	8002d5c <HAL_ADC_Init+0x2e4>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	e023      	b.n	8002da4 <HAL_ADC_Init+0x32c>
 8002d5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002d60:	e020      	b.n	8002da4 <HAL_ADC_Init+0x32c>
 8002d62:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d66:	e01d      	b.n	8002da4 <HAL_ADC_Init+0x32c>
 8002d68:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002d6c:	e01a      	b.n	8002da4 <HAL_ADC_Init+0x32c>
 8002d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d72:	e017      	b.n	8002da4 <HAL_ADC_Init+0x32c>
 8002d74:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002d78:	e014      	b.n	8002da4 <HAL_ADC_Init+0x32c>
 8002d7a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002d7e:	e011      	b.n	8002da4 <HAL_ADC_Init+0x32c>
 8002d80:	20000000 	.word	0x20000000
 8002d84:	431bde83 	.word	0x431bde83
 8002d88:	50000100 	.word	0x50000100
 8002d8c:	50000300 	.word	0x50000300
 8002d90:	50000700 	.word	0x50000700
 8002d94:	50000400 	.word	0x50000400
 8002d98:	50000500 	.word	0x50000500
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002da8:	4313      	orrs	r3, r2
 8002daa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dac:	4313      	orrs	r3, r2
 8002dae:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d114      	bne.n	8002de8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dcc:	f023 0302 	bic.w	r3, r3, #2
 8002dd0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7e1b      	ldrb	r3, [r3, #24]
 8002dd6:	039a      	lsls	r2, r3, #14
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4313      	orrs	r3, r2
 8002de2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002de4:	4313      	orrs	r3, r2
 8002de6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <HAL_ADC_Init+0x3f0>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10c      	bne.n	8002e1e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f023 010f 	bic.w	r1, r3, #15
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	1e5a      	subs	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e1c:	e007      	b.n	8002e2e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 020f 	bic.w	r2, r2, #15
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f023 0303 	bic.w	r3, r3, #3
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
 8002e44:	e00a      	b.n	8002e5c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f023 0312 	bic.w	r3, r3, #18
 8002e4e:	f043 0210 	orr.w	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002e5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3768      	adds	r7, #104	; 0x68
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	fff0c007 	.word	0xfff0c007

08002e6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b09b      	sub	sp, #108	; 0x6c
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x22>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e2cb      	b.n	8003426 <HAL_ADC_ConfigChannel+0x5ba>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 82af 	bne.w	8003404 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d81c      	bhi.n	8002ee8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4413      	add	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	231f      	movs	r3, #31
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	4019      	ands	r1, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fa00 f203 	lsl.w	r2, r0, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee6:	e063      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b09      	cmp	r3, #9
 8002eee:	d81e      	bhi.n	8002f2e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	3b1e      	subs	r3, #30
 8002f04:	221f      	movs	r2, #31
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	4019      	ands	r1, r3
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	3b1e      	subs	r3, #30
 8002f20:	fa00 f203 	lsl.w	r2, r0, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f2c:	e040      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b0e      	cmp	r3, #14
 8002f34:	d81e      	bhi.n	8002f74 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	3b3c      	subs	r3, #60	; 0x3c
 8002f4a:	221f      	movs	r2, #31
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	4019      	ands	r1, r3
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	3b3c      	subs	r3, #60	; 0x3c
 8002f66:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
 8002f72:	e01d      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	3b5a      	subs	r3, #90	; 0x5a
 8002f88:	221f      	movs	r2, #31
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	4019      	ands	r1, r3
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	3b5a      	subs	r3, #90	; 0x5a
 8002fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 80e5 	bne.w	800318a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b09      	cmp	r3, #9
 8002fc6:	d91c      	bls.n	8003002 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6999      	ldr	r1, [r3, #24]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b1e      	subs	r3, #30
 8002fda:	2207      	movs	r2, #7
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	4019      	ands	r1, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6898      	ldr	r0, [r3, #8]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3b1e      	subs	r3, #30
 8002ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]
 8003000:	e019      	b.n	8003036 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6959      	ldr	r1, [r3, #20]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	2207      	movs	r2, #7
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	4019      	ands	r1, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6898      	ldr	r0, [r3, #8]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	fa00 f203 	lsl.w	r2, r0, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	08db      	lsrs	r3, r3, #3
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	3b01      	subs	r3, #1
 8003054:	2b03      	cmp	r3, #3
 8003056:	d84f      	bhi.n	80030f8 <HAL_ADC_ConfigChannel+0x28c>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <HAL_ADC_ConfigChannel+0x1f4>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003071 	.word	0x08003071
 8003064:	08003093 	.word	0x08003093
 8003068:	080030b5 	.word	0x080030b5
 800306c:	080030d7 	.word	0x080030d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003076:	4b9f      	ldr	r3, [pc, #636]	; (80032f4 <HAL_ADC_ConfigChannel+0x488>)
 8003078:	4013      	ands	r3, r2
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	0691      	lsls	r1, r2, #26
 8003080:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003082:	430a      	orrs	r2, r1
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800308e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003090:	e07e      	b.n	8003190 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003098:	4b96      	ldr	r3, [pc, #600]	; (80032f4 <HAL_ADC_ConfigChannel+0x488>)
 800309a:	4013      	ands	r3, r2
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	0691      	lsls	r1, r2, #26
 80030a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030a4:	430a      	orrs	r2, r1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030b0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80030b2:	e06d      	b.n	8003190 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030ba:	4b8e      	ldr	r3, [pc, #568]	; (80032f4 <HAL_ADC_ConfigChannel+0x488>)
 80030bc:	4013      	ands	r3, r2
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	0691      	lsls	r1, r2, #26
 80030c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030c6:	430a      	orrs	r2, r1
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030d2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80030d4:	e05c      	b.n	8003190 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030dc:	4b85      	ldr	r3, [pc, #532]	; (80032f4 <HAL_ADC_ConfigChannel+0x488>)
 80030de:	4013      	ands	r3, r2
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	0691      	lsls	r1, r2, #26
 80030e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030e8:	430a      	orrs	r2, r1
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030f4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80030f6:	e04b      	b.n	8003190 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	069b      	lsls	r3, r3, #26
 8003108:	429a      	cmp	r2, r3
 800310a:	d107      	bne.n	800311c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800311a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003122:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	069b      	lsls	r3, r3, #26
 800312c:	429a      	cmp	r2, r3
 800312e:	d107      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800313e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003146:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	069b      	lsls	r3, r3, #26
 8003150:	429a      	cmp	r2, r3
 8003152:	d107      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003162:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800316a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	069b      	lsls	r3, r3, #26
 8003174:	429a      	cmp	r2, r3
 8003176:	d10a      	bne.n	800318e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003186:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003188:	e001      	b.n	800318e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <HAL_ADC_ConfigChannel+0x324>
      break;
 800318e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d108      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x344>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x344>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x346>
 80031b0:	2300      	movs	r3, #0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 8131 	bne.w	800341a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d00f      	beq.n	80031e0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	400a      	ands	r2, r1
 80031da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80031de:	e049      	b.n	8003274 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2201      	movs	r2, #1
 80031ee:	409a      	lsls	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b09      	cmp	r3, #9
 8003200:	d91c      	bls.n	800323c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6999      	ldr	r1, [r3, #24]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	3b1b      	subs	r3, #27
 8003214:	2207      	movs	r2, #7
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	4019      	ands	r1, r3
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6898      	ldr	r0, [r3, #8]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	3b1b      	subs	r3, #27
 800322e:	fa00 f203 	lsl.w	r2, r0, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	619a      	str	r2, [r3, #24]
 800323a:	e01b      	b.n	8003274 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6959      	ldr	r1, [r3, #20]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	2207      	movs	r2, #7
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	4019      	ands	r1, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6898      	ldr	r0, [r3, #8]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	fa00 f203 	lsl.w	r2, r0, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800327c:	d004      	beq.n	8003288 <HAL_ADC_ConfigChannel+0x41c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <HAL_ADC_ConfigChannel+0x48c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_ADC_ConfigChannel+0x420>
 8003288:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <HAL_ADC_ConfigChannel+0x490>)
 800328a:	e000      	b.n	800328e <HAL_ADC_ConfigChannel+0x422>
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_ADC_ConfigChannel+0x494>)
 800328e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b10      	cmp	r3, #16
 8003296:	d105      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d015      	beq.n	80032d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80032a8:	2b11      	cmp	r3, #17
 80032aa:	d105      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80032ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80032bc:	2b12      	cmp	r3, #18
 80032be:	f040 80ac 	bne.w	800341a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80032c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 80a5 	bne.w	800341a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032d8:	d102      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x474>
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <HAL_ADC_ConfigChannel+0x48c>)
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e023      	b.n	8003328 <HAL_ADC_ConfigChannel+0x4bc>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <HAL_ADC_ConfigChannel+0x48c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10c      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x498>
 80032ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e01a      	b.n	8003328 <HAL_ADC_ConfigChannel+0x4bc>
 80032f2:	bf00      	nop
 80032f4:	83fff000 	.word	0x83fff000
 80032f8:	50000100 	.word	0x50000100
 80032fc:	50000300 	.word	0x50000300
 8003300:	50000700 	.word	0x50000700
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a4a      	ldr	r2, [pc, #296]	; (8003434 <HAL_ADC_ConfigChannel+0x5c8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d102      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x4a8>
 800330e:	4b4a      	ldr	r3, [pc, #296]	; (8003438 <HAL_ADC_ConfigChannel+0x5cc>)
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	e009      	b.n	8003328 <HAL_ADC_ConfigChannel+0x4bc>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a47      	ldr	r2, [pc, #284]	; (8003438 <HAL_ADC_ConfigChannel+0x5cc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d102      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x4b8>
 800331e:	4b45      	ldr	r3, [pc, #276]	; (8003434 <HAL_ADC_ConfigChannel+0x5c8>)
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e001      	b.n	8003328 <HAL_ADC_ConfigChannel+0x4bc>
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d108      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x4dc>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x4dc>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_ADC_ConfigChannel+0x4de>
 8003348:	2300      	movs	r3, #0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d150      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800334e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003350:	2b00      	cmp	r3, #0
 8003352:	d010      	beq.n	8003376 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d107      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x504>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x504>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_ADC_ConfigChannel+0x506>
 8003370:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003372:	2b00      	cmp	r3, #0
 8003374:	d13c      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b10      	cmp	r3, #16
 800337c:	d11d      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x54e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003386:	d118      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003392:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003394:	4b29      	ldr	r3, [pc, #164]	; (800343c <HAL_ADC_ConfigChannel+0x5d0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a29      	ldr	r2, [pc, #164]	; (8003440 <HAL_ADC_ConfigChannel+0x5d4>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0c9a      	lsrs	r2, r3, #18
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033aa:	e002      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f9      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033b8:	e02e      	b.n	8003418 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b11      	cmp	r3, #17
 80033c0:	d10b      	bne.n	80033da <HAL_ADC_ConfigChannel+0x56e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ca:	d106      	bne.n	80033da <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80033cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80033d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033d8:	e01e      	b.n	8003418 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b12      	cmp	r3, #18
 80033e0:	d11a      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80033e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80033ee:	e013      	b.n	8003418 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003402:	e00a      	b.n	800341a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f043 0220 	orr.w	r2, r3, #32
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003416:	e000      	b.n	800341a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003418:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003422:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003426:	4618      	mov	r0, r3
 8003428:	376c      	adds	r7, #108	; 0x6c
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	50000400 	.word	0x50000400
 8003438:	50000500 	.word	0x50000500
 800343c:	20000000 	.word	0x20000000
 8003440:	431bde83 	.word	0x431bde83

08003444 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d108      	bne.n	8003470 <ADC_Disable+0x2c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <ADC_Disable+0x2c>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <ADC_Disable+0x2e>
 8003470:	2300      	movs	r3, #0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d040      	beq.n	80034f8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030d 	and.w	r3, r3, #13
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10f      	bne.n	80034a4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0202 	orr.w	r2, r2, #2
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2203      	movs	r2, #3
 800349a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800349c:	f7ff fabe 	bl	8002a1c <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034a2:	e022      	b.n	80034ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f043 0210 	orr.w	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e01c      	b.n	80034fa <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034c0:	f7ff faac 	bl	8002a1c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d90d      	bls.n	80034ea <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0210 	orr.w	r2, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e007      	b.n	80034fa <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d0e3      	beq.n	80034c0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003520:	4013      	ands	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800352c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003536:	4a04      	ldr	r2, [pc, #16]	; (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	60d3      	str	r3, [r2, #12]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <__NVIC_GetPriorityGrouping+0x18>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	f003 0307 	and.w	r3, r3, #7
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db0b      	blt.n	8003592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4907      	ldr	r1, [pc, #28]	; (80035a0 <__NVIC_EnableIRQ+0x38>)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2001      	movs	r0, #1
 800358a:	fa00 f202 	lsl.w	r2, r0, r2
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	; (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	; (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	; 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf28      	it	cs
 8003616:	2304      	movcs	r3, #4
 8003618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3304      	adds	r3, #4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d902      	bls.n	8003628 <NVIC_EncodePriority+0x30>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b03      	subs	r3, #3
 8003626:	e000      	b.n	800362a <NVIC_EncodePriority+0x32>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 32ff 	mov.w	r2, #4294967295
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	401a      	ands	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003640:	f04f 31ff 	mov.w	r1, #4294967295
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	43d9      	mvns	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	4313      	orrs	r3, r2
         );
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	; 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003670:	d301      	bcc.n	8003676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2301      	movs	r3, #1
 8003674:	e00f      	b.n	8003696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <SysTick_Config+0x40>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367e:	210f      	movs	r1, #15
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	f7ff ff8e 	bl	80035a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <SysTick_Config+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <SysTick_Config+0x40>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff29 	bl	8003504 <__NVIC_SetPriorityGrouping>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036cc:	f7ff ff3e 	bl	800354c <__NVIC_GetPriorityGrouping>
 80036d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7ff ff8e 	bl	80035f8 <NVIC_EncodePriority>
 80036dc:	4602      	mov	r2, r0
 80036de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff5d 	bl	80035a4 <__NVIC_SetPriority>
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff31 	bl	8003568 <__NVIC_EnableIRQ>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffa2 	bl	8003660 <SysTick_Config>
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e037      	b.n	80037ac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003752:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003756:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f97e 	bl	8003a90 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}  
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_DMA_Start_IT+0x20>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e04a      	b.n	800386a <HAL_DMA_Start_IT+0xb6>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d13a      	bne.n	800385c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f912 	bl	8003a34 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 020e 	orr.w	r2, r2, #14
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e00f      	b.n	800384a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 020a 	orr.w	r2, r2, #10
 8003838:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0204 	bic.w	r2, r2, #4
 8003848:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e005      	b.n	8003868 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003864:	2302      	movs	r3, #2
 8003866:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003868:	7dfb      	ldrb	r3, [r7, #23]
} 
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003884:	2b02      	cmp	r3, #2
 8003886:	d005      	beq.n	8003894 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2204      	movs	r2, #4
 800388c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	e027      	b.n	80038e4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 020e 	bic.w	r2, r2, #14
 80038a2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f202 	lsl.w	r2, r1, r2
 80038c2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
    } 
  }
  return status;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2204      	movs	r2, #4
 800390c:	409a      	lsls	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d024      	beq.n	8003960 <HAL_DMA_IRQHandler+0x72>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01f      	beq.n	8003960 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d107      	bne.n	800393e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0204 	bic.w	r2, r2, #4
 800393c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	2104      	movs	r1, #4
 8003948:	fa01 f202 	lsl.w	r2, r1, r2
 800394c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d06a      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800395e:	e065      	b.n	8003a2c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	2202      	movs	r2, #2
 8003966:	409a      	lsls	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d02c      	beq.n	80039ca <HAL_DMA_IRQHandler+0xdc>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d027      	beq.n	80039ca <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10b      	bne.n	80039a0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 020a 	bic.w	r2, r2, #10
 8003996:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	2102      	movs	r1, #2
 80039aa:	fa01 f202 	lsl.w	r2, r1, r2
 80039ae:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d035      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80039c8:	e030      	b.n	8003a2c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	2208      	movs	r2, #8
 80039d0:	409a      	lsls	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d028      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x13e>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d023      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 020e 	bic.w	r2, r2, #14
 80039f2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	2101      	movs	r1, #1
 80039fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003a02:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4798      	blx	r3
    }
  }
}  
 8003a2a:	e7ff      	b.n	8003a2c <HAL_DMA_IRQHandler+0x13e>
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a50:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d108      	bne.n	8003a74 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a72:	e007      	b.n	8003a84 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	60da      	str	r2, [r3, #12]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <DMA_CalcBaseAndBitshift+0x60>)
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d80f      	bhi.n	8003ac4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <DMA_CalcBaseAndBitshift+0x64>)
 8003aac:	4413      	add	r3, r2
 8003aae:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <DMA_CalcBaseAndBitshift+0x68>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	009a      	lsls	r2, r3, #2
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a0f      	ldr	r2, [pc, #60]	; (8003afc <DMA_CalcBaseAndBitshift+0x6c>)
 8003ac0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003ac2:	e00e      	b.n	8003ae2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <DMA_CalcBaseAndBitshift+0x70>)
 8003acc:	4413      	add	r3, r2
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <DMA_CalcBaseAndBitshift+0x68>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a09      	ldr	r2, [pc, #36]	; (8003b04 <DMA_CalcBaseAndBitshift+0x74>)
 8003ae0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40020407 	.word	0x40020407
 8003af4:	bffdfff8 	.word	0xbffdfff8
 8003af8:	cccccccd 	.word	0xcccccccd
 8003afc:	40020000 	.word	0x40020000
 8003b00:	bffdfbf8 	.word	0xbffdfbf8
 8003b04:	40020400 	.word	0x40020400

08003b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b16:	e160      	b.n	8003dda <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	4013      	ands	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8152 	beq.w	8003dd4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x38>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b12      	cmp	r3, #18
 8003b3e:	d123      	bne.n	8003b88 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	08da      	lsrs	r2, r3, #3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3208      	adds	r2, #8
 8003b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	220f      	movs	r2, #15
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	08da      	lsrs	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3208      	adds	r2, #8
 8003b82:	6939      	ldr	r1, [r7, #16]
 8003b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0203 	and.w	r2, r3, #3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d00b      	beq.n	8003bdc <HAL_GPIO_Init+0xd4>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d007      	beq.n	8003bdc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bd0:	2b11      	cmp	r3, #17
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b12      	cmp	r3, #18
 8003bda:	d130      	bne.n	8003c3e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c12:	2201      	movs	r2, #1
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0201 	and.w	r2, r3, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	2203      	movs	r2, #3
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4013      	ands	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80ac 	beq.w	8003dd4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c7c:	4b5e      	ldr	r3, [pc, #376]	; (8003df8 <HAL_GPIO_Init+0x2f0>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	4a5d      	ldr	r2, [pc, #372]	; (8003df8 <HAL_GPIO_Init+0x2f0>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6193      	str	r3, [r2, #24]
 8003c88:	4b5b      	ldr	r3, [pc, #364]	; (8003df8 <HAL_GPIO_Init+0x2f0>)
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c94:	4a59      	ldr	r2, [pc, #356]	; (8003dfc <HAL_GPIO_Init+0x2f4>)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	220f      	movs	r2, #15
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cbe:	d025      	beq.n	8003d0c <HAL_GPIO_Init+0x204>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a4f      	ldr	r2, [pc, #316]	; (8003e00 <HAL_GPIO_Init+0x2f8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d01f      	beq.n	8003d08 <HAL_GPIO_Init+0x200>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a4e      	ldr	r2, [pc, #312]	; (8003e04 <HAL_GPIO_Init+0x2fc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d019      	beq.n	8003d04 <HAL_GPIO_Init+0x1fc>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a4d      	ldr	r2, [pc, #308]	; (8003e08 <HAL_GPIO_Init+0x300>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <HAL_GPIO_Init+0x1f8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a4c      	ldr	r2, [pc, #304]	; (8003e0c <HAL_GPIO_Init+0x304>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00d      	beq.n	8003cfc <HAL_GPIO_Init+0x1f4>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a4b      	ldr	r2, [pc, #300]	; (8003e10 <HAL_GPIO_Init+0x308>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <HAL_GPIO_Init+0x1f0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a4a      	ldr	r2, [pc, #296]	; (8003e14 <HAL_GPIO_Init+0x30c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_GPIO_Init+0x1ec>
 8003cf0:	2306      	movs	r3, #6
 8003cf2:	e00c      	b.n	8003d0e <HAL_GPIO_Init+0x206>
 8003cf4:	2307      	movs	r3, #7
 8003cf6:	e00a      	b.n	8003d0e <HAL_GPIO_Init+0x206>
 8003cf8:	2305      	movs	r3, #5
 8003cfa:	e008      	b.n	8003d0e <HAL_GPIO_Init+0x206>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	e006      	b.n	8003d0e <HAL_GPIO_Init+0x206>
 8003d00:	2303      	movs	r3, #3
 8003d02:	e004      	b.n	8003d0e <HAL_GPIO_Init+0x206>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e002      	b.n	8003d0e <HAL_GPIO_Init+0x206>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_GPIO_Init+0x206>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	f002 0203 	and.w	r2, r2, #3
 8003d14:	0092      	lsls	r2, r2, #2
 8003d16:	4093      	lsls	r3, r2
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d1e:	4937      	ldr	r1, [pc, #220]	; (8003dfc <HAL_GPIO_Init+0x2f4>)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	089b      	lsrs	r3, r3, #2
 8003d24:	3302      	adds	r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d2c:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <HAL_GPIO_Init+0x310>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d50:	4a31      	ldr	r2, [pc, #196]	; (8003e18 <HAL_GPIO_Init+0x310>)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d56:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <HAL_GPIO_Init+0x310>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d7a:	4a27      	ldr	r2, [pc, #156]	; (8003e18 <HAL_GPIO_Init+0x310>)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_GPIO_Init+0x310>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003da4:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_GPIO_Init+0x310>)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_GPIO_Init+0x310>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003dce:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <HAL_GPIO_Init+0x310>)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f47f ae97 	bne.w	8003b18 <HAL_GPIO_Init+0x10>
  }
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	48000400 	.word	0x48000400
 8003e04:	48000800 	.word	0x48000800
 8003e08:	48000c00 	.word	0x48000c00
 8003e0c:	48001000 	.word	0x48001000
 8003e10:	48001400 	.word	0x48001400
 8003e14:	48001800 	.word	0x48001800
 8003e18:	40010400 	.word	0x40010400

08003e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	807b      	strh	r3, [r7, #2]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e2c:	787b      	ldrb	r3, [r7, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e38:	e002      	b.n	8003e40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d006      	beq.n	8003e70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e62:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fd f85a 	bl	8000f24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40010400 	.word	0x40010400

08003e7c <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e092      	b.n	8003fb8 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b05      	cmp	r3, #5
 8003e9c:	d101      	bne.n	8003ea2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e08a      	b.n	8003fb8 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d101      	bne.n	8003eb2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e082      	b.n	8003fb8 <HAL_OPAMP_Init+0x13c>

    /* Set OPAMP parameters */
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ebe:	4b40      	ldr	r3, [pc, #256]	; (8003fc0 <HAL_OPAMP_Init+0x144>)
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	4a3f      	ldr	r2, [pc, #252]	; (8003fc0 <HAL_OPAMP_Init+0x144>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6193      	str	r3, [r2, #24]
 8003eca:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <HAL_OPAMP_Init+0x144>)
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d103      	bne.n	8003eea <HAL_OPAMP_Init+0x6e>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fe fa34 	bl	8002358 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d003      	beq.n	8003f00 <HAL_OPAMP_Init+0x84>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b60      	cmp	r3, #96	; 0x60
 8003efe:	d125      	bne.n	8003f4c <HAL_OPAMP_Init+0xd0>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_OPAMP_Init+0x148>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6851      	ldr	r1, [r2, #4]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68d2      	ldr	r2, [r2, #12]
 8003f12:	4311      	orrs	r1, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6912      	ldr	r2, [r2, #16]
 8003f18:	4311      	orrs	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6992      	ldr	r2, [r2, #24]
 8003f1e:	4311      	orrs	r1, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	69d2      	ldr	r2, [r2, #28]
 8003f24:	4311      	orrs	r1, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6a12      	ldr	r2, [r2, #32]
 8003f2a:	4311      	orrs	r1, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f30:	4311      	orrs	r1, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f36:	04d2      	lsls	r2, r2, #19
 8003f38:	4311      	orrs	r1, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f3e:	0612      	lsls	r2, r2, #24
 8003f40:	4311      	orrs	r1, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	430b      	orrs	r3, r1
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e02a      	b.n	8003fa2 <HAL_OPAMP_Init+0x126>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <HAL_OPAMP_Init+0x148>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6851      	ldr	r1, [r2, #4]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6892      	ldr	r2, [r2, #8]
 8003f5e:	4311      	orrs	r1, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68d2      	ldr	r2, [r2, #12]
 8003f64:	4311      	orrs	r1, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6912      	ldr	r2, [r2, #16]
 8003f6a:	4311      	orrs	r1, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6952      	ldr	r2, [r2, #20]
 8003f70:	4311      	orrs	r1, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6992      	ldr	r2, [r2, #24]
 8003f76:	4311      	orrs	r1, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	69d2      	ldr	r2, [r2, #28]
 8003f7c:	4311      	orrs	r1, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6a12      	ldr	r2, [r2, #32]
 8003f82:	4311      	orrs	r1, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f88:	4311      	orrs	r1, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f8e:	04d2      	lsls	r2, r2, #19
 8003f90:	4311      	orrs	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f96:	0612      	lsls	r2, r2, #24
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <HAL_OPAMP_Init+0x13a>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	e0003811 	.word	0xe0003811

08003fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	1d3b      	adds	r3, r7, #4
 8003fd2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd4:	1d3b      	adds	r3, r7, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f000 bf01 	b.w	8004de4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8160 	beq.w	80042b2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ff2:	4bae      	ldr	r3, [pc, #696]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d00c      	beq.n	8004018 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ffe:	4bab      	ldr	r3, [pc, #684]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b08      	cmp	r3, #8
 8004008:	d159      	bne.n	80040be <HAL_RCC_OscConfig+0xf6>
 800400a:	4ba8      	ldr	r3, [pc, #672]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d152      	bne.n	80040be <HAL_RCC_OscConfig+0xf6>
 8004018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800401c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004024:	fa93 f3a3 	rbit	r3, r3
 8004028:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800402c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d102      	bne.n	800404a <HAL_RCC_OscConfig+0x82>
 8004044:	4b99      	ldr	r3, [pc, #612]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	e015      	b.n	8004076 <HAL_RCC_OscConfig+0xae>
 800404a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800404e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004056:	fa93 f3a3 	rbit	r3, r3
 800405a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800405e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004062:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004066:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004072:	4b8e      	ldr	r3, [pc, #568]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800407a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800407e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004082:	fa92 f2a2 	rbit	r2, r2
 8004086:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800408a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800408e:	fab2 f282 	clz	r2, r2
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	f042 0220 	orr.w	r2, r2, #32
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	f002 021f 	and.w	r2, r2, #31
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f202 	lsl.w	r2, r1, r2
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8102 	beq.w	80042b0 <HAL_RCC_OscConfig+0x2e8>
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 80fc 	bne.w	80042b0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f000 be93 	b.w	8004de4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c8:	d106      	bne.n	80040d8 <HAL_RCC_OscConfig+0x110>
 80040ca:	4b78      	ldr	r3, [pc, #480]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a77      	ldr	r2, [pc, #476]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e030      	b.n	800413a <HAL_RCC_OscConfig+0x172>
 80040d8:	1d3b      	adds	r3, r7, #4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0x134>
 80040e2:	4b72      	ldr	r3, [pc, #456]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a71      	ldr	r2, [pc, #452]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 80040e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b6f      	ldr	r3, [pc, #444]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6e      	ldr	r2, [pc, #440]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 80040f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e01e      	b.n	800413a <HAL_RCC_OscConfig+0x172>
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004106:	d10c      	bne.n	8004122 <HAL_RCC_OscConfig+0x15a>
 8004108:	4b68      	ldr	r3, [pc, #416]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a67      	ldr	r2, [pc, #412]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 800410e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a64      	ldr	r2, [pc, #400]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 800411a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e00b      	b.n	800413a <HAL_RCC_OscConfig+0x172>
 8004122:	4b62      	ldr	r3, [pc, #392]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a61      	ldr	r2, [pc, #388]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8004128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b5f      	ldr	r3, [pc, #380]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a5e      	ldr	r2, [pc, #376]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8004134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800413a:	1d3b      	adds	r3, r7, #4
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d059      	beq.n	80041f8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fe fc6a 	bl	8002a1c <HAL_GetTick>
 8004148:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414c:	e00a      	b.n	8004164 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800414e:	f7fe fc65 	bl	8002a1c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d902      	bls.n	8004164 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	f000 be40 	b.w	8004de4 <HAL_RCC_OscConfig+0xe1c>
 8004164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004168:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004178:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d102      	bne.n	8004196 <HAL_RCC_OscConfig+0x1ce>
 8004190:	4b46      	ldr	r3, [pc, #280]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	e015      	b.n	80041c2 <HAL_RCC_OscConfig+0x1fa>
 8004196:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800419a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80041aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80041b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041c6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80041ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80041ce:	fa92 f2a2 	rbit	r2, r2
 80041d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80041d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80041da:	fab2 f282 	clz	r2, r2
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f042 0220 	orr.w	r2, r2, #32
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	f002 021f 	and.w	r2, r2, #31
 80041ea:	2101      	movs	r1, #1
 80041ec:	fa01 f202 	lsl.w	r2, r1, r2
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0ab      	beq.n	800414e <HAL_RCC_OscConfig+0x186>
 80041f6:	e05c      	b.n	80042b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fe fc10 	bl	8002a1c <HAL_GetTick>
 80041fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004200:	e00a      	b.n	8004218 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004202:	f7fe fc0b 	bl	8002a1c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d902      	bls.n	8004218 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	f000 bde6 	b.w	8004de4 <HAL_RCC_OscConfig+0xe1c>
 8004218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800421c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800422c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d102      	bne.n	800424a <HAL_RCC_OscConfig+0x282>
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	e015      	b.n	8004276 <HAL_RCC_OscConfig+0x2ae>
 800424a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800424e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800425e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004262:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004266:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004272:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <HAL_RCC_OscConfig+0x2e4>)
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800427a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800427e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004282:	fa92 f2a2 	rbit	r2, r2
 8004286:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800428a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800428e:	fab2 f282 	clz	r2, r2
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	f042 0220 	orr.w	r2, r2, #32
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	f002 021f 	and.w	r2, r2, #31
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f202 	lsl.w	r2, r1, r2
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1ab      	bne.n	8004202 <HAL_RCC_OscConfig+0x23a>
 80042aa:	e002      	b.n	80042b2 <HAL_RCC_OscConfig+0x2ea>
 80042ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8170 	beq.w	80045a2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042c2:	4bd0      	ldr	r3, [pc, #832]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00c      	beq.n	80042e8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042ce:	4bcd      	ldr	r3, [pc, #820]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d16d      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3ee>
 80042da:	4bca      	ldr	r3, [pc, #808]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80042e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e6:	d166      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3ee>
 80042e8:	2302      	movs	r3, #2
 80042ea:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80042fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b01      	cmp	r3, #1
 8004310:	d102      	bne.n	8004318 <HAL_RCC_OscConfig+0x350>
 8004312:	4bbc      	ldr	r3, [pc, #752]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	e013      	b.n	8004340 <HAL_RCC_OscConfig+0x378>
 8004318:	2302      	movs	r3, #2
 800431a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800432a:	2302      	movs	r3, #2
 800432c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004330:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004334:	fa93 f3a3 	rbit	r3, r3
 8004338:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800433c:	4bb1      	ldr	r3, [pc, #708]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2202      	movs	r2, #2
 8004342:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004346:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800434a:	fa92 f2a2 	rbit	r2, r2
 800434e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004352:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004356:	fab2 f282 	clz	r2, r2
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	f042 0220 	orr.w	r2, r2, #32
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	f002 021f 	and.w	r2, r2, #31
 8004366:	2101      	movs	r1, #1
 8004368:	fa01 f202 	lsl.w	r2, r1, r2
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <HAL_RCC_OscConfig+0x3ba>
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d002      	beq.n	8004382 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	f000 bd31 	b.w	8004de4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004382:	4ba0      	ldr	r3, [pc, #640]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	21f8      	movs	r1, #248	; 0xf8
 8004392:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800439a:	fa91 f1a1 	rbit	r1, r1
 800439e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80043a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80043a6:	fab1 f181 	clz	r1, r1
 80043aa:	b2c9      	uxtb	r1, r1
 80043ac:	408b      	lsls	r3, r1
 80043ae:	4995      	ldr	r1, [pc, #596]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b4:	e0f5      	b.n	80045a2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b6:	1d3b      	adds	r3, r7, #4
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8085 	beq.w	80044cc <HAL_RCC_OscConfig+0x504>
 80043c2:	2301      	movs	r3, #1
 80043c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80043d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d8:	fab3 f383 	clz	r3, r3
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	461a      	mov	r2, r3
 80043ea:	2301      	movs	r3, #1
 80043ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ee:	f7fe fb15 	bl	8002a1c <HAL_GetTick>
 80043f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f6:	e00a      	b.n	800440e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f8:	f7fe fb10 	bl	8002a1c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d902      	bls.n	800440e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	f000 bceb 	b.w	8004de4 <HAL_RCC_OscConfig+0xe1c>
 800440e:	2302      	movs	r3, #2
 8004410:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004414:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004420:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	fab3 f383 	clz	r3, r3
 8004428:	b2db      	uxtb	r3, r3
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d102      	bne.n	800443e <HAL_RCC_OscConfig+0x476>
 8004438:	4b72      	ldr	r3, [pc, #456]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	e013      	b.n	8004466 <HAL_RCC_OscConfig+0x49e>
 800443e:	2302      	movs	r3, #2
 8004440:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004444:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004448:	fa93 f3a3 	rbit	r3, r3
 800444c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004450:	2302      	movs	r3, #2
 8004452:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004456:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004462:	4b68      	ldr	r3, [pc, #416]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2202      	movs	r2, #2
 8004468:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800446c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004470:	fa92 f2a2 	rbit	r2, r2
 8004474:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004478:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800447c:	fab2 f282 	clz	r2, r2
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	f042 0220 	orr.w	r2, r2, #32
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	f002 021f 	and.w	r2, r2, #31
 800448c:	2101      	movs	r1, #1
 800448e:	fa01 f202 	lsl.w	r2, r1, r2
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0af      	beq.n	80043f8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	4b5a      	ldr	r3, [pc, #360]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a0:	1d3b      	adds	r3, r7, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	21f8      	movs	r1, #248	; 0xf8
 80044a8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80044b0:	fa91 f1a1 	rbit	r1, r1
 80044b4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80044b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80044bc:	fab1 f181 	clz	r1, r1
 80044c0:	b2c9      	uxtb	r1, r1
 80044c2:	408b      	lsls	r3, r1
 80044c4:	494f      	ldr	r1, [pc, #316]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
 80044ca:	e06a      	b.n	80045a2 <HAL_RCC_OscConfig+0x5da>
 80044cc:	2301      	movs	r3, #1
 80044ce:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80044d6:	fa93 f3a3 	rbit	r3, r3
 80044da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80044de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	461a      	mov	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fe fa90 	bl	8002a1c <HAL_GetTick>
 80044fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004502:	f7fe fa8b 	bl	8002a1c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d902      	bls.n	8004518 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	f000 bc66 	b.w	8004de4 <HAL_RCC_OscConfig+0xe1c>
 8004518:	2302      	movs	r3, #2
 800451a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004522:	fa93 f3a3 	rbit	r3, r3
 8004526:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800452a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d102      	bne.n	8004548 <HAL_RCC_OscConfig+0x580>
 8004542:	4b30      	ldr	r3, [pc, #192]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	e013      	b.n	8004570 <HAL_RCC_OscConfig+0x5a8>
 8004548:	2302      	movs	r3, #2
 800454a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800455a:	2302      	movs	r3, #2
 800455c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004560:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <HAL_RCC_OscConfig+0x63c>)
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2202      	movs	r2, #2
 8004572:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004576:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800457a:	fa92 f2a2 	rbit	r2, r2
 800457e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004582:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004586:	fab2 f282 	clz	r2, r2
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	f042 0220 	orr.w	r2, r2, #32
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	f002 021f 	and.w	r2, r2, #31
 8004596:	2101      	movs	r1, #1
 8004598:	fa01 f202 	lsl.w	r2, r1, r2
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1af      	bne.n	8004502 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80da 	beq.w	8004766 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045b2:	1d3b      	adds	r3, r7, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d069      	beq.n	8004690 <HAL_RCC_OscConfig+0x6c8>
 80045bc:	2301      	movs	r3, #1
 80045be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80045ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCC_OscConfig+0x640>)
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	461a      	mov	r2, r3
 80045e2:	2301      	movs	r3, #1
 80045e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e6:	f7fe fa19 	bl	8002a1c <HAL_GetTick>
 80045ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ee:	e00d      	b.n	800460c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f0:	f7fe fa14 	bl	8002a1c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d905      	bls.n	800460c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e3ef      	b.n	8004de4 <HAL_RCC_OscConfig+0xe1c>
 8004604:	40021000 	.word	0x40021000
 8004608:	10908120 	.word	0x10908120
 800460c:	2302      	movs	r3, #2
 800460e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004616:	fa93 f2a3 	rbit	r2, r3
 800461a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004624:	2202      	movs	r2, #2
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	fa93 f2a3 	rbit	r2, r3
 8004632:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800463c:	2202      	movs	r2, #2
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	fa93 f2a3 	rbit	r2, r3
 800464a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800464e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004650:	4ba4      	ldr	r3, [pc, #656]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004654:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004658:	2102      	movs	r1, #2
 800465a:	6019      	str	r1, [r3, #0]
 800465c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	fa93 f1a3 	rbit	r1, r3
 8004666:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800466a:	6019      	str	r1, [r3, #0]
  return result;
 800466c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	fab3 f383 	clz	r3, r3
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2101      	movs	r1, #1
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0b0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x628>
 800468e:	e06a      	b.n	8004766 <HAL_RCC_OscConfig+0x79e>
 8004690:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	fa93 f2a3 	rbit	r2, r3
 80046a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80046a6:	601a      	str	r2, [r3, #0]
  return result;
 80046a8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80046ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	4b8c      	ldr	r3, [pc, #560]	; (80048e8 <HAL_RCC_OscConfig+0x920>)
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	461a      	mov	r2, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c2:	f7fe f9ab 	bl	8002a1c <HAL_GetTick>
 80046c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ca:	e009      	b.n	80046e0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046cc:	f7fe f9a6 	bl	8002a1c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e381      	b.n	8004de4 <HAL_RCC_OscConfig+0xe1c>
 80046e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80046e4:	2202      	movs	r2, #2
 80046e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	fa93 f2a3 	rbit	r2, r3
 80046f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80046fc:	2202      	movs	r2, #2
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	fa93 f2a3 	rbit	r2, r3
 800470a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004714:	2202      	movs	r2, #2
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	fa93 f2a3 	rbit	r2, r3
 8004722:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004726:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b6e      	ldr	r3, [pc, #440]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 800472a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800472c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004730:	2102      	movs	r1, #2
 8004732:	6019      	str	r1, [r3, #0]
 8004734:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	fa93 f1a3 	rbit	r1, r3
 800473e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004742:	6019      	str	r1, [r3, #0]
  return result;
 8004744:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	2101      	movs	r1, #1
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1b2      	bne.n	80046cc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004766:	1d3b      	adds	r3, r7, #4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8157 	beq.w	8004a24 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477c:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d112      	bne.n	80047ae <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004788:	4b56      	ldr	r3, [pc, #344]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	4a55      	ldr	r2, [pc, #340]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 800478e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004792:	61d3      	str	r3, [r2, #28]
 8004794:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800479c:	f107 030c 	add.w	r3, r7, #12
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	f107 030c 	add.w	r3, r7, #12
 80047a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	4b4f      	ldr	r3, [pc, #316]	; (80048ec <HAL_RCC_OscConfig+0x924>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d11a      	bne.n	80047f0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ba:	4b4c      	ldr	r3, [pc, #304]	; (80048ec <HAL_RCC_OscConfig+0x924>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a4b      	ldr	r2, [pc, #300]	; (80048ec <HAL_RCC_OscConfig+0x924>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c6:	f7fe f929 	bl	8002a1c <HAL_GetTick>
 80047ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ce:	e009      	b.n	80047e4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d0:	f7fe f924 	bl	8002a1c <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b64      	cmp	r3, #100	; 0x64
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e2ff      	b.n	8004de4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	4b41      	ldr	r3, [pc, #260]	; (80048ec <HAL_RCC_OscConfig+0x924>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0ef      	beq.n	80047d0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f0:	1d3b      	adds	r3, r7, #4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d106      	bne.n	8004808 <HAL_RCC_OscConfig+0x840>
 80047fa:	4b3a      	ldr	r3, [pc, #232]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	4a39      	ldr	r2, [pc, #228]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004800:	f043 0301 	orr.w	r3, r3, #1
 8004804:	6213      	str	r3, [r2, #32]
 8004806:	e02f      	b.n	8004868 <HAL_RCC_OscConfig+0x8a0>
 8004808:	1d3b      	adds	r3, r7, #4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10c      	bne.n	800482c <HAL_RCC_OscConfig+0x864>
 8004812:	4b34      	ldr	r3, [pc, #208]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4a33      	ldr	r2, [pc, #204]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	6213      	str	r3, [r2, #32]
 800481e:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	4a30      	ldr	r2, [pc, #192]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004824:	f023 0304 	bic.w	r3, r3, #4
 8004828:	6213      	str	r3, [r2, #32]
 800482a:	e01d      	b.n	8004868 <HAL_RCC_OscConfig+0x8a0>
 800482c:	1d3b      	adds	r3, r7, #4
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x888>
 8004836:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4a2a      	ldr	r2, [pc, #168]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 800483c:	f043 0304 	orr.w	r3, r3, #4
 8004840:	6213      	str	r3, [r2, #32]
 8004842:	4b28      	ldr	r3, [pc, #160]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	4a27      	ldr	r2, [pc, #156]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	6213      	str	r3, [r2, #32]
 800484e:	e00b      	b.n	8004868 <HAL_RCC_OscConfig+0x8a0>
 8004850:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	4a23      	ldr	r2, [pc, #140]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	6213      	str	r3, [r2, #32]
 800485c:	4b21      	ldr	r3, [pc, #132]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	4a20      	ldr	r2, [pc, #128]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 8004862:	f023 0304 	bic.w	r3, r3, #4
 8004866:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004868:	1d3b      	adds	r3, r7, #4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d06a      	beq.n	8004948 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004872:	f7fe f8d3 	bl	8002a1c <HAL_GetTick>
 8004876:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487a:	e00b      	b.n	8004894 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800487c:	f7fe f8ce 	bl	8002a1c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f241 3288 	movw	r2, #5000	; 0x1388
 800488c:	4293      	cmp	r3, r2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e2a7      	b.n	8004de4 <HAL_RCC_OscConfig+0xe1c>
 8004894:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004898:	2202      	movs	r2, #2
 800489a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	fa93 f2a3 	rbit	r2, r3
 80048a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80048b0:	2202      	movs	r2, #2
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	fa93 f2a3 	rbit	r2, r3
 80048be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80048c2:	601a      	str	r2, [r3, #0]
  return result;
 80048c4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80048c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ca:	fab3 f383 	clz	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f043 0302 	orr.w	r3, r3, #2
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d108      	bne.n	80048f0 <HAL_RCC_OscConfig+0x928>
 80048de:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <HAL_RCC_OscConfig+0x91c>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	e013      	b.n	800490c <HAL_RCC_OscConfig+0x944>
 80048e4:	40021000 	.word	0x40021000
 80048e8:	10908120 	.word	0x10908120
 80048ec:	40007000 	.word	0x40007000
 80048f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80048f4:	2202      	movs	r2, #2
 80048f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	fa93 f2a3 	rbit	r2, r3
 8004902:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	4bc0      	ldr	r3, [pc, #768]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004910:	2102      	movs	r1, #2
 8004912:	6011      	str	r1, [r2, #0]
 8004914:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	fa92 f1a2 	rbit	r1, r2
 800491e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004922:	6011      	str	r1, [r2, #0]
  return result;
 8004924:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	fab2 f282 	clz	r2, r2
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	f002 021f 	and.w	r2, r2, #31
 800493a:	2101      	movs	r1, #1
 800493c:	fa01 f202 	lsl.w	r2, r1, r2
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d09a      	beq.n	800487c <HAL_RCC_OscConfig+0x8b4>
 8004946:	e063      	b.n	8004a10 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004948:	f7fe f868 	bl	8002a1c <HAL_GetTick>
 800494c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004950:	e00b      	b.n	800496a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fe f863 	bl	8002a1c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e23c      	b.n	8004de4 <HAL_RCC_OscConfig+0xe1c>
 800496a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800496e:	2202      	movs	r2, #2
 8004970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004972:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	fa93 f2a3 	rbit	r2, r3
 800497c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004986:	2202      	movs	r2, #2
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	fa93 f2a3 	rbit	r2, r3
 8004994:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004998:	601a      	str	r2, [r3, #0]
  return result;
 800499a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800499e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a0:	fab3 f383 	clz	r3, r3
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f043 0302 	orr.w	r3, r3, #2
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d102      	bne.n	80049ba <HAL_RCC_OscConfig+0x9f2>
 80049b4:	4b95      	ldr	r3, [pc, #596]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	e00d      	b.n	80049d6 <HAL_RCC_OscConfig+0xa0e>
 80049ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80049be:	2202      	movs	r2, #2
 80049c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	fa93 f2a3 	rbit	r2, r3
 80049cc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	4b8e      	ldr	r3, [pc, #568]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80049da:	2102      	movs	r1, #2
 80049dc:	6011      	str	r1, [r2, #0]
 80049de:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	fa92 f1a2 	rbit	r1, r2
 80049e8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80049ec:	6011      	str	r1, [r2, #0]
  return result;
 80049ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	fab2 f282 	clz	r2, r2
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	f002 021f 	and.w	r2, r2, #31
 8004a04:	2101      	movs	r1, #1
 8004a06:	fa01 f202 	lsl.w	r2, r1, r2
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1a0      	bne.n	8004952 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a10:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d105      	bne.n	8004a24 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a18:	4b7c      	ldr	r3, [pc, #496]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	4a7b      	ldr	r2, [pc, #492]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a24:	1d3b      	adds	r3, r7, #4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 81d9 	beq.w	8004de2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a30:	4b76      	ldr	r3, [pc, #472]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 030c 	and.w	r3, r3, #12
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	f000 81a6 	beq.w	8004d8a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a3e:	1d3b      	adds	r3, r7, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	f040 811e 	bne.w	8004c86 <HAL_RCC_OscConfig+0xcbe>
 8004a4a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004a4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a54:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	fa93 f2a3 	rbit	r2, r3
 8004a5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004a62:	601a      	str	r2, [r3, #0]
  return result;
 8004a64:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004a68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fd ffcc 	bl	8002a1c <HAL_GetTick>
 8004a84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a88:	e009      	b.n	8004a9e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8a:	f7fd ffc7 	bl	8002a1c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e1a2      	b.n	8004de4 <HAL_RCC_OscConfig+0xe1c>
 8004a9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	fa93 f2a3 	rbit	r2, r3
 8004ab2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004ab6:	601a      	str	r2, [r3, #0]
  return result;
 8004ab8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004abc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004abe:	fab3 f383 	clz	r3, r3
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d102      	bne.n	8004ad8 <HAL_RCC_OscConfig+0xb10>
 8004ad2:	4b4e      	ldr	r3, [pc, #312]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	e01b      	b.n	8004b10 <HAL_RCC_OscConfig+0xb48>
 8004ad8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004adc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	fa93 f2a3 	rbit	r2, r3
 8004aec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004af6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	fa93 f2a3 	rbit	r2, r3
 8004b06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004b14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b18:	6011      	str	r1, [r2, #0]
 8004b1a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	fa92 f1a2 	rbit	r1, r2
 8004b24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b28:	6011      	str	r1, [r2, #0]
  return result;
 8004b2a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	fab2 f282 	clz	r2, r2
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	f042 0220 	orr.w	r2, r2, #32
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	f002 021f 	and.w	r2, r2, #31
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f202 	lsl.w	r2, r1, r2
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d19e      	bne.n	8004a8a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b4c:	4b2f      	ldr	r3, [pc, #188]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	f023 020f 	bic.w	r2, r3, #15
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	492c      	ldr	r1, [pc, #176]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004b60:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004b68:	1d3b      	adds	r3, r7, #4
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6a19      	ldr	r1, [r3, #32]
 8004b6e:	1d3b      	adds	r3, r7, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	4925      	ldr	r1, [pc, #148]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]
 8004b7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	fa93 f2a3 	rbit	r2, r3
 8004b90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b94:	601a      	str	r2, [r3, #0]
  return result;
 8004b96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b9a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9c:	fab3 f383 	clz	r3, r3
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ba6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	461a      	mov	r2, r3
 8004bae:	2301      	movs	r3, #1
 8004bb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fd ff33 	bl	8002a1c <HAL_GetTick>
 8004bb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bba:	e009      	b.n	8004bd0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fd ff2e 	bl	8002a1c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e109      	b.n	8004de4 <HAL_RCC_OscConfig+0xe1c>
 8004bd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	fa93 f2a3 	rbit	r2, r3
 8004be4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004be8:	601a      	str	r2, [r3, #0]
  return result;
 8004bea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004bee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bf0:	fab3 f383 	clz	r3, r3
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d105      	bne.n	8004c10 <HAL_RCC_OscConfig+0xc48>
 8004c04:	4b01      	ldr	r3, [pc, #4]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	e01e      	b.n	8004c48 <HAL_RCC_OscConfig+0xc80>
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	fa93 f2a3 	rbit	r2, r3
 8004c24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	fa93 f2a3 	rbit	r2, r3
 8004c3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <HAL_RCC_OscConfig+0xe28>)
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004c4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c50:	6011      	str	r1, [r2, #0]
 8004c52:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	fa92 f1a2 	rbit	r1, r2
 8004c5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c60:	6011      	str	r1, [r2, #0]
  return result;
 8004c62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	fab2 f282 	clz	r2, r2
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	f042 0220 	orr.w	r2, r2, #32
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	f002 021f 	and.w	r2, r2, #31
 8004c78:	2101      	movs	r1, #1
 8004c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d09b      	beq.n	8004bbc <HAL_RCC_OscConfig+0xbf4>
 8004c84:	e0ad      	b.n	8004de2 <HAL_RCC_OscConfig+0xe1a>
 8004c86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	fa93 f2a3 	rbit	r2, r3
 8004c9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c9e:	601a      	str	r2, [r3, #0]
  return result;
 8004ca0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ca4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca6:	fab3 f383 	clz	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fd feae 	bl	8002a1c <HAL_GetTick>
 8004cc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc4:	e009      	b.n	8004cda <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc6:	f7fd fea9 	bl	8002a1c <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e084      	b.n	8004de4 <HAL_RCC_OscConfig+0xe1c>
 8004cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	fa93 f2a3 	rbit	r2, r3
 8004cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cf2:	601a      	str	r2, [r3, #0]
  return result;
 8004cf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cf8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cfa:	fab3 f383 	clz	r3, r3
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d102      	bne.n	8004d14 <HAL_RCC_OscConfig+0xd4c>
 8004d0e:	4b38      	ldr	r3, [pc, #224]	; (8004df0 <HAL_RCC_OscConfig+0xe28>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	e01b      	b.n	8004d4c <HAL_RCC_OscConfig+0xd84>
 8004d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	fa93 f2a3 	rbit	r2, r3
 8004d28:	f107 0320 	add.w	r3, r7, #32
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	f107 031c 	add.w	r3, r7, #28
 8004d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f107 031c 	add.w	r3, r7, #28
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	fa93 f2a3 	rbit	r2, r3
 8004d42:	f107 0318 	add.w	r3, r7, #24
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	4b29      	ldr	r3, [pc, #164]	; (8004df0 <HAL_RCC_OscConfig+0xe28>)
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	f107 0214 	add.w	r2, r7, #20
 8004d50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d54:	6011      	str	r1, [r2, #0]
 8004d56:	f107 0214 	add.w	r2, r7, #20
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	fa92 f1a2 	rbit	r1, r2
 8004d60:	f107 0210 	add.w	r2, r7, #16
 8004d64:	6011      	str	r1, [r2, #0]
  return result;
 8004d66:	f107 0210 	add.w	r2, r7, #16
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	fab2 f282 	clz	r2, r2
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	f042 0220 	orr.w	r2, r2, #32
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	f002 021f 	and.w	r2, r2, #31
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d19e      	bne.n	8004cc6 <HAL_RCC_OscConfig+0xcfe>
 8004d88:	e02b      	b.n	8004de2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e025      	b.n	8004de4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d98:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <HAL_RCC_OscConfig+0xe28>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004da0:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <HAL_RCC_OscConfig+0xe28>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004da8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004dac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004db0:	1d3b      	adds	r3, r7, #4
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d111      	bne.n	8004dde <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004dba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004dbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004dc2:	1d3b      	adds	r3, r7, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d108      	bne.n	8004dde <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dd0:	f003 020f 	and.w	r2, r3, #15
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d001      	beq.n	8004de2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000

08004df4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b09e      	sub	sp, #120	; 0x78
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e162      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b90      	ldr	r3, [pc, #576]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d910      	bls.n	8004e3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b8d      	ldr	r3, [pc, #564]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f023 0207 	bic.w	r2, r3, #7
 8004e22:	498b      	ldr	r1, [pc, #556]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2a:	4b89      	ldr	r3, [pc, #548]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e14a      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e48:	4b82      	ldr	r3, [pc, #520]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	497f      	ldr	r1, [pc, #508]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80dc 	beq.w	8005020 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d13c      	bne.n	8004eea <HAL_RCC_ClockConfig+0xf6>
 8004e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e78:	fa93 f3a3 	rbit	r3, r3
 8004e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e80:	fab3 f383 	clz	r3, r3
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d102      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xa6>
 8004e94:	4b6f      	ldr	r3, [pc, #444]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	e00f      	b.n	8004eba <HAL_RCC_ClockConfig+0xc6>
 8004e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea2:	fa93 f3a3 	rbit	r3, r3
 8004ea6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eac:	663b      	str	r3, [r7, #96]	; 0x60
 8004eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eb0:	fa93 f3a3 	rbit	r3, r3
 8004eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eb6:	4b67      	ldr	r3, [pc, #412]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ebe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ec0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ec2:	fa92 f2a2 	rbit	r2, r2
 8004ec6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004ec8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004eca:	fab2 f282 	clz	r2, r2
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	f042 0220 	orr.w	r2, r2, #32
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	f002 021f 	and.w	r2, r2, #31
 8004eda:	2101      	movs	r1, #1
 8004edc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d17b      	bne.n	8004fde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0f3      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d13c      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x178>
 8004ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ef6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efa:	fa93 f3a3 	rbit	r3, r3
 8004efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f02:	fab3 f383 	clz	r3, r3
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d102      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x128>
 8004f16:	4b4f      	ldr	r3, [pc, #316]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	e00f      	b.n	8004f3c <HAL_RCC_ClockConfig+0x148>
 8004f1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f24:	fa93 f3a3 	rbit	r3, r3
 8004f28:	647b      	str	r3, [r7, #68]	; 0x44
 8004f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f32:	fa93 f3a3 	rbit	r3, r3
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f38:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f40:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f44:	fa92 f2a2 	rbit	r2, r2
 8004f48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f4c:	fab2 f282 	clz	r2, r2
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	f042 0220 	orr.w	r2, r2, #32
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	f002 021f 	and.w	r2, r2, #31
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d13a      	bne.n	8004fde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0b2      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	fa93 f3a3 	rbit	r3, r3
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7a:	fab3 f383 	clz	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d102      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x1a0>
 8004f8e:	4b31      	ldr	r3, [pc, #196]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	e00d      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x1bc>
 8004f94:	2302      	movs	r3, #2
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	fa93 f3a3 	rbit	r3, r3
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	623b      	str	r3, [r7, #32]
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	fa93 f3a3 	rbit	r3, r3
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	4b29      	ldr	r3, [pc, #164]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	61ba      	str	r2, [r7, #24]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	fa92 f2a2 	rbit	r2, r2
 8004fba:	617a      	str	r2, [r7, #20]
  return result;
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	fab2 f282 	clz	r2, r2
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	f042 0220 	orr.w	r2, r2, #32
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	f002 021f 	and.w	r2, r2, #31
 8004fce:	2101      	movs	r1, #1
 8004fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e079      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	491a      	ldr	r1, [pc, #104]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff0:	f7fd fd14 	bl	8002a1c <HAL_GetTick>
 8004ff4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fd fd10 	bl	8002a1c <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	; 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e061      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b11      	ldr	r3, [pc, #68]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005020:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d214      	bcs.n	8005058 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b08      	ldr	r3, [pc, #32]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 0207 	bic.w	r2, r3, #7
 8005036:	4906      	ldr	r1, [pc, #24]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b04      	ldr	r3, [pc, #16]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d005      	beq.n	8005058 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e040      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
 8005050:	40022000 	.word	0x40022000
 8005054:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005064:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <HAL_RCC_ClockConfig+0x2e8>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	491a      	ldr	r1, [pc, #104]	; (80050dc <HAL_RCC_ClockConfig+0x2e8>)
 8005072:	4313      	orrs	r3, r2
 8005074:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005082:	4b16      	ldr	r3, [pc, #88]	; (80050dc <HAL_RCC_ClockConfig+0x2e8>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4912      	ldr	r1, [pc, #72]	; (80050dc <HAL_RCC_ClockConfig+0x2e8>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005096:	f000 f829 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 800509a:	4601      	mov	r1, r0
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <HAL_RCC_ClockConfig+0x2e8>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050a4:	22f0      	movs	r2, #240	; 0xf0
 80050a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	fa92 f2a2 	rbit	r2, r2
 80050ae:	60fa      	str	r2, [r7, #12]
  return result;
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	fab2 f282 	clz	r2, r2
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	40d3      	lsrs	r3, r2
 80050ba:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <HAL_RCC_ClockConfig+0x2ec>)
 80050bc:	5cd3      	ldrb	r3, [r2, r3]
 80050be:	fa21 f303 	lsr.w	r3, r1, r3
 80050c2:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <HAL_RCC_ClockConfig+0x2f0>)
 80050c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80050c6:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <HAL_RCC_ClockConfig+0x2f4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd fc62 	bl	8002994 <HAL_InitTick>
  
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3778      	adds	r7, #120	; 0x78
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000
 80050e0:	0800944c 	.word	0x0800944c
 80050e4:	20000000 	.word	0x20000000
 80050e8:	20000004 	.word	0x20000004

080050ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b08b      	sub	sp, #44	; 0x2c
 80050f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61fb      	str	r3, [r7, #28]
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	2300      	movs	r3, #0
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005106:	4b2a      	ldr	r3, [pc, #168]	; (80051b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b04      	cmp	r3, #4
 8005114:	d002      	beq.n	800511c <HAL_RCC_GetSysClockFreq+0x30>
 8005116:	2b08      	cmp	r3, #8
 8005118:	d003      	beq.n	8005122 <HAL_RCC_GetSysClockFreq+0x36>
 800511a:	e03f      	b.n	800519c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800511e:	623b      	str	r3, [r7, #32]
      break;
 8005120:	e03f      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005128:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800512c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	fa92 f2a2 	rbit	r2, r2
 8005134:	607a      	str	r2, [r7, #4]
  return result;
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	fab2 f282 	clz	r2, r2
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	40d3      	lsrs	r3, r2
 8005140:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005142:	5cd3      	ldrb	r3, [r2, r3]
 8005144:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005146:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	220f      	movs	r2, #15
 8005150:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	fa92 f2a2 	rbit	r2, r2
 8005158:	60fa      	str	r2, [r7, #12]
  return result;
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	fab2 f282 	clz	r2, r2
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	40d3      	lsrs	r3, r2
 8005164:	4a15      	ldr	r2, [pc, #84]	; (80051bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005166:	5cd3      	ldrb	r3, [r2, r3]
 8005168:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005174:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	fbb2 f2f3 	udiv	r2, r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	fb02 f303 	mul.w	r3, r2, r3
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
 8005184:	e007      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005186:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	fbb2 f2f3 	udiv	r2, r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	623b      	str	r3, [r7, #32]
      break;
 800519a:	e002      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800519e:	623b      	str	r3, [r7, #32]
      break;
 80051a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a2:	6a3b      	ldr	r3, [r7, #32]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	372c      	adds	r7, #44	; 0x2c
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40021000 	.word	0x40021000
 80051b4:	007a1200 	.word	0x007a1200
 80051b8:	08009464 	.word	0x08009464
 80051bc:	08009474 	.word	0x08009474

080051c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c4:	4b03      	ldr	r3, [pc, #12]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051c6:	681b      	ldr	r3, [r3, #0]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000000 	.word	0x20000000

080051d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80051de:	f7ff ffef 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 80051e2:	4601      	mov	r1, r0
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80051f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	fa92 f2a2 	rbit	r2, r2
 80051f8:	603a      	str	r2, [r7, #0]
  return result;
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	fab2 f282 	clz	r2, r2
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	40d3      	lsrs	r3, r2
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005206:	5cd3      	ldrb	r3, [r2, r3]
 8005208:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40021000 	.word	0x40021000
 8005218:	0800945c 	.word	0x0800945c

0800521c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005222:	f7ff ffcd 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 8005226:	4601      	mov	r1, r0
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005230:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005234:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	fa92 f2a2 	rbit	r2, r2
 800523c:	603a      	str	r2, [r7, #0]
  return result;
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	fab2 f282 	clz	r2, r2
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	40d3      	lsrs	r3, r2
 8005248:	4a04      	ldr	r2, [pc, #16]	; (800525c <HAL_RCC_GetPCLK2Freq+0x40>)
 800524a:	5cd3      	ldrb	r3, [r2, r3]
 800524c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40021000 	.word	0x40021000
 800525c:	0800945c 	.word	0x0800945c

08005260 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b092      	sub	sp, #72	; 0x48
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80d7 	beq.w	800542c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800527e:	2300      	movs	r3, #0
 8005280:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005284:	4b4e      	ldr	r3, [pc, #312]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10e      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005290:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	4a4a      	ldr	r2, [pc, #296]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529a:	61d3      	str	r3, [r2, #28]
 800529c:	4b48      	ldr	r3, [pc, #288]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ae:	4b45      	ldr	r3, [pc, #276]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d118      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ba:	4b42      	ldr	r3, [pc, #264]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a41      	ldr	r2, [pc, #260]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c6:	f7fd fba9 	bl	8002a1c <HAL_GetTick>
 80052ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	e008      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ce:	f7fd fba5 	bl	8002a1c <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b64      	cmp	r3, #100	; 0x64
 80052da:	d901      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e1d6      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e0:	4b38      	ldr	r3, [pc, #224]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052ec:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 8084 	beq.w	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005308:	429a      	cmp	r2, r3
 800530a:	d07c      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800530c:	4b2c      	ldr	r3, [pc, #176]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800531a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	fa93 f3a3 	rbit	r3, r3
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005326:	fab3 f383 	clz	r3, r3
 800532a:	b2db      	uxtb	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	4b26      	ldr	r3, [pc, #152]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	461a      	mov	r2, r3
 8005336:	2301      	movs	r3, #1
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800533e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	fa93 f3a3 	rbit	r3, r3
 8005346:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800534a:	fab3 f383 	clz	r3, r3
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	461a      	mov	r2, r3
 800535a:	2300      	movs	r3, #0
 800535c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800535e:	4a18      	ldr	r2, [pc, #96]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005362:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d04b      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536e:	f7fd fb55 	bl	8002a1c <HAL_GetTick>
 8005372:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005374:	e00a      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005376:	f7fd fb51 	bl	8002a1c <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e180      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800538c:	2302      	movs	r3, #2
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	fa93 f3a3 	rbit	r3, r3
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
 8005398:	2302      	movs	r3, #2
 800539a:	623b      	str	r3, [r7, #32]
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	fa93 f3a3 	rbit	r3, r3
 80053a2:	61fb      	str	r3, [r7, #28]
  return result;
 80053a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a6:	fab3 f383 	clz	r3, r3
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	f043 0302 	orr.w	r3, r3, #2
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d108      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80053ba:	4b01      	ldr	r3, [pc, #4]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	e00d      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80053c0:	40021000 	.word	0x40021000
 80053c4:	40007000 	.word	0x40007000
 80053c8:	10908100 	.word	0x10908100
 80053cc:	2302      	movs	r3, #2
 80053ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	4ba0      	ldr	r3, [pc, #640]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	2202      	movs	r2, #2
 80053de:	613a      	str	r2, [r7, #16]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	fa92 f2a2 	rbit	r2, r2
 80053e6:	60fa      	str	r2, [r7, #12]
  return result;
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	fab2 f282 	clz	r2, r2
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	f002 021f 	and.w	r2, r2, #31
 80053fa:	2101      	movs	r1, #1
 80053fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0b7      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005406:	4b95      	ldr	r3, [pc, #596]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	4992      	ldr	r1, [pc, #584]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005414:	4313      	orrs	r3, r2
 8005416:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005418:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800541c:	2b01      	cmp	r3, #1
 800541e:	d105      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005420:	4b8e      	ldr	r3, [pc, #568]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	4a8d      	ldr	r2, [pc, #564]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005438:	4b88      	ldr	r3, [pc, #544]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	f023 0203 	bic.w	r2, r3, #3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4985      	ldr	r1, [pc, #532]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d008      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005456:	4b81      	ldr	r3, [pc, #516]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	497e      	ldr	r1, [pc, #504]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005464:	4313      	orrs	r3, r2
 8005466:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005474:	4b79      	ldr	r3, [pc, #484]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4976      	ldr	r1, [pc, #472]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005492:	4b72      	ldr	r3, [pc, #456]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	f023 0210 	bic.w	r2, r3, #16
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	496f      	ldr	r1, [pc, #444]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80054b0:	4b6a      	ldr	r3, [pc, #424]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	4967      	ldr	r1, [pc, #412]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054ce:	4b63      	ldr	r3, [pc, #396]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	f023 0220 	bic.w	r2, r3, #32
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	4960      	ldr	r1, [pc, #384]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ec:	4b5b      	ldr	r3, [pc, #364]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	4958      	ldr	r1, [pc, #352]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800550a:	4b54      	ldr	r3, [pc, #336]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	4951      	ldr	r1, [pc, #324]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005528:	4b4c      	ldr	r3, [pc, #304]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	4949      	ldr	r1, [pc, #292]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005536:	4313      	orrs	r3, r2
 8005538:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005546:	4b45      	ldr	r3, [pc, #276]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	4942      	ldr	r1, [pc, #264]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005554:	4313      	orrs	r3, r2
 8005556:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005564:	4b3d      	ldr	r3, [pc, #244]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005568:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	493a      	ldr	r1, [pc, #232]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005572:	4313      	orrs	r3, r2
 8005574:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005582:	4b36      	ldr	r3, [pc, #216]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	4933      	ldr	r1, [pc, #204]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005590:	4313      	orrs	r3, r2
 8005592:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055a0:	4b2e      	ldr	r3, [pc, #184]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	492b      	ldr	r1, [pc, #172]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80055be:	4b27      	ldr	r3, [pc, #156]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	4924      	ldr	r1, [pc, #144]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80055dc:	4b1f      	ldr	r3, [pc, #124]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	491c      	ldr	r1, [pc, #112]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80055fa:	4b18      	ldr	r3, [pc, #96]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005606:	4915      	ldr	r1, [pc, #84]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005608:	4313      	orrs	r3, r2
 800560a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d008      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005618:	4b10      	ldr	r3, [pc, #64]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	490d      	ldr	r1, [pc, #52]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005626:	4313      	orrs	r3, r2
 8005628:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005642:	4906      	ldr	r1, [pc, #24]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005644:	4313      	orrs	r3, r2
 8005646:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005654:	4b01      	ldr	r3, [pc, #4]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	e002      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800565a:	bf00      	nop
 800565c:	40021000 	.word	0x40021000
 8005660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005668:	490b      	ldr	r1, [pc, #44]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800566a:	4313      	orrs	r3, r2
 800566c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005686:	4904      	ldr	r1, [pc, #16]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005688:	4313      	orrs	r3, r2
 800568a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3748      	adds	r7, #72	; 0x48
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40021000 	.word	0x40021000

0800569c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e084      	b.n	80057b8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d106      	bne.n	80056ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7fc fe91 	bl	80023f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056ee:	d902      	bls.n	80056f6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e002      	b.n	80056fc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005704:	d007      	beq.n	8005716 <HAL_SPI_Init+0x7a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800570e:	d002      	beq.n	8005716 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10b      	bne.n	8005736 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005726:	d903      	bls.n	8005730 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
 800572e:	e002      	b.n	8005736 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	ea42 0103 	orr.w	r1, r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	0c1b      	lsrs	r3, r3, #16
 8005776:	f003 0204 	and.w	r2, r3, #4
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	ea42 0103 	orr.w	r1, r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	430a      	orrs	r2, r1
 8005796:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69da      	ldr	r2, [r3, #28]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	099b      	lsrs	r3, r3, #6
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10f      	bne.n	8005804 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	099b      	lsrs	r3, r3, #6
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d004      	beq.n	8005804 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
    return;
 8005802:	e0d8      	b.n	80059b6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	085b      	lsrs	r3, r3, #1
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <HAL_SPI_IRQHandler+0x66>
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	09db      	lsrs	r3, r3, #7
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d004      	beq.n	8005826 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	4798      	blx	r3
    return;
 8005824:	e0c7      	b.n	80059b6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	095b      	lsrs	r3, r3, #5
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10c      	bne.n	800584c <HAL_SPI_IRQHandler+0x8c>
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	099b      	lsrs	r3, r3, #6
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80b5 	beq.w	80059b6 <HAL_SPI_IRQHandler+0x1f6>
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80ae 	beq.w	80059b6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	099b      	lsrs	r3, r3, #6
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d023      	beq.n	80058ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b03      	cmp	r3, #3
 8005870:	d011      	beq.n	8005896 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005876:	f043 0204 	orr.w	r2, r3, #4
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	e00b      	b.n	80058ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	693b      	ldr	r3, [r7, #16]
        return;
 80058ac:	e083      	b.n	80059b6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d014      	beq.n	80058e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058be:	f043 0201 	orr.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00c      	beq.n	800590a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f4:	f043 0208 	orr.w	r2, r3, #8
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80058fc:	2300      	movs	r3, #0
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	60bb      	str	r3, [r7, #8]
 8005908:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590e:	2b00      	cmp	r3, #0
 8005910:	d050      	beq.n	80059b4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005920:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <HAL_SPI_IRQHandler+0x17e>
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d034      	beq.n	80059a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0203 	bic.w	r2, r2, #3
 800594c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005952:	2b00      	cmp	r3, #0
 8005954:	d011      	beq.n	800597a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595a:	4a18      	ldr	r2, [pc, #96]	; (80059bc <HAL_SPI_IRQHandler+0x1fc>)
 800595c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005962:	4618      	mov	r0, r3
 8005964:	f7fd ff85 	bl	8003872 <HAL_DMA_Abort_IT>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005972:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	2b00      	cmp	r3, #0
 8005980:	d016      	beq.n	80059b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005986:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <HAL_SPI_IRQHandler+0x1fc>)
 8005988:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598e:	4618      	mov	r0, r3
 8005990:	f7fd ff6f 	bl	8003872 <HAL_DMA_Abort_IT>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80059a6:	e003      	b.n	80059b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f809 	bl	80059c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80059ae:	e000      	b.n	80059b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80059b0:	bf00      	nop
    return;
 80059b2:	bf00      	nop
 80059b4:	bf00      	nop
  }
}
 80059b6:	3720      	adds	r7, #32
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	080059d5 	.word	0x080059d5

080059c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7ff ffe5 	bl	80059c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059f6:	bf00      	nop
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e040      	b.n	8005a92 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fc fd43 	bl	80024ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2224      	movs	r2, #36	; 0x24
 8005a2a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 faa5 	bl	8005f8c <UART_SetConfig>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e022      	b.n	8005a92 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fcb3 	bl	80063c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0201 	orr.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fd3a 	bl	8006504 <UART_CheckIdleState>
 8005a90:	4603      	mov	r3, r0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d164      	bne.n	8005b7c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_UART_Transmit_DMA+0x22>
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e05d      	b.n	8005b7e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_UART_Transmit_DMA+0x34>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e056      	b.n	8005b7e <HAL_UART_Transmit_DMA+0xe2>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	88fa      	ldrh	r2, [r7, #6]
 8005ae2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	88fa      	ldrh	r2, [r7, #6]
 8005aea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2221      	movs	r2, #33	; 0x21
 8005af8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d02a      	beq.n	8005b58 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b06:	4a20      	ldr	r2, [pc, #128]	; (8005b88 <HAL_UART_Transmit_DMA+0xec>)
 8005b08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b0e:	4a1f      	ldr	r2, [pc, #124]	; (8005b8c <HAL_UART_Transmit_DMA+0xf0>)
 8005b10:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b16:	4a1e      	ldr	r2, [pc, #120]	; (8005b90 <HAL_UART_Transmit_DMA+0xf4>)
 8005b18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b1e:	2200      	movs	r2, #0
 8005b20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3328      	adds	r3, #40	; 0x28
 8005b32:	461a      	mov	r2, r3
 8005b34:	88fb      	ldrh	r3, [r7, #6]
 8005b36:	f7fd fe3d 	bl	80037b4 <HAL_DMA_Start_IT>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2210      	movs	r2, #16
 8005b44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e012      	b.n	8005b7e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2240      	movs	r2, #64	; 0x40
 8005b5e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b76:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e000      	b.n	8005b7e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8005b7c:	2302      	movs	r3, #2
  }
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	080066ef 	.word	0x080066ef
 8005b8c:	0800673d 	.word	0x0800673d
 8005b90:	080067d7 	.word	0x080067d7

08005b94 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d16c      	bne.n	8005c84 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_UART_Receive_DMA+0x22>
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e065      	b.n	8005c86 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_UART_Receive_DMA+0x34>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e05e      	b.n	8005c86 <HAL_UART_Receive_DMA+0xf2>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	88fa      	ldrh	r2, [r7, #6]
 8005bda:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2222      	movs	r2, #34	; 0x22
 8005be8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d02a      	beq.n	8005c48 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf6:	4a26      	ldr	r2, [pc, #152]	; (8005c90 <HAL_UART_Receive_DMA+0xfc>)
 8005bf8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bfe:	4a25      	ldr	r2, [pc, #148]	; (8005c94 <HAL_UART_Receive_DMA+0x100>)
 8005c00:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c06:	4a24      	ldr	r2, [pc, #144]	; (8005c98 <HAL_UART_Receive_DMA+0x104>)
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c0e:	2200      	movs	r2, #0
 8005c10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3324      	adds	r3, #36	; 0x24
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	461a      	mov	r2, r3
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	f7fd fdc5 	bl	80037b4 <HAL_DMA_Start_IT>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2210      	movs	r2, #16
 8005c34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2220      	movs	r2, #32
 8005c42:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e01e      	b.n	8005c86 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c7e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e000      	b.n	8005c86 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
  }
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	08006759 	.word	0x08006759
 8005c94:	080067bb 	.word	0x080067bb
 8005c98:	080067d7 	.word	0x080067d7

08005c9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d113      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00e      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 8114 	beq.w	8005f12 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
      }
      return;
 8005cf2:	e10e      	b.n	8005f12 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 80d6 	beq.w	8005ea8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d105      	bne.n	8005d12 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80cb 	beq.w	8005ea8 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00e      	beq.n	8005d3a <HAL_UART_IRQHandler+0x9e>
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d32:	f043 0201 	orr.w	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00e      	beq.n	8005d62 <HAL_UART_IRQHandler+0xc6>
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2202      	movs	r2, #2
 8005d54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5a:	f043 0204 	orr.w	r2, r3, #4
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00e      	beq.n	8005d8a <HAL_UART_IRQHandler+0xee>
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d009      	beq.n	8005d8a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d82:	f043 0202 	orr.w	r2, r3, #2
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d013      	beq.n	8005dbc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d104      	bne.n	8005da8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d009      	beq.n	8005dbc <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2208      	movs	r2, #8
 8005dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db4:	f043 0208 	orr.w	r2, r3, #8
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00f      	beq.n	8005de6 <HAL_UART_IRQHandler+0x14a>
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dde:	f043 0220 	orr.w	r2, r3, #32
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8093 	beq.w	8005f16 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00c      	beq.n	8005e14 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e18:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d004      	beq.n	8005e32 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d031      	beq.n	8005e96 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fc3b 	bl	80066ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	d123      	bne.n	8005e8e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e54:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d013      	beq.n	8005e86 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e62:	4a30      	ldr	r2, [pc, #192]	; (8005f24 <HAL_UART_IRQHandler+0x288>)
 8005e64:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fd fd01 	bl	8003872 <HAL_DMA_Abort_IT>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d016      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005e80:	4610      	mov	r0, r2
 8005e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e84:	e00e      	b.n	8005ea4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f876 	bl	8005f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	e00a      	b.n	8005ea4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f872 	bl	8005f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e94:	e006      	b.n	8005ea4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f86e 	bl	8005f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005ea2:	e038      	b.n	8005f16 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	bf00      	nop
    return;
 8005ea6:	e036      	b.n	8005f16 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00d      	beq.n	8005ece <HAL_UART_IRQHandler+0x232>
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d008      	beq.n	8005ece <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ec4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fcf0 	bl	80068ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ecc:	e026      	b.n	8005f1c <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00d      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d008      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d017      	beq.n	8005f1a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
    }
    return;
 8005ef2:	e012      	b.n	8005f1a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00e      	beq.n	8005f1c <HAL_UART_IRQHandler+0x280>
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d009      	beq.n	8005f1c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fcb6 	bl	800687a <UART_EndTransmit_IT>
    return;
 8005f0e:	bf00      	nop
 8005f10:	e004      	b.n	8005f1c <HAL_UART_IRQHandler+0x280>
      return;
 8005f12:	bf00      	nop
 8005f14:	e002      	b.n	8005f1c <HAL_UART_IRQHandler+0x280>
    return;
 8005f16:	bf00      	nop
 8005f18:	e000      	b.n	8005f1c <HAL_UART_IRQHandler+0x280>
    return;
 8005f1a:	bf00      	nop
  }

}
 8005f1c:	3720      	adds	r7, #32
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	0800684f 	.word	0x0800684f

08005f28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	4bac      	ldr	r3, [pc, #688]	; (800626c <UART_SetConfig+0x2e0>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	6939      	ldr	r1, [r7, #16]
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a9a      	ldr	r2, [pc, #616]	; (8006270 <UART_SetConfig+0x2e4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d121      	bne.n	8006050 <UART_SetConfig+0xc4>
 800600c:	4b99      	ldr	r3, [pc, #612]	; (8006274 <UART_SetConfig+0x2e8>)
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	2b03      	cmp	r3, #3
 8006016:	d817      	bhi.n	8006048 <UART_SetConfig+0xbc>
 8006018:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <UART_SetConfig+0x94>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006031 	.word	0x08006031
 8006024:	0800603d 	.word	0x0800603d
 8006028:	08006043 	.word	0x08006043
 800602c:	08006037 	.word	0x08006037
 8006030:	2301      	movs	r3, #1
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	e0b2      	b.n	800619c <UART_SetConfig+0x210>
 8006036:	2302      	movs	r3, #2
 8006038:	77fb      	strb	r3, [r7, #31]
 800603a:	e0af      	b.n	800619c <UART_SetConfig+0x210>
 800603c:	2304      	movs	r3, #4
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e0ac      	b.n	800619c <UART_SetConfig+0x210>
 8006042:	2308      	movs	r3, #8
 8006044:	77fb      	strb	r3, [r7, #31]
 8006046:	e0a9      	b.n	800619c <UART_SetConfig+0x210>
 8006048:	2310      	movs	r3, #16
 800604a:	77fb      	strb	r3, [r7, #31]
 800604c:	bf00      	nop
 800604e:	e0a5      	b.n	800619c <UART_SetConfig+0x210>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a88      	ldr	r2, [pc, #544]	; (8006278 <UART_SetConfig+0x2ec>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d123      	bne.n	80060a2 <UART_SetConfig+0x116>
 800605a:	4b86      	ldr	r3, [pc, #536]	; (8006274 <UART_SetConfig+0x2e8>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006066:	d012      	beq.n	800608e <UART_SetConfig+0x102>
 8006068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606c:	d802      	bhi.n	8006074 <UART_SetConfig+0xe8>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <UART_SetConfig+0xf6>
 8006072:	e012      	b.n	800609a <UART_SetConfig+0x10e>
 8006074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006078:	d00c      	beq.n	8006094 <UART_SetConfig+0x108>
 800607a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800607e:	d003      	beq.n	8006088 <UART_SetConfig+0xfc>
 8006080:	e00b      	b.n	800609a <UART_SetConfig+0x10e>
 8006082:	2300      	movs	r3, #0
 8006084:	77fb      	strb	r3, [r7, #31]
 8006086:	e089      	b.n	800619c <UART_SetConfig+0x210>
 8006088:	2302      	movs	r3, #2
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e086      	b.n	800619c <UART_SetConfig+0x210>
 800608e:	2304      	movs	r3, #4
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e083      	b.n	800619c <UART_SetConfig+0x210>
 8006094:	2308      	movs	r3, #8
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e080      	b.n	800619c <UART_SetConfig+0x210>
 800609a:	2310      	movs	r3, #16
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	bf00      	nop
 80060a0:	e07c      	b.n	800619c <UART_SetConfig+0x210>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a75      	ldr	r2, [pc, #468]	; (800627c <UART_SetConfig+0x2f0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d123      	bne.n	80060f4 <UART_SetConfig+0x168>
 80060ac:	4b71      	ldr	r3, [pc, #452]	; (8006274 <UART_SetConfig+0x2e8>)
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80060b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060b8:	d012      	beq.n	80060e0 <UART_SetConfig+0x154>
 80060ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060be:	d802      	bhi.n	80060c6 <UART_SetConfig+0x13a>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <UART_SetConfig+0x148>
 80060c4:	e012      	b.n	80060ec <UART_SetConfig+0x160>
 80060c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80060ca:	d00c      	beq.n	80060e6 <UART_SetConfig+0x15a>
 80060cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80060d0:	d003      	beq.n	80060da <UART_SetConfig+0x14e>
 80060d2:	e00b      	b.n	80060ec <UART_SetConfig+0x160>
 80060d4:	2300      	movs	r3, #0
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e060      	b.n	800619c <UART_SetConfig+0x210>
 80060da:	2302      	movs	r3, #2
 80060dc:	77fb      	strb	r3, [r7, #31]
 80060de:	e05d      	b.n	800619c <UART_SetConfig+0x210>
 80060e0:	2304      	movs	r3, #4
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e05a      	b.n	800619c <UART_SetConfig+0x210>
 80060e6:	2308      	movs	r3, #8
 80060e8:	77fb      	strb	r3, [r7, #31]
 80060ea:	e057      	b.n	800619c <UART_SetConfig+0x210>
 80060ec:	2310      	movs	r3, #16
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	bf00      	nop
 80060f2:	e053      	b.n	800619c <UART_SetConfig+0x210>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a61      	ldr	r2, [pc, #388]	; (8006280 <UART_SetConfig+0x2f4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d123      	bne.n	8006146 <UART_SetConfig+0x1ba>
 80060fe:	4b5d      	ldr	r3, [pc, #372]	; (8006274 <UART_SetConfig+0x2e8>)
 8006100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006102:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800610a:	d012      	beq.n	8006132 <UART_SetConfig+0x1a6>
 800610c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006110:	d802      	bhi.n	8006118 <UART_SetConfig+0x18c>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <UART_SetConfig+0x19a>
 8006116:	e012      	b.n	800613e <UART_SetConfig+0x1b2>
 8006118:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800611c:	d00c      	beq.n	8006138 <UART_SetConfig+0x1ac>
 800611e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006122:	d003      	beq.n	800612c <UART_SetConfig+0x1a0>
 8006124:	e00b      	b.n	800613e <UART_SetConfig+0x1b2>
 8006126:	2300      	movs	r3, #0
 8006128:	77fb      	strb	r3, [r7, #31]
 800612a:	e037      	b.n	800619c <UART_SetConfig+0x210>
 800612c:	2302      	movs	r3, #2
 800612e:	77fb      	strb	r3, [r7, #31]
 8006130:	e034      	b.n	800619c <UART_SetConfig+0x210>
 8006132:	2304      	movs	r3, #4
 8006134:	77fb      	strb	r3, [r7, #31]
 8006136:	e031      	b.n	800619c <UART_SetConfig+0x210>
 8006138:	2308      	movs	r3, #8
 800613a:	77fb      	strb	r3, [r7, #31]
 800613c:	e02e      	b.n	800619c <UART_SetConfig+0x210>
 800613e:	2310      	movs	r3, #16
 8006140:	77fb      	strb	r3, [r7, #31]
 8006142:	bf00      	nop
 8006144:	e02a      	b.n	800619c <UART_SetConfig+0x210>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a4e      	ldr	r2, [pc, #312]	; (8006284 <UART_SetConfig+0x2f8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d123      	bne.n	8006198 <UART_SetConfig+0x20c>
 8006150:	4b48      	ldr	r3, [pc, #288]	; (8006274 <UART_SetConfig+0x2e8>)
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800615c:	d012      	beq.n	8006184 <UART_SetConfig+0x1f8>
 800615e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006162:	d802      	bhi.n	800616a <UART_SetConfig+0x1de>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <UART_SetConfig+0x1ec>
 8006168:	e012      	b.n	8006190 <UART_SetConfig+0x204>
 800616a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800616e:	d00c      	beq.n	800618a <UART_SetConfig+0x1fe>
 8006170:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006174:	d003      	beq.n	800617e <UART_SetConfig+0x1f2>
 8006176:	e00b      	b.n	8006190 <UART_SetConfig+0x204>
 8006178:	2300      	movs	r3, #0
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	e00e      	b.n	800619c <UART_SetConfig+0x210>
 800617e:	2302      	movs	r3, #2
 8006180:	77fb      	strb	r3, [r7, #31]
 8006182:	e00b      	b.n	800619c <UART_SetConfig+0x210>
 8006184:	2304      	movs	r3, #4
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e008      	b.n	800619c <UART_SetConfig+0x210>
 800618a:	2308      	movs	r3, #8
 800618c:	77fb      	strb	r3, [r7, #31]
 800618e:	e005      	b.n	800619c <UART_SetConfig+0x210>
 8006190:	2310      	movs	r3, #16
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	bf00      	nop
 8006196:	e001      	b.n	800619c <UART_SetConfig+0x210>
 8006198:	2310      	movs	r3, #16
 800619a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a4:	f040 8090 	bne.w	80062c8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80061a8:	7ffb      	ldrb	r3, [r7, #31]
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d86c      	bhi.n	8006288 <UART_SetConfig+0x2fc>
 80061ae:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <UART_SetConfig+0x228>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	080061d9 	.word	0x080061d9
 80061b8:	080061f9 	.word	0x080061f9
 80061bc:	08006219 	.word	0x08006219
 80061c0:	08006289 	.word	0x08006289
 80061c4:	08006235 	.word	0x08006235
 80061c8:	08006289 	.word	0x08006289
 80061cc:	08006289 	.word	0x08006289
 80061d0:	08006289 	.word	0x08006289
 80061d4:	08006255 	.word	0x08006255
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d8:	f7fe fffe 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 80061dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	005a      	lsls	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	441a      	add	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	61bb      	str	r3, [r7, #24]
        break;
 80061f6:	e04a      	b.n	800628e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f8:	f7ff f810 	bl	800521c <HAL_RCC_GetPCLK2Freq>
 80061fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	005a      	lsls	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	441a      	add	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006212:	b29b      	uxth	r3, r3
 8006214:	61bb      	str	r3, [r7, #24]
        break;
 8006216:	e03a      	b.n	800628e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006222:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6852      	ldr	r2, [r2, #4]
 800622a:	fbb3 f3f2 	udiv	r3, r3, r2
 800622e:	b29b      	uxth	r3, r3
 8006230:	61bb      	str	r3, [r7, #24]
        break;
 8006232:	e02c      	b.n	800628e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006234:	f7fe ff5a 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 8006238:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	005a      	lsls	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	085b      	lsrs	r3, r3, #1
 8006244:	441a      	add	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	fbb2 f3f3 	udiv	r3, r2, r3
 800624e:	b29b      	uxth	r3, r3
 8006250:	61bb      	str	r3, [r7, #24]
        break;
 8006252:	e01c      	b.n	800628e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	b29b      	uxth	r3, r3
 8006268:	61bb      	str	r3, [r7, #24]
        break;
 800626a:	e010      	b.n	800628e <UART_SetConfig+0x302>
 800626c:	efff69f3 	.word	0xefff69f3
 8006270:	40013800 	.word	0x40013800
 8006274:	40021000 	.word	0x40021000
 8006278:	40004400 	.word	0x40004400
 800627c:	40004800 	.word	0x40004800
 8006280:	40004c00 	.word	0x40004c00
 8006284:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	75fb      	strb	r3, [r7, #23]
        break;
 800628c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2b0f      	cmp	r3, #15
 8006292:	d916      	bls.n	80062c2 <UART_SetConfig+0x336>
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800629a:	d212      	bcs.n	80062c2 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f023 030f 	bic.w	r3, r3, #15
 80062a4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	897b      	ldrh	r3, [r7, #10]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	897a      	ldrh	r2, [r7, #10]
 80062be:	60da      	str	r2, [r3, #12]
 80062c0:	e072      	b.n	80063a8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	75fb      	strb	r3, [r7, #23]
 80062c6:	e06f      	b.n	80063a8 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80062c8:	7ffb      	ldrb	r3, [r7, #31]
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d85b      	bhi.n	8006386 <UART_SetConfig+0x3fa>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x348>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062f9 	.word	0x080062f9
 80062d8:	08006317 	.word	0x08006317
 80062dc:	08006335 	.word	0x08006335
 80062e0:	08006387 	.word	0x08006387
 80062e4:	08006351 	.word	0x08006351
 80062e8:	08006387 	.word	0x08006387
 80062ec:	08006387 	.word	0x08006387
 80062f0:	08006387 	.word	0x08006387
 80062f4:	0800636f 	.word	0x0800636f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f8:	f7fe ff6e 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 80062fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	085a      	lsrs	r2, r3, #1
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	441a      	add	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006310:	b29b      	uxth	r3, r3
 8006312:	61bb      	str	r3, [r7, #24]
        break;
 8006314:	e03a      	b.n	800638c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006316:	f7fe ff81 	bl	800521c <HAL_RCC_GetPCLK2Freq>
 800631a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	085a      	lsrs	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	441a      	add	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	fbb2 f3f3 	udiv	r3, r2, r3
 800632e:	b29b      	uxth	r3, r3
 8006330:	61bb      	str	r3, [r7, #24]
        break;
 8006332:	e02b      	b.n	800638c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800633e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6852      	ldr	r2, [r2, #4]
 8006346:	fbb3 f3f2 	udiv	r3, r3, r2
 800634a:	b29b      	uxth	r3, r3
 800634c:	61bb      	str	r3, [r7, #24]
        break;
 800634e:	e01d      	b.n	800638c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006350:	f7fe fecc 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 8006354:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	085a      	lsrs	r2, r3, #1
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	441a      	add	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	fbb2 f3f3 	udiv	r3, r2, r3
 8006368:	b29b      	uxth	r3, r3
 800636a:	61bb      	str	r3, [r7, #24]
        break;
 800636c:	e00e      	b.n	800638c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006380:	b29b      	uxth	r3, r3
 8006382:	61bb      	str	r3, [r7, #24]
        break;
 8006384:	e002      	b.n	800638c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	75fb      	strb	r3, [r7, #23]
        break;
 800638a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b0f      	cmp	r3, #15
 8006390:	d908      	bls.n	80063a4 <UART_SetConfig+0x418>
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006398:	d204      	bcs.n	80063a4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	60da      	str	r2, [r3, #12]
 80063a2:	e001      	b.n	80063a8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop

080063c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064be:	d10a      	bne.n	80064d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af02      	add	r7, sp, #8
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006512:	f7fc fa83 	bl	8002a1c <HAL_GetTick>
 8006516:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b08      	cmp	r3, #8
 8006524:	d10e      	bne.n	8006544 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006526:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f82a 	bl	800658e <UART_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e020      	b.n	8006586 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b04      	cmp	r3, #4
 8006550:	d10e      	bne.n	8006570 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006552:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f814 	bl	800658e <UART_WaitOnFlagUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e00a      	b.n	8006586 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2220      	movs	r2, #32
 8006574:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	603b      	str	r3, [r7, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800659e:	e05d      	b.n	800665c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d059      	beq.n	800665c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a8:	f7fc fa38 	bl	8002a1c <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d302      	bcc.n	80065be <UART_WaitOnFlagUntilTimeout+0x30>
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d11b      	bne.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0201 	bic.w	r2, r2, #1
 80065dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e042      	b.n	800667c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	d02b      	beq.n	800665c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800660e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006612:	d123      	bne.n	800665c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800661c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800662c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2220      	movs	r2, #32
 8006648:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2220      	movs	r2, #32
 800664e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e00f      	b.n	800667c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4013      	ands	r3, r2
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	bf0c      	ite	eq
 800666c:	2301      	moveq	r3, #1
 800666e:	2300      	movne	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	429a      	cmp	r2, r3
 8006678:	d092      	beq.n	80065a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800669a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066c4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	2b20      	cmp	r3, #32
 8006702:	d014      	beq.n	800672e <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800671a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800672a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800672c:	e002      	b.n	8006734 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f7ff fbfa 	bl	8005f28 <HAL_UART_TxCpltCallback>
}
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff fbf6 	bl	8005f3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	2b20      	cmp	r3, #32
 800676c:	d01e      	beq.n	80067ac <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006784:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fbcf 	bl	8005f50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7ff fbcb 	bl	8005f64 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b086      	sub	sp, #24
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d109      	bne.n	8006812 <UART_DMAError+0x3c>
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b21      	cmp	r3, #33	; 0x21
 8006802:	d106      	bne.n	8006812 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800680c:	6978      	ldr	r0, [r7, #20]
 800680e:	f7ff ff39 	bl	8006684 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d109      	bne.n	8006834 <UART_DMAError+0x5e>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b22      	cmp	r3, #34	; 0x22
 8006824:	d106      	bne.n	8006834 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2200      	movs	r2, #0
 800682a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800682e:	6978      	ldr	r0, [r7, #20]
 8006830:	f7ff ff3d 	bl	80066ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006838:	f043 0210 	orr.w	r2, r3, #16
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006840:	6978      	ldr	r0, [r7, #20]
 8006842:	f7ff fb99 	bl	8005f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006846:	bf00      	nop
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff fb83 	bl	8005f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006890:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7ff fb42 	bl	8005f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <_Znwj>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	2800      	cmp	r0, #0
 80068c4:	bf14      	ite	ne
 80068c6:	4604      	movne	r4, r0
 80068c8:	2401      	moveq	r4, #1
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 f844 	bl	8006958 <malloc>
 80068d0:	b930      	cbnz	r0, 80068e0 <_Znwj+0x20>
 80068d2:	f000 f807 	bl	80068e4 <_ZSt15get_new_handlerv>
 80068d6:	b908      	cbnz	r0, 80068dc <_Znwj+0x1c>
 80068d8:	f000 f80c 	bl	80068f4 <abort>
 80068dc:	4780      	blx	r0
 80068de:	e7f4      	b.n	80068ca <_Znwj+0xa>
 80068e0:	bd10      	pop	{r4, pc}
	...

080068e4 <_ZSt15get_new_handlerv>:
 80068e4:	4b02      	ldr	r3, [pc, #8]	; (80068f0 <_ZSt15get_new_handlerv+0xc>)
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	f3bf 8f5b 	dmb	ish
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	20000514 	.word	0x20000514

080068f4 <abort>:
 80068f4:	b508      	push	{r3, lr}
 80068f6:	2006      	movs	r0, #6
 80068f8:	f000 fd7a 	bl	80073f0 <raise>
 80068fc:	2001      	movs	r0, #1
 80068fe:	f7fb ffbd 	bl	800287c <_exit>
	...

08006904 <__errno>:
 8006904:	4b01      	ldr	r3, [pc, #4]	; (800690c <__errno+0x8>)
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	2000000c 	.word	0x2000000c

08006910 <__libc_init_array>:
 8006910:	b570      	push	{r4, r5, r6, lr}
 8006912:	4e0d      	ldr	r6, [pc, #52]	; (8006948 <__libc_init_array+0x38>)
 8006914:	4c0d      	ldr	r4, [pc, #52]	; (800694c <__libc_init_array+0x3c>)
 8006916:	1ba4      	subs	r4, r4, r6
 8006918:	10a4      	asrs	r4, r4, #2
 800691a:	2500      	movs	r5, #0
 800691c:	42a5      	cmp	r5, r4
 800691e:	d109      	bne.n	8006934 <__libc_init_array+0x24>
 8006920:	4e0b      	ldr	r6, [pc, #44]	; (8006950 <__libc_init_array+0x40>)
 8006922:	4c0c      	ldr	r4, [pc, #48]	; (8006954 <__libc_init_array+0x44>)
 8006924:	f002 fd66 	bl	80093f4 <_init>
 8006928:	1ba4      	subs	r4, r4, r6
 800692a:	10a4      	asrs	r4, r4, #2
 800692c:	2500      	movs	r5, #0
 800692e:	42a5      	cmp	r5, r4
 8006930:	d105      	bne.n	800693e <__libc_init_array+0x2e>
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006938:	4798      	blx	r3
 800693a:	3501      	adds	r5, #1
 800693c:	e7ee      	b.n	800691c <__libc_init_array+0xc>
 800693e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006942:	4798      	blx	r3
 8006944:	3501      	adds	r5, #1
 8006946:	e7f2      	b.n	800692e <__libc_init_array+0x1e>
 8006948:	0800975c 	.word	0x0800975c
 800694c:	0800975c 	.word	0x0800975c
 8006950:	0800975c 	.word	0x0800975c
 8006954:	08009760 	.word	0x08009760

08006958 <malloc>:
 8006958:	4b02      	ldr	r3, [pc, #8]	; (8006964 <malloc+0xc>)
 800695a:	4601      	mov	r1, r0
 800695c:	6818      	ldr	r0, [r3, #0]
 800695e:	f000 b859 	b.w	8006a14 <_malloc_r>
 8006962:	bf00      	nop
 8006964:	2000000c 	.word	0x2000000c

08006968 <memset>:
 8006968:	4402      	add	r2, r0
 800696a:	4603      	mov	r3, r0
 800696c:	4293      	cmp	r3, r2
 800696e:	d100      	bne.n	8006972 <memset+0xa>
 8006970:	4770      	bx	lr
 8006972:	f803 1b01 	strb.w	r1, [r3], #1
 8006976:	e7f9      	b.n	800696c <memset+0x4>

08006978 <_free_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4605      	mov	r5, r0
 800697c:	2900      	cmp	r1, #0
 800697e:	d045      	beq.n	8006a0c <_free_r+0x94>
 8006980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006984:	1f0c      	subs	r4, r1, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	bfb8      	it	lt
 800698a:	18e4      	addlt	r4, r4, r3
 800698c:	f001 fbf5 	bl	800817a <__malloc_lock>
 8006990:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <_free_r+0x98>)
 8006992:	6813      	ldr	r3, [r2, #0]
 8006994:	4610      	mov	r0, r2
 8006996:	b933      	cbnz	r3, 80069a6 <_free_r+0x2e>
 8006998:	6063      	str	r3, [r4, #4]
 800699a:	6014      	str	r4, [r2, #0]
 800699c:	4628      	mov	r0, r5
 800699e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069a2:	f001 bbeb 	b.w	800817c <__malloc_unlock>
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	d90c      	bls.n	80069c4 <_free_r+0x4c>
 80069aa:	6821      	ldr	r1, [r4, #0]
 80069ac:	1862      	adds	r2, r4, r1
 80069ae:	4293      	cmp	r3, r2
 80069b0:	bf04      	itt	eq
 80069b2:	681a      	ldreq	r2, [r3, #0]
 80069b4:	685b      	ldreq	r3, [r3, #4]
 80069b6:	6063      	str	r3, [r4, #4]
 80069b8:	bf04      	itt	eq
 80069ba:	1852      	addeq	r2, r2, r1
 80069bc:	6022      	streq	r2, [r4, #0]
 80069be:	6004      	str	r4, [r0, #0]
 80069c0:	e7ec      	b.n	800699c <_free_r+0x24>
 80069c2:	4613      	mov	r3, r2
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	b10a      	cbz	r2, 80069cc <_free_r+0x54>
 80069c8:	42a2      	cmp	r2, r4
 80069ca:	d9fa      	bls.n	80069c2 <_free_r+0x4a>
 80069cc:	6819      	ldr	r1, [r3, #0]
 80069ce:	1858      	adds	r0, r3, r1
 80069d0:	42a0      	cmp	r0, r4
 80069d2:	d10b      	bne.n	80069ec <_free_r+0x74>
 80069d4:	6820      	ldr	r0, [r4, #0]
 80069d6:	4401      	add	r1, r0
 80069d8:	1858      	adds	r0, r3, r1
 80069da:	4282      	cmp	r2, r0
 80069dc:	6019      	str	r1, [r3, #0]
 80069de:	d1dd      	bne.n	800699c <_free_r+0x24>
 80069e0:	6810      	ldr	r0, [r2, #0]
 80069e2:	6852      	ldr	r2, [r2, #4]
 80069e4:	605a      	str	r2, [r3, #4]
 80069e6:	4401      	add	r1, r0
 80069e8:	6019      	str	r1, [r3, #0]
 80069ea:	e7d7      	b.n	800699c <_free_r+0x24>
 80069ec:	d902      	bls.n	80069f4 <_free_r+0x7c>
 80069ee:	230c      	movs	r3, #12
 80069f0:	602b      	str	r3, [r5, #0]
 80069f2:	e7d3      	b.n	800699c <_free_r+0x24>
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	1821      	adds	r1, r4, r0
 80069f8:	428a      	cmp	r2, r1
 80069fa:	bf04      	itt	eq
 80069fc:	6811      	ldreq	r1, [r2, #0]
 80069fe:	6852      	ldreq	r2, [r2, #4]
 8006a00:	6062      	str	r2, [r4, #4]
 8006a02:	bf04      	itt	eq
 8006a04:	1809      	addeq	r1, r1, r0
 8006a06:	6021      	streq	r1, [r4, #0]
 8006a08:	605c      	str	r4, [r3, #4]
 8006a0a:	e7c7      	b.n	800699c <_free_r+0x24>
 8006a0c:	bd38      	pop	{r3, r4, r5, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000518 	.word	0x20000518

08006a14 <_malloc_r>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	1ccd      	adds	r5, r1, #3
 8006a18:	f025 0503 	bic.w	r5, r5, #3
 8006a1c:	3508      	adds	r5, #8
 8006a1e:	2d0c      	cmp	r5, #12
 8006a20:	bf38      	it	cc
 8006a22:	250c      	movcc	r5, #12
 8006a24:	2d00      	cmp	r5, #0
 8006a26:	4606      	mov	r6, r0
 8006a28:	db01      	blt.n	8006a2e <_malloc_r+0x1a>
 8006a2a:	42a9      	cmp	r1, r5
 8006a2c:	d903      	bls.n	8006a36 <_malloc_r+0x22>
 8006a2e:	230c      	movs	r3, #12
 8006a30:	6033      	str	r3, [r6, #0]
 8006a32:	2000      	movs	r0, #0
 8006a34:	bd70      	pop	{r4, r5, r6, pc}
 8006a36:	f001 fba0 	bl	800817a <__malloc_lock>
 8006a3a:	4a21      	ldr	r2, [pc, #132]	; (8006ac0 <_malloc_r+0xac>)
 8006a3c:	6814      	ldr	r4, [r2, #0]
 8006a3e:	4621      	mov	r1, r4
 8006a40:	b991      	cbnz	r1, 8006a68 <_malloc_r+0x54>
 8006a42:	4c20      	ldr	r4, [pc, #128]	; (8006ac4 <_malloc_r+0xb0>)
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	b91b      	cbnz	r3, 8006a50 <_malloc_r+0x3c>
 8006a48:	4630      	mov	r0, r6
 8006a4a:	f000 fc99 	bl	8007380 <_sbrk_r>
 8006a4e:	6020      	str	r0, [r4, #0]
 8006a50:	4629      	mov	r1, r5
 8006a52:	4630      	mov	r0, r6
 8006a54:	f000 fc94 	bl	8007380 <_sbrk_r>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d124      	bne.n	8006aa6 <_malloc_r+0x92>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	6033      	str	r3, [r6, #0]
 8006a60:	4630      	mov	r0, r6
 8006a62:	f001 fb8b 	bl	800817c <__malloc_unlock>
 8006a66:	e7e4      	b.n	8006a32 <_malloc_r+0x1e>
 8006a68:	680b      	ldr	r3, [r1, #0]
 8006a6a:	1b5b      	subs	r3, r3, r5
 8006a6c:	d418      	bmi.n	8006aa0 <_malloc_r+0x8c>
 8006a6e:	2b0b      	cmp	r3, #11
 8006a70:	d90f      	bls.n	8006a92 <_malloc_r+0x7e>
 8006a72:	600b      	str	r3, [r1, #0]
 8006a74:	50cd      	str	r5, [r1, r3]
 8006a76:	18cc      	adds	r4, r1, r3
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f001 fb7f 	bl	800817c <__malloc_unlock>
 8006a7e:	f104 000b 	add.w	r0, r4, #11
 8006a82:	1d23      	adds	r3, r4, #4
 8006a84:	f020 0007 	bic.w	r0, r0, #7
 8006a88:	1ac3      	subs	r3, r0, r3
 8006a8a:	d0d3      	beq.n	8006a34 <_malloc_r+0x20>
 8006a8c:	425a      	negs	r2, r3
 8006a8e:	50e2      	str	r2, [r4, r3]
 8006a90:	e7d0      	b.n	8006a34 <_malloc_r+0x20>
 8006a92:	428c      	cmp	r4, r1
 8006a94:	684b      	ldr	r3, [r1, #4]
 8006a96:	bf16      	itet	ne
 8006a98:	6063      	strne	r3, [r4, #4]
 8006a9a:	6013      	streq	r3, [r2, #0]
 8006a9c:	460c      	movne	r4, r1
 8006a9e:	e7eb      	b.n	8006a78 <_malloc_r+0x64>
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	6849      	ldr	r1, [r1, #4]
 8006aa4:	e7cc      	b.n	8006a40 <_malloc_r+0x2c>
 8006aa6:	1cc4      	adds	r4, r0, #3
 8006aa8:	f024 0403 	bic.w	r4, r4, #3
 8006aac:	42a0      	cmp	r0, r4
 8006aae:	d005      	beq.n	8006abc <_malloc_r+0xa8>
 8006ab0:	1a21      	subs	r1, r4, r0
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f000 fc64 	bl	8007380 <_sbrk_r>
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d0cf      	beq.n	8006a5c <_malloc_r+0x48>
 8006abc:	6025      	str	r5, [r4, #0]
 8006abe:	e7db      	b.n	8006a78 <_malloc_r+0x64>
 8006ac0:	20000518 	.word	0x20000518
 8006ac4:	2000051c 	.word	0x2000051c

08006ac8 <__cvt>:
 8006ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006acc:	ec55 4b10 	vmov	r4, r5, d0
 8006ad0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006ad2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	460e      	mov	r6, r1
 8006ada:	4691      	mov	r9, r2
 8006adc:	4619      	mov	r1, r3
 8006ade:	bfb8      	it	lt
 8006ae0:	4622      	movlt	r2, r4
 8006ae2:	462b      	mov	r3, r5
 8006ae4:	f027 0720 	bic.w	r7, r7, #32
 8006ae8:	bfbb      	ittet	lt
 8006aea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006aee:	461d      	movlt	r5, r3
 8006af0:	2300      	movge	r3, #0
 8006af2:	232d      	movlt	r3, #45	; 0x2d
 8006af4:	bfb8      	it	lt
 8006af6:	4614      	movlt	r4, r2
 8006af8:	2f46      	cmp	r7, #70	; 0x46
 8006afa:	700b      	strb	r3, [r1, #0]
 8006afc:	d004      	beq.n	8006b08 <__cvt+0x40>
 8006afe:	2f45      	cmp	r7, #69	; 0x45
 8006b00:	d100      	bne.n	8006b04 <__cvt+0x3c>
 8006b02:	3601      	adds	r6, #1
 8006b04:	2102      	movs	r1, #2
 8006b06:	e000      	b.n	8006b0a <__cvt+0x42>
 8006b08:	2103      	movs	r1, #3
 8006b0a:	ab03      	add	r3, sp, #12
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	ab02      	add	r3, sp, #8
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	4632      	mov	r2, r6
 8006b14:	4653      	mov	r3, sl
 8006b16:	ec45 4b10 	vmov	d0, r4, r5
 8006b1a:	f000 fd5d 	bl	80075d8 <_dtoa_r>
 8006b1e:	2f47      	cmp	r7, #71	; 0x47
 8006b20:	4680      	mov	r8, r0
 8006b22:	d102      	bne.n	8006b2a <__cvt+0x62>
 8006b24:	f019 0f01 	tst.w	r9, #1
 8006b28:	d026      	beq.n	8006b78 <__cvt+0xb0>
 8006b2a:	2f46      	cmp	r7, #70	; 0x46
 8006b2c:	eb08 0906 	add.w	r9, r8, r6
 8006b30:	d111      	bne.n	8006b56 <__cvt+0x8e>
 8006b32:	f898 3000 	ldrb.w	r3, [r8]
 8006b36:	2b30      	cmp	r3, #48	; 0x30
 8006b38:	d10a      	bne.n	8006b50 <__cvt+0x88>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4629      	mov	r1, r5
 8006b42:	f7f9 ffc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b46:	b918      	cbnz	r0, 8006b50 <__cvt+0x88>
 8006b48:	f1c6 0601 	rsb	r6, r6, #1
 8006b4c:	f8ca 6000 	str.w	r6, [sl]
 8006b50:	f8da 3000 	ldr.w	r3, [sl]
 8006b54:	4499      	add	r9, r3
 8006b56:	2200      	movs	r2, #0
 8006b58:	2300      	movs	r3, #0
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	f7f9 ffbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b62:	b938      	cbnz	r0, 8006b74 <__cvt+0xac>
 8006b64:	2230      	movs	r2, #48	; 0x30
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	454b      	cmp	r3, r9
 8006b6a:	d205      	bcs.n	8006b78 <__cvt+0xb0>
 8006b6c:	1c59      	adds	r1, r3, #1
 8006b6e:	9103      	str	r1, [sp, #12]
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	e7f8      	b.n	8006b66 <__cvt+0x9e>
 8006b74:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b78:	9b03      	ldr	r3, [sp, #12]
 8006b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b7c:	eba3 0308 	sub.w	r3, r3, r8
 8006b80:	4640      	mov	r0, r8
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	b004      	add	sp, #16
 8006b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006b8a <__exponent>:
 8006b8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	bfba      	itte	lt
 8006b92:	4249      	neglt	r1, r1
 8006b94:	232d      	movlt	r3, #45	; 0x2d
 8006b96:	232b      	movge	r3, #43	; 0x2b
 8006b98:	2909      	cmp	r1, #9
 8006b9a:	f804 2b02 	strb.w	r2, [r4], #2
 8006b9e:	7043      	strb	r3, [r0, #1]
 8006ba0:	dd20      	ble.n	8006be4 <__exponent+0x5a>
 8006ba2:	f10d 0307 	add.w	r3, sp, #7
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	260a      	movs	r6, #10
 8006baa:	fb91 f5f6 	sdiv	r5, r1, r6
 8006bae:	fb06 1115 	mls	r1, r6, r5, r1
 8006bb2:	3130      	adds	r1, #48	; 0x30
 8006bb4:	2d09      	cmp	r5, #9
 8006bb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bba:	f103 32ff 	add.w	r2, r3, #4294967295
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	dc09      	bgt.n	8006bd6 <__exponent+0x4c>
 8006bc2:	3130      	adds	r1, #48	; 0x30
 8006bc4:	3b02      	subs	r3, #2
 8006bc6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006bca:	42bb      	cmp	r3, r7
 8006bcc:	4622      	mov	r2, r4
 8006bce:	d304      	bcc.n	8006bda <__exponent+0x50>
 8006bd0:	1a10      	subs	r0, r2, r0
 8006bd2:	b003      	add	sp, #12
 8006bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	e7e7      	b.n	8006baa <__exponent+0x20>
 8006bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bde:	f804 2b01 	strb.w	r2, [r4], #1
 8006be2:	e7f2      	b.n	8006bca <__exponent+0x40>
 8006be4:	2330      	movs	r3, #48	; 0x30
 8006be6:	4419      	add	r1, r3
 8006be8:	7083      	strb	r3, [r0, #2]
 8006bea:	1d02      	adds	r2, r0, #4
 8006bec:	70c1      	strb	r1, [r0, #3]
 8006bee:	e7ef      	b.n	8006bd0 <__exponent+0x46>

08006bf0 <_printf_float>:
 8006bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	b08d      	sub	sp, #52	; 0x34
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006bfc:	4616      	mov	r6, r2
 8006bfe:	461f      	mov	r7, r3
 8006c00:	4605      	mov	r5, r0
 8006c02:	f001 faa1 	bl	8008148 <_localeconv_r>
 8006c06:	6803      	ldr	r3, [r0, #0]
 8006c08:	9304      	str	r3, [sp, #16]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7f9 fae8 	bl	80001e0 <strlen>
 8006c10:	2300      	movs	r3, #0
 8006c12:	930a      	str	r3, [sp, #40]	; 0x28
 8006c14:	f8d8 3000 	ldr.w	r3, [r8]
 8006c18:	9005      	str	r0, [sp, #20]
 8006c1a:	3307      	adds	r3, #7
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	f103 0208 	add.w	r2, r3, #8
 8006c24:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c28:	f8d4 b000 	ldr.w	fp, [r4]
 8006c2c:	f8c8 2000 	str.w	r2, [r8]
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c38:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c40:	9307      	str	r3, [sp, #28]
 8006c42:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c46:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4a:	4ba7      	ldr	r3, [pc, #668]	; (8006ee8 <_printf_float+0x2f8>)
 8006c4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c50:	f7f9 ff74 	bl	8000b3c <__aeabi_dcmpun>
 8006c54:	bb70      	cbnz	r0, 8006cb4 <_printf_float+0xc4>
 8006c56:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5a:	4ba3      	ldr	r3, [pc, #652]	; (8006ee8 <_printf_float+0x2f8>)
 8006c5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c60:	f7f9 ff4e 	bl	8000b00 <__aeabi_dcmple>
 8006c64:	bb30      	cbnz	r0, 8006cb4 <_printf_float+0xc4>
 8006c66:	2200      	movs	r2, #0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	f7f9 ff3d 	bl	8000aec <__aeabi_dcmplt>
 8006c72:	b110      	cbz	r0, 8006c7a <_printf_float+0x8a>
 8006c74:	232d      	movs	r3, #45	; 0x2d
 8006c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c7a:	4a9c      	ldr	r2, [pc, #624]	; (8006eec <_printf_float+0x2fc>)
 8006c7c:	4b9c      	ldr	r3, [pc, #624]	; (8006ef0 <_printf_float+0x300>)
 8006c7e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006c82:	bf8c      	ite	hi
 8006c84:	4690      	movhi	r8, r2
 8006c86:	4698      	movls	r8, r3
 8006c88:	2303      	movs	r3, #3
 8006c8a:	f02b 0204 	bic.w	r2, fp, #4
 8006c8e:	6123      	str	r3, [r4, #16]
 8006c90:	6022      	str	r2, [r4, #0]
 8006c92:	f04f 0900 	mov.w	r9, #0
 8006c96:	9700      	str	r7, [sp, #0]
 8006c98:	4633      	mov	r3, r6
 8006c9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 f9e6 	bl	8007070 <_printf_common>
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	f040 808d 	bne.w	8006dc4 <_printf_float+0x1d4>
 8006caa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cae:	b00d      	add	sp, #52	; 0x34
 8006cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 ff3e 	bl	8000b3c <__aeabi_dcmpun>
 8006cc0:	b110      	cbz	r0, 8006cc8 <_printf_float+0xd8>
 8006cc2:	4a8c      	ldr	r2, [pc, #560]	; (8006ef4 <_printf_float+0x304>)
 8006cc4:	4b8c      	ldr	r3, [pc, #560]	; (8006ef8 <_printf_float+0x308>)
 8006cc6:	e7da      	b.n	8006c7e <_printf_float+0x8e>
 8006cc8:	6861      	ldr	r1, [r4, #4]
 8006cca:	1c4b      	adds	r3, r1, #1
 8006ccc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006cd0:	a80a      	add	r0, sp, #40	; 0x28
 8006cd2:	d13e      	bne.n	8006d52 <_printf_float+0x162>
 8006cd4:	2306      	movs	r3, #6
 8006cd6:	6063      	str	r3, [r4, #4]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006cde:	ab09      	add	r3, sp, #36	; 0x24
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	ec49 8b10 	vmov	d0, r8, r9
 8006ce6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cea:	6022      	str	r2, [r4, #0]
 8006cec:	f8cd a004 	str.w	sl, [sp, #4]
 8006cf0:	6861      	ldr	r1, [r4, #4]
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f7ff fee8 	bl	8006ac8 <__cvt>
 8006cf8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006cfc:	2b47      	cmp	r3, #71	; 0x47
 8006cfe:	4680      	mov	r8, r0
 8006d00:	d109      	bne.n	8006d16 <_printf_float+0x126>
 8006d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d04:	1cd8      	adds	r0, r3, #3
 8006d06:	db02      	blt.n	8006d0e <_printf_float+0x11e>
 8006d08:	6862      	ldr	r2, [r4, #4]
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	dd47      	ble.n	8006d9e <_printf_float+0x1ae>
 8006d0e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d12:	fa5f fa8a 	uxtb.w	sl, sl
 8006d16:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006d1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d1c:	d824      	bhi.n	8006d68 <_printf_float+0x178>
 8006d1e:	3901      	subs	r1, #1
 8006d20:	4652      	mov	r2, sl
 8006d22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d26:	9109      	str	r1, [sp, #36]	; 0x24
 8006d28:	f7ff ff2f 	bl	8006b8a <__exponent>
 8006d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d2e:	1813      	adds	r3, r2, r0
 8006d30:	2a01      	cmp	r2, #1
 8006d32:	4681      	mov	r9, r0
 8006d34:	6123      	str	r3, [r4, #16]
 8006d36:	dc02      	bgt.n	8006d3e <_printf_float+0x14e>
 8006d38:	6822      	ldr	r2, [r4, #0]
 8006d3a:	07d1      	lsls	r1, r2, #31
 8006d3c:	d501      	bpl.n	8006d42 <_printf_float+0x152>
 8006d3e:	3301      	adds	r3, #1
 8006d40:	6123      	str	r3, [r4, #16]
 8006d42:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0a5      	beq.n	8006c96 <_printf_float+0xa6>
 8006d4a:	232d      	movs	r3, #45	; 0x2d
 8006d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d50:	e7a1      	b.n	8006c96 <_printf_float+0xa6>
 8006d52:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006d56:	f000 8177 	beq.w	8007048 <_printf_float+0x458>
 8006d5a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006d5e:	d1bb      	bne.n	8006cd8 <_printf_float+0xe8>
 8006d60:	2900      	cmp	r1, #0
 8006d62:	d1b9      	bne.n	8006cd8 <_printf_float+0xe8>
 8006d64:	2301      	movs	r3, #1
 8006d66:	e7b6      	b.n	8006cd6 <_printf_float+0xe6>
 8006d68:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006d6c:	d119      	bne.n	8006da2 <_printf_float+0x1b2>
 8006d6e:	2900      	cmp	r1, #0
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	dd0c      	ble.n	8006d8e <_printf_float+0x19e>
 8006d74:	6121      	str	r1, [r4, #16]
 8006d76:	b913      	cbnz	r3, 8006d7e <_printf_float+0x18e>
 8006d78:	6822      	ldr	r2, [r4, #0]
 8006d7a:	07d2      	lsls	r2, r2, #31
 8006d7c:	d502      	bpl.n	8006d84 <_printf_float+0x194>
 8006d7e:	3301      	adds	r3, #1
 8006d80:	440b      	add	r3, r1
 8006d82:	6123      	str	r3, [r4, #16]
 8006d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d86:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d88:	f04f 0900 	mov.w	r9, #0
 8006d8c:	e7d9      	b.n	8006d42 <_printf_float+0x152>
 8006d8e:	b913      	cbnz	r3, 8006d96 <_printf_float+0x1a6>
 8006d90:	6822      	ldr	r2, [r4, #0]
 8006d92:	07d0      	lsls	r0, r2, #31
 8006d94:	d501      	bpl.n	8006d9a <_printf_float+0x1aa>
 8006d96:	3302      	adds	r3, #2
 8006d98:	e7f3      	b.n	8006d82 <_printf_float+0x192>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e7f1      	b.n	8006d82 <_printf_float+0x192>
 8006d9e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006da2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006da6:	4293      	cmp	r3, r2
 8006da8:	db05      	blt.n	8006db6 <_printf_float+0x1c6>
 8006daa:	6822      	ldr	r2, [r4, #0]
 8006dac:	6123      	str	r3, [r4, #16]
 8006dae:	07d1      	lsls	r1, r2, #31
 8006db0:	d5e8      	bpl.n	8006d84 <_printf_float+0x194>
 8006db2:	3301      	adds	r3, #1
 8006db4:	e7e5      	b.n	8006d82 <_printf_float+0x192>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	bfd4      	ite	le
 8006dba:	f1c3 0302 	rsble	r3, r3, #2
 8006dbe:	2301      	movgt	r3, #1
 8006dc0:	4413      	add	r3, r2
 8006dc2:	e7de      	b.n	8006d82 <_printf_float+0x192>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	055a      	lsls	r2, r3, #21
 8006dc8:	d407      	bmi.n	8006dda <_printf_float+0x1ea>
 8006dca:	6923      	ldr	r3, [r4, #16]
 8006dcc:	4642      	mov	r2, r8
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	47b8      	blx	r7
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d12b      	bne.n	8006e30 <_printf_float+0x240>
 8006dd8:	e767      	b.n	8006caa <_printf_float+0xba>
 8006dda:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006dde:	f240 80dc 	bls.w	8006f9a <_printf_float+0x3aa>
 8006de2:	2200      	movs	r2, #0
 8006de4:	2300      	movs	r3, #0
 8006de6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dea:	f7f9 fe75 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d033      	beq.n	8006e5a <_printf_float+0x26a>
 8006df2:	2301      	movs	r3, #1
 8006df4:	4a41      	ldr	r2, [pc, #260]	; (8006efc <_printf_float+0x30c>)
 8006df6:	4631      	mov	r1, r6
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b8      	blx	r7
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	f43f af54 	beq.w	8006caa <_printf_float+0xba>
 8006e02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e06:	429a      	cmp	r2, r3
 8006e08:	db02      	blt.n	8006e10 <_printf_float+0x220>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	07d8      	lsls	r0, r3, #31
 8006e0e:	d50f      	bpl.n	8006e30 <_printf_float+0x240>
 8006e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b8      	blx	r7
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f43f af45 	beq.w	8006caa <_printf_float+0xba>
 8006e20:	f04f 0800 	mov.w	r8, #0
 8006e24:	f104 091a 	add.w	r9, r4, #26
 8006e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	4543      	cmp	r3, r8
 8006e2e:	dc09      	bgt.n	8006e44 <_printf_float+0x254>
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	079b      	lsls	r3, r3, #30
 8006e34:	f100 8103 	bmi.w	800703e <_printf_float+0x44e>
 8006e38:	68e0      	ldr	r0, [r4, #12]
 8006e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e3c:	4298      	cmp	r0, r3
 8006e3e:	bfb8      	it	lt
 8006e40:	4618      	movlt	r0, r3
 8006e42:	e734      	b.n	8006cae <_printf_float+0xbe>
 8006e44:	2301      	movs	r3, #1
 8006e46:	464a      	mov	r2, r9
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	f43f af2b 	beq.w	8006caa <_printf_float+0xba>
 8006e54:	f108 0801 	add.w	r8, r8, #1
 8006e58:	e7e6      	b.n	8006e28 <_printf_float+0x238>
 8006e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dc2b      	bgt.n	8006eb8 <_printf_float+0x2c8>
 8006e60:	2301      	movs	r3, #1
 8006e62:	4a26      	ldr	r2, [pc, #152]	; (8006efc <_printf_float+0x30c>)
 8006e64:	4631      	mov	r1, r6
 8006e66:	4628      	mov	r0, r5
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	f43f af1d 	beq.w	8006caa <_printf_float+0xba>
 8006e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e72:	b923      	cbnz	r3, 8006e7e <_printf_float+0x28e>
 8006e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e76:	b913      	cbnz	r3, 8006e7e <_printf_float+0x28e>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	07d9      	lsls	r1, r3, #31
 8006e7c:	d5d8      	bpl.n	8006e30 <_printf_float+0x240>
 8006e7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e82:	4631      	mov	r1, r6
 8006e84:	4628      	mov	r0, r5
 8006e86:	47b8      	blx	r7
 8006e88:	3001      	adds	r0, #1
 8006e8a:	f43f af0e 	beq.w	8006caa <_printf_float+0xba>
 8006e8e:	f04f 0900 	mov.w	r9, #0
 8006e92:	f104 0a1a 	add.w	sl, r4, #26
 8006e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e98:	425b      	negs	r3, r3
 8006e9a:	454b      	cmp	r3, r9
 8006e9c:	dc01      	bgt.n	8006ea2 <_printf_float+0x2b2>
 8006e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea0:	e794      	b.n	8006dcc <_printf_float+0x1dc>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4652      	mov	r2, sl
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	f43f aefc 	beq.w	8006caa <_printf_float+0xba>
 8006eb2:	f109 0901 	add.w	r9, r9, #1
 8006eb6:	e7ee      	b.n	8006e96 <_printf_float+0x2a6>
 8006eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	bfa8      	it	ge
 8006ec0:	461a      	movge	r2, r3
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	4691      	mov	r9, r2
 8006ec6:	dd07      	ble.n	8006ed8 <_printf_float+0x2e8>
 8006ec8:	4613      	mov	r3, r2
 8006eca:	4631      	mov	r1, r6
 8006ecc:	4642      	mov	r2, r8
 8006ece:	4628      	mov	r0, r5
 8006ed0:	47b8      	blx	r7
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	f43f aee9 	beq.w	8006caa <_printf_float+0xba>
 8006ed8:	f104 031a 	add.w	r3, r4, #26
 8006edc:	f04f 0b00 	mov.w	fp, #0
 8006ee0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ee4:	9306      	str	r3, [sp, #24]
 8006ee6:	e015      	b.n	8006f14 <_printf_float+0x324>
 8006ee8:	7fefffff 	.word	0x7fefffff
 8006eec:	08009488 	.word	0x08009488
 8006ef0:	08009484 	.word	0x08009484
 8006ef4:	08009490 	.word	0x08009490
 8006ef8:	0800948c 	.word	0x0800948c
 8006efc:	080095eb 	.word	0x080095eb
 8006f00:	2301      	movs	r3, #1
 8006f02:	9a06      	ldr	r2, [sp, #24]
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f43f aecd 	beq.w	8006caa <_printf_float+0xba>
 8006f10:	f10b 0b01 	add.w	fp, fp, #1
 8006f14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006f18:	ebaa 0309 	sub.w	r3, sl, r9
 8006f1c:	455b      	cmp	r3, fp
 8006f1e:	dcef      	bgt.n	8006f00 <_printf_float+0x310>
 8006f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f24:	429a      	cmp	r2, r3
 8006f26:	44d0      	add	r8, sl
 8006f28:	db15      	blt.n	8006f56 <_printf_float+0x366>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	07da      	lsls	r2, r3, #31
 8006f2e:	d412      	bmi.n	8006f56 <_printf_float+0x366>
 8006f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f34:	eba3 020a 	sub.w	r2, r3, sl
 8006f38:	eba3 0a01 	sub.w	sl, r3, r1
 8006f3c:	4592      	cmp	sl, r2
 8006f3e:	bfa8      	it	ge
 8006f40:	4692      	movge	sl, r2
 8006f42:	f1ba 0f00 	cmp.w	sl, #0
 8006f46:	dc0e      	bgt.n	8006f66 <_printf_float+0x376>
 8006f48:	f04f 0800 	mov.w	r8, #0
 8006f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f50:	f104 091a 	add.w	r9, r4, #26
 8006f54:	e019      	b.n	8006f8a <_printf_float+0x39a>
 8006f56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	d1e5      	bne.n	8006f30 <_printf_float+0x340>
 8006f64:	e6a1      	b.n	8006caa <_printf_float+0xba>
 8006f66:	4653      	mov	r3, sl
 8006f68:	4642      	mov	r2, r8
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	d1e9      	bne.n	8006f48 <_printf_float+0x358>
 8006f74:	e699      	b.n	8006caa <_printf_float+0xba>
 8006f76:	2301      	movs	r3, #1
 8006f78:	464a      	mov	r2, r9
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	f43f ae92 	beq.w	8006caa <_printf_float+0xba>
 8006f86:	f108 0801 	add.w	r8, r8, #1
 8006f8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	eba3 030a 	sub.w	r3, r3, sl
 8006f94:	4543      	cmp	r3, r8
 8006f96:	dcee      	bgt.n	8006f76 <_printf_float+0x386>
 8006f98:	e74a      	b.n	8006e30 <_printf_float+0x240>
 8006f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f9c:	2a01      	cmp	r2, #1
 8006f9e:	dc01      	bgt.n	8006fa4 <_printf_float+0x3b4>
 8006fa0:	07db      	lsls	r3, r3, #31
 8006fa2:	d53a      	bpl.n	800701a <_printf_float+0x42a>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	4631      	mov	r1, r6
 8006faa:	4628      	mov	r0, r5
 8006fac:	47b8      	blx	r7
 8006fae:	3001      	adds	r0, #1
 8006fb0:	f43f ae7b 	beq.w	8006caa <_printf_float+0xba>
 8006fb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4628      	mov	r0, r5
 8006fbc:	47b8      	blx	r7
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	f108 0801 	add.w	r8, r8, #1
 8006fc4:	f43f ae71 	beq.w	8006caa <_printf_float+0xba>
 8006fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f103 3aff 	add.w	sl, r3, #4294967295
 8006fd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f7f9 fd7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fda:	b9c8      	cbnz	r0, 8007010 <_printf_float+0x420>
 8006fdc:	4653      	mov	r3, sl
 8006fde:	4642      	mov	r2, r8
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	47b8      	blx	r7
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d10e      	bne.n	8007008 <_printf_float+0x418>
 8006fea:	e65e      	b.n	8006caa <_printf_float+0xba>
 8006fec:	2301      	movs	r3, #1
 8006fee:	4652      	mov	r2, sl
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b8      	blx	r7
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	f43f ae57 	beq.w	8006caa <_printf_float+0xba>
 8006ffc:	f108 0801 	add.w	r8, r8, #1
 8007000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007002:	3b01      	subs	r3, #1
 8007004:	4543      	cmp	r3, r8
 8007006:	dcf1      	bgt.n	8006fec <_printf_float+0x3fc>
 8007008:	464b      	mov	r3, r9
 800700a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800700e:	e6de      	b.n	8006dce <_printf_float+0x1de>
 8007010:	f04f 0800 	mov.w	r8, #0
 8007014:	f104 0a1a 	add.w	sl, r4, #26
 8007018:	e7f2      	b.n	8007000 <_printf_float+0x410>
 800701a:	2301      	movs	r3, #1
 800701c:	e7df      	b.n	8006fde <_printf_float+0x3ee>
 800701e:	2301      	movs	r3, #1
 8007020:	464a      	mov	r2, r9
 8007022:	4631      	mov	r1, r6
 8007024:	4628      	mov	r0, r5
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	f43f ae3e 	beq.w	8006caa <_printf_float+0xba>
 800702e:	f108 0801 	add.w	r8, r8, #1
 8007032:	68e3      	ldr	r3, [r4, #12]
 8007034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007036:	1a9b      	subs	r3, r3, r2
 8007038:	4543      	cmp	r3, r8
 800703a:	dcf0      	bgt.n	800701e <_printf_float+0x42e>
 800703c:	e6fc      	b.n	8006e38 <_printf_float+0x248>
 800703e:	f04f 0800 	mov.w	r8, #0
 8007042:	f104 0919 	add.w	r9, r4, #25
 8007046:	e7f4      	b.n	8007032 <_printf_float+0x442>
 8007048:	2900      	cmp	r1, #0
 800704a:	f43f ae8b 	beq.w	8006d64 <_printf_float+0x174>
 800704e:	2300      	movs	r3, #0
 8007050:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007054:	ab09      	add	r3, sp, #36	; 0x24
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	ec49 8b10 	vmov	d0, r8, r9
 800705c:	6022      	str	r2, [r4, #0]
 800705e:	f8cd a004 	str.w	sl, [sp, #4]
 8007062:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007066:	4628      	mov	r0, r5
 8007068:	f7ff fd2e 	bl	8006ac8 <__cvt>
 800706c:	4680      	mov	r8, r0
 800706e:	e648      	b.n	8006d02 <_printf_float+0x112>

08007070 <_printf_common>:
 8007070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007074:	4691      	mov	r9, r2
 8007076:	461f      	mov	r7, r3
 8007078:	688a      	ldr	r2, [r1, #8]
 800707a:	690b      	ldr	r3, [r1, #16]
 800707c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007080:	4293      	cmp	r3, r2
 8007082:	bfb8      	it	lt
 8007084:	4613      	movlt	r3, r2
 8007086:	f8c9 3000 	str.w	r3, [r9]
 800708a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800708e:	4606      	mov	r6, r0
 8007090:	460c      	mov	r4, r1
 8007092:	b112      	cbz	r2, 800709a <_printf_common+0x2a>
 8007094:	3301      	adds	r3, #1
 8007096:	f8c9 3000 	str.w	r3, [r9]
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	0699      	lsls	r1, r3, #26
 800709e:	bf42      	ittt	mi
 80070a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80070a4:	3302      	addmi	r3, #2
 80070a6:	f8c9 3000 	strmi.w	r3, [r9]
 80070aa:	6825      	ldr	r5, [r4, #0]
 80070ac:	f015 0506 	ands.w	r5, r5, #6
 80070b0:	d107      	bne.n	80070c2 <_printf_common+0x52>
 80070b2:	f104 0a19 	add.w	sl, r4, #25
 80070b6:	68e3      	ldr	r3, [r4, #12]
 80070b8:	f8d9 2000 	ldr.w	r2, [r9]
 80070bc:	1a9b      	subs	r3, r3, r2
 80070be:	42ab      	cmp	r3, r5
 80070c0:	dc28      	bgt.n	8007114 <_printf_common+0xa4>
 80070c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	3300      	adds	r3, #0
 80070ca:	bf18      	it	ne
 80070cc:	2301      	movne	r3, #1
 80070ce:	0692      	lsls	r2, r2, #26
 80070d0:	d42d      	bmi.n	800712e <_printf_common+0xbe>
 80070d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070d6:	4639      	mov	r1, r7
 80070d8:	4630      	mov	r0, r6
 80070da:	47c0      	blx	r8
 80070dc:	3001      	adds	r0, #1
 80070de:	d020      	beq.n	8007122 <_printf_common+0xb2>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	68e5      	ldr	r5, [r4, #12]
 80070e4:	f8d9 2000 	ldr.w	r2, [r9]
 80070e8:	f003 0306 	and.w	r3, r3, #6
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	bf08      	it	eq
 80070f0:	1aad      	subeq	r5, r5, r2
 80070f2:	68a3      	ldr	r3, [r4, #8]
 80070f4:	6922      	ldr	r2, [r4, #16]
 80070f6:	bf0c      	ite	eq
 80070f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070fc:	2500      	movne	r5, #0
 80070fe:	4293      	cmp	r3, r2
 8007100:	bfc4      	itt	gt
 8007102:	1a9b      	subgt	r3, r3, r2
 8007104:	18ed      	addgt	r5, r5, r3
 8007106:	f04f 0900 	mov.w	r9, #0
 800710a:	341a      	adds	r4, #26
 800710c:	454d      	cmp	r5, r9
 800710e:	d11a      	bne.n	8007146 <_printf_common+0xd6>
 8007110:	2000      	movs	r0, #0
 8007112:	e008      	b.n	8007126 <_printf_common+0xb6>
 8007114:	2301      	movs	r3, #1
 8007116:	4652      	mov	r2, sl
 8007118:	4639      	mov	r1, r7
 800711a:	4630      	mov	r0, r6
 800711c:	47c0      	blx	r8
 800711e:	3001      	adds	r0, #1
 8007120:	d103      	bne.n	800712a <_printf_common+0xba>
 8007122:	f04f 30ff 	mov.w	r0, #4294967295
 8007126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800712a:	3501      	adds	r5, #1
 800712c:	e7c3      	b.n	80070b6 <_printf_common+0x46>
 800712e:	18e1      	adds	r1, r4, r3
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	2030      	movs	r0, #48	; 0x30
 8007134:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007138:	4422      	add	r2, r4
 800713a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800713e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007142:	3302      	adds	r3, #2
 8007144:	e7c5      	b.n	80070d2 <_printf_common+0x62>
 8007146:	2301      	movs	r3, #1
 8007148:	4622      	mov	r2, r4
 800714a:	4639      	mov	r1, r7
 800714c:	4630      	mov	r0, r6
 800714e:	47c0      	blx	r8
 8007150:	3001      	adds	r0, #1
 8007152:	d0e6      	beq.n	8007122 <_printf_common+0xb2>
 8007154:	f109 0901 	add.w	r9, r9, #1
 8007158:	e7d8      	b.n	800710c <_printf_common+0x9c>
	...

0800715c <_printf_i>:
 800715c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007160:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007164:	460c      	mov	r4, r1
 8007166:	7e09      	ldrb	r1, [r1, #24]
 8007168:	b085      	sub	sp, #20
 800716a:	296e      	cmp	r1, #110	; 0x6e
 800716c:	4617      	mov	r7, r2
 800716e:	4606      	mov	r6, r0
 8007170:	4698      	mov	r8, r3
 8007172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007174:	f000 80b3 	beq.w	80072de <_printf_i+0x182>
 8007178:	d822      	bhi.n	80071c0 <_printf_i+0x64>
 800717a:	2963      	cmp	r1, #99	; 0x63
 800717c:	d036      	beq.n	80071ec <_printf_i+0x90>
 800717e:	d80a      	bhi.n	8007196 <_printf_i+0x3a>
 8007180:	2900      	cmp	r1, #0
 8007182:	f000 80b9 	beq.w	80072f8 <_printf_i+0x19c>
 8007186:	2958      	cmp	r1, #88	; 0x58
 8007188:	f000 8083 	beq.w	8007292 <_printf_i+0x136>
 800718c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007190:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007194:	e032      	b.n	80071fc <_printf_i+0xa0>
 8007196:	2964      	cmp	r1, #100	; 0x64
 8007198:	d001      	beq.n	800719e <_printf_i+0x42>
 800719a:	2969      	cmp	r1, #105	; 0x69
 800719c:	d1f6      	bne.n	800718c <_printf_i+0x30>
 800719e:	6820      	ldr	r0, [r4, #0]
 80071a0:	6813      	ldr	r3, [r2, #0]
 80071a2:	0605      	lsls	r5, r0, #24
 80071a4:	f103 0104 	add.w	r1, r3, #4
 80071a8:	d52a      	bpl.n	8007200 <_printf_i+0xa4>
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6011      	str	r1, [r2, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	da03      	bge.n	80071ba <_printf_i+0x5e>
 80071b2:	222d      	movs	r2, #45	; 0x2d
 80071b4:	425b      	negs	r3, r3
 80071b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80071ba:	486f      	ldr	r0, [pc, #444]	; (8007378 <_printf_i+0x21c>)
 80071bc:	220a      	movs	r2, #10
 80071be:	e039      	b.n	8007234 <_printf_i+0xd8>
 80071c0:	2973      	cmp	r1, #115	; 0x73
 80071c2:	f000 809d 	beq.w	8007300 <_printf_i+0x1a4>
 80071c6:	d808      	bhi.n	80071da <_printf_i+0x7e>
 80071c8:	296f      	cmp	r1, #111	; 0x6f
 80071ca:	d020      	beq.n	800720e <_printf_i+0xb2>
 80071cc:	2970      	cmp	r1, #112	; 0x70
 80071ce:	d1dd      	bne.n	800718c <_printf_i+0x30>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	f043 0320 	orr.w	r3, r3, #32
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	e003      	b.n	80071e2 <_printf_i+0x86>
 80071da:	2975      	cmp	r1, #117	; 0x75
 80071dc:	d017      	beq.n	800720e <_printf_i+0xb2>
 80071de:	2978      	cmp	r1, #120	; 0x78
 80071e0:	d1d4      	bne.n	800718c <_printf_i+0x30>
 80071e2:	2378      	movs	r3, #120	; 0x78
 80071e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071e8:	4864      	ldr	r0, [pc, #400]	; (800737c <_printf_i+0x220>)
 80071ea:	e055      	b.n	8007298 <_printf_i+0x13c>
 80071ec:	6813      	ldr	r3, [r2, #0]
 80071ee:	1d19      	adds	r1, r3, #4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6011      	str	r1, [r2, #0]
 80071f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071fc:	2301      	movs	r3, #1
 80071fe:	e08c      	b.n	800731a <_printf_i+0x1be>
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6011      	str	r1, [r2, #0]
 8007204:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007208:	bf18      	it	ne
 800720a:	b21b      	sxthne	r3, r3
 800720c:	e7cf      	b.n	80071ae <_printf_i+0x52>
 800720e:	6813      	ldr	r3, [r2, #0]
 8007210:	6825      	ldr	r5, [r4, #0]
 8007212:	1d18      	adds	r0, r3, #4
 8007214:	6010      	str	r0, [r2, #0]
 8007216:	0628      	lsls	r0, r5, #24
 8007218:	d501      	bpl.n	800721e <_printf_i+0xc2>
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	e002      	b.n	8007224 <_printf_i+0xc8>
 800721e:	0668      	lsls	r0, r5, #25
 8007220:	d5fb      	bpl.n	800721a <_printf_i+0xbe>
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	4854      	ldr	r0, [pc, #336]	; (8007378 <_printf_i+0x21c>)
 8007226:	296f      	cmp	r1, #111	; 0x6f
 8007228:	bf14      	ite	ne
 800722a:	220a      	movne	r2, #10
 800722c:	2208      	moveq	r2, #8
 800722e:	2100      	movs	r1, #0
 8007230:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007234:	6865      	ldr	r5, [r4, #4]
 8007236:	60a5      	str	r5, [r4, #8]
 8007238:	2d00      	cmp	r5, #0
 800723a:	f2c0 8095 	blt.w	8007368 <_printf_i+0x20c>
 800723e:	6821      	ldr	r1, [r4, #0]
 8007240:	f021 0104 	bic.w	r1, r1, #4
 8007244:	6021      	str	r1, [r4, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d13d      	bne.n	80072c6 <_printf_i+0x16a>
 800724a:	2d00      	cmp	r5, #0
 800724c:	f040 808e 	bne.w	800736c <_printf_i+0x210>
 8007250:	4665      	mov	r5, ip
 8007252:	2a08      	cmp	r2, #8
 8007254:	d10b      	bne.n	800726e <_printf_i+0x112>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	07db      	lsls	r3, r3, #31
 800725a:	d508      	bpl.n	800726e <_printf_i+0x112>
 800725c:	6923      	ldr	r3, [r4, #16]
 800725e:	6862      	ldr	r2, [r4, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	bfde      	ittt	le
 8007264:	2330      	movle	r3, #48	; 0x30
 8007266:	f805 3c01 	strble.w	r3, [r5, #-1]
 800726a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800726e:	ebac 0305 	sub.w	r3, ip, r5
 8007272:	6123      	str	r3, [r4, #16]
 8007274:	f8cd 8000 	str.w	r8, [sp]
 8007278:	463b      	mov	r3, r7
 800727a:	aa03      	add	r2, sp, #12
 800727c:	4621      	mov	r1, r4
 800727e:	4630      	mov	r0, r6
 8007280:	f7ff fef6 	bl	8007070 <_printf_common>
 8007284:	3001      	adds	r0, #1
 8007286:	d14d      	bne.n	8007324 <_printf_i+0x1c8>
 8007288:	f04f 30ff 	mov.w	r0, #4294967295
 800728c:	b005      	add	sp, #20
 800728e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007292:	4839      	ldr	r0, [pc, #228]	; (8007378 <_printf_i+0x21c>)
 8007294:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007298:	6813      	ldr	r3, [r2, #0]
 800729a:	6821      	ldr	r1, [r4, #0]
 800729c:	1d1d      	adds	r5, r3, #4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6015      	str	r5, [r2, #0]
 80072a2:	060a      	lsls	r2, r1, #24
 80072a4:	d50b      	bpl.n	80072be <_printf_i+0x162>
 80072a6:	07ca      	lsls	r2, r1, #31
 80072a8:	bf44      	itt	mi
 80072aa:	f041 0120 	orrmi.w	r1, r1, #32
 80072ae:	6021      	strmi	r1, [r4, #0]
 80072b0:	b91b      	cbnz	r3, 80072ba <_printf_i+0x15e>
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	f022 0220 	bic.w	r2, r2, #32
 80072b8:	6022      	str	r2, [r4, #0]
 80072ba:	2210      	movs	r2, #16
 80072bc:	e7b7      	b.n	800722e <_printf_i+0xd2>
 80072be:	064d      	lsls	r5, r1, #25
 80072c0:	bf48      	it	mi
 80072c2:	b29b      	uxthmi	r3, r3
 80072c4:	e7ef      	b.n	80072a6 <_printf_i+0x14a>
 80072c6:	4665      	mov	r5, ip
 80072c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80072cc:	fb02 3311 	mls	r3, r2, r1, r3
 80072d0:	5cc3      	ldrb	r3, [r0, r3]
 80072d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80072d6:	460b      	mov	r3, r1
 80072d8:	2900      	cmp	r1, #0
 80072da:	d1f5      	bne.n	80072c8 <_printf_i+0x16c>
 80072dc:	e7b9      	b.n	8007252 <_printf_i+0xf6>
 80072de:	6813      	ldr	r3, [r2, #0]
 80072e0:	6825      	ldr	r5, [r4, #0]
 80072e2:	6961      	ldr	r1, [r4, #20]
 80072e4:	1d18      	adds	r0, r3, #4
 80072e6:	6010      	str	r0, [r2, #0]
 80072e8:	0628      	lsls	r0, r5, #24
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	d501      	bpl.n	80072f2 <_printf_i+0x196>
 80072ee:	6019      	str	r1, [r3, #0]
 80072f0:	e002      	b.n	80072f8 <_printf_i+0x19c>
 80072f2:	066a      	lsls	r2, r5, #25
 80072f4:	d5fb      	bpl.n	80072ee <_printf_i+0x192>
 80072f6:	8019      	strh	r1, [r3, #0]
 80072f8:	2300      	movs	r3, #0
 80072fa:	6123      	str	r3, [r4, #16]
 80072fc:	4665      	mov	r5, ip
 80072fe:	e7b9      	b.n	8007274 <_printf_i+0x118>
 8007300:	6813      	ldr	r3, [r2, #0]
 8007302:	1d19      	adds	r1, r3, #4
 8007304:	6011      	str	r1, [r2, #0]
 8007306:	681d      	ldr	r5, [r3, #0]
 8007308:	6862      	ldr	r2, [r4, #4]
 800730a:	2100      	movs	r1, #0
 800730c:	4628      	mov	r0, r5
 800730e:	f7f8 ff6f 	bl	80001f0 <memchr>
 8007312:	b108      	cbz	r0, 8007318 <_printf_i+0x1bc>
 8007314:	1b40      	subs	r0, r0, r5
 8007316:	6060      	str	r0, [r4, #4]
 8007318:	6863      	ldr	r3, [r4, #4]
 800731a:	6123      	str	r3, [r4, #16]
 800731c:	2300      	movs	r3, #0
 800731e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007322:	e7a7      	b.n	8007274 <_printf_i+0x118>
 8007324:	6923      	ldr	r3, [r4, #16]
 8007326:	462a      	mov	r2, r5
 8007328:	4639      	mov	r1, r7
 800732a:	4630      	mov	r0, r6
 800732c:	47c0      	blx	r8
 800732e:	3001      	adds	r0, #1
 8007330:	d0aa      	beq.n	8007288 <_printf_i+0x12c>
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	079b      	lsls	r3, r3, #30
 8007336:	d413      	bmi.n	8007360 <_printf_i+0x204>
 8007338:	68e0      	ldr	r0, [r4, #12]
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	4298      	cmp	r0, r3
 800733e:	bfb8      	it	lt
 8007340:	4618      	movlt	r0, r3
 8007342:	e7a3      	b.n	800728c <_printf_i+0x130>
 8007344:	2301      	movs	r3, #1
 8007346:	464a      	mov	r2, r9
 8007348:	4639      	mov	r1, r7
 800734a:	4630      	mov	r0, r6
 800734c:	47c0      	blx	r8
 800734e:	3001      	adds	r0, #1
 8007350:	d09a      	beq.n	8007288 <_printf_i+0x12c>
 8007352:	3501      	adds	r5, #1
 8007354:	68e3      	ldr	r3, [r4, #12]
 8007356:	9a03      	ldr	r2, [sp, #12]
 8007358:	1a9b      	subs	r3, r3, r2
 800735a:	42ab      	cmp	r3, r5
 800735c:	dcf2      	bgt.n	8007344 <_printf_i+0x1e8>
 800735e:	e7eb      	b.n	8007338 <_printf_i+0x1dc>
 8007360:	2500      	movs	r5, #0
 8007362:	f104 0919 	add.w	r9, r4, #25
 8007366:	e7f5      	b.n	8007354 <_printf_i+0x1f8>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1ac      	bne.n	80072c6 <_printf_i+0x16a>
 800736c:	7803      	ldrb	r3, [r0, #0]
 800736e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007372:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007376:	e76c      	b.n	8007252 <_printf_i+0xf6>
 8007378:	08009494 	.word	0x08009494
 800737c:	080094a5 	.word	0x080094a5

08007380 <_sbrk_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4c06      	ldr	r4, [pc, #24]	; (800739c <_sbrk_r+0x1c>)
 8007384:	2300      	movs	r3, #0
 8007386:	4605      	mov	r5, r0
 8007388:	4608      	mov	r0, r1
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	f7fb fa80 	bl	8002890 <_sbrk>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_sbrk_r+0x1a>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	b103      	cbz	r3, 800739a <_sbrk_r+0x1a>
 8007398:	602b      	str	r3, [r5, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	20000524 	.word	0x20000524

080073a0 <_raise_r>:
 80073a0:	291f      	cmp	r1, #31
 80073a2:	b538      	push	{r3, r4, r5, lr}
 80073a4:	4604      	mov	r4, r0
 80073a6:	460d      	mov	r5, r1
 80073a8:	d904      	bls.n	80073b4 <_raise_r+0x14>
 80073aa:	2316      	movs	r3, #22
 80073ac:	6003      	str	r3, [r0, #0]
 80073ae:	f04f 30ff 	mov.w	r0, #4294967295
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073b6:	b112      	cbz	r2, 80073be <_raise_r+0x1e>
 80073b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073bc:	b94b      	cbnz	r3, 80073d2 <_raise_r+0x32>
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 f830 	bl	8007424 <_getpid_r>
 80073c4:	462a      	mov	r2, r5
 80073c6:	4601      	mov	r1, r0
 80073c8:	4620      	mov	r0, r4
 80073ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ce:	f000 b817 	b.w	8007400 <_kill_r>
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d00a      	beq.n	80073ec <_raise_r+0x4c>
 80073d6:	1c59      	adds	r1, r3, #1
 80073d8:	d103      	bne.n	80073e2 <_raise_r+0x42>
 80073da:	2316      	movs	r3, #22
 80073dc:	6003      	str	r3, [r0, #0]
 80073de:	2001      	movs	r0, #1
 80073e0:	e7e7      	b.n	80073b2 <_raise_r+0x12>
 80073e2:	2400      	movs	r4, #0
 80073e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073e8:	4628      	mov	r0, r5
 80073ea:	4798      	blx	r3
 80073ec:	2000      	movs	r0, #0
 80073ee:	e7e0      	b.n	80073b2 <_raise_r+0x12>

080073f0 <raise>:
 80073f0:	4b02      	ldr	r3, [pc, #8]	; (80073fc <raise+0xc>)
 80073f2:	4601      	mov	r1, r0
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	f7ff bfd3 	b.w	80073a0 <_raise_r>
 80073fa:	bf00      	nop
 80073fc:	2000000c 	.word	0x2000000c

08007400 <_kill_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4c07      	ldr	r4, [pc, #28]	; (8007420 <_kill_r+0x20>)
 8007404:	2300      	movs	r3, #0
 8007406:	4605      	mov	r5, r0
 8007408:	4608      	mov	r0, r1
 800740a:	4611      	mov	r1, r2
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	f7fb fa25 	bl	800285c <_kill>
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	d102      	bne.n	800741c <_kill_r+0x1c>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	b103      	cbz	r3, 800741c <_kill_r+0x1c>
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	bd38      	pop	{r3, r4, r5, pc}
 800741e:	bf00      	nop
 8007420:	20000524 	.word	0x20000524

08007424 <_getpid_r>:
 8007424:	f7fb ba12 	b.w	800284c <_getpid>

08007428 <siprintf>:
 8007428:	b40e      	push	{r1, r2, r3}
 800742a:	b500      	push	{lr}
 800742c:	b09c      	sub	sp, #112	; 0x70
 800742e:	ab1d      	add	r3, sp, #116	; 0x74
 8007430:	9002      	str	r0, [sp, #8]
 8007432:	9006      	str	r0, [sp, #24]
 8007434:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007438:	4809      	ldr	r0, [pc, #36]	; (8007460 <siprintf+0x38>)
 800743a:	9107      	str	r1, [sp, #28]
 800743c:	9104      	str	r1, [sp, #16]
 800743e:	4909      	ldr	r1, [pc, #36]	; (8007464 <siprintf+0x3c>)
 8007440:	f853 2b04 	ldr.w	r2, [r3], #4
 8007444:	9105      	str	r1, [sp, #20]
 8007446:	6800      	ldr	r0, [r0, #0]
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	a902      	add	r1, sp, #8
 800744c:	f001 f9da 	bl	8008804 <_svfiprintf_r>
 8007450:	9b02      	ldr	r3, [sp, #8]
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	b01c      	add	sp, #112	; 0x70
 8007458:	f85d eb04 	ldr.w	lr, [sp], #4
 800745c:	b003      	add	sp, #12
 800745e:	4770      	bx	lr
 8007460:	2000000c 	.word	0x2000000c
 8007464:	ffff0208 	.word	0xffff0208

08007468 <siscanf>:
 8007468:	b40e      	push	{r1, r2, r3}
 800746a:	b530      	push	{r4, r5, lr}
 800746c:	b09c      	sub	sp, #112	; 0x70
 800746e:	ac1f      	add	r4, sp, #124	; 0x7c
 8007470:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007474:	f854 5b04 	ldr.w	r5, [r4], #4
 8007478:	f8ad 2014 	strh.w	r2, [sp, #20]
 800747c:	9002      	str	r0, [sp, #8]
 800747e:	9006      	str	r0, [sp, #24]
 8007480:	f7f8 feae 	bl	80001e0 <strlen>
 8007484:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <siscanf+0x4c>)
 8007486:	9003      	str	r0, [sp, #12]
 8007488:	9007      	str	r0, [sp, #28]
 800748a:	930b      	str	r3, [sp, #44]	; 0x2c
 800748c:	480a      	ldr	r0, [pc, #40]	; (80074b8 <siscanf+0x50>)
 800748e:	9401      	str	r4, [sp, #4]
 8007490:	2300      	movs	r3, #0
 8007492:	930f      	str	r3, [sp, #60]	; 0x3c
 8007494:	9314      	str	r3, [sp, #80]	; 0x50
 8007496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800749a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800749e:	462a      	mov	r2, r5
 80074a0:	4623      	mov	r3, r4
 80074a2:	a902      	add	r1, sp, #8
 80074a4:	6800      	ldr	r0, [r0, #0]
 80074a6:	f001 faff 	bl	8008aa8 <__ssvfiscanf_r>
 80074aa:	b01c      	add	sp, #112	; 0x70
 80074ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074b0:	b003      	add	sp, #12
 80074b2:	4770      	bx	lr
 80074b4:	080074bd 	.word	0x080074bd
 80074b8:	2000000c 	.word	0x2000000c

080074bc <__seofread>:
 80074bc:	2000      	movs	r0, #0
 80074be:	4770      	bx	lr

080074c0 <quorem>:
 80074c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	6903      	ldr	r3, [r0, #16]
 80074c6:	690c      	ldr	r4, [r1, #16]
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	4680      	mov	r8, r0
 80074cc:	f2c0 8082 	blt.w	80075d4 <quorem+0x114>
 80074d0:	3c01      	subs	r4, #1
 80074d2:	f101 0714 	add.w	r7, r1, #20
 80074d6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80074da:	f100 0614 	add.w	r6, r0, #20
 80074de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80074e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80074e6:	eb06 030c 	add.w	r3, r6, ip
 80074ea:	3501      	adds	r5, #1
 80074ec:	eb07 090c 	add.w	r9, r7, ip
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	fbb0 f5f5 	udiv	r5, r0, r5
 80074f6:	b395      	cbz	r5, 800755e <quorem+0x9e>
 80074f8:	f04f 0a00 	mov.w	sl, #0
 80074fc:	4638      	mov	r0, r7
 80074fe:	46b6      	mov	lr, r6
 8007500:	46d3      	mov	fp, sl
 8007502:	f850 2b04 	ldr.w	r2, [r0], #4
 8007506:	b293      	uxth	r3, r2
 8007508:	fb05 a303 	mla	r3, r5, r3, sl
 800750c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007510:	b29b      	uxth	r3, r3
 8007512:	ebab 0303 	sub.w	r3, fp, r3
 8007516:	0c12      	lsrs	r2, r2, #16
 8007518:	f8de b000 	ldr.w	fp, [lr]
 800751c:	fb05 a202 	mla	r2, r5, r2, sl
 8007520:	fa13 f38b 	uxtah	r3, r3, fp
 8007524:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007528:	fa1f fb82 	uxth.w	fp, r2
 800752c:	f8de 2000 	ldr.w	r2, [lr]
 8007530:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007538:	b29b      	uxth	r3, r3
 800753a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800753e:	4581      	cmp	r9, r0
 8007540:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007544:	f84e 3b04 	str.w	r3, [lr], #4
 8007548:	d2db      	bcs.n	8007502 <quorem+0x42>
 800754a:	f856 300c 	ldr.w	r3, [r6, ip]
 800754e:	b933      	cbnz	r3, 800755e <quorem+0x9e>
 8007550:	9b01      	ldr	r3, [sp, #4]
 8007552:	3b04      	subs	r3, #4
 8007554:	429e      	cmp	r6, r3
 8007556:	461a      	mov	r2, r3
 8007558:	d330      	bcc.n	80075bc <quorem+0xfc>
 800755a:	f8c8 4010 	str.w	r4, [r8, #16]
 800755e:	4640      	mov	r0, r8
 8007560:	f001 f822 	bl	80085a8 <__mcmp>
 8007564:	2800      	cmp	r0, #0
 8007566:	db25      	blt.n	80075b4 <quorem+0xf4>
 8007568:	3501      	adds	r5, #1
 800756a:	4630      	mov	r0, r6
 800756c:	f04f 0c00 	mov.w	ip, #0
 8007570:	f857 2b04 	ldr.w	r2, [r7], #4
 8007574:	f8d0 e000 	ldr.w	lr, [r0]
 8007578:	b293      	uxth	r3, r2
 800757a:	ebac 0303 	sub.w	r3, ip, r3
 800757e:	0c12      	lsrs	r2, r2, #16
 8007580:	fa13 f38e 	uxtah	r3, r3, lr
 8007584:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007588:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800758c:	b29b      	uxth	r3, r3
 800758e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007592:	45b9      	cmp	r9, r7
 8007594:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007598:	f840 3b04 	str.w	r3, [r0], #4
 800759c:	d2e8      	bcs.n	8007570 <quorem+0xb0>
 800759e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80075a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80075a6:	b92a      	cbnz	r2, 80075b4 <quorem+0xf4>
 80075a8:	3b04      	subs	r3, #4
 80075aa:	429e      	cmp	r6, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	d30b      	bcc.n	80075c8 <quorem+0x108>
 80075b0:	f8c8 4010 	str.w	r4, [r8, #16]
 80075b4:	4628      	mov	r0, r5
 80075b6:	b003      	add	sp, #12
 80075b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	3b04      	subs	r3, #4
 80075c0:	2a00      	cmp	r2, #0
 80075c2:	d1ca      	bne.n	800755a <quorem+0x9a>
 80075c4:	3c01      	subs	r4, #1
 80075c6:	e7c5      	b.n	8007554 <quorem+0x94>
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	3b04      	subs	r3, #4
 80075cc:	2a00      	cmp	r2, #0
 80075ce:	d1ef      	bne.n	80075b0 <quorem+0xf0>
 80075d0:	3c01      	subs	r4, #1
 80075d2:	e7ea      	b.n	80075aa <quorem+0xea>
 80075d4:	2000      	movs	r0, #0
 80075d6:	e7ee      	b.n	80075b6 <quorem+0xf6>

080075d8 <_dtoa_r>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	ec57 6b10 	vmov	r6, r7, d0
 80075e0:	b097      	sub	sp, #92	; 0x5c
 80075e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075e4:	9106      	str	r1, [sp, #24]
 80075e6:	4604      	mov	r4, r0
 80075e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80075ea:	9312      	str	r3, [sp, #72]	; 0x48
 80075ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80075f0:	e9cd 6700 	strd	r6, r7, [sp]
 80075f4:	b93d      	cbnz	r5, 8007606 <_dtoa_r+0x2e>
 80075f6:	2010      	movs	r0, #16
 80075f8:	f7ff f9ae 	bl	8006958 <malloc>
 80075fc:	6260      	str	r0, [r4, #36]	; 0x24
 80075fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007602:	6005      	str	r5, [r0, #0]
 8007604:	60c5      	str	r5, [r0, #12]
 8007606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007608:	6819      	ldr	r1, [r3, #0]
 800760a:	b151      	cbz	r1, 8007622 <_dtoa_r+0x4a>
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	604a      	str	r2, [r1, #4]
 8007610:	2301      	movs	r3, #1
 8007612:	4093      	lsls	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
 8007616:	4620      	mov	r0, r4
 8007618:	f000 fde5 	bl	80081e6 <_Bfree>
 800761c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	1e3b      	subs	r3, r7, #0
 8007624:	bfbb      	ittet	lt
 8007626:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800762a:	9301      	strlt	r3, [sp, #4]
 800762c:	2300      	movge	r3, #0
 800762e:	2201      	movlt	r2, #1
 8007630:	bfac      	ite	ge
 8007632:	f8c8 3000 	strge.w	r3, [r8]
 8007636:	f8c8 2000 	strlt.w	r2, [r8]
 800763a:	4baf      	ldr	r3, [pc, #700]	; (80078f8 <_dtoa_r+0x320>)
 800763c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007640:	ea33 0308 	bics.w	r3, r3, r8
 8007644:	d114      	bne.n	8007670 <_dtoa_r+0x98>
 8007646:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007648:	f242 730f 	movw	r3, #9999	; 0x270f
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	b923      	cbnz	r3, 800765c <_dtoa_r+0x84>
 8007652:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007656:	2800      	cmp	r0, #0
 8007658:	f000 8542 	beq.w	80080e0 <_dtoa_r+0xb08>
 800765c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800765e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800790c <_dtoa_r+0x334>
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 8544 	beq.w	80080f0 <_dtoa_r+0xb18>
 8007668:	f10b 0303 	add.w	r3, fp, #3
 800766c:	f000 bd3e 	b.w	80080ec <_dtoa_r+0xb14>
 8007670:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007674:	2200      	movs	r2, #0
 8007676:	2300      	movs	r3, #0
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f9 fa2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007680:	4681      	mov	r9, r0
 8007682:	b168      	cbz	r0, 80076a0 <_dtoa_r+0xc8>
 8007684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007686:	2301      	movs	r3, #1
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8524 	beq.w	80080da <_dtoa_r+0xb02>
 8007692:	4b9a      	ldr	r3, [pc, #616]	; (80078fc <_dtoa_r+0x324>)
 8007694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007696:	f103 3bff 	add.w	fp, r3, #4294967295
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	f000 bd28 	b.w	80080f0 <_dtoa_r+0xb18>
 80076a0:	aa14      	add	r2, sp, #80	; 0x50
 80076a2:	a915      	add	r1, sp, #84	; 0x54
 80076a4:	ec47 6b10 	vmov	d0, r6, r7
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fff4 	bl	8008696 <__d2b>
 80076ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80076b2:	9004      	str	r0, [sp, #16]
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	d07c      	beq.n	80077b2 <_dtoa_r+0x1da>
 80076b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80076c0:	46b2      	mov	sl, r6
 80076c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80076c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80076ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80076ce:	2200      	movs	r2, #0
 80076d0:	4b8b      	ldr	r3, [pc, #556]	; (8007900 <_dtoa_r+0x328>)
 80076d2:	4650      	mov	r0, sl
 80076d4:	4659      	mov	r1, fp
 80076d6:	f7f8 fddf 	bl	8000298 <__aeabi_dsub>
 80076da:	a381      	add	r3, pc, #516	; (adr r3, 80078e0 <_dtoa_r+0x308>)
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f7f8 ff92 	bl	8000608 <__aeabi_dmul>
 80076e4:	a380      	add	r3, pc, #512	; (adr r3, 80078e8 <_dtoa_r+0x310>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f7f8 fdd7 	bl	800029c <__adddf3>
 80076ee:	4606      	mov	r6, r0
 80076f0:	4628      	mov	r0, r5
 80076f2:	460f      	mov	r7, r1
 80076f4:	f7f8 ff1e 	bl	8000534 <__aeabi_i2d>
 80076f8:	a37d      	add	r3, pc, #500	; (adr r3, 80078f0 <_dtoa_r+0x318>)
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f7f8 ff83 	bl	8000608 <__aeabi_dmul>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4630      	mov	r0, r6
 8007708:	4639      	mov	r1, r7
 800770a:	f7f8 fdc7 	bl	800029c <__adddf3>
 800770e:	4606      	mov	r6, r0
 8007710:	460f      	mov	r7, r1
 8007712:	f7f9 fa29 	bl	8000b68 <__aeabi_d2iz>
 8007716:	2200      	movs	r2, #0
 8007718:	4682      	mov	sl, r0
 800771a:	2300      	movs	r3, #0
 800771c:	4630      	mov	r0, r6
 800771e:	4639      	mov	r1, r7
 8007720:	f7f9 f9e4 	bl	8000aec <__aeabi_dcmplt>
 8007724:	b148      	cbz	r0, 800773a <_dtoa_r+0x162>
 8007726:	4650      	mov	r0, sl
 8007728:	f7f8 ff04 	bl	8000534 <__aeabi_i2d>
 800772c:	4632      	mov	r2, r6
 800772e:	463b      	mov	r3, r7
 8007730:	f7f9 f9d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007734:	b908      	cbnz	r0, 800773a <_dtoa_r+0x162>
 8007736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800773a:	f1ba 0f16 	cmp.w	sl, #22
 800773e:	d859      	bhi.n	80077f4 <_dtoa_r+0x21c>
 8007740:	4970      	ldr	r1, [pc, #448]	; (8007904 <_dtoa_r+0x32c>)
 8007742:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800774a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800774e:	f7f9 f9eb 	bl	8000b28 <__aeabi_dcmpgt>
 8007752:	2800      	cmp	r0, #0
 8007754:	d050      	beq.n	80077f8 <_dtoa_r+0x220>
 8007756:	f10a 3aff 	add.w	sl, sl, #4294967295
 800775a:	2300      	movs	r3, #0
 800775c:	930f      	str	r3, [sp, #60]	; 0x3c
 800775e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007760:	1b5d      	subs	r5, r3, r5
 8007762:	f1b5 0801 	subs.w	r8, r5, #1
 8007766:	bf49      	itett	mi
 8007768:	f1c5 0301 	rsbmi	r3, r5, #1
 800776c:	2300      	movpl	r3, #0
 800776e:	9305      	strmi	r3, [sp, #20]
 8007770:	f04f 0800 	movmi.w	r8, #0
 8007774:	bf58      	it	pl
 8007776:	9305      	strpl	r3, [sp, #20]
 8007778:	f1ba 0f00 	cmp.w	sl, #0
 800777c:	db3e      	blt.n	80077fc <_dtoa_r+0x224>
 800777e:	2300      	movs	r3, #0
 8007780:	44d0      	add	r8, sl
 8007782:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007786:	9307      	str	r3, [sp, #28]
 8007788:	9b06      	ldr	r3, [sp, #24]
 800778a:	2b09      	cmp	r3, #9
 800778c:	f200 8090 	bhi.w	80078b0 <_dtoa_r+0x2d8>
 8007790:	2b05      	cmp	r3, #5
 8007792:	bfc4      	itt	gt
 8007794:	3b04      	subgt	r3, #4
 8007796:	9306      	strgt	r3, [sp, #24]
 8007798:	9b06      	ldr	r3, [sp, #24]
 800779a:	f1a3 0302 	sub.w	r3, r3, #2
 800779e:	bfcc      	ite	gt
 80077a0:	2500      	movgt	r5, #0
 80077a2:	2501      	movle	r5, #1
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	f200 808f 	bhi.w	80078c8 <_dtoa_r+0x2f0>
 80077aa:	e8df f003 	tbb	[pc, r3]
 80077ae:	7f7d      	.short	0x7f7d
 80077b0:	7131      	.short	0x7131
 80077b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80077b6:	441d      	add	r5, r3
 80077b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80077bc:	2820      	cmp	r0, #32
 80077be:	dd13      	ble.n	80077e8 <_dtoa_r+0x210>
 80077c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80077c4:	9b00      	ldr	r3, [sp, #0]
 80077c6:	fa08 f800 	lsl.w	r8, r8, r0
 80077ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80077ce:	fa23 f000 	lsr.w	r0, r3, r0
 80077d2:	ea48 0000 	orr.w	r0, r8, r0
 80077d6:	f7f8 fe9d 	bl	8000514 <__aeabi_ui2d>
 80077da:	2301      	movs	r3, #1
 80077dc:	4682      	mov	sl, r0
 80077de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80077e2:	3d01      	subs	r5, #1
 80077e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80077e6:	e772      	b.n	80076ce <_dtoa_r+0xf6>
 80077e8:	9b00      	ldr	r3, [sp, #0]
 80077ea:	f1c0 0020 	rsb	r0, r0, #32
 80077ee:	fa03 f000 	lsl.w	r0, r3, r0
 80077f2:	e7f0      	b.n	80077d6 <_dtoa_r+0x1fe>
 80077f4:	2301      	movs	r3, #1
 80077f6:	e7b1      	b.n	800775c <_dtoa_r+0x184>
 80077f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80077fa:	e7b0      	b.n	800775e <_dtoa_r+0x186>
 80077fc:	9b05      	ldr	r3, [sp, #20]
 80077fe:	eba3 030a 	sub.w	r3, r3, sl
 8007802:	9305      	str	r3, [sp, #20]
 8007804:	f1ca 0300 	rsb	r3, sl, #0
 8007808:	9307      	str	r3, [sp, #28]
 800780a:	2300      	movs	r3, #0
 800780c:	930e      	str	r3, [sp, #56]	; 0x38
 800780e:	e7bb      	b.n	8007788 <_dtoa_r+0x1b0>
 8007810:	2301      	movs	r3, #1
 8007812:	930a      	str	r3, [sp, #40]	; 0x28
 8007814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007816:	2b00      	cmp	r3, #0
 8007818:	dd59      	ble.n	80078ce <_dtoa_r+0x2f6>
 800781a:	9302      	str	r3, [sp, #8]
 800781c:	4699      	mov	r9, r3
 800781e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007820:	2200      	movs	r2, #0
 8007822:	6072      	str	r2, [r6, #4]
 8007824:	2204      	movs	r2, #4
 8007826:	f102 0014 	add.w	r0, r2, #20
 800782a:	4298      	cmp	r0, r3
 800782c:	6871      	ldr	r1, [r6, #4]
 800782e:	d953      	bls.n	80078d8 <_dtoa_r+0x300>
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fca4 	bl	800817e <_Balloc>
 8007836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007838:	6030      	str	r0, [r6, #0]
 800783a:	f1b9 0f0e 	cmp.w	r9, #14
 800783e:	f8d3 b000 	ldr.w	fp, [r3]
 8007842:	f200 80e6 	bhi.w	8007a12 <_dtoa_r+0x43a>
 8007846:	2d00      	cmp	r5, #0
 8007848:	f000 80e3 	beq.w	8007a12 <_dtoa_r+0x43a>
 800784c:	ed9d 7b00 	vldr	d7, [sp]
 8007850:	f1ba 0f00 	cmp.w	sl, #0
 8007854:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007858:	dd74      	ble.n	8007944 <_dtoa_r+0x36c>
 800785a:	4a2a      	ldr	r2, [pc, #168]	; (8007904 <_dtoa_r+0x32c>)
 800785c:	f00a 030f 	and.w	r3, sl, #15
 8007860:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007864:	ed93 7b00 	vldr	d7, [r3]
 8007868:	ea4f 162a 	mov.w	r6, sl, asr #4
 800786c:	06f0      	lsls	r0, r6, #27
 800786e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007872:	d565      	bpl.n	8007940 <_dtoa_r+0x368>
 8007874:	4b24      	ldr	r3, [pc, #144]	; (8007908 <_dtoa_r+0x330>)
 8007876:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800787a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800787e:	f7f8 ffed 	bl	800085c <__aeabi_ddiv>
 8007882:	e9cd 0100 	strd	r0, r1, [sp]
 8007886:	f006 060f 	and.w	r6, r6, #15
 800788a:	2503      	movs	r5, #3
 800788c:	4f1e      	ldr	r7, [pc, #120]	; (8007908 <_dtoa_r+0x330>)
 800788e:	e04c      	b.n	800792a <_dtoa_r+0x352>
 8007890:	2301      	movs	r3, #1
 8007892:	930a      	str	r3, [sp, #40]	; 0x28
 8007894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007896:	4453      	add	r3, sl
 8007898:	f103 0901 	add.w	r9, r3, #1
 800789c:	9302      	str	r3, [sp, #8]
 800789e:	464b      	mov	r3, r9
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	bfb8      	it	lt
 80078a4:	2301      	movlt	r3, #1
 80078a6:	e7ba      	b.n	800781e <_dtoa_r+0x246>
 80078a8:	2300      	movs	r3, #0
 80078aa:	e7b2      	b.n	8007812 <_dtoa_r+0x23a>
 80078ac:	2300      	movs	r3, #0
 80078ae:	e7f0      	b.n	8007892 <_dtoa_r+0x2ba>
 80078b0:	2501      	movs	r5, #1
 80078b2:	2300      	movs	r3, #0
 80078b4:	9306      	str	r3, [sp, #24]
 80078b6:	950a      	str	r5, [sp, #40]	; 0x28
 80078b8:	f04f 33ff 	mov.w	r3, #4294967295
 80078bc:	9302      	str	r3, [sp, #8]
 80078be:	4699      	mov	r9, r3
 80078c0:	2200      	movs	r2, #0
 80078c2:	2312      	movs	r3, #18
 80078c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80078c6:	e7aa      	b.n	800781e <_dtoa_r+0x246>
 80078c8:	2301      	movs	r3, #1
 80078ca:	930a      	str	r3, [sp, #40]	; 0x28
 80078cc:	e7f4      	b.n	80078b8 <_dtoa_r+0x2e0>
 80078ce:	2301      	movs	r3, #1
 80078d0:	9302      	str	r3, [sp, #8]
 80078d2:	4699      	mov	r9, r3
 80078d4:	461a      	mov	r2, r3
 80078d6:	e7f5      	b.n	80078c4 <_dtoa_r+0x2ec>
 80078d8:	3101      	adds	r1, #1
 80078da:	6071      	str	r1, [r6, #4]
 80078dc:	0052      	lsls	r2, r2, #1
 80078de:	e7a2      	b.n	8007826 <_dtoa_r+0x24e>
 80078e0:	636f4361 	.word	0x636f4361
 80078e4:	3fd287a7 	.word	0x3fd287a7
 80078e8:	8b60c8b3 	.word	0x8b60c8b3
 80078ec:	3fc68a28 	.word	0x3fc68a28
 80078f0:	509f79fb 	.word	0x509f79fb
 80078f4:	3fd34413 	.word	0x3fd34413
 80078f8:	7ff00000 	.word	0x7ff00000
 80078fc:	080095ec 	.word	0x080095ec
 8007900:	3ff80000 	.word	0x3ff80000
 8007904:	080094f0 	.word	0x080094f0
 8007908:	080094c8 	.word	0x080094c8
 800790c:	080094bf 	.word	0x080094bf
 8007910:	07f1      	lsls	r1, r6, #31
 8007912:	d508      	bpl.n	8007926 <_dtoa_r+0x34e>
 8007914:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800791c:	f7f8 fe74 	bl	8000608 <__aeabi_dmul>
 8007920:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007924:	3501      	adds	r5, #1
 8007926:	1076      	asrs	r6, r6, #1
 8007928:	3708      	adds	r7, #8
 800792a:	2e00      	cmp	r6, #0
 800792c:	d1f0      	bne.n	8007910 <_dtoa_r+0x338>
 800792e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007932:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007936:	f7f8 ff91 	bl	800085c <__aeabi_ddiv>
 800793a:	e9cd 0100 	strd	r0, r1, [sp]
 800793e:	e01a      	b.n	8007976 <_dtoa_r+0x39e>
 8007940:	2502      	movs	r5, #2
 8007942:	e7a3      	b.n	800788c <_dtoa_r+0x2b4>
 8007944:	f000 80a0 	beq.w	8007a88 <_dtoa_r+0x4b0>
 8007948:	f1ca 0600 	rsb	r6, sl, #0
 800794c:	4b9f      	ldr	r3, [pc, #636]	; (8007bcc <_dtoa_r+0x5f4>)
 800794e:	4fa0      	ldr	r7, [pc, #640]	; (8007bd0 <_dtoa_r+0x5f8>)
 8007950:	f006 020f 	and.w	r2, r6, #15
 8007954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007960:	f7f8 fe52 	bl	8000608 <__aeabi_dmul>
 8007964:	e9cd 0100 	strd	r0, r1, [sp]
 8007968:	1136      	asrs	r6, r6, #4
 800796a:	2300      	movs	r3, #0
 800796c:	2502      	movs	r5, #2
 800796e:	2e00      	cmp	r6, #0
 8007970:	d17f      	bne.n	8007a72 <_dtoa_r+0x49a>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e1      	bne.n	800793a <_dtoa_r+0x362>
 8007976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8087 	beq.w	8007a8c <_dtoa_r+0x4b4>
 800797e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007982:	2200      	movs	r2, #0
 8007984:	4b93      	ldr	r3, [pc, #588]	; (8007bd4 <_dtoa_r+0x5fc>)
 8007986:	4630      	mov	r0, r6
 8007988:	4639      	mov	r1, r7
 800798a:	f7f9 f8af 	bl	8000aec <__aeabi_dcmplt>
 800798e:	2800      	cmp	r0, #0
 8007990:	d07c      	beq.n	8007a8c <_dtoa_r+0x4b4>
 8007992:	f1b9 0f00 	cmp.w	r9, #0
 8007996:	d079      	beq.n	8007a8c <_dtoa_r+0x4b4>
 8007998:	9b02      	ldr	r3, [sp, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	dd35      	ble.n	8007a0a <_dtoa_r+0x432>
 800799e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079a2:	9308      	str	r3, [sp, #32]
 80079a4:	4639      	mov	r1, r7
 80079a6:	2200      	movs	r2, #0
 80079a8:	4b8b      	ldr	r3, [pc, #556]	; (8007bd8 <_dtoa_r+0x600>)
 80079aa:	4630      	mov	r0, r6
 80079ac:	f7f8 fe2c 	bl	8000608 <__aeabi_dmul>
 80079b0:	e9cd 0100 	strd	r0, r1, [sp]
 80079b4:	9f02      	ldr	r7, [sp, #8]
 80079b6:	3501      	adds	r5, #1
 80079b8:	4628      	mov	r0, r5
 80079ba:	f7f8 fdbb 	bl	8000534 <__aeabi_i2d>
 80079be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079c2:	f7f8 fe21 	bl	8000608 <__aeabi_dmul>
 80079c6:	2200      	movs	r2, #0
 80079c8:	4b84      	ldr	r3, [pc, #528]	; (8007bdc <_dtoa_r+0x604>)
 80079ca:	f7f8 fc67 	bl	800029c <__adddf3>
 80079ce:	4605      	mov	r5, r0
 80079d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	d15d      	bne.n	8007a94 <_dtoa_r+0x4bc>
 80079d8:	2200      	movs	r2, #0
 80079da:	4b81      	ldr	r3, [pc, #516]	; (8007be0 <_dtoa_r+0x608>)
 80079dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079e0:	f7f8 fc5a 	bl	8000298 <__aeabi_dsub>
 80079e4:	462a      	mov	r2, r5
 80079e6:	4633      	mov	r3, r6
 80079e8:	e9cd 0100 	strd	r0, r1, [sp]
 80079ec:	f7f9 f89c 	bl	8000b28 <__aeabi_dcmpgt>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	f040 8288 	bne.w	8007f06 <_dtoa_r+0x92e>
 80079f6:	462a      	mov	r2, r5
 80079f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80079fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a00:	f7f9 f874 	bl	8000aec <__aeabi_dcmplt>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	f040 827c 	bne.w	8007f02 <_dtoa_r+0x92a>
 8007a0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a0e:	e9cd 2300 	strd	r2, r3, [sp]
 8007a12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f2c0 8150 	blt.w	8007cba <_dtoa_r+0x6e2>
 8007a1a:	f1ba 0f0e 	cmp.w	sl, #14
 8007a1e:	f300 814c 	bgt.w	8007cba <_dtoa_r+0x6e2>
 8007a22:	4b6a      	ldr	r3, [pc, #424]	; (8007bcc <_dtoa_r+0x5f4>)
 8007a24:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a28:	ed93 7b00 	vldr	d7, [r3]
 8007a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a34:	f280 80d8 	bge.w	8007be8 <_dtoa_r+0x610>
 8007a38:	f1b9 0f00 	cmp.w	r9, #0
 8007a3c:	f300 80d4 	bgt.w	8007be8 <_dtoa_r+0x610>
 8007a40:	f040 825e 	bne.w	8007f00 <_dtoa_r+0x928>
 8007a44:	2200      	movs	r2, #0
 8007a46:	4b66      	ldr	r3, [pc, #408]	; (8007be0 <_dtoa_r+0x608>)
 8007a48:	ec51 0b17 	vmov	r0, r1, d7
 8007a4c:	f7f8 fddc 	bl	8000608 <__aeabi_dmul>
 8007a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a54:	f7f9 f85e 	bl	8000b14 <__aeabi_dcmpge>
 8007a58:	464f      	mov	r7, r9
 8007a5a:	464e      	mov	r6, r9
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	f040 8234 	bne.w	8007eca <_dtoa_r+0x8f2>
 8007a62:	2331      	movs	r3, #49	; 0x31
 8007a64:	f10b 0501 	add.w	r5, fp, #1
 8007a68:	f88b 3000 	strb.w	r3, [fp]
 8007a6c:	f10a 0a01 	add.w	sl, sl, #1
 8007a70:	e22f      	b.n	8007ed2 <_dtoa_r+0x8fa>
 8007a72:	07f2      	lsls	r2, r6, #31
 8007a74:	d505      	bpl.n	8007a82 <_dtoa_r+0x4aa>
 8007a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a7a:	f7f8 fdc5 	bl	8000608 <__aeabi_dmul>
 8007a7e:	3501      	adds	r5, #1
 8007a80:	2301      	movs	r3, #1
 8007a82:	1076      	asrs	r6, r6, #1
 8007a84:	3708      	adds	r7, #8
 8007a86:	e772      	b.n	800796e <_dtoa_r+0x396>
 8007a88:	2502      	movs	r5, #2
 8007a8a:	e774      	b.n	8007976 <_dtoa_r+0x39e>
 8007a8c:	f8cd a020 	str.w	sl, [sp, #32]
 8007a90:	464f      	mov	r7, r9
 8007a92:	e791      	b.n	80079b8 <_dtoa_r+0x3e0>
 8007a94:	4b4d      	ldr	r3, [pc, #308]	; (8007bcc <_dtoa_r+0x5f4>)
 8007a96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a9a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d047      	beq.n	8007b34 <_dtoa_r+0x55c>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	494e      	ldr	r1, [pc, #312]	; (8007be4 <_dtoa_r+0x60c>)
 8007aac:	f7f8 fed6 	bl	800085c <__aeabi_ddiv>
 8007ab0:	462a      	mov	r2, r5
 8007ab2:	4633      	mov	r3, r6
 8007ab4:	f7f8 fbf0 	bl	8000298 <__aeabi_dsub>
 8007ab8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007abc:	465d      	mov	r5, fp
 8007abe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ac2:	f7f9 f851 	bl	8000b68 <__aeabi_d2iz>
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	f7f8 fd34 	bl	8000534 <__aeabi_i2d>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ad4:	f7f8 fbe0 	bl	8000298 <__aeabi_dsub>
 8007ad8:	3630      	adds	r6, #48	; 0x30
 8007ada:	f805 6b01 	strb.w	r6, [r5], #1
 8007ade:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8007ae6:	f7f9 f801 	bl	8000aec <__aeabi_dcmplt>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d163      	bne.n	8007bb6 <_dtoa_r+0x5de>
 8007aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007af2:	2000      	movs	r0, #0
 8007af4:	4937      	ldr	r1, [pc, #220]	; (8007bd4 <_dtoa_r+0x5fc>)
 8007af6:	f7f8 fbcf 	bl	8000298 <__aeabi_dsub>
 8007afa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007afe:	f7f8 fff5 	bl	8000aec <__aeabi_dcmplt>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	f040 80b7 	bne.w	8007c76 <_dtoa_r+0x69e>
 8007b08:	eba5 030b 	sub.w	r3, r5, fp
 8007b0c:	429f      	cmp	r7, r3
 8007b0e:	f77f af7c 	ble.w	8007a0a <_dtoa_r+0x432>
 8007b12:	2200      	movs	r2, #0
 8007b14:	4b30      	ldr	r3, [pc, #192]	; (8007bd8 <_dtoa_r+0x600>)
 8007b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b1a:	f7f8 fd75 	bl	8000608 <__aeabi_dmul>
 8007b1e:	2200      	movs	r2, #0
 8007b20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b24:	4b2c      	ldr	r3, [pc, #176]	; (8007bd8 <_dtoa_r+0x600>)
 8007b26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b2a:	f7f8 fd6d 	bl	8000608 <__aeabi_dmul>
 8007b2e:	e9cd 0100 	strd	r0, r1, [sp]
 8007b32:	e7c4      	b.n	8007abe <_dtoa_r+0x4e6>
 8007b34:	462a      	mov	r2, r5
 8007b36:	4633      	mov	r3, r6
 8007b38:	f7f8 fd66 	bl	8000608 <__aeabi_dmul>
 8007b3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b40:	eb0b 0507 	add.w	r5, fp, r7
 8007b44:	465e      	mov	r6, fp
 8007b46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b4a:	f7f9 f80d 	bl	8000b68 <__aeabi_d2iz>
 8007b4e:	4607      	mov	r7, r0
 8007b50:	f7f8 fcf0 	bl	8000534 <__aeabi_i2d>
 8007b54:	3730      	adds	r7, #48	; 0x30
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b5e:	f7f8 fb9b 	bl	8000298 <__aeabi_dsub>
 8007b62:	f806 7b01 	strb.w	r7, [r6], #1
 8007b66:	42ae      	cmp	r6, r5
 8007b68:	e9cd 0100 	strd	r0, r1, [sp]
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	d126      	bne.n	8007bc0 <_dtoa_r+0x5e8>
 8007b72:	4b1c      	ldr	r3, [pc, #112]	; (8007be4 <_dtoa_r+0x60c>)
 8007b74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b78:	f7f8 fb90 	bl	800029c <__adddf3>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b84:	f7f8 ffd0 	bl	8000b28 <__aeabi_dcmpgt>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d174      	bne.n	8007c76 <_dtoa_r+0x69e>
 8007b8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b90:	2000      	movs	r0, #0
 8007b92:	4914      	ldr	r1, [pc, #80]	; (8007be4 <_dtoa_r+0x60c>)
 8007b94:	f7f8 fb80 	bl	8000298 <__aeabi_dsub>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ba0:	f7f8 ffa4 	bl	8000aec <__aeabi_dcmplt>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	f43f af30 	beq.w	8007a0a <_dtoa_r+0x432>
 8007baa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bae:	2b30      	cmp	r3, #48	; 0x30
 8007bb0:	f105 32ff 	add.w	r2, r5, #4294967295
 8007bb4:	d002      	beq.n	8007bbc <_dtoa_r+0x5e4>
 8007bb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007bba:	e04a      	b.n	8007c52 <_dtoa_r+0x67a>
 8007bbc:	4615      	mov	r5, r2
 8007bbe:	e7f4      	b.n	8007baa <_dtoa_r+0x5d2>
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <_dtoa_r+0x600>)
 8007bc2:	f7f8 fd21 	bl	8000608 <__aeabi_dmul>
 8007bc6:	e9cd 0100 	strd	r0, r1, [sp]
 8007bca:	e7bc      	b.n	8007b46 <_dtoa_r+0x56e>
 8007bcc:	080094f0 	.word	0x080094f0
 8007bd0:	080094c8 	.word	0x080094c8
 8007bd4:	3ff00000 	.word	0x3ff00000
 8007bd8:	40240000 	.word	0x40240000
 8007bdc:	401c0000 	.word	0x401c0000
 8007be0:	40140000 	.word	0x40140000
 8007be4:	3fe00000 	.word	0x3fe00000
 8007be8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007bec:	465d      	mov	r5, fp
 8007bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	f7f8 fe31 	bl	800085c <__aeabi_ddiv>
 8007bfa:	f7f8 ffb5 	bl	8000b68 <__aeabi_d2iz>
 8007bfe:	4680      	mov	r8, r0
 8007c00:	f7f8 fc98 	bl	8000534 <__aeabi_i2d>
 8007c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c08:	f7f8 fcfe 	bl	8000608 <__aeabi_dmul>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007c18:	f7f8 fb3e 	bl	8000298 <__aeabi_dsub>
 8007c1c:	f805 6b01 	strb.w	r6, [r5], #1
 8007c20:	eba5 060b 	sub.w	r6, r5, fp
 8007c24:	45b1      	cmp	r9, r6
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	d139      	bne.n	8007ca0 <_dtoa_r+0x6c8>
 8007c2c:	f7f8 fb36 	bl	800029c <__adddf3>
 8007c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c34:	4606      	mov	r6, r0
 8007c36:	460f      	mov	r7, r1
 8007c38:	f7f8 ff76 	bl	8000b28 <__aeabi_dcmpgt>
 8007c3c:	b9c8      	cbnz	r0, 8007c72 <_dtoa_r+0x69a>
 8007c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c42:	4630      	mov	r0, r6
 8007c44:	4639      	mov	r1, r7
 8007c46:	f7f8 ff47 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c4a:	b110      	cbz	r0, 8007c52 <_dtoa_r+0x67a>
 8007c4c:	f018 0f01 	tst.w	r8, #1
 8007c50:	d10f      	bne.n	8007c72 <_dtoa_r+0x69a>
 8007c52:	9904      	ldr	r1, [sp, #16]
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 fac6 	bl	80081e6 <_Bfree>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c5e:	702b      	strb	r3, [r5, #0]
 8007c60:	f10a 0301 	add.w	r3, sl, #1
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 8241 	beq.w	80080f0 <_dtoa_r+0xb18>
 8007c6e:	601d      	str	r5, [r3, #0]
 8007c70:	e23e      	b.n	80080f0 <_dtoa_r+0xb18>
 8007c72:	f8cd a020 	str.w	sl, [sp, #32]
 8007c76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c7a:	2a39      	cmp	r2, #57	; 0x39
 8007c7c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007c80:	d108      	bne.n	8007c94 <_dtoa_r+0x6bc>
 8007c82:	459b      	cmp	fp, r3
 8007c84:	d10a      	bne.n	8007c9c <_dtoa_r+0x6c4>
 8007c86:	9b08      	ldr	r3, [sp, #32]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	9308      	str	r3, [sp, #32]
 8007c8c:	2330      	movs	r3, #48	; 0x30
 8007c8e:	f88b 3000 	strb.w	r3, [fp]
 8007c92:	465b      	mov	r3, fp
 8007c94:	781a      	ldrb	r2, [r3, #0]
 8007c96:	3201      	adds	r2, #1
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	e78c      	b.n	8007bb6 <_dtoa_r+0x5de>
 8007c9c:	461d      	mov	r5, r3
 8007c9e:	e7ea      	b.n	8007c76 <_dtoa_r+0x69e>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4b9b      	ldr	r3, [pc, #620]	; (8007f10 <_dtoa_r+0x938>)
 8007ca4:	f7f8 fcb0 	bl	8000608 <__aeabi_dmul>
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2300      	movs	r3, #0
 8007cac:	4606      	mov	r6, r0
 8007cae:	460f      	mov	r7, r1
 8007cb0:	f7f8 ff12 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d09a      	beq.n	8007bee <_dtoa_r+0x616>
 8007cb8:	e7cb      	b.n	8007c52 <_dtoa_r+0x67a>
 8007cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cbc:	2a00      	cmp	r2, #0
 8007cbe:	f000 808b 	beq.w	8007dd8 <_dtoa_r+0x800>
 8007cc2:	9a06      	ldr	r2, [sp, #24]
 8007cc4:	2a01      	cmp	r2, #1
 8007cc6:	dc6e      	bgt.n	8007da6 <_dtoa_r+0x7ce>
 8007cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	d067      	beq.n	8007d9e <_dtoa_r+0x7c6>
 8007cce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007cd2:	9f07      	ldr	r7, [sp, #28]
 8007cd4:	9d05      	ldr	r5, [sp, #20]
 8007cd6:	9a05      	ldr	r2, [sp, #20]
 8007cd8:	2101      	movs	r1, #1
 8007cda:	441a      	add	r2, r3
 8007cdc:	4620      	mov	r0, r4
 8007cde:	9205      	str	r2, [sp, #20]
 8007ce0:	4498      	add	r8, r3
 8007ce2:	f000 fb20 	bl	8008326 <__i2b>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	2d00      	cmp	r5, #0
 8007cea:	dd0c      	ble.n	8007d06 <_dtoa_r+0x72e>
 8007cec:	f1b8 0f00 	cmp.w	r8, #0
 8007cf0:	dd09      	ble.n	8007d06 <_dtoa_r+0x72e>
 8007cf2:	4545      	cmp	r5, r8
 8007cf4:	9a05      	ldr	r2, [sp, #20]
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	bfa8      	it	ge
 8007cfa:	4643      	movge	r3, r8
 8007cfc:	1ad2      	subs	r2, r2, r3
 8007cfe:	9205      	str	r2, [sp, #20]
 8007d00:	1aed      	subs	r5, r5, r3
 8007d02:	eba8 0803 	sub.w	r8, r8, r3
 8007d06:	9b07      	ldr	r3, [sp, #28]
 8007d08:	b1eb      	cbz	r3, 8007d46 <_dtoa_r+0x76e>
 8007d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d067      	beq.n	8007de0 <_dtoa_r+0x808>
 8007d10:	b18f      	cbz	r7, 8007d36 <_dtoa_r+0x75e>
 8007d12:	4631      	mov	r1, r6
 8007d14:	463a      	mov	r2, r7
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 fba4 	bl	8008464 <__pow5mult>
 8007d1c:	9a04      	ldr	r2, [sp, #16]
 8007d1e:	4601      	mov	r1, r0
 8007d20:	4606      	mov	r6, r0
 8007d22:	4620      	mov	r0, r4
 8007d24:	f000 fb08 	bl	8008338 <__multiply>
 8007d28:	9904      	ldr	r1, [sp, #16]
 8007d2a:	9008      	str	r0, [sp, #32]
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 fa5a 	bl	80081e6 <_Bfree>
 8007d32:	9b08      	ldr	r3, [sp, #32]
 8007d34:	9304      	str	r3, [sp, #16]
 8007d36:	9b07      	ldr	r3, [sp, #28]
 8007d38:	1bda      	subs	r2, r3, r7
 8007d3a:	d004      	beq.n	8007d46 <_dtoa_r+0x76e>
 8007d3c:	9904      	ldr	r1, [sp, #16]
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 fb90 	bl	8008464 <__pow5mult>
 8007d44:	9004      	str	r0, [sp, #16]
 8007d46:	2101      	movs	r1, #1
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 faec 	bl	8008326 <__i2b>
 8007d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d50:	4607      	mov	r7, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 81d0 	beq.w	80080f8 <_dtoa_r+0xb20>
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4601      	mov	r1, r0
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f000 fb81 	bl	8008464 <__pow5mult>
 8007d62:	9b06      	ldr	r3, [sp, #24]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	4607      	mov	r7, r0
 8007d68:	dc40      	bgt.n	8007dec <_dtoa_r+0x814>
 8007d6a:	9b00      	ldr	r3, [sp, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d139      	bne.n	8007de4 <_dtoa_r+0x80c>
 8007d70:	9b01      	ldr	r3, [sp, #4]
 8007d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d136      	bne.n	8007de8 <_dtoa_r+0x810>
 8007d7a:	9b01      	ldr	r3, [sp, #4]
 8007d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d80:	0d1b      	lsrs	r3, r3, #20
 8007d82:	051b      	lsls	r3, r3, #20
 8007d84:	b12b      	cbz	r3, 8007d92 <_dtoa_r+0x7ba>
 8007d86:	9b05      	ldr	r3, [sp, #20]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	9305      	str	r3, [sp, #20]
 8007d8c:	f108 0801 	add.w	r8, r8, #1
 8007d90:	2301      	movs	r3, #1
 8007d92:	9307      	str	r3, [sp, #28]
 8007d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d12a      	bne.n	8007df0 <_dtoa_r+0x818>
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	e030      	b.n	8007e00 <_dtoa_r+0x828>
 8007d9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007da0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007da4:	e795      	b.n	8007cd2 <_dtoa_r+0x6fa>
 8007da6:	9b07      	ldr	r3, [sp, #28]
 8007da8:	f109 37ff 	add.w	r7, r9, #4294967295
 8007dac:	42bb      	cmp	r3, r7
 8007dae:	bfbf      	itttt	lt
 8007db0:	9b07      	ldrlt	r3, [sp, #28]
 8007db2:	9707      	strlt	r7, [sp, #28]
 8007db4:	1afa      	sublt	r2, r7, r3
 8007db6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007db8:	bfbb      	ittet	lt
 8007dba:	189b      	addlt	r3, r3, r2
 8007dbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007dbe:	1bdf      	subge	r7, r3, r7
 8007dc0:	2700      	movlt	r7, #0
 8007dc2:	f1b9 0f00 	cmp.w	r9, #0
 8007dc6:	bfb5      	itete	lt
 8007dc8:	9b05      	ldrlt	r3, [sp, #20]
 8007dca:	9d05      	ldrge	r5, [sp, #20]
 8007dcc:	eba3 0509 	sublt.w	r5, r3, r9
 8007dd0:	464b      	movge	r3, r9
 8007dd2:	bfb8      	it	lt
 8007dd4:	2300      	movlt	r3, #0
 8007dd6:	e77e      	b.n	8007cd6 <_dtoa_r+0x6fe>
 8007dd8:	9f07      	ldr	r7, [sp, #28]
 8007dda:	9d05      	ldr	r5, [sp, #20]
 8007ddc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007dde:	e783      	b.n	8007ce8 <_dtoa_r+0x710>
 8007de0:	9a07      	ldr	r2, [sp, #28]
 8007de2:	e7ab      	b.n	8007d3c <_dtoa_r+0x764>
 8007de4:	2300      	movs	r3, #0
 8007de6:	e7d4      	b.n	8007d92 <_dtoa_r+0x7ba>
 8007de8:	9b00      	ldr	r3, [sp, #0]
 8007dea:	e7d2      	b.n	8007d92 <_dtoa_r+0x7ba>
 8007dec:	2300      	movs	r3, #0
 8007dee:	9307      	str	r3, [sp, #28]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007df6:	6918      	ldr	r0, [r3, #16]
 8007df8:	f000 fa47 	bl	800828a <__hi0bits>
 8007dfc:	f1c0 0020 	rsb	r0, r0, #32
 8007e00:	4440      	add	r0, r8
 8007e02:	f010 001f 	ands.w	r0, r0, #31
 8007e06:	d047      	beq.n	8007e98 <_dtoa_r+0x8c0>
 8007e08:	f1c0 0320 	rsb	r3, r0, #32
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	dd3b      	ble.n	8007e88 <_dtoa_r+0x8b0>
 8007e10:	9b05      	ldr	r3, [sp, #20]
 8007e12:	f1c0 001c 	rsb	r0, r0, #28
 8007e16:	4403      	add	r3, r0
 8007e18:	9305      	str	r3, [sp, #20]
 8007e1a:	4405      	add	r5, r0
 8007e1c:	4480      	add	r8, r0
 8007e1e:	9b05      	ldr	r3, [sp, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	dd05      	ble.n	8007e30 <_dtoa_r+0x858>
 8007e24:	461a      	mov	r2, r3
 8007e26:	9904      	ldr	r1, [sp, #16]
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 fb69 	bl	8008500 <__lshift>
 8007e2e:	9004      	str	r0, [sp, #16]
 8007e30:	f1b8 0f00 	cmp.w	r8, #0
 8007e34:	dd05      	ble.n	8007e42 <_dtoa_r+0x86a>
 8007e36:	4639      	mov	r1, r7
 8007e38:	4642      	mov	r2, r8
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fb60 	bl	8008500 <__lshift>
 8007e40:	4607      	mov	r7, r0
 8007e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e44:	b353      	cbz	r3, 8007e9c <_dtoa_r+0x8c4>
 8007e46:	4639      	mov	r1, r7
 8007e48:	9804      	ldr	r0, [sp, #16]
 8007e4a:	f000 fbad 	bl	80085a8 <__mcmp>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	da24      	bge.n	8007e9c <_dtoa_r+0x8c4>
 8007e52:	2300      	movs	r3, #0
 8007e54:	220a      	movs	r2, #10
 8007e56:	9904      	ldr	r1, [sp, #16]
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 f9db 	bl	8008214 <__multadd>
 8007e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e60:	9004      	str	r0, [sp, #16]
 8007e62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 814d 	beq.w	8008106 <_dtoa_r+0xb2e>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4631      	mov	r1, r6
 8007e70:	220a      	movs	r2, #10
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 f9ce 	bl	8008214 <__multadd>
 8007e78:	9b02      	ldr	r3, [sp, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	dc4f      	bgt.n	8007f20 <_dtoa_r+0x948>
 8007e80:	9b06      	ldr	r3, [sp, #24]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	dd4c      	ble.n	8007f20 <_dtoa_r+0x948>
 8007e86:	e011      	b.n	8007eac <_dtoa_r+0x8d4>
 8007e88:	d0c9      	beq.n	8007e1e <_dtoa_r+0x846>
 8007e8a:	9a05      	ldr	r2, [sp, #20]
 8007e8c:	331c      	adds	r3, #28
 8007e8e:	441a      	add	r2, r3
 8007e90:	9205      	str	r2, [sp, #20]
 8007e92:	441d      	add	r5, r3
 8007e94:	4498      	add	r8, r3
 8007e96:	e7c2      	b.n	8007e1e <_dtoa_r+0x846>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	e7f6      	b.n	8007e8a <_dtoa_r+0x8b2>
 8007e9c:	f1b9 0f00 	cmp.w	r9, #0
 8007ea0:	dc38      	bgt.n	8007f14 <_dtoa_r+0x93c>
 8007ea2:	9b06      	ldr	r3, [sp, #24]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	dd35      	ble.n	8007f14 <_dtoa_r+0x93c>
 8007ea8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007eac:	9b02      	ldr	r3, [sp, #8]
 8007eae:	b963      	cbnz	r3, 8007eca <_dtoa_r+0x8f2>
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	2205      	movs	r2, #5
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f000 f9ad 	bl	8008214 <__multadd>
 8007eba:	4601      	mov	r1, r0
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	9804      	ldr	r0, [sp, #16]
 8007ec0:	f000 fb72 	bl	80085a8 <__mcmp>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f73f adcc 	bgt.w	8007a62 <_dtoa_r+0x48a>
 8007eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ecc:	465d      	mov	r5, fp
 8007ece:	ea6f 0a03 	mvn.w	sl, r3
 8007ed2:	f04f 0900 	mov.w	r9, #0
 8007ed6:	4639      	mov	r1, r7
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 f984 	bl	80081e6 <_Bfree>
 8007ede:	2e00      	cmp	r6, #0
 8007ee0:	f43f aeb7 	beq.w	8007c52 <_dtoa_r+0x67a>
 8007ee4:	f1b9 0f00 	cmp.w	r9, #0
 8007ee8:	d005      	beq.n	8007ef6 <_dtoa_r+0x91e>
 8007eea:	45b1      	cmp	r9, r6
 8007eec:	d003      	beq.n	8007ef6 <_dtoa_r+0x91e>
 8007eee:	4649      	mov	r1, r9
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 f978 	bl	80081e6 <_Bfree>
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 f974 	bl	80081e6 <_Bfree>
 8007efe:	e6a8      	b.n	8007c52 <_dtoa_r+0x67a>
 8007f00:	2700      	movs	r7, #0
 8007f02:	463e      	mov	r6, r7
 8007f04:	e7e1      	b.n	8007eca <_dtoa_r+0x8f2>
 8007f06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f0a:	463e      	mov	r6, r7
 8007f0c:	e5a9      	b.n	8007a62 <_dtoa_r+0x48a>
 8007f0e:	bf00      	nop
 8007f10:	40240000 	.word	0x40240000
 8007f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f16:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 80fa 	beq.w	8008114 <_dtoa_r+0xb3c>
 8007f20:	2d00      	cmp	r5, #0
 8007f22:	dd05      	ble.n	8007f30 <_dtoa_r+0x958>
 8007f24:	4631      	mov	r1, r6
 8007f26:	462a      	mov	r2, r5
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fae9 	bl	8008500 <__lshift>
 8007f2e:	4606      	mov	r6, r0
 8007f30:	9b07      	ldr	r3, [sp, #28]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d04c      	beq.n	8007fd0 <_dtoa_r+0x9f8>
 8007f36:	6871      	ldr	r1, [r6, #4]
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 f920 	bl	800817e <_Balloc>
 8007f3e:	6932      	ldr	r2, [r6, #16]
 8007f40:	3202      	adds	r2, #2
 8007f42:	4605      	mov	r5, r0
 8007f44:	0092      	lsls	r2, r2, #2
 8007f46:	f106 010c 	add.w	r1, r6, #12
 8007f4a:	300c      	adds	r0, #12
 8007f4c:	f000 f90a 	bl	8008164 <memcpy>
 8007f50:	2201      	movs	r2, #1
 8007f52:	4629      	mov	r1, r5
 8007f54:	4620      	mov	r0, r4
 8007f56:	f000 fad3 	bl	8008500 <__lshift>
 8007f5a:	9b00      	ldr	r3, [sp, #0]
 8007f5c:	f8cd b014 	str.w	fp, [sp, #20]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	46b1      	mov	r9, r6
 8007f66:	9307      	str	r3, [sp, #28]
 8007f68:	4606      	mov	r6, r0
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	9804      	ldr	r0, [sp, #16]
 8007f6e:	f7ff faa7 	bl	80074c0 <quorem>
 8007f72:	4649      	mov	r1, r9
 8007f74:	4605      	mov	r5, r0
 8007f76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007f7a:	9804      	ldr	r0, [sp, #16]
 8007f7c:	f000 fb14 	bl	80085a8 <__mcmp>
 8007f80:	4632      	mov	r2, r6
 8007f82:	9000      	str	r0, [sp, #0]
 8007f84:	4639      	mov	r1, r7
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 fb28 	bl	80085dc <__mdiff>
 8007f8c:	68c3      	ldr	r3, [r0, #12]
 8007f8e:	4602      	mov	r2, r0
 8007f90:	bb03      	cbnz	r3, 8007fd4 <_dtoa_r+0x9fc>
 8007f92:	4601      	mov	r1, r0
 8007f94:	9008      	str	r0, [sp, #32]
 8007f96:	9804      	ldr	r0, [sp, #16]
 8007f98:	f000 fb06 	bl	80085a8 <__mcmp>
 8007f9c:	9a08      	ldr	r2, [sp, #32]
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	9308      	str	r3, [sp, #32]
 8007fa6:	f000 f91e 	bl	80081e6 <_Bfree>
 8007faa:	9b08      	ldr	r3, [sp, #32]
 8007fac:	b9a3      	cbnz	r3, 8007fd8 <_dtoa_r+0xa00>
 8007fae:	9a06      	ldr	r2, [sp, #24]
 8007fb0:	b992      	cbnz	r2, 8007fd8 <_dtoa_r+0xa00>
 8007fb2:	9a07      	ldr	r2, [sp, #28]
 8007fb4:	b982      	cbnz	r2, 8007fd8 <_dtoa_r+0xa00>
 8007fb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007fba:	d029      	beq.n	8008010 <_dtoa_r+0xa38>
 8007fbc:	9b00      	ldr	r3, [sp, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dd01      	ble.n	8007fc6 <_dtoa_r+0x9ee>
 8007fc2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007fc6:	9b05      	ldr	r3, [sp, #20]
 8007fc8:	1c5d      	adds	r5, r3, #1
 8007fca:	f883 8000 	strb.w	r8, [r3]
 8007fce:	e782      	b.n	8007ed6 <_dtoa_r+0x8fe>
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	e7c2      	b.n	8007f5a <_dtoa_r+0x982>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e7e3      	b.n	8007fa0 <_dtoa_r+0x9c8>
 8007fd8:	9a00      	ldr	r2, [sp, #0]
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	db04      	blt.n	8007fe8 <_dtoa_r+0xa10>
 8007fde:	d125      	bne.n	800802c <_dtoa_r+0xa54>
 8007fe0:	9a06      	ldr	r2, [sp, #24]
 8007fe2:	bb1a      	cbnz	r2, 800802c <_dtoa_r+0xa54>
 8007fe4:	9a07      	ldr	r2, [sp, #28]
 8007fe6:	bb0a      	cbnz	r2, 800802c <_dtoa_r+0xa54>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	ddec      	ble.n	8007fc6 <_dtoa_r+0x9ee>
 8007fec:	2201      	movs	r2, #1
 8007fee:	9904      	ldr	r1, [sp, #16]
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 fa85 	bl	8008500 <__lshift>
 8007ff6:	4639      	mov	r1, r7
 8007ff8:	9004      	str	r0, [sp, #16]
 8007ffa:	f000 fad5 	bl	80085a8 <__mcmp>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	dc03      	bgt.n	800800a <_dtoa_r+0xa32>
 8008002:	d1e0      	bne.n	8007fc6 <_dtoa_r+0x9ee>
 8008004:	f018 0f01 	tst.w	r8, #1
 8008008:	d0dd      	beq.n	8007fc6 <_dtoa_r+0x9ee>
 800800a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800800e:	d1d8      	bne.n	8007fc2 <_dtoa_r+0x9ea>
 8008010:	9b05      	ldr	r3, [sp, #20]
 8008012:	9a05      	ldr	r2, [sp, #20]
 8008014:	1c5d      	adds	r5, r3, #1
 8008016:	2339      	movs	r3, #57	; 0x39
 8008018:	7013      	strb	r3, [r2, #0]
 800801a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800801e:	2b39      	cmp	r3, #57	; 0x39
 8008020:	f105 32ff 	add.w	r2, r5, #4294967295
 8008024:	d04f      	beq.n	80080c6 <_dtoa_r+0xaee>
 8008026:	3301      	adds	r3, #1
 8008028:	7013      	strb	r3, [r2, #0]
 800802a:	e754      	b.n	8007ed6 <_dtoa_r+0x8fe>
 800802c:	9a05      	ldr	r2, [sp, #20]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f102 0501 	add.w	r5, r2, #1
 8008034:	dd06      	ble.n	8008044 <_dtoa_r+0xa6c>
 8008036:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800803a:	d0e9      	beq.n	8008010 <_dtoa_r+0xa38>
 800803c:	f108 0801 	add.w	r8, r8, #1
 8008040:	9b05      	ldr	r3, [sp, #20]
 8008042:	e7c2      	b.n	8007fca <_dtoa_r+0x9f2>
 8008044:	9a02      	ldr	r2, [sp, #8]
 8008046:	f805 8c01 	strb.w	r8, [r5, #-1]
 800804a:	eba5 030b 	sub.w	r3, r5, fp
 800804e:	4293      	cmp	r3, r2
 8008050:	d021      	beq.n	8008096 <_dtoa_r+0xabe>
 8008052:	2300      	movs	r3, #0
 8008054:	220a      	movs	r2, #10
 8008056:	9904      	ldr	r1, [sp, #16]
 8008058:	4620      	mov	r0, r4
 800805a:	f000 f8db 	bl	8008214 <__multadd>
 800805e:	45b1      	cmp	r9, r6
 8008060:	9004      	str	r0, [sp, #16]
 8008062:	f04f 0300 	mov.w	r3, #0
 8008066:	f04f 020a 	mov.w	r2, #10
 800806a:	4649      	mov	r1, r9
 800806c:	4620      	mov	r0, r4
 800806e:	d105      	bne.n	800807c <_dtoa_r+0xaa4>
 8008070:	f000 f8d0 	bl	8008214 <__multadd>
 8008074:	4681      	mov	r9, r0
 8008076:	4606      	mov	r6, r0
 8008078:	9505      	str	r5, [sp, #20]
 800807a:	e776      	b.n	8007f6a <_dtoa_r+0x992>
 800807c:	f000 f8ca 	bl	8008214 <__multadd>
 8008080:	4631      	mov	r1, r6
 8008082:	4681      	mov	r9, r0
 8008084:	2300      	movs	r3, #0
 8008086:	220a      	movs	r2, #10
 8008088:	4620      	mov	r0, r4
 800808a:	f000 f8c3 	bl	8008214 <__multadd>
 800808e:	4606      	mov	r6, r0
 8008090:	e7f2      	b.n	8008078 <_dtoa_r+0xaa0>
 8008092:	f04f 0900 	mov.w	r9, #0
 8008096:	2201      	movs	r2, #1
 8008098:	9904      	ldr	r1, [sp, #16]
 800809a:	4620      	mov	r0, r4
 800809c:	f000 fa30 	bl	8008500 <__lshift>
 80080a0:	4639      	mov	r1, r7
 80080a2:	9004      	str	r0, [sp, #16]
 80080a4:	f000 fa80 	bl	80085a8 <__mcmp>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	dcb6      	bgt.n	800801a <_dtoa_r+0xa42>
 80080ac:	d102      	bne.n	80080b4 <_dtoa_r+0xadc>
 80080ae:	f018 0f01 	tst.w	r8, #1
 80080b2:	d1b2      	bne.n	800801a <_dtoa_r+0xa42>
 80080b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080b8:	2b30      	cmp	r3, #48	; 0x30
 80080ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80080be:	f47f af0a 	bne.w	8007ed6 <_dtoa_r+0x8fe>
 80080c2:	4615      	mov	r5, r2
 80080c4:	e7f6      	b.n	80080b4 <_dtoa_r+0xadc>
 80080c6:	4593      	cmp	fp, r2
 80080c8:	d105      	bne.n	80080d6 <_dtoa_r+0xafe>
 80080ca:	2331      	movs	r3, #49	; 0x31
 80080cc:	f10a 0a01 	add.w	sl, sl, #1
 80080d0:	f88b 3000 	strb.w	r3, [fp]
 80080d4:	e6ff      	b.n	8007ed6 <_dtoa_r+0x8fe>
 80080d6:	4615      	mov	r5, r2
 80080d8:	e79f      	b.n	800801a <_dtoa_r+0xa42>
 80080da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008140 <_dtoa_r+0xb68>
 80080de:	e007      	b.n	80080f0 <_dtoa_r+0xb18>
 80080e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008144 <_dtoa_r+0xb6c>
 80080e6:	b11b      	cbz	r3, 80080f0 <_dtoa_r+0xb18>
 80080e8:	f10b 0308 	add.w	r3, fp, #8
 80080ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	4658      	mov	r0, fp
 80080f2:	b017      	add	sp, #92	; 0x5c
 80080f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f8:	9b06      	ldr	r3, [sp, #24]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	f77f ae35 	ble.w	8007d6a <_dtoa_r+0x792>
 8008100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008102:	9307      	str	r3, [sp, #28]
 8008104:	e649      	b.n	8007d9a <_dtoa_r+0x7c2>
 8008106:	9b02      	ldr	r3, [sp, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	dc03      	bgt.n	8008114 <_dtoa_r+0xb3c>
 800810c:	9b06      	ldr	r3, [sp, #24]
 800810e:	2b02      	cmp	r3, #2
 8008110:	f73f aecc 	bgt.w	8007eac <_dtoa_r+0x8d4>
 8008114:	465d      	mov	r5, fp
 8008116:	4639      	mov	r1, r7
 8008118:	9804      	ldr	r0, [sp, #16]
 800811a:	f7ff f9d1 	bl	80074c0 <quorem>
 800811e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008122:	f805 8b01 	strb.w	r8, [r5], #1
 8008126:	9a02      	ldr	r2, [sp, #8]
 8008128:	eba5 030b 	sub.w	r3, r5, fp
 800812c:	429a      	cmp	r2, r3
 800812e:	ddb0      	ble.n	8008092 <_dtoa_r+0xaba>
 8008130:	2300      	movs	r3, #0
 8008132:	220a      	movs	r2, #10
 8008134:	9904      	ldr	r1, [sp, #16]
 8008136:	4620      	mov	r0, r4
 8008138:	f000 f86c 	bl	8008214 <__multadd>
 800813c:	9004      	str	r0, [sp, #16]
 800813e:	e7ea      	b.n	8008116 <_dtoa_r+0xb3e>
 8008140:	080095eb 	.word	0x080095eb
 8008144:	080094b6 	.word	0x080094b6

08008148 <_localeconv_r>:
 8008148:	4b04      	ldr	r3, [pc, #16]	; (800815c <_localeconv_r+0x14>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6a18      	ldr	r0, [r3, #32]
 800814e:	4b04      	ldr	r3, [pc, #16]	; (8008160 <_localeconv_r+0x18>)
 8008150:	2800      	cmp	r0, #0
 8008152:	bf08      	it	eq
 8008154:	4618      	moveq	r0, r3
 8008156:	30f0      	adds	r0, #240	; 0xf0
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	2000000c 	.word	0x2000000c
 8008160:	20000070 	.word	0x20000070

08008164 <memcpy>:
 8008164:	b510      	push	{r4, lr}
 8008166:	1e43      	subs	r3, r0, #1
 8008168:	440a      	add	r2, r1
 800816a:	4291      	cmp	r1, r2
 800816c:	d100      	bne.n	8008170 <memcpy+0xc>
 800816e:	bd10      	pop	{r4, pc}
 8008170:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008174:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008178:	e7f7      	b.n	800816a <memcpy+0x6>

0800817a <__malloc_lock>:
 800817a:	4770      	bx	lr

0800817c <__malloc_unlock>:
 800817c:	4770      	bx	lr

0800817e <_Balloc>:
 800817e:	b570      	push	{r4, r5, r6, lr}
 8008180:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008182:	4604      	mov	r4, r0
 8008184:	460e      	mov	r6, r1
 8008186:	b93d      	cbnz	r5, 8008198 <_Balloc+0x1a>
 8008188:	2010      	movs	r0, #16
 800818a:	f7fe fbe5 	bl	8006958 <malloc>
 800818e:	6260      	str	r0, [r4, #36]	; 0x24
 8008190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008194:	6005      	str	r5, [r0, #0]
 8008196:	60c5      	str	r5, [r0, #12]
 8008198:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800819a:	68eb      	ldr	r3, [r5, #12]
 800819c:	b183      	cbz	r3, 80081c0 <_Balloc+0x42>
 800819e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80081a6:	b9b8      	cbnz	r0, 80081d8 <_Balloc+0x5a>
 80081a8:	2101      	movs	r1, #1
 80081aa:	fa01 f506 	lsl.w	r5, r1, r6
 80081ae:	1d6a      	adds	r2, r5, #5
 80081b0:	0092      	lsls	r2, r2, #2
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 fabe 	bl	8008734 <_calloc_r>
 80081b8:	b160      	cbz	r0, 80081d4 <_Balloc+0x56>
 80081ba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80081be:	e00e      	b.n	80081de <_Balloc+0x60>
 80081c0:	2221      	movs	r2, #33	; 0x21
 80081c2:	2104      	movs	r1, #4
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 fab5 	bl	8008734 <_calloc_r>
 80081ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081cc:	60e8      	str	r0, [r5, #12]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e4      	bne.n	800819e <_Balloc+0x20>
 80081d4:	2000      	movs	r0, #0
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	6802      	ldr	r2, [r0, #0]
 80081da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80081de:	2300      	movs	r3, #0
 80081e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081e4:	e7f7      	b.n	80081d6 <_Balloc+0x58>

080081e6 <_Bfree>:
 80081e6:	b570      	push	{r4, r5, r6, lr}
 80081e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80081ea:	4606      	mov	r6, r0
 80081ec:	460d      	mov	r5, r1
 80081ee:	b93c      	cbnz	r4, 8008200 <_Bfree+0x1a>
 80081f0:	2010      	movs	r0, #16
 80081f2:	f7fe fbb1 	bl	8006958 <malloc>
 80081f6:	6270      	str	r0, [r6, #36]	; 0x24
 80081f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081fc:	6004      	str	r4, [r0, #0]
 80081fe:	60c4      	str	r4, [r0, #12]
 8008200:	b13d      	cbz	r5, 8008212 <_Bfree+0x2c>
 8008202:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008204:	686a      	ldr	r2, [r5, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800820c:	6029      	str	r1, [r5, #0]
 800820e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008212:	bd70      	pop	{r4, r5, r6, pc}

08008214 <__multadd>:
 8008214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008218:	690d      	ldr	r5, [r1, #16]
 800821a:	461f      	mov	r7, r3
 800821c:	4606      	mov	r6, r0
 800821e:	460c      	mov	r4, r1
 8008220:	f101 0c14 	add.w	ip, r1, #20
 8008224:	2300      	movs	r3, #0
 8008226:	f8dc 0000 	ldr.w	r0, [ip]
 800822a:	b281      	uxth	r1, r0
 800822c:	fb02 7101 	mla	r1, r2, r1, r7
 8008230:	0c0f      	lsrs	r7, r1, #16
 8008232:	0c00      	lsrs	r0, r0, #16
 8008234:	fb02 7000 	mla	r0, r2, r0, r7
 8008238:	b289      	uxth	r1, r1
 800823a:	3301      	adds	r3, #1
 800823c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008240:	429d      	cmp	r5, r3
 8008242:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008246:	f84c 1b04 	str.w	r1, [ip], #4
 800824a:	dcec      	bgt.n	8008226 <__multadd+0x12>
 800824c:	b1d7      	cbz	r7, 8008284 <__multadd+0x70>
 800824e:	68a3      	ldr	r3, [r4, #8]
 8008250:	42ab      	cmp	r3, r5
 8008252:	dc12      	bgt.n	800827a <__multadd+0x66>
 8008254:	6861      	ldr	r1, [r4, #4]
 8008256:	4630      	mov	r0, r6
 8008258:	3101      	adds	r1, #1
 800825a:	f7ff ff90 	bl	800817e <_Balloc>
 800825e:	6922      	ldr	r2, [r4, #16]
 8008260:	3202      	adds	r2, #2
 8008262:	f104 010c 	add.w	r1, r4, #12
 8008266:	4680      	mov	r8, r0
 8008268:	0092      	lsls	r2, r2, #2
 800826a:	300c      	adds	r0, #12
 800826c:	f7ff ff7a 	bl	8008164 <memcpy>
 8008270:	4621      	mov	r1, r4
 8008272:	4630      	mov	r0, r6
 8008274:	f7ff ffb7 	bl	80081e6 <_Bfree>
 8008278:	4644      	mov	r4, r8
 800827a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800827e:	3501      	adds	r5, #1
 8008280:	615f      	str	r7, [r3, #20]
 8008282:	6125      	str	r5, [r4, #16]
 8008284:	4620      	mov	r0, r4
 8008286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800828a <__hi0bits>:
 800828a:	0c02      	lsrs	r2, r0, #16
 800828c:	0412      	lsls	r2, r2, #16
 800828e:	4603      	mov	r3, r0
 8008290:	b9b2      	cbnz	r2, 80082c0 <__hi0bits+0x36>
 8008292:	0403      	lsls	r3, r0, #16
 8008294:	2010      	movs	r0, #16
 8008296:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800829a:	bf04      	itt	eq
 800829c:	021b      	lsleq	r3, r3, #8
 800829e:	3008      	addeq	r0, #8
 80082a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80082a4:	bf04      	itt	eq
 80082a6:	011b      	lsleq	r3, r3, #4
 80082a8:	3004      	addeq	r0, #4
 80082aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80082ae:	bf04      	itt	eq
 80082b0:	009b      	lsleq	r3, r3, #2
 80082b2:	3002      	addeq	r0, #2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	db06      	blt.n	80082c6 <__hi0bits+0x3c>
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	d503      	bpl.n	80082c4 <__hi0bits+0x3a>
 80082bc:	3001      	adds	r0, #1
 80082be:	4770      	bx	lr
 80082c0:	2000      	movs	r0, #0
 80082c2:	e7e8      	b.n	8008296 <__hi0bits+0xc>
 80082c4:	2020      	movs	r0, #32
 80082c6:	4770      	bx	lr

080082c8 <__lo0bits>:
 80082c8:	6803      	ldr	r3, [r0, #0]
 80082ca:	f013 0207 	ands.w	r2, r3, #7
 80082ce:	4601      	mov	r1, r0
 80082d0:	d00b      	beq.n	80082ea <__lo0bits+0x22>
 80082d2:	07da      	lsls	r2, r3, #31
 80082d4:	d423      	bmi.n	800831e <__lo0bits+0x56>
 80082d6:	0798      	lsls	r0, r3, #30
 80082d8:	bf49      	itett	mi
 80082da:	085b      	lsrmi	r3, r3, #1
 80082dc:	089b      	lsrpl	r3, r3, #2
 80082de:	2001      	movmi	r0, #1
 80082e0:	600b      	strmi	r3, [r1, #0]
 80082e2:	bf5c      	itt	pl
 80082e4:	600b      	strpl	r3, [r1, #0]
 80082e6:	2002      	movpl	r0, #2
 80082e8:	4770      	bx	lr
 80082ea:	b298      	uxth	r0, r3
 80082ec:	b9a8      	cbnz	r0, 800831a <__lo0bits+0x52>
 80082ee:	0c1b      	lsrs	r3, r3, #16
 80082f0:	2010      	movs	r0, #16
 80082f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082f6:	bf04      	itt	eq
 80082f8:	0a1b      	lsreq	r3, r3, #8
 80082fa:	3008      	addeq	r0, #8
 80082fc:	071a      	lsls	r2, r3, #28
 80082fe:	bf04      	itt	eq
 8008300:	091b      	lsreq	r3, r3, #4
 8008302:	3004      	addeq	r0, #4
 8008304:	079a      	lsls	r2, r3, #30
 8008306:	bf04      	itt	eq
 8008308:	089b      	lsreq	r3, r3, #2
 800830a:	3002      	addeq	r0, #2
 800830c:	07da      	lsls	r2, r3, #31
 800830e:	d402      	bmi.n	8008316 <__lo0bits+0x4e>
 8008310:	085b      	lsrs	r3, r3, #1
 8008312:	d006      	beq.n	8008322 <__lo0bits+0x5a>
 8008314:	3001      	adds	r0, #1
 8008316:	600b      	str	r3, [r1, #0]
 8008318:	4770      	bx	lr
 800831a:	4610      	mov	r0, r2
 800831c:	e7e9      	b.n	80082f2 <__lo0bits+0x2a>
 800831e:	2000      	movs	r0, #0
 8008320:	4770      	bx	lr
 8008322:	2020      	movs	r0, #32
 8008324:	4770      	bx	lr

08008326 <__i2b>:
 8008326:	b510      	push	{r4, lr}
 8008328:	460c      	mov	r4, r1
 800832a:	2101      	movs	r1, #1
 800832c:	f7ff ff27 	bl	800817e <_Balloc>
 8008330:	2201      	movs	r2, #1
 8008332:	6144      	str	r4, [r0, #20]
 8008334:	6102      	str	r2, [r0, #16]
 8008336:	bd10      	pop	{r4, pc}

08008338 <__multiply>:
 8008338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	4614      	mov	r4, r2
 800833e:	690a      	ldr	r2, [r1, #16]
 8008340:	6923      	ldr	r3, [r4, #16]
 8008342:	429a      	cmp	r2, r3
 8008344:	bfb8      	it	lt
 8008346:	460b      	movlt	r3, r1
 8008348:	4688      	mov	r8, r1
 800834a:	bfbc      	itt	lt
 800834c:	46a0      	movlt	r8, r4
 800834e:	461c      	movlt	r4, r3
 8008350:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008354:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008358:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800835c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008360:	eb07 0609 	add.w	r6, r7, r9
 8008364:	42b3      	cmp	r3, r6
 8008366:	bfb8      	it	lt
 8008368:	3101      	addlt	r1, #1
 800836a:	f7ff ff08 	bl	800817e <_Balloc>
 800836e:	f100 0514 	add.w	r5, r0, #20
 8008372:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008376:	462b      	mov	r3, r5
 8008378:	2200      	movs	r2, #0
 800837a:	4573      	cmp	r3, lr
 800837c:	d316      	bcc.n	80083ac <__multiply+0x74>
 800837e:	f104 0214 	add.w	r2, r4, #20
 8008382:	f108 0114 	add.w	r1, r8, #20
 8008386:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800838a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	9b00      	ldr	r3, [sp, #0]
 8008392:	9201      	str	r2, [sp, #4]
 8008394:	4293      	cmp	r3, r2
 8008396:	d80c      	bhi.n	80083b2 <__multiply+0x7a>
 8008398:	2e00      	cmp	r6, #0
 800839a:	dd03      	ble.n	80083a4 <__multiply+0x6c>
 800839c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d05d      	beq.n	8008460 <__multiply+0x128>
 80083a4:	6106      	str	r6, [r0, #16]
 80083a6:	b003      	add	sp, #12
 80083a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ac:	f843 2b04 	str.w	r2, [r3], #4
 80083b0:	e7e3      	b.n	800837a <__multiply+0x42>
 80083b2:	f8b2 b000 	ldrh.w	fp, [r2]
 80083b6:	f1bb 0f00 	cmp.w	fp, #0
 80083ba:	d023      	beq.n	8008404 <__multiply+0xcc>
 80083bc:	4689      	mov	r9, r1
 80083be:	46ac      	mov	ip, r5
 80083c0:	f04f 0800 	mov.w	r8, #0
 80083c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80083c8:	f8dc a000 	ldr.w	sl, [ip]
 80083cc:	b2a3      	uxth	r3, r4
 80083ce:	fa1f fa8a 	uxth.w	sl, sl
 80083d2:	fb0b a303 	mla	r3, fp, r3, sl
 80083d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80083da:	f8dc 4000 	ldr.w	r4, [ip]
 80083de:	4443      	add	r3, r8
 80083e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80083e4:	fb0b 840a 	mla	r4, fp, sl, r8
 80083e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80083ec:	46e2      	mov	sl, ip
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80083f4:	454f      	cmp	r7, r9
 80083f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80083fa:	f84a 3b04 	str.w	r3, [sl], #4
 80083fe:	d82b      	bhi.n	8008458 <__multiply+0x120>
 8008400:	f8cc 8004 	str.w	r8, [ip, #4]
 8008404:	9b01      	ldr	r3, [sp, #4]
 8008406:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800840a:	3204      	adds	r2, #4
 800840c:	f1ba 0f00 	cmp.w	sl, #0
 8008410:	d020      	beq.n	8008454 <__multiply+0x11c>
 8008412:	682b      	ldr	r3, [r5, #0]
 8008414:	4689      	mov	r9, r1
 8008416:	46a8      	mov	r8, r5
 8008418:	f04f 0b00 	mov.w	fp, #0
 800841c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008420:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008424:	fb0a 440c 	mla	r4, sl, ip, r4
 8008428:	445c      	add	r4, fp
 800842a:	46c4      	mov	ip, r8
 800842c:	b29b      	uxth	r3, r3
 800842e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008432:	f84c 3b04 	str.w	r3, [ip], #4
 8008436:	f859 3b04 	ldr.w	r3, [r9], #4
 800843a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800843e:	0c1b      	lsrs	r3, r3, #16
 8008440:	fb0a b303 	mla	r3, sl, r3, fp
 8008444:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008448:	454f      	cmp	r7, r9
 800844a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800844e:	d805      	bhi.n	800845c <__multiply+0x124>
 8008450:	f8c8 3004 	str.w	r3, [r8, #4]
 8008454:	3504      	adds	r5, #4
 8008456:	e79b      	b.n	8008390 <__multiply+0x58>
 8008458:	46d4      	mov	ip, sl
 800845a:	e7b3      	b.n	80083c4 <__multiply+0x8c>
 800845c:	46e0      	mov	r8, ip
 800845e:	e7dd      	b.n	800841c <__multiply+0xe4>
 8008460:	3e01      	subs	r6, #1
 8008462:	e799      	b.n	8008398 <__multiply+0x60>

08008464 <__pow5mult>:
 8008464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008468:	4615      	mov	r5, r2
 800846a:	f012 0203 	ands.w	r2, r2, #3
 800846e:	4606      	mov	r6, r0
 8008470:	460f      	mov	r7, r1
 8008472:	d007      	beq.n	8008484 <__pow5mult+0x20>
 8008474:	3a01      	subs	r2, #1
 8008476:	4c21      	ldr	r4, [pc, #132]	; (80084fc <__pow5mult+0x98>)
 8008478:	2300      	movs	r3, #0
 800847a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800847e:	f7ff fec9 	bl	8008214 <__multadd>
 8008482:	4607      	mov	r7, r0
 8008484:	10ad      	asrs	r5, r5, #2
 8008486:	d035      	beq.n	80084f4 <__pow5mult+0x90>
 8008488:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800848a:	b93c      	cbnz	r4, 800849c <__pow5mult+0x38>
 800848c:	2010      	movs	r0, #16
 800848e:	f7fe fa63 	bl	8006958 <malloc>
 8008492:	6270      	str	r0, [r6, #36]	; 0x24
 8008494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008498:	6004      	str	r4, [r0, #0]
 800849a:	60c4      	str	r4, [r0, #12]
 800849c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084a4:	b94c      	cbnz	r4, 80084ba <__pow5mult+0x56>
 80084a6:	f240 2171 	movw	r1, #625	; 0x271
 80084aa:	4630      	mov	r0, r6
 80084ac:	f7ff ff3b 	bl	8008326 <__i2b>
 80084b0:	2300      	movs	r3, #0
 80084b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80084b6:	4604      	mov	r4, r0
 80084b8:	6003      	str	r3, [r0, #0]
 80084ba:	f04f 0800 	mov.w	r8, #0
 80084be:	07eb      	lsls	r3, r5, #31
 80084c0:	d50a      	bpl.n	80084d8 <__pow5mult+0x74>
 80084c2:	4639      	mov	r1, r7
 80084c4:	4622      	mov	r2, r4
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7ff ff36 	bl	8008338 <__multiply>
 80084cc:	4639      	mov	r1, r7
 80084ce:	4681      	mov	r9, r0
 80084d0:	4630      	mov	r0, r6
 80084d2:	f7ff fe88 	bl	80081e6 <_Bfree>
 80084d6:	464f      	mov	r7, r9
 80084d8:	106d      	asrs	r5, r5, #1
 80084da:	d00b      	beq.n	80084f4 <__pow5mult+0x90>
 80084dc:	6820      	ldr	r0, [r4, #0]
 80084de:	b938      	cbnz	r0, 80084f0 <__pow5mult+0x8c>
 80084e0:	4622      	mov	r2, r4
 80084e2:	4621      	mov	r1, r4
 80084e4:	4630      	mov	r0, r6
 80084e6:	f7ff ff27 	bl	8008338 <__multiply>
 80084ea:	6020      	str	r0, [r4, #0]
 80084ec:	f8c0 8000 	str.w	r8, [r0]
 80084f0:	4604      	mov	r4, r0
 80084f2:	e7e4      	b.n	80084be <__pow5mult+0x5a>
 80084f4:	4638      	mov	r0, r7
 80084f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084fa:	bf00      	nop
 80084fc:	080095b8 	.word	0x080095b8

08008500 <__lshift>:
 8008500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	460c      	mov	r4, r1
 8008506:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	6849      	ldr	r1, [r1, #4]
 800850e:	eb0a 0903 	add.w	r9, sl, r3
 8008512:	68a3      	ldr	r3, [r4, #8]
 8008514:	4607      	mov	r7, r0
 8008516:	4616      	mov	r6, r2
 8008518:	f109 0501 	add.w	r5, r9, #1
 800851c:	42ab      	cmp	r3, r5
 800851e:	db32      	blt.n	8008586 <__lshift+0x86>
 8008520:	4638      	mov	r0, r7
 8008522:	f7ff fe2c 	bl	800817e <_Balloc>
 8008526:	2300      	movs	r3, #0
 8008528:	4680      	mov	r8, r0
 800852a:	f100 0114 	add.w	r1, r0, #20
 800852e:	461a      	mov	r2, r3
 8008530:	4553      	cmp	r3, sl
 8008532:	db2b      	blt.n	800858c <__lshift+0x8c>
 8008534:	6920      	ldr	r0, [r4, #16]
 8008536:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800853a:	f104 0314 	add.w	r3, r4, #20
 800853e:	f016 021f 	ands.w	r2, r6, #31
 8008542:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008546:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800854a:	d025      	beq.n	8008598 <__lshift+0x98>
 800854c:	f1c2 0e20 	rsb	lr, r2, #32
 8008550:	2000      	movs	r0, #0
 8008552:	681e      	ldr	r6, [r3, #0]
 8008554:	468a      	mov	sl, r1
 8008556:	4096      	lsls	r6, r2
 8008558:	4330      	orrs	r0, r6
 800855a:	f84a 0b04 	str.w	r0, [sl], #4
 800855e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008562:	459c      	cmp	ip, r3
 8008564:	fa20 f00e 	lsr.w	r0, r0, lr
 8008568:	d814      	bhi.n	8008594 <__lshift+0x94>
 800856a:	6048      	str	r0, [r1, #4]
 800856c:	b108      	cbz	r0, 8008572 <__lshift+0x72>
 800856e:	f109 0502 	add.w	r5, r9, #2
 8008572:	3d01      	subs	r5, #1
 8008574:	4638      	mov	r0, r7
 8008576:	f8c8 5010 	str.w	r5, [r8, #16]
 800857a:	4621      	mov	r1, r4
 800857c:	f7ff fe33 	bl	80081e6 <_Bfree>
 8008580:	4640      	mov	r0, r8
 8008582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008586:	3101      	adds	r1, #1
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	e7c7      	b.n	800851c <__lshift+0x1c>
 800858c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008590:	3301      	adds	r3, #1
 8008592:	e7cd      	b.n	8008530 <__lshift+0x30>
 8008594:	4651      	mov	r1, sl
 8008596:	e7dc      	b.n	8008552 <__lshift+0x52>
 8008598:	3904      	subs	r1, #4
 800859a:	f853 2b04 	ldr.w	r2, [r3], #4
 800859e:	f841 2f04 	str.w	r2, [r1, #4]!
 80085a2:	459c      	cmp	ip, r3
 80085a4:	d8f9      	bhi.n	800859a <__lshift+0x9a>
 80085a6:	e7e4      	b.n	8008572 <__lshift+0x72>

080085a8 <__mcmp>:
 80085a8:	6903      	ldr	r3, [r0, #16]
 80085aa:	690a      	ldr	r2, [r1, #16]
 80085ac:	1a9b      	subs	r3, r3, r2
 80085ae:	b530      	push	{r4, r5, lr}
 80085b0:	d10c      	bne.n	80085cc <__mcmp+0x24>
 80085b2:	0092      	lsls	r2, r2, #2
 80085b4:	3014      	adds	r0, #20
 80085b6:	3114      	adds	r1, #20
 80085b8:	1884      	adds	r4, r0, r2
 80085ba:	4411      	add	r1, r2
 80085bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085c4:	4295      	cmp	r5, r2
 80085c6:	d003      	beq.n	80085d0 <__mcmp+0x28>
 80085c8:	d305      	bcc.n	80085d6 <__mcmp+0x2e>
 80085ca:	2301      	movs	r3, #1
 80085cc:	4618      	mov	r0, r3
 80085ce:	bd30      	pop	{r4, r5, pc}
 80085d0:	42a0      	cmp	r0, r4
 80085d2:	d3f3      	bcc.n	80085bc <__mcmp+0x14>
 80085d4:	e7fa      	b.n	80085cc <__mcmp+0x24>
 80085d6:	f04f 33ff 	mov.w	r3, #4294967295
 80085da:	e7f7      	b.n	80085cc <__mcmp+0x24>

080085dc <__mdiff>:
 80085dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	460d      	mov	r5, r1
 80085e2:	4607      	mov	r7, r0
 80085e4:	4611      	mov	r1, r2
 80085e6:	4628      	mov	r0, r5
 80085e8:	4614      	mov	r4, r2
 80085ea:	f7ff ffdd 	bl	80085a8 <__mcmp>
 80085ee:	1e06      	subs	r6, r0, #0
 80085f0:	d108      	bne.n	8008604 <__mdiff+0x28>
 80085f2:	4631      	mov	r1, r6
 80085f4:	4638      	mov	r0, r7
 80085f6:	f7ff fdc2 	bl	800817e <_Balloc>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008604:	bfa4      	itt	ge
 8008606:	4623      	movge	r3, r4
 8008608:	462c      	movge	r4, r5
 800860a:	4638      	mov	r0, r7
 800860c:	6861      	ldr	r1, [r4, #4]
 800860e:	bfa6      	itte	ge
 8008610:	461d      	movge	r5, r3
 8008612:	2600      	movge	r6, #0
 8008614:	2601      	movlt	r6, #1
 8008616:	f7ff fdb2 	bl	800817e <_Balloc>
 800861a:	692b      	ldr	r3, [r5, #16]
 800861c:	60c6      	str	r6, [r0, #12]
 800861e:	6926      	ldr	r6, [r4, #16]
 8008620:	f105 0914 	add.w	r9, r5, #20
 8008624:	f104 0214 	add.w	r2, r4, #20
 8008628:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800862c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008630:	f100 0514 	add.w	r5, r0, #20
 8008634:	f04f 0e00 	mov.w	lr, #0
 8008638:	f852 ab04 	ldr.w	sl, [r2], #4
 800863c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008640:	fa1e f18a 	uxtah	r1, lr, sl
 8008644:	b2a3      	uxth	r3, r4
 8008646:	1ac9      	subs	r1, r1, r3
 8008648:	0c23      	lsrs	r3, r4, #16
 800864a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800864e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008652:	b289      	uxth	r1, r1
 8008654:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008658:	45c8      	cmp	r8, r9
 800865a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800865e:	4694      	mov	ip, r2
 8008660:	f845 3b04 	str.w	r3, [r5], #4
 8008664:	d8e8      	bhi.n	8008638 <__mdiff+0x5c>
 8008666:	45bc      	cmp	ip, r7
 8008668:	d304      	bcc.n	8008674 <__mdiff+0x98>
 800866a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800866e:	b183      	cbz	r3, 8008692 <__mdiff+0xb6>
 8008670:	6106      	str	r6, [r0, #16]
 8008672:	e7c5      	b.n	8008600 <__mdiff+0x24>
 8008674:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008678:	fa1e f381 	uxtah	r3, lr, r1
 800867c:	141a      	asrs	r2, r3, #16
 800867e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008682:	b29b      	uxth	r3, r3
 8008684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008688:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800868c:	f845 3b04 	str.w	r3, [r5], #4
 8008690:	e7e9      	b.n	8008666 <__mdiff+0x8a>
 8008692:	3e01      	subs	r6, #1
 8008694:	e7e9      	b.n	800866a <__mdiff+0x8e>

08008696 <__d2b>:
 8008696:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800869a:	460e      	mov	r6, r1
 800869c:	2101      	movs	r1, #1
 800869e:	ec59 8b10 	vmov	r8, r9, d0
 80086a2:	4615      	mov	r5, r2
 80086a4:	f7ff fd6b 	bl	800817e <_Balloc>
 80086a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80086ac:	4607      	mov	r7, r0
 80086ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086b2:	bb34      	cbnz	r4, 8008702 <__d2b+0x6c>
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	f1b8 0300 	subs.w	r3, r8, #0
 80086ba:	d027      	beq.n	800870c <__d2b+0x76>
 80086bc:	a802      	add	r0, sp, #8
 80086be:	f840 3d08 	str.w	r3, [r0, #-8]!
 80086c2:	f7ff fe01 	bl	80082c8 <__lo0bits>
 80086c6:	9900      	ldr	r1, [sp, #0]
 80086c8:	b1f0      	cbz	r0, 8008708 <__d2b+0x72>
 80086ca:	9a01      	ldr	r2, [sp, #4]
 80086cc:	f1c0 0320 	rsb	r3, r0, #32
 80086d0:	fa02 f303 	lsl.w	r3, r2, r3
 80086d4:	430b      	orrs	r3, r1
 80086d6:	40c2      	lsrs	r2, r0
 80086d8:	617b      	str	r3, [r7, #20]
 80086da:	9201      	str	r2, [sp, #4]
 80086dc:	9b01      	ldr	r3, [sp, #4]
 80086de:	61bb      	str	r3, [r7, #24]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bf14      	ite	ne
 80086e4:	2102      	movne	r1, #2
 80086e6:	2101      	moveq	r1, #1
 80086e8:	6139      	str	r1, [r7, #16]
 80086ea:	b1c4      	cbz	r4, 800871e <__d2b+0x88>
 80086ec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80086f0:	4404      	add	r4, r0
 80086f2:	6034      	str	r4, [r6, #0]
 80086f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086f8:	6028      	str	r0, [r5, #0]
 80086fa:	4638      	mov	r0, r7
 80086fc:	b003      	add	sp, #12
 80086fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008706:	e7d5      	b.n	80086b4 <__d2b+0x1e>
 8008708:	6179      	str	r1, [r7, #20]
 800870a:	e7e7      	b.n	80086dc <__d2b+0x46>
 800870c:	a801      	add	r0, sp, #4
 800870e:	f7ff fddb 	bl	80082c8 <__lo0bits>
 8008712:	9b01      	ldr	r3, [sp, #4]
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	2101      	movs	r1, #1
 8008718:	6139      	str	r1, [r7, #16]
 800871a:	3020      	adds	r0, #32
 800871c:	e7e5      	b.n	80086ea <__d2b+0x54>
 800871e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008722:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008726:	6030      	str	r0, [r6, #0]
 8008728:	6918      	ldr	r0, [r3, #16]
 800872a:	f7ff fdae 	bl	800828a <__hi0bits>
 800872e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008732:	e7e1      	b.n	80086f8 <__d2b+0x62>

08008734 <_calloc_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	fb02 f401 	mul.w	r4, r2, r1
 800873a:	4621      	mov	r1, r4
 800873c:	f7fe f96a 	bl	8006a14 <_malloc_r>
 8008740:	4605      	mov	r5, r0
 8008742:	b118      	cbz	r0, 800874c <_calloc_r+0x18>
 8008744:	4622      	mov	r2, r4
 8008746:	2100      	movs	r1, #0
 8008748:	f7fe f90e 	bl	8006968 <memset>
 800874c:	4628      	mov	r0, r5
 800874e:	bd38      	pop	{r3, r4, r5, pc}

08008750 <__ssputs_r>:
 8008750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008754:	688e      	ldr	r6, [r1, #8]
 8008756:	429e      	cmp	r6, r3
 8008758:	4682      	mov	sl, r0
 800875a:	460c      	mov	r4, r1
 800875c:	4690      	mov	r8, r2
 800875e:	4699      	mov	r9, r3
 8008760:	d837      	bhi.n	80087d2 <__ssputs_r+0x82>
 8008762:	898a      	ldrh	r2, [r1, #12]
 8008764:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008768:	d031      	beq.n	80087ce <__ssputs_r+0x7e>
 800876a:	6825      	ldr	r5, [r4, #0]
 800876c:	6909      	ldr	r1, [r1, #16]
 800876e:	1a6f      	subs	r7, r5, r1
 8008770:	6965      	ldr	r5, [r4, #20]
 8008772:	2302      	movs	r3, #2
 8008774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008778:	fb95 f5f3 	sdiv	r5, r5, r3
 800877c:	f109 0301 	add.w	r3, r9, #1
 8008780:	443b      	add	r3, r7
 8008782:	429d      	cmp	r5, r3
 8008784:	bf38      	it	cc
 8008786:	461d      	movcc	r5, r3
 8008788:	0553      	lsls	r3, r2, #21
 800878a:	d530      	bpl.n	80087ee <__ssputs_r+0x9e>
 800878c:	4629      	mov	r1, r5
 800878e:	f7fe f941 	bl	8006a14 <_malloc_r>
 8008792:	4606      	mov	r6, r0
 8008794:	b950      	cbnz	r0, 80087ac <__ssputs_r+0x5c>
 8008796:	230c      	movs	r3, #12
 8008798:	f8ca 3000 	str.w	r3, [sl]
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ac:	463a      	mov	r2, r7
 80087ae:	6921      	ldr	r1, [r4, #16]
 80087b0:	f7ff fcd8 	bl	8008164 <memcpy>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087be:	81a3      	strh	r3, [r4, #12]
 80087c0:	6126      	str	r6, [r4, #16]
 80087c2:	6165      	str	r5, [r4, #20]
 80087c4:	443e      	add	r6, r7
 80087c6:	1bed      	subs	r5, r5, r7
 80087c8:	6026      	str	r6, [r4, #0]
 80087ca:	60a5      	str	r5, [r4, #8]
 80087cc:	464e      	mov	r6, r9
 80087ce:	454e      	cmp	r6, r9
 80087d0:	d900      	bls.n	80087d4 <__ssputs_r+0x84>
 80087d2:	464e      	mov	r6, r9
 80087d4:	4632      	mov	r2, r6
 80087d6:	4641      	mov	r1, r8
 80087d8:	6820      	ldr	r0, [r4, #0]
 80087da:	f000 fdb7 	bl	800934c <memmove>
 80087de:	68a3      	ldr	r3, [r4, #8]
 80087e0:	1b9b      	subs	r3, r3, r6
 80087e2:	60a3      	str	r3, [r4, #8]
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	441e      	add	r6, r3
 80087e8:	6026      	str	r6, [r4, #0]
 80087ea:	2000      	movs	r0, #0
 80087ec:	e7dc      	b.n	80087a8 <__ssputs_r+0x58>
 80087ee:	462a      	mov	r2, r5
 80087f0:	f000 fdc5 	bl	800937e <_realloc_r>
 80087f4:	4606      	mov	r6, r0
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d1e2      	bne.n	80087c0 <__ssputs_r+0x70>
 80087fa:	6921      	ldr	r1, [r4, #16]
 80087fc:	4650      	mov	r0, sl
 80087fe:	f7fe f8bb 	bl	8006978 <_free_r>
 8008802:	e7c8      	b.n	8008796 <__ssputs_r+0x46>

08008804 <_svfiprintf_r>:
 8008804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008808:	461d      	mov	r5, r3
 800880a:	898b      	ldrh	r3, [r1, #12]
 800880c:	061f      	lsls	r7, r3, #24
 800880e:	b09d      	sub	sp, #116	; 0x74
 8008810:	4680      	mov	r8, r0
 8008812:	460c      	mov	r4, r1
 8008814:	4616      	mov	r6, r2
 8008816:	d50f      	bpl.n	8008838 <_svfiprintf_r+0x34>
 8008818:	690b      	ldr	r3, [r1, #16]
 800881a:	b96b      	cbnz	r3, 8008838 <_svfiprintf_r+0x34>
 800881c:	2140      	movs	r1, #64	; 0x40
 800881e:	f7fe f8f9 	bl	8006a14 <_malloc_r>
 8008822:	6020      	str	r0, [r4, #0]
 8008824:	6120      	str	r0, [r4, #16]
 8008826:	b928      	cbnz	r0, 8008834 <_svfiprintf_r+0x30>
 8008828:	230c      	movs	r3, #12
 800882a:	f8c8 3000 	str.w	r3, [r8]
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	e0c8      	b.n	80089c6 <_svfiprintf_r+0x1c2>
 8008834:	2340      	movs	r3, #64	; 0x40
 8008836:	6163      	str	r3, [r4, #20]
 8008838:	2300      	movs	r3, #0
 800883a:	9309      	str	r3, [sp, #36]	; 0x24
 800883c:	2320      	movs	r3, #32
 800883e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008842:	2330      	movs	r3, #48	; 0x30
 8008844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008848:	9503      	str	r5, [sp, #12]
 800884a:	f04f 0b01 	mov.w	fp, #1
 800884e:	4637      	mov	r7, r6
 8008850:	463d      	mov	r5, r7
 8008852:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008856:	b10b      	cbz	r3, 800885c <_svfiprintf_r+0x58>
 8008858:	2b25      	cmp	r3, #37	; 0x25
 800885a:	d13e      	bne.n	80088da <_svfiprintf_r+0xd6>
 800885c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008860:	d00b      	beq.n	800887a <_svfiprintf_r+0x76>
 8008862:	4653      	mov	r3, sl
 8008864:	4632      	mov	r2, r6
 8008866:	4621      	mov	r1, r4
 8008868:	4640      	mov	r0, r8
 800886a:	f7ff ff71 	bl	8008750 <__ssputs_r>
 800886e:	3001      	adds	r0, #1
 8008870:	f000 80a4 	beq.w	80089bc <_svfiprintf_r+0x1b8>
 8008874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008876:	4453      	add	r3, sl
 8008878:	9309      	str	r3, [sp, #36]	; 0x24
 800887a:	783b      	ldrb	r3, [r7, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 809d 	beq.w	80089bc <_svfiprintf_r+0x1b8>
 8008882:	2300      	movs	r3, #0
 8008884:	f04f 32ff 	mov.w	r2, #4294967295
 8008888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	9307      	str	r3, [sp, #28]
 8008890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008894:	931a      	str	r3, [sp, #104]	; 0x68
 8008896:	462f      	mov	r7, r5
 8008898:	2205      	movs	r2, #5
 800889a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800889e:	4850      	ldr	r0, [pc, #320]	; (80089e0 <_svfiprintf_r+0x1dc>)
 80088a0:	f7f7 fca6 	bl	80001f0 <memchr>
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	b9d0      	cbnz	r0, 80088de <_svfiprintf_r+0xda>
 80088a8:	06d9      	lsls	r1, r3, #27
 80088aa:	bf44      	itt	mi
 80088ac:	2220      	movmi	r2, #32
 80088ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088b2:	071a      	lsls	r2, r3, #28
 80088b4:	bf44      	itt	mi
 80088b6:	222b      	movmi	r2, #43	; 0x2b
 80088b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088bc:	782a      	ldrb	r2, [r5, #0]
 80088be:	2a2a      	cmp	r2, #42	; 0x2a
 80088c0:	d015      	beq.n	80088ee <_svfiprintf_r+0xea>
 80088c2:	9a07      	ldr	r2, [sp, #28]
 80088c4:	462f      	mov	r7, r5
 80088c6:	2000      	movs	r0, #0
 80088c8:	250a      	movs	r5, #10
 80088ca:	4639      	mov	r1, r7
 80088cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d0:	3b30      	subs	r3, #48	; 0x30
 80088d2:	2b09      	cmp	r3, #9
 80088d4:	d94d      	bls.n	8008972 <_svfiprintf_r+0x16e>
 80088d6:	b1b8      	cbz	r0, 8008908 <_svfiprintf_r+0x104>
 80088d8:	e00f      	b.n	80088fa <_svfiprintf_r+0xf6>
 80088da:	462f      	mov	r7, r5
 80088dc:	e7b8      	b.n	8008850 <_svfiprintf_r+0x4c>
 80088de:	4a40      	ldr	r2, [pc, #256]	; (80089e0 <_svfiprintf_r+0x1dc>)
 80088e0:	1a80      	subs	r0, r0, r2
 80088e2:	fa0b f000 	lsl.w	r0, fp, r0
 80088e6:	4318      	orrs	r0, r3
 80088e8:	9004      	str	r0, [sp, #16]
 80088ea:	463d      	mov	r5, r7
 80088ec:	e7d3      	b.n	8008896 <_svfiprintf_r+0x92>
 80088ee:	9a03      	ldr	r2, [sp, #12]
 80088f0:	1d11      	adds	r1, r2, #4
 80088f2:	6812      	ldr	r2, [r2, #0]
 80088f4:	9103      	str	r1, [sp, #12]
 80088f6:	2a00      	cmp	r2, #0
 80088f8:	db01      	blt.n	80088fe <_svfiprintf_r+0xfa>
 80088fa:	9207      	str	r2, [sp, #28]
 80088fc:	e004      	b.n	8008908 <_svfiprintf_r+0x104>
 80088fe:	4252      	negs	r2, r2
 8008900:	f043 0302 	orr.w	r3, r3, #2
 8008904:	9207      	str	r2, [sp, #28]
 8008906:	9304      	str	r3, [sp, #16]
 8008908:	783b      	ldrb	r3, [r7, #0]
 800890a:	2b2e      	cmp	r3, #46	; 0x2e
 800890c:	d10c      	bne.n	8008928 <_svfiprintf_r+0x124>
 800890e:	787b      	ldrb	r3, [r7, #1]
 8008910:	2b2a      	cmp	r3, #42	; 0x2a
 8008912:	d133      	bne.n	800897c <_svfiprintf_r+0x178>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	1d1a      	adds	r2, r3, #4
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	9203      	str	r2, [sp, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	bfb8      	it	lt
 8008920:	f04f 33ff 	movlt.w	r3, #4294967295
 8008924:	3702      	adds	r7, #2
 8008926:	9305      	str	r3, [sp, #20]
 8008928:	4d2e      	ldr	r5, [pc, #184]	; (80089e4 <_svfiprintf_r+0x1e0>)
 800892a:	7839      	ldrb	r1, [r7, #0]
 800892c:	2203      	movs	r2, #3
 800892e:	4628      	mov	r0, r5
 8008930:	f7f7 fc5e 	bl	80001f0 <memchr>
 8008934:	b138      	cbz	r0, 8008946 <_svfiprintf_r+0x142>
 8008936:	2340      	movs	r3, #64	; 0x40
 8008938:	1b40      	subs	r0, r0, r5
 800893a:	fa03 f000 	lsl.w	r0, r3, r0
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	4303      	orrs	r3, r0
 8008942:	3701      	adds	r7, #1
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	7839      	ldrb	r1, [r7, #0]
 8008948:	4827      	ldr	r0, [pc, #156]	; (80089e8 <_svfiprintf_r+0x1e4>)
 800894a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800894e:	2206      	movs	r2, #6
 8008950:	1c7e      	adds	r6, r7, #1
 8008952:	f7f7 fc4d 	bl	80001f0 <memchr>
 8008956:	2800      	cmp	r0, #0
 8008958:	d038      	beq.n	80089cc <_svfiprintf_r+0x1c8>
 800895a:	4b24      	ldr	r3, [pc, #144]	; (80089ec <_svfiprintf_r+0x1e8>)
 800895c:	bb13      	cbnz	r3, 80089a4 <_svfiprintf_r+0x1a0>
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	3307      	adds	r3, #7
 8008962:	f023 0307 	bic.w	r3, r3, #7
 8008966:	3308      	adds	r3, #8
 8008968:	9303      	str	r3, [sp, #12]
 800896a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800896c:	444b      	add	r3, r9
 800896e:	9309      	str	r3, [sp, #36]	; 0x24
 8008970:	e76d      	b.n	800884e <_svfiprintf_r+0x4a>
 8008972:	fb05 3202 	mla	r2, r5, r2, r3
 8008976:	2001      	movs	r0, #1
 8008978:	460f      	mov	r7, r1
 800897a:	e7a6      	b.n	80088ca <_svfiprintf_r+0xc6>
 800897c:	2300      	movs	r3, #0
 800897e:	3701      	adds	r7, #1
 8008980:	9305      	str	r3, [sp, #20]
 8008982:	4619      	mov	r1, r3
 8008984:	250a      	movs	r5, #10
 8008986:	4638      	mov	r0, r7
 8008988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800898c:	3a30      	subs	r2, #48	; 0x30
 800898e:	2a09      	cmp	r2, #9
 8008990:	d903      	bls.n	800899a <_svfiprintf_r+0x196>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0c8      	beq.n	8008928 <_svfiprintf_r+0x124>
 8008996:	9105      	str	r1, [sp, #20]
 8008998:	e7c6      	b.n	8008928 <_svfiprintf_r+0x124>
 800899a:	fb05 2101 	mla	r1, r5, r1, r2
 800899e:	2301      	movs	r3, #1
 80089a0:	4607      	mov	r7, r0
 80089a2:	e7f0      	b.n	8008986 <_svfiprintf_r+0x182>
 80089a4:	ab03      	add	r3, sp, #12
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	4622      	mov	r2, r4
 80089aa:	4b11      	ldr	r3, [pc, #68]	; (80089f0 <_svfiprintf_r+0x1ec>)
 80089ac:	a904      	add	r1, sp, #16
 80089ae:	4640      	mov	r0, r8
 80089b0:	f7fe f91e 	bl	8006bf0 <_printf_float>
 80089b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089b8:	4681      	mov	r9, r0
 80089ba:	d1d6      	bne.n	800896a <_svfiprintf_r+0x166>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	065b      	lsls	r3, r3, #25
 80089c0:	f53f af35 	bmi.w	800882e <_svfiprintf_r+0x2a>
 80089c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089c6:	b01d      	add	sp, #116	; 0x74
 80089c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089cc:	ab03      	add	r3, sp, #12
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	4622      	mov	r2, r4
 80089d2:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <_svfiprintf_r+0x1ec>)
 80089d4:	a904      	add	r1, sp, #16
 80089d6:	4640      	mov	r0, r8
 80089d8:	f7fe fbc0 	bl	800715c <_printf_i>
 80089dc:	e7ea      	b.n	80089b4 <_svfiprintf_r+0x1b0>
 80089de:	bf00      	nop
 80089e0:	080095c4 	.word	0x080095c4
 80089e4:	080095ca 	.word	0x080095ca
 80089e8:	080095ce 	.word	0x080095ce
 80089ec:	08006bf1 	.word	0x08006bf1
 80089f0:	08008751 	.word	0x08008751

080089f4 <_sungetc_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	1c4b      	adds	r3, r1, #1
 80089f8:	4614      	mov	r4, r2
 80089fa:	d103      	bne.n	8008a04 <_sungetc_r+0x10>
 80089fc:	f04f 35ff 	mov.w	r5, #4294967295
 8008a00:	4628      	mov	r0, r5
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	8993      	ldrh	r3, [r2, #12]
 8008a06:	f023 0320 	bic.w	r3, r3, #32
 8008a0a:	8193      	strh	r3, [r2, #12]
 8008a0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a0e:	6852      	ldr	r2, [r2, #4]
 8008a10:	b2cd      	uxtb	r5, r1
 8008a12:	b18b      	cbz	r3, 8008a38 <_sungetc_r+0x44>
 8008a14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a16:	4293      	cmp	r3, r2
 8008a18:	dd08      	ble.n	8008a2c <_sungetc_r+0x38>
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	1e5a      	subs	r2, r3, #1
 8008a1e:	6022      	str	r2, [r4, #0]
 8008a20:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008a24:	6863      	ldr	r3, [r4, #4]
 8008a26:	3301      	adds	r3, #1
 8008a28:	6063      	str	r3, [r4, #4]
 8008a2a:	e7e9      	b.n	8008a00 <_sungetc_r+0xc>
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	f000 fc2f 	bl	8009290 <__submore>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d0f1      	beq.n	8008a1a <_sungetc_r+0x26>
 8008a36:	e7e1      	b.n	80089fc <_sungetc_r+0x8>
 8008a38:	6921      	ldr	r1, [r4, #16]
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	b151      	cbz	r1, 8008a54 <_sungetc_r+0x60>
 8008a3e:	4299      	cmp	r1, r3
 8008a40:	d208      	bcs.n	8008a54 <_sungetc_r+0x60>
 8008a42:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008a46:	42a9      	cmp	r1, r5
 8008a48:	d104      	bne.n	8008a54 <_sungetc_r+0x60>
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	3201      	adds	r2, #1
 8008a4e:	6023      	str	r3, [r4, #0]
 8008a50:	6062      	str	r2, [r4, #4]
 8008a52:	e7d5      	b.n	8008a00 <_sungetc_r+0xc>
 8008a54:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a5c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a5e:	2303      	movs	r3, #3
 8008a60:	63a3      	str	r3, [r4, #56]	; 0x38
 8008a62:	4623      	mov	r3, r4
 8008a64:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e7dc      	b.n	8008a28 <_sungetc_r+0x34>

08008a6e <__ssrefill_r>:
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	460c      	mov	r4, r1
 8008a72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008a74:	b169      	cbz	r1, 8008a92 <__ssrefill_r+0x24>
 8008a76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a7a:	4299      	cmp	r1, r3
 8008a7c:	d001      	beq.n	8008a82 <__ssrefill_r+0x14>
 8008a7e:	f7fd ff7b 	bl	8006978 <_free_r>
 8008a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a84:	6063      	str	r3, [r4, #4]
 8008a86:	2000      	movs	r0, #0
 8008a88:	6360      	str	r0, [r4, #52]	; 0x34
 8008a8a:	b113      	cbz	r3, 8008a92 <__ssrefill_r+0x24>
 8008a8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	2300      	movs	r3, #0
 8008a98:	6063      	str	r3, [r4, #4]
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	f043 0320 	orr.w	r3, r3, #32
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa6:	e7f3      	b.n	8008a90 <__ssrefill_r+0x22>

08008aa8 <__ssvfiscanf_r>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	9144      	str	r1, [sp, #272]	; 0x110
 8008ab6:	9145      	str	r1, [sp, #276]	; 0x114
 8008ab8:	499f      	ldr	r1, [pc, #636]	; (8008d38 <__ssvfiscanf_r+0x290>)
 8008aba:	91a0      	str	r1, [sp, #640]	; 0x280
 8008abc:	f10d 0804 	add.w	r8, sp, #4
 8008ac0:	499e      	ldr	r1, [pc, #632]	; (8008d3c <__ssvfiscanf_r+0x294>)
 8008ac2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008d40 <__ssvfiscanf_r+0x298>
 8008ac6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008aca:	4606      	mov	r6, r0
 8008acc:	4692      	mov	sl, r2
 8008ace:	91a1      	str	r1, [sp, #644]	; 0x284
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	270a      	movs	r7, #10
 8008ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 812a 	beq.w	8008d32 <__ssvfiscanf_r+0x28a>
 8008ade:	4655      	mov	r5, sl
 8008ae0:	f000 fc14 	bl	800930c <__locale_ctype_ptr>
 8008ae4:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008ae8:	4458      	add	r0, fp
 8008aea:	7843      	ldrb	r3, [r0, #1]
 8008aec:	f013 0308 	ands.w	r3, r3, #8
 8008af0:	d01c      	beq.n	8008b2c <__ssvfiscanf_r+0x84>
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dd12      	ble.n	8008b1e <__ssvfiscanf_r+0x76>
 8008af8:	f000 fc08 	bl	800930c <__locale_ctype_ptr>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	781a      	ldrb	r2, [r3, #0]
 8008b00:	4410      	add	r0, r2
 8008b02:	7842      	ldrb	r2, [r0, #1]
 8008b04:	0712      	lsls	r2, r2, #28
 8008b06:	d401      	bmi.n	8008b0c <__ssvfiscanf_r+0x64>
 8008b08:	46aa      	mov	sl, r5
 8008b0a:	e7e3      	b.n	8008ad4 <__ssvfiscanf_r+0x2c>
 8008b0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008b0e:	3201      	adds	r2, #1
 8008b10:	9245      	str	r2, [sp, #276]	; 0x114
 8008b12:	6862      	ldr	r2, [r4, #4]
 8008b14:	3301      	adds	r3, #1
 8008b16:	3a01      	subs	r2, #1
 8008b18:	6062      	str	r2, [r4, #4]
 8008b1a:	6023      	str	r3, [r4, #0]
 8008b1c:	e7e9      	b.n	8008af2 <__ssvfiscanf_r+0x4a>
 8008b1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b20:	4621      	mov	r1, r4
 8008b22:	4630      	mov	r0, r6
 8008b24:	4798      	blx	r3
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d0e6      	beq.n	8008af8 <__ssvfiscanf_r+0x50>
 8008b2a:	e7ed      	b.n	8008b08 <__ssvfiscanf_r+0x60>
 8008b2c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008b30:	f040 8082 	bne.w	8008c38 <__ssvfiscanf_r+0x190>
 8008b34:	9343      	str	r3, [sp, #268]	; 0x10c
 8008b36:	9341      	str	r3, [sp, #260]	; 0x104
 8008b38:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b3e:	d103      	bne.n	8008b48 <__ssvfiscanf_r+0xa0>
 8008b40:	2310      	movs	r3, #16
 8008b42:	9341      	str	r3, [sp, #260]	; 0x104
 8008b44:	f10a 0502 	add.w	r5, sl, #2
 8008b48:	46aa      	mov	sl, r5
 8008b4a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008b4e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008b52:	2a09      	cmp	r2, #9
 8008b54:	d922      	bls.n	8008b9c <__ssvfiscanf_r+0xf4>
 8008b56:	2203      	movs	r2, #3
 8008b58:	4879      	ldr	r0, [pc, #484]	; (8008d40 <__ssvfiscanf_r+0x298>)
 8008b5a:	f7f7 fb49 	bl	80001f0 <memchr>
 8008b5e:	b138      	cbz	r0, 8008b70 <__ssvfiscanf_r+0xc8>
 8008b60:	eba0 0309 	sub.w	r3, r0, r9
 8008b64:	2001      	movs	r0, #1
 8008b66:	4098      	lsls	r0, r3
 8008b68:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b6a:	4318      	orrs	r0, r3
 8008b6c:	9041      	str	r0, [sp, #260]	; 0x104
 8008b6e:	46aa      	mov	sl, r5
 8008b70:	f89a 3000 	ldrb.w	r3, [sl]
 8008b74:	2b67      	cmp	r3, #103	; 0x67
 8008b76:	f10a 0501 	add.w	r5, sl, #1
 8008b7a:	d82b      	bhi.n	8008bd4 <__ssvfiscanf_r+0x12c>
 8008b7c:	2b65      	cmp	r3, #101	; 0x65
 8008b7e:	f080 809f 	bcs.w	8008cc0 <__ssvfiscanf_r+0x218>
 8008b82:	2b47      	cmp	r3, #71	; 0x47
 8008b84:	d810      	bhi.n	8008ba8 <__ssvfiscanf_r+0x100>
 8008b86:	2b45      	cmp	r3, #69	; 0x45
 8008b88:	f080 809a 	bcs.w	8008cc0 <__ssvfiscanf_r+0x218>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d06c      	beq.n	8008c6a <__ssvfiscanf_r+0x1c2>
 8008b90:	2b25      	cmp	r3, #37	; 0x25
 8008b92:	d051      	beq.n	8008c38 <__ssvfiscanf_r+0x190>
 8008b94:	2303      	movs	r3, #3
 8008b96:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b98:	9742      	str	r7, [sp, #264]	; 0x108
 8008b9a:	e027      	b.n	8008bec <__ssvfiscanf_r+0x144>
 8008b9c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008b9e:	fb07 1303 	mla	r3, r7, r3, r1
 8008ba2:	3b30      	subs	r3, #48	; 0x30
 8008ba4:	9343      	str	r3, [sp, #268]	; 0x10c
 8008ba6:	e7cf      	b.n	8008b48 <__ssvfiscanf_r+0xa0>
 8008ba8:	2b5b      	cmp	r3, #91	; 0x5b
 8008baa:	d06a      	beq.n	8008c82 <__ssvfiscanf_r+0x1da>
 8008bac:	d80c      	bhi.n	8008bc8 <__ssvfiscanf_r+0x120>
 8008bae:	2b58      	cmp	r3, #88	; 0x58
 8008bb0:	d1f0      	bne.n	8008b94 <__ssvfiscanf_r+0xec>
 8008bb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bb8:	9241      	str	r2, [sp, #260]	; 0x104
 8008bba:	2210      	movs	r2, #16
 8008bbc:	9242      	str	r2, [sp, #264]	; 0x108
 8008bbe:	2b6e      	cmp	r3, #110	; 0x6e
 8008bc0:	bf8c      	ite	hi
 8008bc2:	2304      	movhi	r3, #4
 8008bc4:	2303      	movls	r3, #3
 8008bc6:	e010      	b.n	8008bea <__ssvfiscanf_r+0x142>
 8008bc8:	2b63      	cmp	r3, #99	; 0x63
 8008bca:	d065      	beq.n	8008c98 <__ssvfiscanf_r+0x1f0>
 8008bcc:	2b64      	cmp	r3, #100	; 0x64
 8008bce:	d1e1      	bne.n	8008b94 <__ssvfiscanf_r+0xec>
 8008bd0:	9742      	str	r7, [sp, #264]	; 0x108
 8008bd2:	e7f4      	b.n	8008bbe <__ssvfiscanf_r+0x116>
 8008bd4:	2b70      	cmp	r3, #112	; 0x70
 8008bd6:	d04b      	beq.n	8008c70 <__ssvfiscanf_r+0x1c8>
 8008bd8:	d826      	bhi.n	8008c28 <__ssvfiscanf_r+0x180>
 8008bda:	2b6e      	cmp	r3, #110	; 0x6e
 8008bdc:	d062      	beq.n	8008ca4 <__ssvfiscanf_r+0x1fc>
 8008bde:	d84c      	bhi.n	8008c7a <__ssvfiscanf_r+0x1d2>
 8008be0:	2b69      	cmp	r3, #105	; 0x69
 8008be2:	d1d7      	bne.n	8008b94 <__ssvfiscanf_r+0xec>
 8008be4:	2300      	movs	r3, #0
 8008be6:	9342      	str	r3, [sp, #264]	; 0x108
 8008be8:	2303      	movs	r3, #3
 8008bea:	9347      	str	r3, [sp, #284]	; 0x11c
 8008bec:	6863      	ldr	r3, [r4, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	dd68      	ble.n	8008cc4 <__ssvfiscanf_r+0x21c>
 8008bf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008bf4:	0659      	lsls	r1, r3, #25
 8008bf6:	d407      	bmi.n	8008c08 <__ssvfiscanf_r+0x160>
 8008bf8:	f000 fb88 	bl	800930c <__locale_ctype_ptr>
 8008bfc:	6823      	ldr	r3, [r4, #0]
 8008bfe:	781a      	ldrb	r2, [r3, #0]
 8008c00:	4410      	add	r0, r2
 8008c02:	7842      	ldrb	r2, [r0, #1]
 8008c04:	0712      	lsls	r2, r2, #28
 8008c06:	d464      	bmi.n	8008cd2 <__ssvfiscanf_r+0x22a>
 8008c08:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	dc73      	bgt.n	8008cf6 <__ssvfiscanf_r+0x24e>
 8008c0e:	466b      	mov	r3, sp
 8008c10:	4622      	mov	r2, r4
 8008c12:	a941      	add	r1, sp, #260	; 0x104
 8008c14:	4630      	mov	r0, r6
 8008c16:	f000 f897 	bl	8008d48 <_scanf_chars>
 8008c1a:	2801      	cmp	r0, #1
 8008c1c:	f000 8089 	beq.w	8008d32 <__ssvfiscanf_r+0x28a>
 8008c20:	2802      	cmp	r0, #2
 8008c22:	f47f af71 	bne.w	8008b08 <__ssvfiscanf_r+0x60>
 8008c26:	e01d      	b.n	8008c64 <__ssvfiscanf_r+0x1bc>
 8008c28:	2b75      	cmp	r3, #117	; 0x75
 8008c2a:	d0d1      	beq.n	8008bd0 <__ssvfiscanf_r+0x128>
 8008c2c:	2b78      	cmp	r3, #120	; 0x78
 8008c2e:	d0c0      	beq.n	8008bb2 <__ssvfiscanf_r+0x10a>
 8008c30:	2b73      	cmp	r3, #115	; 0x73
 8008c32:	d1af      	bne.n	8008b94 <__ssvfiscanf_r+0xec>
 8008c34:	2302      	movs	r3, #2
 8008c36:	e7d8      	b.n	8008bea <__ssvfiscanf_r+0x142>
 8008c38:	6863      	ldr	r3, [r4, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	dd0c      	ble.n	8008c58 <__ssvfiscanf_r+0x1b0>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	781a      	ldrb	r2, [r3, #0]
 8008c42:	455a      	cmp	r2, fp
 8008c44:	d175      	bne.n	8008d32 <__ssvfiscanf_r+0x28a>
 8008c46:	3301      	adds	r3, #1
 8008c48:	6862      	ldr	r2, [r4, #4]
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008c4e:	3a01      	subs	r2, #1
 8008c50:	3301      	adds	r3, #1
 8008c52:	6062      	str	r2, [r4, #4]
 8008c54:	9345      	str	r3, [sp, #276]	; 0x114
 8008c56:	e757      	b.n	8008b08 <__ssvfiscanf_r+0x60>
 8008c58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	4798      	blx	r3
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d0ec      	beq.n	8008c3e <__ssvfiscanf_r+0x196>
 8008c64:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d159      	bne.n	8008d1e <__ssvfiscanf_r+0x276>
 8008c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6e:	e05c      	b.n	8008d2a <__ssvfiscanf_r+0x282>
 8008c70:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c72:	f042 0220 	orr.w	r2, r2, #32
 8008c76:	9241      	str	r2, [sp, #260]	; 0x104
 8008c78:	e79b      	b.n	8008bb2 <__ssvfiscanf_r+0x10a>
 8008c7a:	2308      	movs	r3, #8
 8008c7c:	9342      	str	r3, [sp, #264]	; 0x108
 8008c7e:	2304      	movs	r3, #4
 8008c80:	e7b3      	b.n	8008bea <__ssvfiscanf_r+0x142>
 8008c82:	4629      	mov	r1, r5
 8008c84:	4640      	mov	r0, r8
 8008c86:	f000 f9b7 	bl	8008ff8 <__sccl>
 8008c8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c90:	9341      	str	r3, [sp, #260]	; 0x104
 8008c92:	4605      	mov	r5, r0
 8008c94:	2301      	movs	r3, #1
 8008c96:	e7a8      	b.n	8008bea <__ssvfiscanf_r+0x142>
 8008c98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c9e:	9341      	str	r3, [sp, #260]	; 0x104
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	e7a2      	b.n	8008bea <__ssvfiscanf_r+0x142>
 8008ca4:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008ca6:	06c3      	lsls	r3, r0, #27
 8008ca8:	f53f af2e 	bmi.w	8008b08 <__ssvfiscanf_r+0x60>
 8008cac:	9b00      	ldr	r3, [sp, #0]
 8008cae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008cb0:	1d19      	adds	r1, r3, #4
 8008cb2:	9100      	str	r1, [sp, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	07c0      	lsls	r0, r0, #31
 8008cb8:	bf4c      	ite	mi
 8008cba:	801a      	strhmi	r2, [r3, #0]
 8008cbc:	601a      	strpl	r2, [r3, #0]
 8008cbe:	e723      	b.n	8008b08 <__ssvfiscanf_r+0x60>
 8008cc0:	2305      	movs	r3, #5
 8008cc2:	e792      	b.n	8008bea <__ssvfiscanf_r+0x142>
 8008cc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4630      	mov	r0, r6
 8008cca:	4798      	blx	r3
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d090      	beq.n	8008bf2 <__ssvfiscanf_r+0x14a>
 8008cd0:	e7c8      	b.n	8008c64 <__ssvfiscanf_r+0x1bc>
 8008cd2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008cd4:	3201      	adds	r2, #1
 8008cd6:	9245      	str	r2, [sp, #276]	; 0x114
 8008cd8:	6862      	ldr	r2, [r4, #4]
 8008cda:	3a01      	subs	r2, #1
 8008cdc:	2a00      	cmp	r2, #0
 8008cde:	6062      	str	r2, [r4, #4]
 8008ce0:	dd02      	ble.n	8008ce8 <__ssvfiscanf_r+0x240>
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	e787      	b.n	8008bf8 <__ssvfiscanf_r+0x150>
 8008ce8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cea:	4621      	mov	r1, r4
 8008cec:	4630      	mov	r0, r6
 8008cee:	4798      	blx	r3
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d081      	beq.n	8008bf8 <__ssvfiscanf_r+0x150>
 8008cf4:	e7b6      	b.n	8008c64 <__ssvfiscanf_r+0x1bc>
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	dc06      	bgt.n	8008d08 <__ssvfiscanf_r+0x260>
 8008cfa:	466b      	mov	r3, sp
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	a941      	add	r1, sp, #260	; 0x104
 8008d00:	4630      	mov	r0, r6
 8008d02:	f000 f885 	bl	8008e10 <_scanf_i>
 8008d06:	e788      	b.n	8008c1a <__ssvfiscanf_r+0x172>
 8008d08:	4b0e      	ldr	r3, [pc, #56]	; (8008d44 <__ssvfiscanf_r+0x29c>)
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f43f aefc 	beq.w	8008b08 <__ssvfiscanf_r+0x60>
 8008d10:	466b      	mov	r3, sp
 8008d12:	4622      	mov	r2, r4
 8008d14:	a941      	add	r1, sp, #260	; 0x104
 8008d16:	4630      	mov	r0, r6
 8008d18:	f3af 8000 	nop.w
 8008d1c:	e77d      	b.n	8008c1a <__ssvfiscanf_r+0x172>
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d24:	bf18      	it	ne
 8008d26:	f04f 30ff 	movne.w	r0, #4294967295
 8008d2a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d32:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d34:	e7f9      	b.n	8008d2a <__ssvfiscanf_r+0x282>
 8008d36:	bf00      	nop
 8008d38:	080089f5 	.word	0x080089f5
 8008d3c:	08008a6f 	.word	0x08008a6f
 8008d40:	080095ca 	.word	0x080095ca
 8008d44:	00000000 	.word	0x00000000

08008d48 <_scanf_chars>:
 8008d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4c:	4615      	mov	r5, r2
 8008d4e:	688a      	ldr	r2, [r1, #8]
 8008d50:	4680      	mov	r8, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	b932      	cbnz	r2, 8008d64 <_scanf_chars+0x1c>
 8008d56:	698a      	ldr	r2, [r1, #24]
 8008d58:	2a00      	cmp	r2, #0
 8008d5a:	bf14      	ite	ne
 8008d5c:	f04f 32ff 	movne.w	r2, #4294967295
 8008d60:	2201      	moveq	r2, #1
 8008d62:	608a      	str	r2, [r1, #8]
 8008d64:	6822      	ldr	r2, [r4, #0]
 8008d66:	06d1      	lsls	r1, r2, #27
 8008d68:	bf5f      	itttt	pl
 8008d6a:	681a      	ldrpl	r2, [r3, #0]
 8008d6c:	1d11      	addpl	r1, r2, #4
 8008d6e:	6019      	strpl	r1, [r3, #0]
 8008d70:	6817      	ldrpl	r7, [r2, #0]
 8008d72:	2600      	movs	r6, #0
 8008d74:	69a3      	ldr	r3, [r4, #24]
 8008d76:	b1db      	cbz	r3, 8008db0 <_scanf_chars+0x68>
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d107      	bne.n	8008d8c <_scanf_chars+0x44>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	6962      	ldr	r2, [r4, #20]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	5cd3      	ldrb	r3, [r2, r3]
 8008d84:	b9a3      	cbnz	r3, 8008db0 <_scanf_chars+0x68>
 8008d86:	2e00      	cmp	r6, #0
 8008d88:	d132      	bne.n	8008df0 <_scanf_chars+0xa8>
 8008d8a:	e006      	b.n	8008d9a <_scanf_chars+0x52>
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d007      	beq.n	8008da0 <_scanf_chars+0x58>
 8008d90:	2e00      	cmp	r6, #0
 8008d92:	d12d      	bne.n	8008df0 <_scanf_chars+0xa8>
 8008d94:	69a3      	ldr	r3, [r4, #24]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d12a      	bne.n	8008df0 <_scanf_chars+0xa8>
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da0:	f000 fab4 	bl	800930c <__locale_ctype_ptr>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	4418      	add	r0, r3
 8008daa:	7843      	ldrb	r3, [r0, #1]
 8008dac:	071b      	lsls	r3, r3, #28
 8008dae:	d4ef      	bmi.n	8008d90 <_scanf_chars+0x48>
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	06da      	lsls	r2, r3, #27
 8008db4:	bf5e      	ittt	pl
 8008db6:	682b      	ldrpl	r3, [r5, #0]
 8008db8:	781b      	ldrbpl	r3, [r3, #0]
 8008dba:	703b      	strbpl	r3, [r7, #0]
 8008dbc:	682a      	ldr	r2, [r5, #0]
 8008dbe:	686b      	ldr	r3, [r5, #4]
 8008dc0:	f102 0201 	add.w	r2, r2, #1
 8008dc4:	602a      	str	r2, [r5, #0]
 8008dc6:	68a2      	ldr	r2, [r4, #8]
 8008dc8:	f103 33ff 	add.w	r3, r3, #4294967295
 8008dcc:	f102 32ff 	add.w	r2, r2, #4294967295
 8008dd0:	606b      	str	r3, [r5, #4]
 8008dd2:	f106 0601 	add.w	r6, r6, #1
 8008dd6:	bf58      	it	pl
 8008dd8:	3701      	addpl	r7, #1
 8008dda:	60a2      	str	r2, [r4, #8]
 8008ddc:	b142      	cbz	r2, 8008df0 <_scanf_chars+0xa8>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	dcc8      	bgt.n	8008d74 <_scanf_chars+0x2c>
 8008de2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008de6:	4629      	mov	r1, r5
 8008de8:	4640      	mov	r0, r8
 8008dea:	4798      	blx	r3
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d0c1      	beq.n	8008d74 <_scanf_chars+0x2c>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	f013 0310 	ands.w	r3, r3, #16
 8008df6:	d105      	bne.n	8008e04 <_scanf_chars+0xbc>
 8008df8:	68e2      	ldr	r2, [r4, #12]
 8008dfa:	3201      	adds	r2, #1
 8008dfc:	60e2      	str	r2, [r4, #12]
 8008dfe:	69a2      	ldr	r2, [r4, #24]
 8008e00:	b102      	cbz	r2, 8008e04 <_scanf_chars+0xbc>
 8008e02:	703b      	strb	r3, [r7, #0]
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	441e      	add	r6, r3
 8008e08:	6126      	str	r6, [r4, #16]
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	e7c6      	b.n	8008d9c <_scanf_chars+0x54>
	...

08008e10 <_scanf_i>:
 8008e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e14:	469a      	mov	sl, r3
 8008e16:	4b74      	ldr	r3, [pc, #464]	; (8008fe8 <_scanf_i+0x1d8>)
 8008e18:	460c      	mov	r4, r1
 8008e1a:	4683      	mov	fp, r0
 8008e1c:	4616      	mov	r6, r2
 8008e1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e22:	b087      	sub	sp, #28
 8008e24:	ab03      	add	r3, sp, #12
 8008e26:	68a7      	ldr	r7, [r4, #8]
 8008e28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008e2c:	4b6f      	ldr	r3, [pc, #444]	; (8008fec <_scanf_i+0x1dc>)
 8008e2e:	69a1      	ldr	r1, [r4, #24]
 8008e30:	4a6f      	ldr	r2, [pc, #444]	; (8008ff0 <_scanf_i+0x1e0>)
 8008e32:	2903      	cmp	r1, #3
 8008e34:	bf08      	it	eq
 8008e36:	461a      	moveq	r2, r3
 8008e38:	1e7b      	subs	r3, r7, #1
 8008e3a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008e3e:	bf84      	itt	hi
 8008e40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e44:	60a3      	strhi	r3, [r4, #8]
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	9200      	str	r2, [sp, #0]
 8008e4a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008e4e:	bf88      	it	hi
 8008e50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e54:	f104 091c 	add.w	r9, r4, #28
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bf8c      	ite	hi
 8008e5c:	197f      	addhi	r7, r7, r5
 8008e5e:	2700      	movls	r7, #0
 8008e60:	464b      	mov	r3, r9
 8008e62:	f04f 0800 	mov.w	r8, #0
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	6831      	ldr	r1, [r6, #0]
 8008e6a:	ab03      	add	r3, sp, #12
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008e72:	7809      	ldrb	r1, [r1, #0]
 8008e74:	f7f7 f9bc 	bl	80001f0 <memchr>
 8008e78:	9b01      	ldr	r3, [sp, #4]
 8008e7a:	b330      	cbz	r0, 8008eca <_scanf_i+0xba>
 8008e7c:	f1b8 0f01 	cmp.w	r8, #1
 8008e80:	d15a      	bne.n	8008f38 <_scanf_i+0x128>
 8008e82:	6862      	ldr	r2, [r4, #4]
 8008e84:	b92a      	cbnz	r2, 8008e92 <_scanf_i+0x82>
 8008e86:	6822      	ldr	r2, [r4, #0]
 8008e88:	2108      	movs	r1, #8
 8008e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e8e:	6061      	str	r1, [r4, #4]
 8008e90:	6022      	str	r2, [r4, #0]
 8008e92:	6822      	ldr	r2, [r4, #0]
 8008e94:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008e98:	6022      	str	r2, [r4, #0]
 8008e9a:	68a2      	ldr	r2, [r4, #8]
 8008e9c:	1e51      	subs	r1, r2, #1
 8008e9e:	60a1      	str	r1, [r4, #8]
 8008ea0:	b19a      	cbz	r2, 8008eca <_scanf_i+0xba>
 8008ea2:	6832      	ldr	r2, [r6, #0]
 8008ea4:	1c51      	adds	r1, r2, #1
 8008ea6:	6031      	str	r1, [r6, #0]
 8008ea8:	7812      	ldrb	r2, [r2, #0]
 8008eaa:	701a      	strb	r2, [r3, #0]
 8008eac:	1c5d      	adds	r5, r3, #1
 8008eae:	6873      	ldr	r3, [r6, #4]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	6073      	str	r3, [r6, #4]
 8008eb6:	dc07      	bgt.n	8008ec8 <_scanf_i+0xb8>
 8008eb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4658      	mov	r0, fp
 8008ec0:	4798      	blx	r3
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f040 8086 	bne.w	8008fd4 <_scanf_i+0x1c4>
 8008ec8:	462b      	mov	r3, r5
 8008eca:	f108 0801 	add.w	r8, r8, #1
 8008ece:	f1b8 0f03 	cmp.w	r8, #3
 8008ed2:	d1c8      	bne.n	8008e66 <_scanf_i+0x56>
 8008ed4:	6862      	ldr	r2, [r4, #4]
 8008ed6:	b90a      	cbnz	r2, 8008edc <_scanf_i+0xcc>
 8008ed8:	220a      	movs	r2, #10
 8008eda:	6062      	str	r2, [r4, #4]
 8008edc:	6862      	ldr	r2, [r4, #4]
 8008ede:	4945      	ldr	r1, [pc, #276]	; (8008ff4 <_scanf_i+0x1e4>)
 8008ee0:	6960      	ldr	r0, [r4, #20]
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	1a89      	subs	r1, r1, r2
 8008ee6:	f000 f887 	bl	8008ff8 <__sccl>
 8008eea:	9b01      	ldr	r3, [sp, #4]
 8008eec:	f04f 0800 	mov.w	r8, #0
 8008ef0:	461d      	mov	r5, r3
 8008ef2:	68a3      	ldr	r3, [r4, #8]
 8008ef4:	6822      	ldr	r2, [r4, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d03a      	beq.n	8008f70 <_scanf_i+0x160>
 8008efa:	6831      	ldr	r1, [r6, #0]
 8008efc:	6960      	ldr	r0, [r4, #20]
 8008efe:	f891 c000 	ldrb.w	ip, [r1]
 8008f02:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d032      	beq.n	8008f70 <_scanf_i+0x160>
 8008f0a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008f0e:	d121      	bne.n	8008f54 <_scanf_i+0x144>
 8008f10:	0510      	lsls	r0, r2, #20
 8008f12:	d51f      	bpl.n	8008f54 <_scanf_i+0x144>
 8008f14:	f108 0801 	add.w	r8, r8, #1
 8008f18:	b117      	cbz	r7, 8008f20 <_scanf_i+0x110>
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	3f01      	subs	r7, #1
 8008f1e:	60a3      	str	r3, [r4, #8]
 8008f20:	6873      	ldr	r3, [r6, #4]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	6073      	str	r3, [r6, #4]
 8008f28:	dd1b      	ble.n	8008f62 <_scanf_i+0x152>
 8008f2a:	6833      	ldr	r3, [r6, #0]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	6033      	str	r3, [r6, #0]
 8008f30:	68a3      	ldr	r3, [r4, #8]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	60a3      	str	r3, [r4, #8]
 8008f36:	e7dc      	b.n	8008ef2 <_scanf_i+0xe2>
 8008f38:	f1b8 0f02 	cmp.w	r8, #2
 8008f3c:	d1ad      	bne.n	8008e9a <_scanf_i+0x8a>
 8008f3e:	6822      	ldr	r2, [r4, #0]
 8008f40:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008f44:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008f48:	d1bf      	bne.n	8008eca <_scanf_i+0xba>
 8008f4a:	2110      	movs	r1, #16
 8008f4c:	6061      	str	r1, [r4, #4]
 8008f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f52:	e7a1      	b.n	8008e98 <_scanf_i+0x88>
 8008f54:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008f58:	6022      	str	r2, [r4, #0]
 8008f5a:	780b      	ldrb	r3, [r1, #0]
 8008f5c:	702b      	strb	r3, [r5, #0]
 8008f5e:	3501      	adds	r5, #1
 8008f60:	e7de      	b.n	8008f20 <_scanf_i+0x110>
 8008f62:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f66:	4631      	mov	r1, r6
 8008f68:	4658      	mov	r0, fp
 8008f6a:	4798      	blx	r3
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d0df      	beq.n	8008f30 <_scanf_i+0x120>
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	05d9      	lsls	r1, r3, #23
 8008f74:	d50c      	bpl.n	8008f90 <_scanf_i+0x180>
 8008f76:	454d      	cmp	r5, r9
 8008f78:	d908      	bls.n	8008f8c <_scanf_i+0x17c>
 8008f7a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008f7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f82:	4632      	mov	r2, r6
 8008f84:	4658      	mov	r0, fp
 8008f86:	4798      	blx	r3
 8008f88:	1e6f      	subs	r7, r5, #1
 8008f8a:	463d      	mov	r5, r7
 8008f8c:	454d      	cmp	r5, r9
 8008f8e:	d029      	beq.n	8008fe4 <_scanf_i+0x1d4>
 8008f90:	6822      	ldr	r2, [r4, #0]
 8008f92:	f012 0210 	ands.w	r2, r2, #16
 8008f96:	d113      	bne.n	8008fc0 <_scanf_i+0x1b0>
 8008f98:	702a      	strb	r2, [r5, #0]
 8008f9a:	6863      	ldr	r3, [r4, #4]
 8008f9c:	9e00      	ldr	r6, [sp, #0]
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	4658      	mov	r0, fp
 8008fa2:	47b0      	blx	r6
 8008fa4:	f8da 3000 	ldr.w	r3, [sl]
 8008fa8:	6821      	ldr	r1, [r4, #0]
 8008faa:	1d1a      	adds	r2, r3, #4
 8008fac:	f8ca 2000 	str.w	r2, [sl]
 8008fb0:	f011 0f20 	tst.w	r1, #32
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	d010      	beq.n	8008fda <_scanf_i+0x1ca>
 8008fb8:	6018      	str	r0, [r3, #0]
 8008fba:	68e3      	ldr	r3, [r4, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60e3      	str	r3, [r4, #12]
 8008fc0:	eba5 0509 	sub.w	r5, r5, r9
 8008fc4:	44a8      	add	r8, r5
 8008fc6:	6925      	ldr	r5, [r4, #16]
 8008fc8:	4445      	add	r5, r8
 8008fca:	6125      	str	r5, [r4, #16]
 8008fcc:	2000      	movs	r0, #0
 8008fce:	b007      	add	sp, #28
 8008fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd4:	f04f 0800 	mov.w	r8, #0
 8008fd8:	e7ca      	b.n	8008f70 <_scanf_i+0x160>
 8008fda:	07ca      	lsls	r2, r1, #31
 8008fdc:	bf4c      	ite	mi
 8008fde:	8018      	strhmi	r0, [r3, #0]
 8008fe0:	6018      	strpl	r0, [r3, #0]
 8008fe2:	e7ea      	b.n	8008fba <_scanf_i+0x1aa>
 8008fe4:	2001      	movs	r0, #1
 8008fe6:	e7f2      	b.n	8008fce <_scanf_i+0x1be>
 8008fe8:	08009440 	.word	0x08009440
 8008fec:	08009155 	.word	0x08009155
 8008ff0:	0800926d 	.word	0x0800926d
 8008ff4:	080095e5 	.word	0x080095e5

08008ff8 <__sccl>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	780b      	ldrb	r3, [r1, #0]
 8008ffc:	2b5e      	cmp	r3, #94	; 0x5e
 8008ffe:	bf13      	iteet	ne
 8009000:	1c4a      	addne	r2, r1, #1
 8009002:	1c8a      	addeq	r2, r1, #2
 8009004:	784b      	ldrbeq	r3, [r1, #1]
 8009006:	2100      	movne	r1, #0
 8009008:	bf08      	it	eq
 800900a:	2101      	moveq	r1, #1
 800900c:	1e44      	subs	r4, r0, #1
 800900e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009012:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009016:	42ac      	cmp	r4, r5
 8009018:	d1fb      	bne.n	8009012 <__sccl+0x1a>
 800901a:	b913      	cbnz	r3, 8009022 <__sccl+0x2a>
 800901c:	3a01      	subs	r2, #1
 800901e:	4610      	mov	r0, r2
 8009020:	bd70      	pop	{r4, r5, r6, pc}
 8009022:	f081 0401 	eor.w	r4, r1, #1
 8009026:	54c4      	strb	r4, [r0, r3]
 8009028:	1c51      	adds	r1, r2, #1
 800902a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800902e:	2d2d      	cmp	r5, #45	; 0x2d
 8009030:	f101 36ff 	add.w	r6, r1, #4294967295
 8009034:	460a      	mov	r2, r1
 8009036:	d006      	beq.n	8009046 <__sccl+0x4e>
 8009038:	2d5d      	cmp	r5, #93	; 0x5d
 800903a:	d0f0      	beq.n	800901e <__sccl+0x26>
 800903c:	b90d      	cbnz	r5, 8009042 <__sccl+0x4a>
 800903e:	4632      	mov	r2, r6
 8009040:	e7ed      	b.n	800901e <__sccl+0x26>
 8009042:	462b      	mov	r3, r5
 8009044:	e7ef      	b.n	8009026 <__sccl+0x2e>
 8009046:	780e      	ldrb	r6, [r1, #0]
 8009048:	2e5d      	cmp	r6, #93	; 0x5d
 800904a:	d0fa      	beq.n	8009042 <__sccl+0x4a>
 800904c:	42b3      	cmp	r3, r6
 800904e:	dcf8      	bgt.n	8009042 <__sccl+0x4a>
 8009050:	3301      	adds	r3, #1
 8009052:	429e      	cmp	r6, r3
 8009054:	54c4      	strb	r4, [r0, r3]
 8009056:	dcfb      	bgt.n	8009050 <__sccl+0x58>
 8009058:	3102      	adds	r1, #2
 800905a:	e7e6      	b.n	800902a <__sccl+0x32>

0800905c <_strtol_l.isra.0>:
 800905c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	4680      	mov	r8, r0
 8009062:	4689      	mov	r9, r1
 8009064:	4692      	mov	sl, r2
 8009066:	461e      	mov	r6, r3
 8009068:	460f      	mov	r7, r1
 800906a:	463d      	mov	r5, r7
 800906c:	9808      	ldr	r0, [sp, #32]
 800906e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009072:	f000 f947 	bl	8009304 <__locale_ctype_ptr_l>
 8009076:	4420      	add	r0, r4
 8009078:	7843      	ldrb	r3, [r0, #1]
 800907a:	f013 0308 	ands.w	r3, r3, #8
 800907e:	d132      	bne.n	80090e6 <_strtol_l.isra.0+0x8a>
 8009080:	2c2d      	cmp	r4, #45	; 0x2d
 8009082:	d132      	bne.n	80090ea <_strtol_l.isra.0+0x8e>
 8009084:	787c      	ldrb	r4, [r7, #1]
 8009086:	1cbd      	adds	r5, r7, #2
 8009088:	2201      	movs	r2, #1
 800908a:	2e00      	cmp	r6, #0
 800908c:	d05d      	beq.n	800914a <_strtol_l.isra.0+0xee>
 800908e:	2e10      	cmp	r6, #16
 8009090:	d109      	bne.n	80090a6 <_strtol_l.isra.0+0x4a>
 8009092:	2c30      	cmp	r4, #48	; 0x30
 8009094:	d107      	bne.n	80090a6 <_strtol_l.isra.0+0x4a>
 8009096:	782b      	ldrb	r3, [r5, #0]
 8009098:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800909c:	2b58      	cmp	r3, #88	; 0x58
 800909e:	d14f      	bne.n	8009140 <_strtol_l.isra.0+0xe4>
 80090a0:	786c      	ldrb	r4, [r5, #1]
 80090a2:	2610      	movs	r6, #16
 80090a4:	3502      	adds	r5, #2
 80090a6:	2a00      	cmp	r2, #0
 80090a8:	bf14      	ite	ne
 80090aa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80090ae:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80090b2:	2700      	movs	r7, #0
 80090b4:	fbb1 fcf6 	udiv	ip, r1, r6
 80090b8:	4638      	mov	r0, r7
 80090ba:	fb06 1e1c 	mls	lr, r6, ip, r1
 80090be:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80090c2:	2b09      	cmp	r3, #9
 80090c4:	d817      	bhi.n	80090f6 <_strtol_l.isra.0+0x9a>
 80090c6:	461c      	mov	r4, r3
 80090c8:	42a6      	cmp	r6, r4
 80090ca:	dd23      	ble.n	8009114 <_strtol_l.isra.0+0xb8>
 80090cc:	1c7b      	adds	r3, r7, #1
 80090ce:	d007      	beq.n	80090e0 <_strtol_l.isra.0+0x84>
 80090d0:	4584      	cmp	ip, r0
 80090d2:	d31c      	bcc.n	800910e <_strtol_l.isra.0+0xb2>
 80090d4:	d101      	bne.n	80090da <_strtol_l.isra.0+0x7e>
 80090d6:	45a6      	cmp	lr, r4
 80090d8:	db19      	blt.n	800910e <_strtol_l.isra.0+0xb2>
 80090da:	fb00 4006 	mla	r0, r0, r6, r4
 80090de:	2701      	movs	r7, #1
 80090e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090e4:	e7eb      	b.n	80090be <_strtol_l.isra.0+0x62>
 80090e6:	462f      	mov	r7, r5
 80090e8:	e7bf      	b.n	800906a <_strtol_l.isra.0+0xe>
 80090ea:	2c2b      	cmp	r4, #43	; 0x2b
 80090ec:	bf04      	itt	eq
 80090ee:	1cbd      	addeq	r5, r7, #2
 80090f0:	787c      	ldrbeq	r4, [r7, #1]
 80090f2:	461a      	mov	r2, r3
 80090f4:	e7c9      	b.n	800908a <_strtol_l.isra.0+0x2e>
 80090f6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80090fa:	2b19      	cmp	r3, #25
 80090fc:	d801      	bhi.n	8009102 <_strtol_l.isra.0+0xa6>
 80090fe:	3c37      	subs	r4, #55	; 0x37
 8009100:	e7e2      	b.n	80090c8 <_strtol_l.isra.0+0x6c>
 8009102:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009106:	2b19      	cmp	r3, #25
 8009108:	d804      	bhi.n	8009114 <_strtol_l.isra.0+0xb8>
 800910a:	3c57      	subs	r4, #87	; 0x57
 800910c:	e7dc      	b.n	80090c8 <_strtol_l.isra.0+0x6c>
 800910e:	f04f 37ff 	mov.w	r7, #4294967295
 8009112:	e7e5      	b.n	80090e0 <_strtol_l.isra.0+0x84>
 8009114:	1c7b      	adds	r3, r7, #1
 8009116:	d108      	bne.n	800912a <_strtol_l.isra.0+0xce>
 8009118:	2322      	movs	r3, #34	; 0x22
 800911a:	f8c8 3000 	str.w	r3, [r8]
 800911e:	4608      	mov	r0, r1
 8009120:	f1ba 0f00 	cmp.w	sl, #0
 8009124:	d107      	bne.n	8009136 <_strtol_l.isra.0+0xda>
 8009126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912a:	b102      	cbz	r2, 800912e <_strtol_l.isra.0+0xd2>
 800912c:	4240      	negs	r0, r0
 800912e:	f1ba 0f00 	cmp.w	sl, #0
 8009132:	d0f8      	beq.n	8009126 <_strtol_l.isra.0+0xca>
 8009134:	b10f      	cbz	r7, 800913a <_strtol_l.isra.0+0xde>
 8009136:	f105 39ff 	add.w	r9, r5, #4294967295
 800913a:	f8ca 9000 	str.w	r9, [sl]
 800913e:	e7f2      	b.n	8009126 <_strtol_l.isra.0+0xca>
 8009140:	2430      	movs	r4, #48	; 0x30
 8009142:	2e00      	cmp	r6, #0
 8009144:	d1af      	bne.n	80090a6 <_strtol_l.isra.0+0x4a>
 8009146:	2608      	movs	r6, #8
 8009148:	e7ad      	b.n	80090a6 <_strtol_l.isra.0+0x4a>
 800914a:	2c30      	cmp	r4, #48	; 0x30
 800914c:	d0a3      	beq.n	8009096 <_strtol_l.isra.0+0x3a>
 800914e:	260a      	movs	r6, #10
 8009150:	e7a9      	b.n	80090a6 <_strtol_l.isra.0+0x4a>
	...

08009154 <_strtol_r>:
 8009154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009156:	4c06      	ldr	r4, [pc, #24]	; (8009170 <_strtol_r+0x1c>)
 8009158:	4d06      	ldr	r5, [pc, #24]	; (8009174 <_strtol_r+0x20>)
 800915a:	6824      	ldr	r4, [r4, #0]
 800915c:	6a24      	ldr	r4, [r4, #32]
 800915e:	2c00      	cmp	r4, #0
 8009160:	bf08      	it	eq
 8009162:	462c      	moveq	r4, r5
 8009164:	9400      	str	r4, [sp, #0]
 8009166:	f7ff ff79 	bl	800905c <_strtol_l.isra.0>
 800916a:	b003      	add	sp, #12
 800916c:	bd30      	pop	{r4, r5, pc}
 800916e:	bf00      	nop
 8009170:	2000000c 	.word	0x2000000c
 8009174:	20000070 	.word	0x20000070

08009178 <_strtoul_l.isra.0>:
 8009178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800917c:	4680      	mov	r8, r0
 800917e:	4689      	mov	r9, r1
 8009180:	4692      	mov	sl, r2
 8009182:	461e      	mov	r6, r3
 8009184:	460f      	mov	r7, r1
 8009186:	463d      	mov	r5, r7
 8009188:	9808      	ldr	r0, [sp, #32]
 800918a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800918e:	f000 f8b9 	bl	8009304 <__locale_ctype_ptr_l>
 8009192:	4420      	add	r0, r4
 8009194:	7843      	ldrb	r3, [r0, #1]
 8009196:	f013 0308 	ands.w	r3, r3, #8
 800919a:	d130      	bne.n	80091fe <_strtoul_l.isra.0+0x86>
 800919c:	2c2d      	cmp	r4, #45	; 0x2d
 800919e:	d130      	bne.n	8009202 <_strtoul_l.isra.0+0x8a>
 80091a0:	787c      	ldrb	r4, [r7, #1]
 80091a2:	1cbd      	adds	r5, r7, #2
 80091a4:	2101      	movs	r1, #1
 80091a6:	2e00      	cmp	r6, #0
 80091a8:	d05c      	beq.n	8009264 <_strtoul_l.isra.0+0xec>
 80091aa:	2e10      	cmp	r6, #16
 80091ac:	d109      	bne.n	80091c2 <_strtoul_l.isra.0+0x4a>
 80091ae:	2c30      	cmp	r4, #48	; 0x30
 80091b0:	d107      	bne.n	80091c2 <_strtoul_l.isra.0+0x4a>
 80091b2:	782b      	ldrb	r3, [r5, #0]
 80091b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091b8:	2b58      	cmp	r3, #88	; 0x58
 80091ba:	d14e      	bne.n	800925a <_strtoul_l.isra.0+0xe2>
 80091bc:	786c      	ldrb	r4, [r5, #1]
 80091be:	2610      	movs	r6, #16
 80091c0:	3502      	adds	r5, #2
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295
 80091c6:	2300      	movs	r3, #0
 80091c8:	fbb2 f2f6 	udiv	r2, r2, r6
 80091cc:	fb06 fc02 	mul.w	ip, r6, r2
 80091d0:	ea6f 0c0c 	mvn.w	ip, ip
 80091d4:	4618      	mov	r0, r3
 80091d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80091da:	2f09      	cmp	r7, #9
 80091dc:	d817      	bhi.n	800920e <_strtoul_l.isra.0+0x96>
 80091de:	463c      	mov	r4, r7
 80091e0:	42a6      	cmp	r6, r4
 80091e2:	dd23      	ble.n	800922c <_strtoul_l.isra.0+0xb4>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	db1e      	blt.n	8009226 <_strtoul_l.isra.0+0xae>
 80091e8:	4282      	cmp	r2, r0
 80091ea:	d31c      	bcc.n	8009226 <_strtoul_l.isra.0+0xae>
 80091ec:	d101      	bne.n	80091f2 <_strtoul_l.isra.0+0x7a>
 80091ee:	45a4      	cmp	ip, r4
 80091f0:	db19      	blt.n	8009226 <_strtoul_l.isra.0+0xae>
 80091f2:	fb00 4006 	mla	r0, r0, r6, r4
 80091f6:	2301      	movs	r3, #1
 80091f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091fc:	e7eb      	b.n	80091d6 <_strtoul_l.isra.0+0x5e>
 80091fe:	462f      	mov	r7, r5
 8009200:	e7c1      	b.n	8009186 <_strtoul_l.isra.0+0xe>
 8009202:	2c2b      	cmp	r4, #43	; 0x2b
 8009204:	bf04      	itt	eq
 8009206:	1cbd      	addeq	r5, r7, #2
 8009208:	787c      	ldrbeq	r4, [r7, #1]
 800920a:	4619      	mov	r1, r3
 800920c:	e7cb      	b.n	80091a6 <_strtoul_l.isra.0+0x2e>
 800920e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009212:	2f19      	cmp	r7, #25
 8009214:	d801      	bhi.n	800921a <_strtoul_l.isra.0+0xa2>
 8009216:	3c37      	subs	r4, #55	; 0x37
 8009218:	e7e2      	b.n	80091e0 <_strtoul_l.isra.0+0x68>
 800921a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800921e:	2f19      	cmp	r7, #25
 8009220:	d804      	bhi.n	800922c <_strtoul_l.isra.0+0xb4>
 8009222:	3c57      	subs	r4, #87	; 0x57
 8009224:	e7dc      	b.n	80091e0 <_strtoul_l.isra.0+0x68>
 8009226:	f04f 33ff 	mov.w	r3, #4294967295
 800922a:	e7e5      	b.n	80091f8 <_strtoul_l.isra.0+0x80>
 800922c:	2b00      	cmp	r3, #0
 800922e:	da09      	bge.n	8009244 <_strtoul_l.isra.0+0xcc>
 8009230:	2322      	movs	r3, #34	; 0x22
 8009232:	f8c8 3000 	str.w	r3, [r8]
 8009236:	f04f 30ff 	mov.w	r0, #4294967295
 800923a:	f1ba 0f00 	cmp.w	sl, #0
 800923e:	d107      	bne.n	8009250 <_strtoul_l.isra.0+0xd8>
 8009240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009244:	b101      	cbz	r1, 8009248 <_strtoul_l.isra.0+0xd0>
 8009246:	4240      	negs	r0, r0
 8009248:	f1ba 0f00 	cmp.w	sl, #0
 800924c:	d0f8      	beq.n	8009240 <_strtoul_l.isra.0+0xc8>
 800924e:	b10b      	cbz	r3, 8009254 <_strtoul_l.isra.0+0xdc>
 8009250:	f105 39ff 	add.w	r9, r5, #4294967295
 8009254:	f8ca 9000 	str.w	r9, [sl]
 8009258:	e7f2      	b.n	8009240 <_strtoul_l.isra.0+0xc8>
 800925a:	2430      	movs	r4, #48	; 0x30
 800925c:	2e00      	cmp	r6, #0
 800925e:	d1b0      	bne.n	80091c2 <_strtoul_l.isra.0+0x4a>
 8009260:	2608      	movs	r6, #8
 8009262:	e7ae      	b.n	80091c2 <_strtoul_l.isra.0+0x4a>
 8009264:	2c30      	cmp	r4, #48	; 0x30
 8009266:	d0a4      	beq.n	80091b2 <_strtoul_l.isra.0+0x3a>
 8009268:	260a      	movs	r6, #10
 800926a:	e7aa      	b.n	80091c2 <_strtoul_l.isra.0+0x4a>

0800926c <_strtoul_r>:
 800926c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800926e:	4c06      	ldr	r4, [pc, #24]	; (8009288 <_strtoul_r+0x1c>)
 8009270:	4d06      	ldr	r5, [pc, #24]	; (800928c <_strtoul_r+0x20>)
 8009272:	6824      	ldr	r4, [r4, #0]
 8009274:	6a24      	ldr	r4, [r4, #32]
 8009276:	2c00      	cmp	r4, #0
 8009278:	bf08      	it	eq
 800927a:	462c      	moveq	r4, r5
 800927c:	9400      	str	r4, [sp, #0]
 800927e:	f7ff ff7b 	bl	8009178 <_strtoul_l.isra.0>
 8009282:	b003      	add	sp, #12
 8009284:	bd30      	pop	{r4, r5, pc}
 8009286:	bf00      	nop
 8009288:	2000000c 	.word	0x2000000c
 800928c:	20000070 	.word	0x20000070

08009290 <__submore>:
 8009290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009294:	460c      	mov	r4, r1
 8009296:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800929c:	4299      	cmp	r1, r3
 800929e:	d11d      	bne.n	80092dc <__submore+0x4c>
 80092a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80092a4:	f7fd fbb6 	bl	8006a14 <_malloc_r>
 80092a8:	b918      	cbnz	r0, 80092b2 <__submore+0x22>
 80092aa:	f04f 30ff 	mov.w	r0, #4294967295
 80092ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80092b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80092bc:	6360      	str	r0, [r4, #52]	; 0x34
 80092be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80092c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80092c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80092ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80092ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80092d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80092d6:	6020      	str	r0, [r4, #0]
 80092d8:	2000      	movs	r0, #0
 80092da:	e7e8      	b.n	80092ae <__submore+0x1e>
 80092dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80092de:	0077      	lsls	r7, r6, #1
 80092e0:	463a      	mov	r2, r7
 80092e2:	f000 f84c 	bl	800937e <_realloc_r>
 80092e6:	4605      	mov	r5, r0
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d0de      	beq.n	80092aa <__submore+0x1a>
 80092ec:	eb00 0806 	add.w	r8, r0, r6
 80092f0:	4601      	mov	r1, r0
 80092f2:	4632      	mov	r2, r6
 80092f4:	4640      	mov	r0, r8
 80092f6:	f7fe ff35 	bl	8008164 <memcpy>
 80092fa:	f8c4 8000 	str.w	r8, [r4]
 80092fe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009302:	e7e9      	b.n	80092d8 <__submore+0x48>

08009304 <__locale_ctype_ptr_l>:
 8009304:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009308:	4770      	bx	lr
	...

0800930c <__locale_ctype_ptr>:
 800930c:	4b04      	ldr	r3, [pc, #16]	; (8009320 <__locale_ctype_ptr+0x14>)
 800930e:	4a05      	ldr	r2, [pc, #20]	; (8009324 <__locale_ctype_ptr+0x18>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	2b00      	cmp	r3, #0
 8009316:	bf08      	it	eq
 8009318:	4613      	moveq	r3, r2
 800931a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800931e:	4770      	bx	lr
 8009320:	2000000c 	.word	0x2000000c
 8009324:	20000070 	.word	0x20000070

08009328 <__ascii_mbtowc>:
 8009328:	b082      	sub	sp, #8
 800932a:	b901      	cbnz	r1, 800932e <__ascii_mbtowc+0x6>
 800932c:	a901      	add	r1, sp, #4
 800932e:	b142      	cbz	r2, 8009342 <__ascii_mbtowc+0x1a>
 8009330:	b14b      	cbz	r3, 8009346 <__ascii_mbtowc+0x1e>
 8009332:	7813      	ldrb	r3, [r2, #0]
 8009334:	600b      	str	r3, [r1, #0]
 8009336:	7812      	ldrb	r2, [r2, #0]
 8009338:	1c10      	adds	r0, r2, #0
 800933a:	bf18      	it	ne
 800933c:	2001      	movne	r0, #1
 800933e:	b002      	add	sp, #8
 8009340:	4770      	bx	lr
 8009342:	4610      	mov	r0, r2
 8009344:	e7fb      	b.n	800933e <__ascii_mbtowc+0x16>
 8009346:	f06f 0001 	mvn.w	r0, #1
 800934a:	e7f8      	b.n	800933e <__ascii_mbtowc+0x16>

0800934c <memmove>:
 800934c:	4288      	cmp	r0, r1
 800934e:	b510      	push	{r4, lr}
 8009350:	eb01 0302 	add.w	r3, r1, r2
 8009354:	d807      	bhi.n	8009366 <memmove+0x1a>
 8009356:	1e42      	subs	r2, r0, #1
 8009358:	4299      	cmp	r1, r3
 800935a:	d00a      	beq.n	8009372 <memmove+0x26>
 800935c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009360:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009364:	e7f8      	b.n	8009358 <memmove+0xc>
 8009366:	4283      	cmp	r3, r0
 8009368:	d9f5      	bls.n	8009356 <memmove+0xa>
 800936a:	1881      	adds	r1, r0, r2
 800936c:	1ad2      	subs	r2, r2, r3
 800936e:	42d3      	cmn	r3, r2
 8009370:	d100      	bne.n	8009374 <memmove+0x28>
 8009372:	bd10      	pop	{r4, pc}
 8009374:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009378:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800937c:	e7f7      	b.n	800936e <memmove+0x22>

0800937e <_realloc_r>:
 800937e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009380:	4607      	mov	r7, r0
 8009382:	4614      	mov	r4, r2
 8009384:	460e      	mov	r6, r1
 8009386:	b921      	cbnz	r1, 8009392 <_realloc_r+0x14>
 8009388:	4611      	mov	r1, r2
 800938a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800938e:	f7fd bb41 	b.w	8006a14 <_malloc_r>
 8009392:	b922      	cbnz	r2, 800939e <_realloc_r+0x20>
 8009394:	f7fd faf0 	bl	8006978 <_free_r>
 8009398:	4625      	mov	r5, r4
 800939a:	4628      	mov	r0, r5
 800939c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800939e:	f000 f821 	bl	80093e4 <_malloc_usable_size_r>
 80093a2:	42a0      	cmp	r0, r4
 80093a4:	d20f      	bcs.n	80093c6 <_realloc_r+0x48>
 80093a6:	4621      	mov	r1, r4
 80093a8:	4638      	mov	r0, r7
 80093aa:	f7fd fb33 	bl	8006a14 <_malloc_r>
 80093ae:	4605      	mov	r5, r0
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d0f2      	beq.n	800939a <_realloc_r+0x1c>
 80093b4:	4631      	mov	r1, r6
 80093b6:	4622      	mov	r2, r4
 80093b8:	f7fe fed4 	bl	8008164 <memcpy>
 80093bc:	4631      	mov	r1, r6
 80093be:	4638      	mov	r0, r7
 80093c0:	f7fd fada 	bl	8006978 <_free_r>
 80093c4:	e7e9      	b.n	800939a <_realloc_r+0x1c>
 80093c6:	4635      	mov	r5, r6
 80093c8:	e7e7      	b.n	800939a <_realloc_r+0x1c>

080093ca <__ascii_wctomb>:
 80093ca:	b149      	cbz	r1, 80093e0 <__ascii_wctomb+0x16>
 80093cc:	2aff      	cmp	r2, #255	; 0xff
 80093ce:	bf85      	ittet	hi
 80093d0:	238a      	movhi	r3, #138	; 0x8a
 80093d2:	6003      	strhi	r3, [r0, #0]
 80093d4:	700a      	strbls	r2, [r1, #0]
 80093d6:	f04f 30ff 	movhi.w	r0, #4294967295
 80093da:	bf98      	it	ls
 80093dc:	2001      	movls	r0, #1
 80093de:	4770      	bx	lr
 80093e0:	4608      	mov	r0, r1
 80093e2:	4770      	bx	lr

080093e4 <_malloc_usable_size_r>:
 80093e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e8:	1f18      	subs	r0, r3, #4
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	bfbc      	itt	lt
 80093ee:	580b      	ldrlt	r3, [r1, r0]
 80093f0:	18c0      	addlt	r0, r0, r3
 80093f2:	4770      	bx	lr

080093f4 <_init>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	bf00      	nop
 80093f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fa:	bc08      	pop	{r3}
 80093fc:	469e      	mov	lr, r3
 80093fe:	4770      	bx	lr

08009400 <_fini>:
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	bf00      	nop
 8009404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009406:	bc08      	pop	{r3}
 8009408:	469e      	mov	lr, r3
 800940a:	4770      	bx	lr
