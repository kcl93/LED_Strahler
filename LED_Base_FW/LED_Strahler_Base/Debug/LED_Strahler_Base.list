
LED_Strahler_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008918  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08008ab8  08008ab8  00018ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dc0  08008dc0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008dc0  08008dc0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008dc0  08008dc0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dc0  08008dc0  00018dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dc4  08008dc4  00018dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001dc  08008fa4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08008fa4  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b1d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fd0  00000000  00000000  00033d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  00036d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc8  00000000  00000000  00037b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000222df  00000000  00000000  00038808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee75  00000000  00000000  0005aae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b7072  00000000  00000000  0006995c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001209ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004750  00000000  00000000  00120a4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008aa0 	.word	0x08008aa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008aa0 	.word	0x08008aa0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <_Z14LED_Base_Setupv>:
LED_SerialParser *PC_parser;
uint32_t sync_time;


void LED_Base_Setup(void)
{
 8000bb8:	b598      	push	{r3, r4, r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	BT_uart = new USART_Handler(BT_UART_HANDLE);
 8000bbc:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000bc0:	f005 fc71 	bl	80064a6 <_Znwj>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461c      	mov	r4, r3
 8000bc8:	491b      	ldr	r1, [pc, #108]	; (8000c38 <_Z14LED_Base_Setupv+0x80>)
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f000 fbc1 	bl	8001352 <_ZN13USART_HandlerC1ER20__UART_HandleTypeDef>
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <_Z14LED_Base_Setupv+0x84>)
 8000bd2:	601c      	str	r4, [r3, #0]
	PC_uart = new USART_Handler(PC_UART_HANDLE);
 8000bd4:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000bd8:	f005 fc65 	bl	80064a6 <_Znwj>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461c      	mov	r4, r3
 8000be0:	4917      	ldr	r1, [pc, #92]	; (8000c40 <_Z14LED_Base_Setupv+0x88>)
 8000be2:	4620      	mov	r0, r4
 8000be4:	f000 fbb5 	bl	8001352 <_ZN13USART_HandlerC1ER20__UART_HandleTypeDef>
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <_Z14LED_Base_Setupv+0x8c>)
 8000bea:	601c      	str	r4, [r3, #0]

	BT_parser = new LED_SerialParser(BT_uart);
 8000bec:	2054      	movs	r0, #84	; 0x54
 8000bee:	f005 fc5a 	bl	80064a6 <_Znwj>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461c      	mov	r4, r3
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_Z14LED_Base_Setupv+0x84>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f000 f927 	bl	8000e50 <_ZN16LED_SerialParserC1EP13USART_Handler>
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_Z14LED_Base_Setupv+0x90>)
 8000c04:	601c      	str	r4, [r3, #0]
	PC_parser = new LED_SerialParser(PC_uart);
 8000c06:	2054      	movs	r0, #84	; 0x54
 8000c08:	f005 fc4d 	bl	80064a6 <_Znwj>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461c      	mov	r4, r3
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <_Z14LED_Base_Setupv+0x8c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4620      	mov	r0, r4
 8000c18:	f000 f91a 	bl	8000e50 <_ZN16LED_SerialParserC1EP13USART_Handler>
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <_Z14LED_Base_Setupv+0x94>)
 8000c1e:	601c      	str	r4, [r3, #0]

	LED_NRF24L01_Init();
 8000c20:	f000 f874 	bl	8000d0c <_Z17LED_NRF24L01_Initv>

	sync_time = HAL_GetTick() - TIMEBASE_SYNC_PERIOD;
 8000c24:	f001 fdca 	bl	80027bc <HAL_GetTick>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000c2e:	3b10      	subs	r3, #16
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <_Z14LED_Base_Setupv+0x98>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	bd98      	pop	{r3, r4, r7, pc}
 8000c38:	200002fc 	.word	0x200002fc
 8000c3c:	200001f8 	.word	0x200001f8
 8000c40:	2000037c 	.word	0x2000037c
 8000c44:	200001fc 	.word	0x200001fc
 8000c48:	20000200 	.word	0x20000200
 8000c4c:	20000204 	.word	0x20000204
 8000c50:	20000208 	.word	0x20000208

08000c54 <_Z15LED_Base_Handlev>:



void LED_Base_Handle(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
	NRF24L01_DataPacket cmd;
	cmd.CMD = CMD_IGNORE;
 8000c5a:	23ff      	movs	r3, #255	; 0xff
 8000c5c:	713b      	strb	r3, [r7, #4]

	//Parse inputs for new data
	BT_parser->Parse();
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <_Z15LED_Base_Handlev+0xac>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f915 	bl	8000e92 <_ZN16LED_SerialParser5ParseEv>
	PC_parser->Parse();
 8000c68:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <_Z15LED_Base_Handlev+0xb0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f910 	bl	8000e92 <_ZN16LED_SerialParser5ParseEv>

	//Check for new data
	if(BT_parser->Available() == true)
 8000c72:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <_Z15LED_Base_Handlev+0xac>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 fb46 	bl	8001308 <_ZN16LED_SerialParser9AvailableEv>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d007      	beq.n	8000c92 <_Z15LED_Base_Handlev+0x3e>
	{
		BT_parser->ReadCMD(&cmd);
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <_Z15LED_Base_Handlev+0xac>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	1d3a      	adds	r2, r7, #4
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fb49 	bl	8001322 <_ZN16LED_SerialParser7ReadCMDEP19NRF24L01_DataPacket>
 8000c90:	e00e      	b.n	8000cb0 <_Z15LED_Base_Handlev+0x5c>
	}
	else if(PC_parser->Available() == true)
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <_Z15LED_Base_Handlev+0xb0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fb36 	bl	8001308 <_ZN16LED_SerialParser9AvailableEv>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <_Z15LED_Base_Handlev+0x5c>
	{
		PC_parser->ReadCMD(&cmd);
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <_Z15LED_Base_Handlev+0xb0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1d3a      	adds	r2, r7, #4
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fb39 	bl	8001322 <_ZN16LED_SerialParser7ReadCMDEP19NRF24L01_DataPacket>
	}

	//Check if a new command was received
	if(cmd.CMD == CMD_IGNORE)
 8000cb0:	793b      	ldrb	r3, [r7, #4]
 8000cb2:	2bff      	cmp	r3, #255	; 0xff
 8000cb4:	d11e      	bne.n	8000cf4 <_Z15LED_Base_Handlev+0xa0>
	{
		//No new command received! Handle timebase sync commands instead
		if((HAL_GetTick() - sync_time) >= TIMEBASE_SYNC_PERIOD)
 8000cb6:	f001 fd81 	bl	80027bc <HAL_GetTick>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <_Z15LED_Base_Handlev+0xb4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	bf8c      	ite	hi
 8000cca:	2301      	movhi	r3, #1
 8000ccc:	2300      	movls	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d011      	beq.n	8000cf8 <_Z15LED_Base_Handlev+0xa4>
		{
			sync_time = HAL_GetTick();
 8000cd4:	f001 fd72 	bl	80027bc <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <_Z15LED_Base_Handlev+0xb4>)
 8000cdc:	601a      	str	r2, [r3, #0]
			cmd.SetTimebase.CMD = CMD_SETTIMEBASE;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	713b      	strb	r3, [r7, #4]
			cmd.SetTimebase.Timebase = sync_time;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <_Z15LED_Base_Handlev+0xb4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f8c7 3005 	str.w	r3, [r7, #5]
			LED_NRF24L01_Send(cmd.Data);
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f8a1 	bl	8000e34 <_Z17LED_NRF24L01_SendPh>
		}
		return;
 8000cf2:	e001      	b.n	8000cf8 <_Z15LED_Base_Handlev+0xa4>
	}
	return;
 8000cf4:	bf00      	nop
 8000cf6:	e000      	b.n	8000cfa <_Z15LED_Base_Handlev+0xa6>
		return;
 8000cf8:	bf00      	nop

	default:
		LED_NRF24L01_Send(cmd.Data);
		break;
	}
}
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000200 	.word	0x20000200
 8000d04:	20000204 	.word	0x20000204
 8000d08:	20000208 	.word	0x20000208

08000d0c <_Z17LED_NRF24L01_Initv>:
NRF24L01_IRQ_t NRF_IRQ;



void LED_NRF24L01_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	OwnGroup = 0;
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <_Z17LED_NRF24L01_Initv+0x88>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]

	//Init SPI interface
	NRF24L01_SPI_Send(0x55);
 8000d18:	2055      	movs	r0, #85	; 0x55
 8000d1a:	f001 f8f9 	bl	8001f10 <NRF24L01_SPI_Send>

	NRF24L01_Init(LED_NRF24L01_CHANNEL, LED_NRF24L01_PAYLOAD); // Do basic init
 8000d1e:	210c      	movs	r1, #12
 8000d20:	2073      	movs	r0, #115	; 0x73
 8000d22:	f000 fe45 	bl	80019b0 <NRF24L01_Init>

	NRF24L01_SetRF(LED_NRF24L01_DATARATE, LED_NRF24L01_OUTPUT_POWER); /* Set RF settings */
 8000d26:	2103      	movs	r1, #3
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f001 f8a5 	bl	8001e78 <NRF24L01_SetRF>

	NRF24L01_CE_LOW;
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2104      	movs	r1, #4
 8000d32:	4819      	ldr	r0, [pc, #100]	; (8000d98 <_Z17LED_NRF24L01_Initv+0x8c>)
 8000d34:	f002 ff20 	bl	8003b78 <HAL_GPIO_WritePin>
	OwnAddress = LED_NRF24LO1_BROADCAST_ADDR;
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <_Z17LED_NRF24L01_Initv+0x90>)
 8000d3a:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <_Z17LED_NRF24L01_Initv+0x94>)
 8000d3c:	601a      	str	r2, [r3, #0]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_TX_ADDR, (uint8_t*)&OwnAddress, 4);	//Setup transmit address
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4916      	ldr	r1, [pc, #88]	; (8000d9c <_Z17LED_NRF24L01_Initv+0x90>)
 8000d42:	2010      	movs	r0, #16
 8000d44:	f000 ff1a 	bl	8001b7c <NRF24L01_WriteRegisterMulti>

	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P0, (uint8_t*)&OwnAddress, 4);	//Setup receive address
 8000d48:	2204      	movs	r2, #4
 8000d4a:	4914      	ldr	r1, [pc, #80]	; (8000d9c <_Z17LED_NRF24L01_Initv+0x90>)
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f000 ff15 	bl	8001b7c <NRF24L01_WriteRegisterMulti>
	OwnAddress = LED_NRF24L01_BASE_ADDR;
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <_Z17LED_NRF24L01_Initv+0x90>)
 8000d54:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <_Z17LED_NRF24L01_Initv+0x98>)
 8000d56:	601a      	str	r2, [r3, #0]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P1, (uint8_t*)&OwnAddress, 4);
 8000d58:	2204      	movs	r2, #4
 8000d5a:	4910      	ldr	r1, [pc, #64]	; (8000d9c <_Z17LED_NRF24L01_Initv+0x90>)
 8000d5c:	200b      	movs	r0, #11
 8000d5e:	f000 ff0d 	bl	8001b7c <NRF24L01_WriteRegisterMulti>
	NRF24L01_CE_HIGH;
 8000d62:	2201      	movs	r2, #1
 8000d64:	2104      	movs	r1, #4
 8000d66:	480c      	ldr	r0, [pc, #48]	; (8000d98 <_Z17LED_NRF24L01_Initv+0x8c>)
 8000d68:	f002 ff06 	bl	8003b78 <HAL_GPIO_WritePin>

	/* Go to RX mode */
	NRF24L01_PowerUpTx();
 8000d6c:	f000 ff2e 	bl	8001bcc <NRF24L01_PowerUpTx>

	for(uint8_t i = 0; i <= 0x1D; i++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b1d      	cmp	r3, #29
 8000d78:	d807      	bhi.n	8000d8a <_Z17LED_NRF24L01_Initv+0x7e>
	{
		NRF24L01_ReadRegister(i);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 feab 	bl	8001ad8 <NRF24L01_ReadRegister>
	for(uint8_t i = 0; i <= 0x1D; i++)
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	3301      	adds	r3, #1
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	e7f4      	b.n	8000d74 <_Z17LED_NRF24L01_Initv+0x68>
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000210 	.word	0x20000210
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	2000020c 	.word	0x2000020c
 8000da0:	12345678 	.word	0x12345678
 8000da4:	87654321 	.word	0x87654321

08000da8 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF_IRQ_Pin)
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	2b10      	cmp	r3, #16
 8000db6:	d101      	bne.n	8000dbc <HAL_GPIO_EXTI_Callback+0x14>
	{
		LED_NRF24L01_IRQ();
 8000db8:	f000 f804 	bl	8000dc4 <_Z16LED_NRF24L01_IRQv>
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_Z16LED_NRF24L01_IRQv>:


void LED_NRF24L01_IRQ(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
	union NRF24L01_DataPacket packet;
	uint8_t status;

	/* Read interrupts, If data is ready on NRF24L01+ */
	status = NRF24L01_Clear_Interrupts(); //Reads status register and then clears it
 8000dca:	f001 f897 	bl	8001efc <NRF24L01_Clear_Interrupts>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	73fb      	strb	r3, [r7, #15]
	if (status & (1 << NRF24L01_RX_DR))
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <_Z16LED_NRF24L01_IRQv+0x20>
	{
		/* Get data from NRF24L01+ */
		NRF24L01_GetData(packet.Data);
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 ff5c 	bl	8001c9c <NRF24L01_GetData>
	}
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <_Z19LED_NRF24L01_WaitTxh>:


void LED_NRF24L01_WaitTx(uint8_t timeout)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
	uint32_t starttime;
	uint8_t status;

	//Wait for previous transfer to finish or timeout
	starttime = HAL_GetTick();
 8000df6:	f001 fce1 	bl	80027bc <HAL_GetTick>
 8000dfa:	60f8      	str	r0, [r7, #12]
	while((HAL_GetTick() - starttime) < timeout)
 8000dfc:	f001 fcde 	bl	80027bc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1ad2      	subs	r2, r2, r3
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	bf34      	ite	cc
 8000e0c:	2301      	movcc	r3, #1
 8000e0e:	2300      	movcs	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00a      	beq.n	8000e2c <_Z19LED_NRF24L01_WaitTxh+0x40>
	{
		status = NRF24L01_GetStatus();
 8000e16:	f000 ff65 	bl	8001ce4 <NRF24L01_GetStatus>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	72fb      	strb	r3, [r7, #11]
		if (!NRF24L01_CHECK_BIT(status, NRF24L01_TX_FULL))
 8000e1e:	7afb      	ldrb	r3, [r7, #11]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d000      	beq.n	8000e2a <_Z19LED_NRF24L01_WaitTxh+0x3e>
	while((HAL_GetTick() - starttime) < timeout)
 8000e28:	e7e8      	b.n	8000dfc <_Z19LED_NRF24L01_WaitTxh+0x10>
		{
			break; //New data can be sent once there is some free room in the TX FIFO :)
 8000e2a:	bf00      	nop
		}
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_Z17LED_NRF24L01_SendPh>:


void LED_NRF24L01_Send(uint8_t* data)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	//Wait for previous transfer to finish or timeout
	LED_NRF24L01_WaitTx(5);
 8000e3c:	2005      	movs	r0, #5
 8000e3e:	f7ff ffd5 	bl	8000dec <_Z19LED_NRF24L01_WaitTxh>
	//Send new data
	NRF24L01_Transmit(data);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 fef0 	bl	8001c28 <NRF24L01_Transmit>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_ZN16LED_SerialParserC1EP13USART_Handler>:
#include <stdio.h>




LED_SerialParser::LED_SerialParser(USART_Handler *_uart)
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
{
	uint8_t i;

	this->uart = _uart;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	601a      	str	r2, [r3, #0]

	for(i = 0; i < SERIALPARSER_CMD_BUFFER_SIZE; i++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	2b3f      	cmp	r3, #63	; 0x3f
 8000e68:	d808      	bhi.n	8000e7c <_ZN16LED_SerialParserC1EP13USART_Handler+0x2c>
	{
		this->cmd_buf[i] = 0x00;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	2200      	movs	r2, #0
 8000e72:	711a      	strb	r2, [r3, #4]
	for(i = 0; i < SERIALPARSER_CMD_BUFFER_SIZE; i++)
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	3301      	adds	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e7f3      	b.n	8000e64 <_ZN16LED_SerialParserC1EP13USART_Handler+0x14>
	}
	this->cmd_buf_index = 0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <_ZN16LED_SerialParser5ParseEv>:


void LED_SerialParser::Parse(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b084      	sub	sp, #16
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
	char byte;

	while(this->uart->Available())
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fa73 	bl	800138a <_ZN13USART_Handler9AvailableEv>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	bf14      	ite	ne
 8000eaa:	2301      	movne	r3, #1
 8000eac:	2300      	moveq	r3, #0
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d050      	beq.n	8000f56 <_ZN16LED_SerialParser5ParseEv+0xc4>
	{
		byte = this->uart->Read();
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fa82 	bl	80013c2 <_ZN13USART_Handler4ReadEv>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	73fb      	strb	r3, [r7, #15]
		if(this->cmd_buf_index == 0)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10a      	bne.n	8000ee2 <_ZN16LED_SerialParser5ParseEv+0x50>
		{ //Search for valid start byte
			if(byte == 'G')
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b47      	cmp	r3, #71	; 0x47
 8000ed0:	d1e3      	bne.n	8000e9a <_ZN16LED_SerialParser5ParseEv+0x8>
			{
				this->cmd_buf[0] = byte;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7bfa      	ldrb	r2, [r7, #15]
 8000ed6:	711a      	strb	r2, [r3, #4]
				this->cmd_buf_index = 1;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ee0:	e7db      	b.n	8000e9a <_ZN16LED_SerialParser5ParseEv+0x8>
			}
		}
		else if(this->cmd_buf_index < SERIALPARSER_CMD_BUFFER_SIZE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ee8:	2b3f      	cmp	r3, #63	; 0x3f
 8000eea:	d82f      	bhi.n	8000f4c <_ZN16LED_SerialParser5ParseEv+0xba>
		{ //Parse new string until end of buffer or new line is reached
			if(byte == 'G')
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2b47      	cmp	r3, #71	; 0x47
 8000ef0:	d107      	bne.n	8000f02 <_ZN16LED_SerialParser5ParseEv+0x70>
			{ //Reset command as new start of CMD was received
				this->cmd_buf[0] = byte;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	711a      	strb	r2, [r3, #4]
				this->cmd_buf_index = 1;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2201      	movs	r2, #1
 8000efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f00:	e7cb      	b.n	8000e9a <_ZN16LED_SerialParser5ParseEv+0x8>
			}
			else
			{ //Fill command buffer with new characters
				this->cmd_buf[this->cmd_buf_index] = byte;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f08:	461a      	mov	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	711a      	strb	r2, [r3, #4]
				if(byte == '\n')
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	2b0a      	cmp	r3, #10
 8000f16:	d110      	bne.n	8000f3a <_ZN16LED_SerialParser5ParseEv+0xa8>
				{ //Command seems to be finished
					this->cmd_buf[this->cmd_buf_index] = 0x00;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f1e:	461a      	mov	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	2200      	movs	r2, #0
 8000f26:	711a      	strb	r2, [r3, #4]
					this->Decode();
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 f819 	bl	8000f60 <_ZN16LED_SerialParser6DecodeEv>
					this->cmd_buf_index = 0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					break;
 8000f36:	bf00      	nop
		else
		{ //Buffer overflow! Drop current command buffer!
			this->cmd_buf_index = 0;
		}
	}
}
 8000f38:	e00d      	b.n	8000f56 <_ZN16LED_SerialParser5ParseEv+0xc4>
				this->cmd_buf_index++;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f40:	3301      	adds	r3, #1
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f4a:	e7a6      	b.n	8000e9a <_ZN16LED_SerialParser5ParseEv+0x8>
			this->cmd_buf_index = 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while(this->uart->Available())
 8000f54:	e7a1      	b.n	8000e9a <_ZN16LED_SerialParser5ParseEv+0x8>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <_ZN16LED_SerialParser6DecodeEv>:


void LED_SerialParser::Decode(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b092      	sub	sp, #72	; 0x48
 8000f64:	af06      	add	r7, sp, #24
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	unsigned int u32Tmp[8] = {0};
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	2220      	movs	r2, #32
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 fae8 	bl	800654c <memset>

	//Get command
	ret = sscanf(this->cmd_buf, "G%u %u %u %u %u %u %u %u", &u32Tmp[0], &u32Tmp[1], &u32Tmp[2], &u32Tmp[3], &u32Tmp[4], &u32Tmp[5], &u32Tmp[6], &u32Tmp[7]);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	1d18      	adds	r0, r3, #4
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	1d19      	adds	r1, r3, #4
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	331c      	adds	r3, #28
 8000f90:	9305      	str	r3, [sp, #20]
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	3318      	adds	r3, #24
 8000f98:	9304      	str	r3, [sp, #16]
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	3314      	adds	r3, #20
 8000fa0:	9303      	str	r3, [sp, #12]
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	3310      	adds	r3, #16
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	330c      	adds	r3, #12
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	49aa      	ldr	r1, [pc, #680]	; (8001268 <_ZN16LED_SerialParser6DecodeEv+0x308>)
 8000fbe:	f005 ff13 	bl	8006de8 <siscanf>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(ret == 0)
 8000fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 817f 	beq.w	80012d0 <_ZN16LED_SerialParser6DecodeEv+0x370>
	{
		return; //Could not fetch command!
	}
	this->cmd.CMD = (uint8_t)u32Tmp[0];
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	//Decode based on command
	switch(this->cmd.CMD)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fe2:	2b10      	cmp	r3, #16
 8000fe4:	f200 8176 	bhi.w	80012d4 <_ZN16LED_SerialParser6DecodeEv+0x374>
 8000fe8:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <_ZN16LED_SerialParser6DecodeEv+0x90>)
 8000fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fee:	bf00      	nop
 8000ff0:	080012c5 	.word	0x080012c5
 8000ff4:	08001035 	.word	0x08001035
 8000ff8:	080012d5 	.word	0x080012d5
 8000ffc:	08001053 	.word	0x08001053
 8001000:	08001087 	.word	0x08001087
 8001004:	080010c5 	.word	0x080010c5
 8001008:	080010f9 	.word	0x080010f9
 800100c:	08001141 	.word	0x08001141
 8001010:	08001193 	.word	0x08001193
 8001014:	080011db 	.word	0x080011db
 8001018:	08001223 	.word	0x08001223
 800101c:	0800126d 	.word	0x0800126d
 8001020:	080012d5 	.word	0x080012d5
 8001024:	080012d5 	.word	0x080012d5
 8001028:	080012d5 	.word	0x080012d5
 800102c:	080012d5 	.word	0x080012d5
 8001030:	080012b3 	.word	0x080012b3
	{
		case CMD_PINGREQUEST:
			break; //Nothing to do

		case CMD_SETGROUP:
			if(ret != 3)
 8001034:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001038:	2b03      	cmp	r3, #3
 800103a:	f040 814d 	bne.w	80012d8 <_ZN16LED_SerialParser6DecodeEv+0x378>
			{
				return; //Error fetching command
			}
			this->cmd.SetGroup.SlaveAddress = u32Tmp[1];
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 2046 	str.w	r2, [r3, #70]	; 0x46
			this->cmd.SetGroup.GroupID = (uint8_t)u32Tmp[2];
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			break;
 8001050:	e139      	b.n	80012c6 <_ZN16LED_SerialParser6DecodeEv+0x366>
			}
			this->cmd.SetTimebase.Timebase = u32Tmp[1];
			break;*/

		case CMD_SETRGB:
			if(ret != 5)
 8001052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001056:	2b05      	cmp	r3, #5
 8001058:	f040 8140 	bne.w	80012dc <_ZN16LED_SerialParser6DecodeEv+0x37c>
			{
				return; //Error fetching command
			}
			this->cmd.SetRGB.GroupID = (uint8_t)u32Tmp[1];
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.SetRGB.Red = (uint16_t)u32Tmp[2];
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.SetRGB.Green = (uint16_t)u32Tmp[3];
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.SetRGB.Blue = (uint16_t)u32Tmp[4];
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	b29a      	uxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			break;
 8001084:	e11f      	b.n	80012c6 <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_SETRGBW:
			if(ret != 6)
 8001086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800108a:	2b06      	cmp	r3, #6
 800108c:	f040 8128 	bne.w	80012e0 <_ZN16LED_SerialParser6DecodeEv+0x380>
			{
				return; //Error fetching command
			}
			this->cmd.SetRGBW.GroupID = (uint8_t)u32Tmp[1];
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.SetRGBW.Red = (uint16_t)u32Tmp[2];
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.SetRGBW.Green = (uint16_t)u32Tmp[3];
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.SetRGBW.Blue = (uint16_t)u32Tmp[4];
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.SetRGBW.White = (uint16_t)u32Tmp[5];
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			break;
 80010c2:	e100      	b.n	80012c6 <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_SETHSV:
			if(ret != 5)
 80010c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	f040 810b 	bne.w	80012e4 <_ZN16LED_SerialParser6DecodeEv+0x384>
			{
				return; //Error fetching command
			}
			this->cmd.SetHSV.GroupID = (uint8_t)u32Tmp[1];
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.SetHSV.Hue = (uint16_t)u32Tmp[2];
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.SetHSV.Saturation = (uint16_t)u32Tmp[3];
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.SetHSV.Value = (uint16_t)u32Tmp[4];
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			break;
 80010f6:	e0e6      	b.n	80012c6 <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_STROBERGB:
			if(ret != 7)
 80010f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010fc:	2b07      	cmp	r3, #7
 80010fe:	f040 80f3 	bne.w	80012e8 <_ZN16LED_SerialParser6DecodeEv+0x388>
			{
				return; //Error fetching command
			}
			this->cmd.StrobeRGB.GroupID = (uint8_t)u32Tmp[1];
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.StrobeRGB.Period = (uint8_t)u32Tmp[2];
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			this->cmd.StrobeRGB.Count = (uint8_t)u32Tmp[3];
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			this->cmd.StrobeRGB.Red = (uint16_t)u32Tmp[4];
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	b29a      	uxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.StrobeRGB.Green = (uint16_t)u32Tmp[5];
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.StrobeRGB.Blue = (uint16_t)u32Tmp[6];
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	b29a      	uxth	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			break;
 800113e:	e0c2      	b.n	80012c6 <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_STROBERGBW:
			if(ret != 8)
 8001140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001144:	2b08      	cmp	r3, #8
 8001146:	f040 80d1 	bne.w	80012ec <_ZN16LED_SerialParser6DecodeEv+0x38c>
			{
				return; //Error fetching command
			}
			this->cmd.StrobeRGBW.GroupID = (uint8_t)u32Tmp[1];
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.StrobeRGBW.Period = (uint8_t)u32Tmp[2];
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			this->cmd.StrobeRGBW.Count = (uint8_t)u32Tmp[3];
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			this->cmd.StrobeRGBW.Red = (uint16_t)u32Tmp[4];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	b29a      	uxth	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.StrobeRGBW.Green = (uint16_t)u32Tmp[5];
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.StrobeRGBW.Blue = (uint16_t)u32Tmp[6];
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			this->cmd.StrobeRGBW.White = (uint16_t)u32Tmp[7];
 8001186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f8a3 204f 	strh.w	r2, [r3, #79]	; 0x4f
			break;
 8001190:	e099      	b.n	80012c6 <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_STROBEHSV:
			if(ret != 7)
 8001192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001196:	2b07      	cmp	r3, #7
 8001198:	f040 80aa 	bne.w	80012f0 <_ZN16LED_SerialParser6DecodeEv+0x390>
			{
				return; //Error fetching command
			}
			this->cmd.StrobeHSV.GroupID = (uint8_t)u32Tmp[1];
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.StrobeHSV.Period = (uint8_t)u32Tmp[2];
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			this->cmd.StrobeHSV.Count = (uint8_t)u32Tmp[3];
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			this->cmd.StrobeHSV.Hue = (uint16_t)u32Tmp[4];
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.StrobeHSV.Saturation = (uint16_t)u32Tmp[5];
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.StrobeHSV.Value = (uint16_t)u32Tmp[6];
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			break;
 80011d8:	e075      	b.n	80012c6 <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_FADEHUE:
			if(ret != 7)
 80011da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011de:	2b07      	cmp	r3, #7
 80011e0:	f040 8088 	bne.w	80012f4 <_ZN16LED_SerialParser6DecodeEv+0x394>
			{
				return; //Error fetching command
			}
			this->cmd.FadeHue.GroupID = (uint8_t)u32Tmp[1];
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.FadeHue.Period = (uint16_t)u32Tmp[2];
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.FadeHue.Hue_Max = (uint16_t)u32Tmp[3];
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.FadeHue.Hue_Min = (uint16_t)u32Tmp[4];
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.FadeHue.Saturation = (uint16_t)u32Tmp[5];
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	b29a      	uxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			this->cmd.FadeHue.Value = (uint16_t)u32Tmp[6];
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8a3 204f 	strh.w	r2, [r3, #79]	; 0x4f
			break;
 8001220:	e051      	b.n	80012c6 <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_FADESATURATION:
			if(ret != 7)
 8001222:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001226:	2b07      	cmp	r3, #7
 8001228:	d166      	bne.n	80012f8 <_ZN16LED_SerialParser6DecodeEv+0x398>
			{
				return; //Error fetching command
			}
			this->cmd.FadeSaturation.GroupID = (uint8_t)u32Tmp[1];
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.FadeSaturation.Period = (uint16_t)u32Tmp[2];
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.FadeSaturation.Hue = (uint16_t)u32Tmp[3];
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.FadeSaturation.Saturation_Max = (uint16_t)u32Tmp[4];
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.FadeSaturation.Saturation_Min = (uint16_t)u32Tmp[5];
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	b29a      	uxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			this->cmd.FadeSaturation.Value = (uint16_t)u32Tmp[6];
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	b29a      	uxth	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8a3 204f 	strh.w	r2, [r3, #79]	; 0x4f
			break;
 8001266:	e02e      	b.n	80012c6 <_ZN16LED_SerialParser6DecodeEv+0x366>
 8001268:	08008ab8 	.word	0x08008ab8

		case CMD_FADEVALUE:
			if(ret != 7)
 800126c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001270:	2b07      	cmp	r3, #7
 8001272:	d143      	bne.n	80012fc <_ZN16LED_SerialParser6DecodeEv+0x39c>
			{
				return; //Error fetching command
			}
			this->cmd.FadeValue.GroupID = (uint8_t)u32Tmp[1];
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			this->cmd.FadeValue.Period = (uint16_t)u32Tmp[2];
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	b29a      	uxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f8a3 2047 	strh.w	r2, [r3, #71]	; 0x47
			this->cmd.FadeValue.Hue = (uint16_t)u32Tmp[3];
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f8a3 2049 	strh.w	r2, [r3, #73]	; 0x49
			this->cmd.FadeValue.Saturation = (uint16_t)u32Tmp[4];
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f8a3 204b 	strh.w	r2, [r3, #75]	; 0x4b
			this->cmd.FadeValue.Value_Max = (uint16_t)u32Tmp[5];
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8a3 204d 	strh.w	r2, [r3, #77]	; 0x4d
			this->cmd.FadeValue.Value_Min = (uint16_t)u32Tmp[6];
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8a3 204f 	strh.w	r2, [r3, #79]	; 0x4f
			break;
 80012b0:	e009      	b.n	80012c6 <_ZN16LED_SerialParser6DecodeEv+0x366>

		case CMD_GETTEMPERATURE:
			if(ret != 2)
 80012b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d122      	bne.n	8001300 <_ZN16LED_SerialParser6DecodeEv+0x3a0>
			{
				return; //Error fetching command
			}
			this->cmd.GetTemperature.SlaveAddress = u32Tmp[1];
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8c3 2046 	str.w	r2, [r3, #70]	; 0x46
			break; //Nothing to do
 80012c2:	e000      	b.n	80012c6 <_ZN16LED_SerialParser6DecodeEv+0x366>
			break; //Nothing to do
 80012c4:	bf00      	nop
		default:
			return; //No valid command received!
	}

	//A valid command was received and decoded successfully!
	this->cmd_available = true;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80012ce:	e018      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
		return; //Could not fetch command!
 80012d0:	bf00      	nop
 80012d2:	e016      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
			return; //No valid command received!
 80012d4:	bf00      	nop
 80012d6:	e014      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80012d8:	bf00      	nop
 80012da:	e012      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80012dc:	bf00      	nop
 80012de:	e010      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80012e0:	bf00      	nop
 80012e2:	e00e      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80012e4:	bf00      	nop
 80012e6:	e00c      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80012e8:	bf00      	nop
 80012ea:	e00a      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80012ec:	bf00      	nop
 80012ee:	e008      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80012f0:	bf00      	nop
 80012f2:	e006      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80012f4:	bf00      	nop
 80012f6:	e004      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80012f8:	bf00      	nop
 80012fa:	e002      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 80012fc:	bf00      	nop
 80012fe:	e000      	b.n	8001302 <_ZN16LED_SerialParser6DecodeEv+0x3a2>
				return; //Error fetching command
 8001300:	bf00      	nop
}
 8001302:	3730      	adds	r7, #48	; 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_ZN16LED_SerialParser9AvailableEv>:


bool LED_SerialParser::Available(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	return this->cmd_available;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_ZN16LED_SerialParser7ReadCMDEP19NRF24L01_DataPacket>:


void LED_SerialParser::ReadCMD(NRF24L01_DataPacket *_cmd)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
	*_cmd = this->cmd; //Copy data
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3345      	adds	r3, #69	; 0x45
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	6859      	ldr	r1, [r3, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	6010      	str	r0, [r2, #0]
 800133a:	6051      	str	r1, [r2, #4]
 800133c:	6093      	str	r3, [r2, #8]
	this->cmd_available = false;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_ZN13USART_HandlerC1ER20__UART_HandleTypeDef>:
#include "USART_Handler.h"




USART_Handler::USART_Handler(UART_HandleTypeDef &_huart)
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
{
	this->huart = &_huart;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	//Register UART RX buffers
	HAL_UART_Receive_DMA(this->huart, this->rx_buffer, UART_RX_BUFFER_SIZE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001370:	4618      	mov	r0, r3
 8001372:	f004 fa41 	bl	80057f8 <HAL_UART_Receive_DMA>
	rx_ptr = UART_RX_BUFFER_SIZE;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
}
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <_ZN13USART_Handler9AvailableEv>:



uint16_t USART_Handler::Available(void)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
	return ((this->rx_ptr - (uint16_t)this->huart->hdmarx->Instance->CNDTR) % UART_RX_BUFFER_SIZE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8001398:	461a      	mov	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	425a      	negs	r2, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	bf58      	it	pl
 80013b2:	4253      	negpl	r3, r2
 80013b4:	b29b      	uxth	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_ZN13USART_Handler4ReadEv>:
}



uint8_t USART_Handler::Read(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
	uint8_t ret;

	ret = this->rx_buffer[UART_RX_BUFFER_SIZE - rx_ptr];
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80013d0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	73fb      	strb	r3, [r7, #15]

	rx_ptr--;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80013e0:	3b01      	subs	r3, #1
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	if(rx_ptr == 0)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d104      	bne.n	80013fe <_ZN13USART_Handler4ReadEv+0x3c>
	{
		rx_ptr = UART_RX_BUFFER_SIZE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fa:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	}

	return ret;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001410:	f001 f97a 	bl	8002708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001414:	f000 f813 	bl	800143e <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f000 fa0a 	bl	8001830 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800141c:	f000 f968 	bl	80016f0 <_ZL19MX_USART2_UART_Initv>
  MX_DMA_Init();
 8001420:	f000 f9d0 	bl	80017c4 <_ZL11MX_DMA_Initv>
  MX_ADC2_Init();
 8001424:	f000 f87e 	bl	8001524 <_ZL12MX_ADC2_Initv>
  MX_OPAMP2_Init();
 8001428:	f000 f8e4 	bl	80015f4 <_ZL14MX_OPAMP2_Initv>
  MX_SPI2_Init();
 800142c:	f000 f90e 	bl	800164c <_ZL12MX_SPI2_Initv>
  MX_USART3_UART_Init();
 8001430:	f000 f992 	bl	8001758 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  LED_Base_Setup();
 8001434:	f7ff fbc0 	bl	8000bb8 <_Z14LED_Base_Setupv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 	LED_Base_Handle();
 8001438:	f7ff fc0c 	bl	8000c54 <_Z15LED_Base_Handlev>
 800143c:	e7fc      	b.n	8001438 <main+0x2c>

0800143e <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b0a6      	sub	sp, #152	; 0x98
 8001442:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001444:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001448:	2228      	movs	r2, #40	; 0x28
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f005 f87d 	bl	800654c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001452:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2258      	movs	r2, #88	; 0x58
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f005 f86f 	bl	800654c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146e:	2302      	movs	r3, #2
 8001470:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001472:	2301      	movs	r3, #1
 8001474:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001476:	2310      	movs	r3, #16
 8001478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800148a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800148e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fc41 	bl	8003d24 <HAL_RCC_OscConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf14      	ite	ne
 80014a8:	2301      	movne	r3, #1
 80014aa:	2300      	moveq	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 80014b2:	f000 fa65 	bl	8001980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b6:	230f      	movs	r3, #15
 80014b8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ba:	2302      	movs	r3, #2
 80014bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014d0:	2102      	movs	r1, #2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 fb3c 	bl	8004b50 <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf14      	ite	ne
 80014de:	2301      	movne	r3, #1
 80014e0:	2300      	moveq	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80014e8:	f000 fa4a 	bl	8001980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80014ec:	2386      	movs	r3, #134	; 0x86
 80014ee:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80014f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fd5b 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf14      	ite	ne
 800150c:	2301      	movne	r3, #1
 800150e:	2300      	moveq	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <_Z18SystemClock_Configv+0xdc>
  {
    Error_Handler();
 8001516:	f000 fa33 	bl	8001980 <Error_Handler>
  }
}
 800151a:	bf00      	nop
 800151c:	3798      	adds	r7, #152	; 0x98
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 800153c:	4a2c      	ldr	r2, [pc, #176]	; (80015f0 <_ZL12MX_ADC2_Initv+0xcc>)
 800153e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 8001554:	2200      	movs	r2, #0
 8001556:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 8001562:	2200      	movs	r2, #0
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 8001568:	2201      	movs	r2, #1
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 8001574:	2201      	movs	r2, #1
 8001576:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 8001582:	2204      	movs	r2, #4
 8001584:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 800158e:	2200      	movs	r2, #0
 8001590:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001592:	4816      	ldr	r0, [pc, #88]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 8001594:	f001 f91e 	bl	80027d4 <HAL_ADC_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf14      	ite	ne
 800159e:	2301      	movne	r3, #1
 80015a0:	2300      	moveq	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <_ZL12MX_ADC2_Initv+0x88>
  {
    Error_Handler();
 80015a8:	f000 f9ea 	bl	8001980 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015ac:	2303      	movs	r3, #3
 80015ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <_ZL12MX_ADC2_Initv+0xc8>)
 80015ca:	f001 fafd 	bl	8002bc8 <HAL_ADC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2301      	movne	r3, #1
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <_ZL12MX_ADC2_Initv+0xbe>
  {
    Error_Handler();
 80015de:	f000 f9cf 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000214 	.word	0x20000214
 80015f0:	50000100 	.word	0x50000100

080015f4 <_ZL14MX_OPAMP2_Initv>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <_ZL14MX_OPAMP2_Initv+0x50>)
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <_ZL14MX_OPAMP2_Initv+0x54>)
 80015fc:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <_ZL14MX_OPAMP2_Initv+0x50>)
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <_ZL14MX_OPAMP2_Initv+0x50>)
 8001606:	220c      	movs	r2, #12
 8001608:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <_ZL14MX_OPAMP2_Initv+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <_ZL14MX_OPAMP2_Initv+0x50>)
 8001612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001616:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <_ZL14MX_OPAMP2_Initv+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <_ZL14MX_OPAMP2_Initv+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <_ZL14MX_OPAMP2_Initv+0x50>)
 8001626:	f002 fad7 	bl	8003bd8 <HAL_OPAMP_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	bf14      	ite	ne
 8001630:	2301      	movne	r3, #1
 8001632:	2300      	moveq	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <_ZL14MX_OPAMP2_Initv+0x4a>
  {
    Error_Handler();
 800163a:	f000 f9a1 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000264 	.word	0x20000264
 8001648:	4001003c 	.word	0x4001003c

0800164c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 8001652:	4a26      	ldr	r2, [pc, #152]	; (80016ec <_ZL12MX_SPI2_Initv+0xa0>)
 8001654:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 8001658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800165c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 8001666:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800166a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 800167a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 8001682:	2218      	movs	r2, #24
 8001684:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 8001694:	2200      	movs	r2, #0
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 800169a:	2207      	movs	r2, #7
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016aa:	480f      	ldr	r0, [pc, #60]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 80016ac:	f003 fea4 	bl	80053f8 <HAL_SPI_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 80016c0:	f000 f95e 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* full duplex master, 8 bit transfer, default phase and polarity */
  hspi2.Instance->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE | SPI_CR1_SSM | SPI_CR1_SSI;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 7251 	orr.w	r2, r2, #836	; 0x344
 80016d2:	601a      	str	r2, [r3, #0]
  /* Disable receive FIFO, it'd complicate things when there is an odd number of bytes to transfer */
  hspi2.Instance->CR2 |= SPI_CR2_FRXTH;
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <_ZL12MX_SPI2_Initv+0x9c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016e2:	605a      	str	r2, [r3, #4]
  /* USER CODE END SPI2_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000298 	.word	0x20000298
 80016ec:	40003800 	.word	0x40003800

080016f0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <_ZL19MX_USART2_UART_Initv+0x60>)
 80016f6:	4a17      	ldr	r2, [pc, #92]	; (8001754 <_ZL19MX_USART2_UART_Initv+0x64>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_ZL19MX_USART2_UART_Initv+0x60>)
 80016fc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_ZL19MX_USART2_UART_Initv+0x60>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <_ZL19MX_USART2_UART_Initv+0x60>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_ZL19MX_USART2_UART_Initv+0x60>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001734:	f004 f811 	bl	800575a <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf14      	ite	ne
 800173e:	2301      	movne	r3, #1
 8001740:	2300      	moveq	r3, #0
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8001748:	f000 f91a 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200002fc 	.word	0x200002fc
 8001754:	40004400 	.word	0x40004400

08001758 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <_ZL19MX_USART3_UART_Initv+0x60>)
 800175e:	4a17      	ldr	r2, [pc, #92]	; (80017bc <_ZL19MX_USART3_UART_Initv+0x64>)
 8001760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001764:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <_ZL19MX_USART3_UART_Initv+0x68>)
 8001766:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_ZL19MX_USART3_UART_Initv+0x60>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <_ZL19MX_USART3_UART_Initv+0x60>)
 800177c:	220c      	movs	r2, #12
 800177e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <_ZL19MX_USART3_UART_Initv+0x60>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <_ZL19MX_USART3_UART_Initv+0x60>)
 800179a:	f003 ffde 	bl	800575a <HAL_UART_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf14      	ite	ne
 80017a4:	2301      	movne	r3, #1
 80017a6:	2300      	moveq	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <_ZL19MX_USART3_UART_Initv+0x5a>
  {
    Error_Handler();
 80017ae:	f000 f8e7 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000037c 	.word	0x2000037c
 80017bc:	40004800 	.word	0x40004800
 80017c0:	0007a120 	.word	0x0007a120

080017c4 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <_ZL11MX_DMA_Initv+0x68>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <_ZL11MX_DMA_Initv+0x68>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6153      	str	r3, [r2, #20]
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <_ZL11MX_DMA_Initv+0x68>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	200c      	movs	r0, #12
 80017e8:	f001 fe15 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017ec:	200c      	movs	r0, #12
 80017ee:	f001 fe2e 	bl	800344e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	200d      	movs	r0, #13
 80017f8:	f001 fe0d 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80017fc:	200d      	movs	r0, #13
 80017fe:	f001 fe26 	bl	800344e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2010      	movs	r0, #16
 8001808:	f001 fe05 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800180c:	2010      	movs	r0, #16
 800180e:	f001 fe1e 	bl	800344e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	2011      	movs	r0, #17
 8001818:	f001 fdfd 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800181c:	2011      	movs	r0, #17
 800181e:	f001 fe16 	bl	800344e <HAL_NVIC_EnableIRQ>

}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000

08001830 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	4a49      	ldr	r2, [pc, #292]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 800184c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001850:	6153      	str	r3, [r2, #20]
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800185e:	4b44      	ldr	r3, [pc, #272]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	4a43      	ldr	r2, [pc, #268]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 8001864:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001868:	6153      	str	r3, [r2, #20]
 800186a:	4b41      	ldr	r3, [pc, #260]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4a3d      	ldr	r2, [pc, #244]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	6153      	str	r3, [r2, #20]
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b38      	ldr	r3, [pc, #224]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	4a37      	ldr	r2, [pc, #220]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6153      	str	r3, [r2, #20]
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <_ZL12MX_GPIO_Initv+0x140>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2101      	movs	r1, #1
 80018aa:	4832      	ldr	r0, [pc, #200]	; (8001974 <_ZL12MX_GPIO_Initv+0x144>)
 80018ac:	f002 f964 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2120      	movs	r1, #32
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f002 f95e 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2102      	movs	r1, #2
 80018c0:	482d      	ldr	r0, [pc, #180]	; (8001978 <_ZL12MX_GPIO_Initv+0x148>)
 80018c2:	f002 f959 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2104      	movs	r1, #4
 80018ca:	482b      	ldr	r0, [pc, #172]	; (8001978 <_ZL12MX_GPIO_Initv+0x148>)
 80018cc:	f002 f954 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_MODE_Pin BTN_PING_Pin BT_STA_Pin */
  GPIO_InitStruct.Pin = SW_MODE_Pin|BTN_PING_Pin|BT_STA_Pin;
 80018d0:	f24a 0302 	movw	r3, #40962	; 0xa002
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4823      	ldr	r0, [pc, #140]	; (8001974 <_ZL12MX_GPIO_Initv+0x144>)
 80018e6:	f001 ffbd 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_EN_Pin */
  GPIO_InitStruct.Pin = BT_EN_Pin;
 80018ea:	2301      	movs	r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BT_EN_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	481c      	ldr	r0, [pc, #112]	; (8001974 <_ZL12MX_GPIO_Initv+0x144>)
 8001902:	f001 ffaf 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001906:	2320      	movs	r3, #32
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001920:	f001 ffa0 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8001924:	2310      	movs	r3, #16
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <_ZL12MX_GPIO_Initv+0x14c>)
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192c:	2301      	movs	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	480f      	ldr	r0, [pc, #60]	; (8001974 <_ZL12MX_GPIO_Initv+0x144>)
 8001938:	f001 ff94 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CS_Pin|NRF_CE_Pin;
 800193c:	2306      	movs	r3, #6
 800193e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001948:	2301      	movs	r3, #1
 800194a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4809      	ldr	r0, [pc, #36]	; (8001978 <_ZL12MX_GPIO_Initv+0x148>)
 8001954:	f001 ff86 	bl	8003864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 5);
 8001958:	2205      	movs	r2, #5
 800195a:	2100      	movs	r1, #0
 800195c:	200a      	movs	r0, #10
 800195e:	f001 fd5a 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001962:	200a      	movs	r0, #10
 8001964:	f001 fd73 	bl	800344e <HAL_NVIC_EnableIRQ>

}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	48000800 	.word	0x48000800
 8001978:	48000400 	.word	0x48000400
 800197c:	10210000 	.word	0x10210000

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <NRF24L01_InitPins>:
uint8_t NRF24L01_RxFifoEmpty(void);

/* NRF structure */
static NRF24L01_t NRF24L01_Struct;

void NRF24L01_InitPins(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	/* CSN high = disable SPI */
	NRF24L01_CSN_HIGH;
 8001994:	2201      	movs	r2, #1
 8001996:	2102      	movs	r1, #2
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <NRF24L01_InitPins+0x1c>)
 800199a:	f002 f8ed 	bl	8003b78 <HAL_GPIO_WritePin>
	
	/* CE low = disable TX/RX */
	NRF24L01_CE_LOW;
 800199e:	2200      	movs	r2, #0
 80019a0:	2104      	movs	r1, #4
 80019a2:	4802      	ldr	r0, [pc, #8]	; (80019ac <NRF24L01_InitPins+0x1c>)
 80019a4:	f002 f8e8 	bl	8003b78 <HAL_GPIO_WritePin>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	48000400 	.word	0x48000400

080019b0 <NRF24L01_Init>:

uint8_t NRF24L01_Init(uint8_t channel, uint8_t payload_size) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	4613      	mov	r3, r2
 80019be:	71bb      	strb	r3, [r7, #6]
	/* Initialize CE and CSN pins */
	NRF24L01_InitPins();
 80019c0:	f7ff ffe6 	bl	8001990 <NRF24L01_InitPins>
	
	/* Max payload is 32bytes */
	if (payload_size > 32) {
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d901      	bls.n	80019ce <NRF24L01_Init+0x1e>
		payload_size = 32;
 80019ca:	2320      	movs	r3, #32
 80019cc:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Fill structure */
	NRF24L01_Struct.Channel = !channel; /* Set channel to some different value for NRF24L01_SetChannel() function */
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <NRF24L01_Init+0x120>)
 80019de:	705a      	strb	r2, [r3, #1]
	NRF24L01_Struct.PayloadSize = payload_size;
 80019e0:	4a3b      	ldr	r2, [pc, #236]	; (8001ad0 <NRF24L01_Init+0x120>)
 80019e2:	79bb      	ldrb	r3, [r7, #6]
 80019e4:	7013      	strb	r3, [r2, #0]
	NRF24L01_Struct.OutPwr = NRF24L01_OutputPower_0dBm;
 80019e6:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <NRF24L01_Init+0x120>)
 80019e8:	2203      	movs	r2, #3
 80019ea:	709a      	strb	r2, [r3, #2]
	NRF24L01_Struct.DataRate = NRF24L01_DataRate_1M;
 80019ec:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <NRF24L01_Init+0x120>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	70da      	strb	r2, [r3, #3]
	
	/* Reset nRF24L01+ to power on registers values */
	NRF24L01_SoftwareReset();
 80019f2:	f000 f991 	bl	8001d18 <NRF24L01_SoftwareReset>
	
	NRF24L01_GetStatus();
 80019f6:	f000 f975 	bl	8001ce4 <NRF24L01_GetStatus>

	/* Channel select */
	NRF24L01_SetChannel(channel);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fa1f 	bl	8001e40 <NRF24L01_SetChannel>
	
	/* Set pipeline to max possible 32 bytes */
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P0, NRF24L01_Struct.PayloadSize); // Auto-ACK pipe
 8001a02:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <NRF24L01_Init+0x120>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	4619      	mov	r1, r3
 8001a08:	2011      	movs	r0, #17
 8001a0a:	f000 f88b 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P1, NRF24L01_Struct.PayloadSize); // Data payload pipe
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <NRF24L01_Init+0x120>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	4619      	mov	r1, r3
 8001a14:	2012      	movs	r0, #18
 8001a16:	f000 f885 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P2, NRF24L01_Struct.PayloadSize);
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <NRF24L01_Init+0x120>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	2013      	movs	r0, #19
 8001a22:	f000 f87f 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P3, NRF24L01_Struct.PayloadSize);
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <NRF24L01_Init+0x120>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	2014      	movs	r0, #20
 8001a2e:	f000 f879 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P4, NRF24L01_Struct.PayloadSize);
 8001a32:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <NRF24L01_Init+0x120>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	2015      	movs	r0, #21
 8001a3a:	f000 f873 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P5, NRF24L01_Struct.PayloadSize);
 8001a3e:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <NRF24L01_Init+0x120>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4619      	mov	r1, r3
 8001a44:	2016      	movs	r0, #22
 8001a46:	f000 f86d 	bl	8001b24 <NRF24L01_WriteRegister>
	
	/* Set RF settings (1mbps, output power) */
	NRF24L01_SetRF(NRF24L01_Struct.DataRate, NRF24L01_Struct.OutPwr);
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <NRF24L01_Init+0x120>)
 8001a4c:	78da      	ldrb	r2, [r3, #3]
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <NRF24L01_Init+0x120>)
 8001a50:	789b      	ldrb	r3, [r3, #2]
 8001a52:	4619      	mov	r1, r3
 8001a54:	4610      	mov	r0, r2
 8001a56:	f000 fa0f 	bl	8001e78 <NRF24L01_SetRF>
	
	/* Config register */
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG);
 8001a5a:	210c      	movs	r1, #12
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f000 f861 	bl	8001b24 <NRF24L01_WriteRegister>
	
	/* Enable auto-acknowledgment for all pipes */
	//NRF24L01_WriteRegister(NRF24L01_REG_EN_AA, 0x3F);

	/* Disable auto-acknowledgment for all pipes */
	NRF24L01_WriteRegister(NRF24L01_REG_EN_AA, 0x00);
 8001a62:	2100      	movs	r1, #0
 8001a64:	2001      	movs	r0, #1
 8001a66:	f000 f85d 	bl	8001b24 <NRF24L01_WriteRegister>
	
	/* Enable RX addresses */
	//NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, 0x3F);

	/* Disable RX addresses beside pipeline 0 */
	NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, (1 << NRF24L01_ERX_P0));
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f000 f859 	bl	8001b24 <NRF24L01_WriteRegister>

	/* Auto retransmit delay: 1000 (4x250) us and Up to 15 retransmit trials */
	//NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, 0x4F);
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, 0x00);
 8001a72:	2100      	movs	r1, #0
 8001a74:	2004      	movs	r0, #4
 8001a76:	f000 f855 	bl	8001b24 <NRF24L01_WriteRegister>
	
	/* Dynamic length configurations: No dynamic length */
	NRF24L01_WriteRegister(NRF24L01_REG_DYNPD, (0 << NRF24L01_DPL_P0) | (0 << NRF24L01_DPL_P1) | (0 << NRF24L01_DPL_P2) | (0 << NRF24L01_DPL_P3) | (0 << NRF24L01_DPL_P4) | (0 << NRF24L01_DPL_P5));
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	201c      	movs	r0, #28
 8001a7e:	f000 f851 	bl	8001b24 <NRF24L01_WriteRegister>
	
	// Set address length to 4 bytes
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_AW, (0x02 << NRF24L01_AW));
 8001a82:	2102      	movs	r1, #2
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 f84d 	bl	8001b24 <NRF24L01_WriteRegister>

	/* Clear FIFOs */
	NRF24L01_FLUSH_TX;
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4811      	ldr	r0, [pc, #68]	; (8001ad4 <NRF24L01_Init+0x124>)
 8001a90:	f002 f872 	bl	8003b78 <HAL_GPIO_WritePin>
 8001a94:	20e1      	movs	r0, #225	; 0xe1
 8001a96:	f000 fa3b 	bl	8001f10 <NRF24L01_SPI_Send>
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2102      	movs	r1, #2
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <NRF24L01_Init+0x124>)
 8001aa0:	f002 f86a 	bl	8003b78 <HAL_GPIO_WritePin>
	NRF24L01_FLUSH_RX;
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	480a      	ldr	r0, [pc, #40]	; (8001ad4 <NRF24L01_Init+0x124>)
 8001aaa:	f002 f865 	bl	8003b78 <HAL_GPIO_WritePin>
 8001aae:	20e2      	movs	r0, #226	; 0xe2
 8001ab0:	f000 fa2e 	bl	8001f10 <NRF24L01_SPI_Send>
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <NRF24L01_Init+0x124>)
 8001aba:	f002 f85d 	bl	8003b78 <HAL_GPIO_WritePin>
	
	/* Clear interrupts */
	NRF24L01_Clear_Interrupts();
 8001abe:	f000 fa1d 	bl	8001efc <NRF24L01_Clear_Interrupts>
	
	/* Go to RX mode */
	NRF24L01_PowerUpRx();
 8001ac2:	f000 f88d 	bl	8001be0 <NRF24L01_PowerUpRx>
	
	/* Return OK */
	return 1;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2000050c 	.word	0x2000050c
 8001ad4:	48000400 	.word	0x48000400

08001ad8 <NRF24L01_ReadRegister>:
		return 0;
	}
	return 1;
}

uint8_t NRF24L01_ReadRegister(uint8_t reg) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
	uint8_t Data[2];
	Data[0] = NRF24L01_READ_REGISTER_MASK(reg);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	733b      	strb	r3, [r7, #12]
	Data[1] = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	737b      	strb	r3, [r7, #13]
	NRF24L01_CSN_LOW;
 8001af0:	2200      	movs	r2, #0
 8001af2:	2102      	movs	r1, #2
 8001af4:	480a      	ldr	r0, [pc, #40]	; (8001b20 <NRF24L01_ReadRegister+0x48>)
 8001af6:	f002 f83f 	bl	8003b78 <HAL_GPIO_WritePin>
	NRF24L01_SPI_SendMulti(Data, Data, 2);
 8001afa:	f107 010c 	add.w	r1, r7, #12
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	2202      	movs	r2, #2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fa5d 	bl	8001fc4 <NRF24L01_SPI_SendMulti>
	NRF24L01_CSN_HIGH;
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4804      	ldr	r0, [pc, #16]	; (8001b20 <NRF24L01_ReadRegister+0x48>)
 8001b10:	f002 f832 	bl	8003b78 <HAL_GPIO_WritePin>
	return Data[1];
 8001b14:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	48000400 	.word	0x48000400

08001b24 <NRF24L01_WriteRegister>:
	NRF24L01_SPI_ReadMulti(data, NRF24L01_NOP_MASK, count);
	NRF24L01_CSN_HIGH;
}

uint8_t NRF24L01_WriteRegister(uint8_t reg, uint8_t value)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	4613      	mov	r3, r2
 8001b32:	71bb      	strb	r3, [r7, #6]
	uint8_t Data[2];
	Data[0] = NRF24L01_WRITE_REGISTER_MASK(reg);
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f043 0320 	orr.w	r3, r3, #32
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	733b      	strb	r3, [r7, #12]
	Data[1] = value;
 8001b44:	79bb      	ldrb	r3, [r7, #6]
 8001b46:	737b      	strb	r3, [r7, #13]
	NRF24L01_CSN_LOW;
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	480a      	ldr	r0, [pc, #40]	; (8001b78 <NRF24L01_WriteRegister+0x54>)
 8001b4e:	f002 f813 	bl	8003b78 <HAL_GPIO_WritePin>
	NRF24L01_SPI_SendMulti(Data, Data, 2);
 8001b52:	f107 010c 	add.w	r1, r7, #12
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fa31 	bl	8001fc4 <NRF24L01_SPI_SendMulti>
	NRF24L01_CSN_HIGH;
 8001b62:	2201      	movs	r2, #1
 8001b64:	2102      	movs	r1, #2
 8001b66:	4804      	ldr	r0, [pc, #16]	; (8001b78 <NRF24L01_WriteRegister+0x54>)
 8001b68:	f002 f806 	bl	8003b78 <HAL_GPIO_WritePin>
	return Data[0];
 8001b6c:	7b3b      	ldrb	r3, [r7, #12]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	48000400 	.word	0x48000400

08001b7c <NRF24L01_WriteRegisterMulti>:

void NRF24L01_WriteRegisterMulti(uint8_t reg, uint8_t *data, uint8_t count) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71bb      	strb	r3, [r7, #6]
	NRF24L01_CSN_LOW;
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2102      	movs	r1, #2
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <NRF24L01_WriteRegisterMulti+0x4c>)
 8001b92:	f001 fff1 	bl	8003b78 <HAL_GPIO_WritePin>
	NRF24L01_SPI_Send(NRF24L01_WRITE_REGISTER_MASK(reg));
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f043 0320 	orr.w	r3, r3, #32
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f9b3 	bl	8001f10 <NRF24L01_SPI_Send>
	NRF24L01_SPI_WriteMulti(data, count);
 8001baa:	79bb      	ldrb	r3, [r7, #6]
 8001bac:	4619      	mov	r1, r3
 8001bae:	6838      	ldr	r0, [r7, #0]
 8001bb0:	f000 f9d6 	bl	8001f60 <NRF24L01_SPI_WriteMulti>
	NRF24L01_CSN_HIGH;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <NRF24L01_WriteRegisterMulti+0x4c>)
 8001bba:	f001 ffdd 	bl	8003b78 <HAL_GPIO_WritePin>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	48000400 	.word	0x48000400

08001bcc <NRF24L01_PowerUpTx>:

void NRF24L01_PowerUpTx(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	NRF24L01_Clear_Interrupts();
 8001bd0:	f000 f994 	bl	8001efc <NRF24L01_Clear_Interrupts>
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG | (0 << NRF24L01_PRIM_RX) | (1 << NRF24L01_PWR_UP));
 8001bd4:	210e      	movs	r1, #14
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff ffa4 	bl	8001b24 <NRF24L01_WriteRegister>
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <NRF24L01_PowerUpRx>:

void NRF24L01_PowerUpRx(void) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	/* Disable RX/TX mode */
	NRF24L01_CE_LOW;
 8001be4:	2200      	movs	r2, #0
 8001be6:	2104      	movs	r1, #4
 8001be8:	480e      	ldr	r0, [pc, #56]	; (8001c24 <NRF24L01_PowerUpRx+0x44>)
 8001bea:	f001 ffc5 	bl	8003b78 <HAL_GPIO_WritePin>
	/* Clear RX buffer */
	NRF24L01_FLUSH_RX;
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	480c      	ldr	r0, [pc, #48]	; (8001c24 <NRF24L01_PowerUpRx+0x44>)
 8001bf4:	f001 ffc0 	bl	8003b78 <HAL_GPIO_WritePin>
 8001bf8:	20e2      	movs	r0, #226	; 0xe2
 8001bfa:	f000 f989 	bl	8001f10 <NRF24L01_SPI_Send>
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2102      	movs	r1, #2
 8001c02:	4808      	ldr	r0, [pc, #32]	; (8001c24 <NRF24L01_PowerUpRx+0x44>)
 8001c04:	f001 ffb8 	bl	8003b78 <HAL_GPIO_WritePin>
	/* Clear interrupts */
	NRF24L01_Clear_Interrupts();
 8001c08:	f000 f978 	bl	8001efc <NRF24L01_Clear_Interrupts>
	/* Setup RX mode */
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, NRF24L01_CONFIG | 1 << NRF24L01_PWR_UP | 1 << NRF24L01_PRIM_RX);
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff ff88 	bl	8001b24 <NRF24L01_WriteRegister>
	/* Start listening */
	NRF24L01_CE_HIGH;
 8001c14:	2201      	movs	r2, #1
 8001c16:	2104      	movs	r1, #4
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <NRF24L01_PowerUpRx+0x44>)
 8001c1a:	f001 ffad 	bl	8003b78 <HAL_GPIO_WritePin>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	48000400 	.word	0x48000400

08001c28 <NRF24L01_Transmit>:
void NRF24L01_PowerDown(void) {
	NRF24L01_CE_LOW;
	NRF24L01_WriteBit(NRF24L01_REG_CONFIG, NRF24L01_PWR_UP, 0);
}

void NRF24L01_Transmit(uint8_t *data) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	uint8_t count = NRF24L01_Struct.PayloadSize;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <NRF24L01_Transmit+0x6c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	73fb      	strb	r3, [r7, #15]

	/* Chip enable put to low, disable it */
	NRF24L01_CE_LOW;
 8001c36:	2200      	movs	r2, #0
 8001c38:	2104      	movs	r1, #4
 8001c3a:	4817      	ldr	r0, [pc, #92]	; (8001c98 <NRF24L01_Transmit+0x70>)
 8001c3c:	f001 ff9c 	bl	8003b78 <HAL_GPIO_WritePin>
	
	/* Go to power up tx mode */
	NRF24L01_PowerUpTx();
 8001c40:	f7ff ffc4 	bl	8001bcc <NRF24L01_PowerUpTx>
	
	/* Clear TX FIFO from NRF24L01+ */
	NRF24L01_FLUSH_TX;
 8001c44:	2200      	movs	r2, #0
 8001c46:	2102      	movs	r1, #2
 8001c48:	4813      	ldr	r0, [pc, #76]	; (8001c98 <NRF24L01_Transmit+0x70>)
 8001c4a:	f001 ff95 	bl	8003b78 <HAL_GPIO_WritePin>
 8001c4e:	20e1      	movs	r0, #225	; 0xe1
 8001c50:	f000 f95e 	bl	8001f10 <NRF24L01_SPI_Send>
 8001c54:	2201      	movs	r2, #1
 8001c56:	2102      	movs	r1, #2
 8001c58:	480f      	ldr	r0, [pc, #60]	; (8001c98 <NRF24L01_Transmit+0x70>)
 8001c5a:	f001 ff8d 	bl	8003b78 <HAL_GPIO_WritePin>
	
	/* Send payload to nRF24L01+ */
	NRF24L01_CSN_LOW;
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2102      	movs	r1, #2
 8001c62:	480d      	ldr	r0, [pc, #52]	; (8001c98 <NRF24L01_Transmit+0x70>)
 8001c64:	f001 ff88 	bl	8003b78 <HAL_GPIO_WritePin>
	/* Send write payload command */
	NRF24L01_SPI_Send(NRF24L01_W_TX_PAYLOAD_MASK);
 8001c68:	20a0      	movs	r0, #160	; 0xa0
 8001c6a:	f000 f951 	bl	8001f10 <NRF24L01_SPI_Send>
	/* Fill payload with data*/
	NRF24L01_SPI_WriteMulti(data, count);
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	4619      	mov	r1, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f974 	bl	8001f60 <NRF24L01_SPI_WriteMulti>
	/* Disable SPI */
	NRF24L01_CSN_HIGH;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	4806      	ldr	r0, [pc, #24]	; (8001c98 <NRF24L01_Transmit+0x70>)
 8001c7e:	f001 ff7b 	bl	8003b78 <HAL_GPIO_WritePin>
	
	/* Send data! */
	NRF24L01_CE_HIGH;
 8001c82:	2201      	movs	r2, #1
 8001c84:	2104      	movs	r1, #4
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <NRF24L01_Transmit+0x70>)
 8001c88:	f001 ff76 	bl	8003b78 <HAL_GPIO_WritePin>
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	2000050c 	.word	0x2000050c
 8001c98:	48000400 	.word	0x48000400

08001c9c <NRF24L01_GetData>:

void NRF24L01_GetData(uint8_t* data) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	/* Pull down chip select */
	NRF24L01_CSN_LOW;
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <NRF24L01_GetData+0x40>)
 8001caa:	f001 ff65 	bl	8003b78 <HAL_GPIO_WritePin>
	/* Send read payload command*/
	NRF24L01_SPI_Send(NRF24L01_R_RX_PAYLOAD_MASK);
 8001cae:	2061      	movs	r0, #97	; 0x61
 8001cb0:	f000 f92e 	bl	8001f10 <NRF24L01_SPI_Send>
	/* Read payload */
	NRF24L01_SPI_SendMulti(data, data, NRF24L01_Struct.PayloadSize);
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <NRF24L01_GetData+0x44>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f981 	bl	8001fc4 <NRF24L01_SPI_SendMulti>
	/* Pull up chip select */
	NRF24L01_CSN_HIGH;
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <NRF24L01_GetData+0x40>)
 8001cc8:	f001 ff56 	bl	8003b78 <HAL_GPIO_WritePin>
	
	/* Reset status register, clear RX_DR interrupt flag */
	NRF24L01_WriteRegister(NRF24L01_REG_STATUS, (1 << NRF24L01_RX_DR));
 8001ccc:	2140      	movs	r1, #64	; 0x40
 8001cce:	2007      	movs	r0, #7
 8001cd0:	f7ff ff28 	bl	8001b24 <NRF24L01_WriteRegister>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	2000050c 	.word	0x2000050c

08001ce4 <NRF24L01_GetStatus>:
uint8_t NRF24L01_RxFifoEmpty(void) {
	uint8_t reg = NRF24L01_ReadRegister(NRF24L01_REG_FIFO_STATUS);
	return NRF24L01_CHECK_BIT(reg, NRF24L01_RX_EMPTY);
}

uint8_t NRF24L01_GetStatus(void) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
	uint8_t Data;
	
	NRF24L01_CSN_LOW;
 8001cea:	2200      	movs	r2, #0
 8001cec:	2102      	movs	r1, #2
 8001cee:	4809      	ldr	r0, [pc, #36]	; (8001d14 <NRF24L01_GetStatus+0x30>)
 8001cf0:	f001 ff42 	bl	8003b78 <HAL_GPIO_WritePin>
	/* First received byte is always status register */
	Data = NRF24L01_SPI_Send(NRF24L01_READ_REGISTER_MASK(NRF24L01_REG_STATUS));
 8001cf4:	2007      	movs	r0, #7
 8001cf6:	f000 f90b 	bl	8001f10 <NRF24L01_SPI_Send>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	/* Pull up chip select */
	NRF24L01_CSN_HIGH;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2102      	movs	r1, #2
 8001d02:	4804      	ldr	r0, [pc, #16]	; (8001d14 <NRF24L01_GetStatus+0x30>)
 8001d04:	f001 ff38 	bl	8003b78 <HAL_GPIO_WritePin>
	
	return Data;
 8001d08:	79fb      	ldrb	r3, [r7, #7]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	48000400 	.word	0x48000400

08001d18 <NRF24L01_SoftwareReset>:
	
	/* Still sending */
	return NRF24L01_Transmit_Status_Sending;
}

void NRF24L01_SoftwareReset(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
	uint8_t data[5];
	
	NRF24L01_WriteRegister(NRF24L01_REG_CONFIG, 		NRF24L01_REG_DEFAULT_VAL_CONFIG);
 8001d1e:	2108      	movs	r1, #8
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff feff 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_EN_AA,		NRF24L01_REG_DEFAULT_VAL_EN_AA);
 8001d26:	213f      	movs	r1, #63	; 0x3f
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7ff fefb 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_EN_RXADDR, 	NRF24L01_REG_DEFAULT_VAL_EN_RXADDR);
 8001d2e:	2103      	movs	r1, #3
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7ff fef7 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_AW, 	NRF24L01_REG_DEFAULT_VAL_SETUP_AW);
 8001d36:	2103      	movs	r1, #3
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f7ff fef3 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_SETUP_RETR, 	NRF24L01_REG_DEFAULT_VAL_SETUP_RETR);
 8001d3e:	2103      	movs	r1, #3
 8001d40:	2004      	movs	r0, #4
 8001d42:	f7ff feef 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RF_CH, 		NRF24L01_REG_DEFAULT_VAL_RF_CH);
 8001d46:	2102      	movs	r1, #2
 8001d48:	2005      	movs	r0, #5
 8001d4a:	f7ff feeb 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RF_SETUP, 	NRF24L01_REG_DEFAULT_VAL_RF_SETUP);
 8001d4e:	210e      	movs	r1, #14
 8001d50:	2006      	movs	r0, #6
 8001d52:	f7ff fee7 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_STATUS, 		NRF24L01_REG_DEFAULT_VAL_STATUS);
 8001d56:	210e      	movs	r1, #14
 8001d58:	2007      	movs	r0, #7
 8001d5a:	f7ff fee3 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_OBSERVE_TX, 	NRF24L01_REG_DEFAULT_VAL_OBSERVE_TX);
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2008      	movs	r0, #8
 8001d62:	f7ff fedf 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RPD, 		NRF24L01_REG_DEFAULT_VAL_RPD);
 8001d66:	2100      	movs	r1, #0
 8001d68:	2009      	movs	r0, #9
 8001d6a:	f7ff fedb 	bl	8001b24 <NRF24L01_WriteRegister>
	
	//P0
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_0;
 8001d6e:	23e7      	movs	r3, #231	; 0xe7
 8001d70:	703b      	strb	r3, [r7, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_1;
 8001d72:	23e7      	movs	r3, #231	; 0xe7
 8001d74:	707b      	strb	r3, [r7, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_2;
 8001d76:	23e7      	movs	r3, #231	; 0xe7
 8001d78:	70bb      	strb	r3, [r7, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_3;
 8001d7a:	23e7      	movs	r3, #231	; 0xe7
 8001d7c:	70fb      	strb	r3, [r7, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_4;
 8001d7e:	23e7      	movs	r3, #231	; 0xe7
 8001d80:	713b      	strb	r3, [r7, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P0, data, 5);
 8001d82:	463b      	mov	r3, r7
 8001d84:	2205      	movs	r2, #5
 8001d86:	4619      	mov	r1, r3
 8001d88:	200a      	movs	r0, #10
 8001d8a:	f7ff fef7 	bl	8001b7c <NRF24L01_WriteRegisterMulti>
	
	//P1
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_0;
 8001d8e:	23c2      	movs	r3, #194	; 0xc2
 8001d90:	703b      	strb	r3, [r7, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_1;
 8001d92:	23c2      	movs	r3, #194	; 0xc2
 8001d94:	707b      	strb	r3, [r7, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_2;
 8001d96:	23c2      	movs	r3, #194	; 0xc2
 8001d98:	70bb      	strb	r3, [r7, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_3;
 8001d9a:	23c2      	movs	r3, #194	; 0xc2
 8001d9c:	70fb      	strb	r3, [r7, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_4;
 8001d9e:	23c2      	movs	r3, #194	; 0xc2
 8001da0:	713b      	strb	r3, [r7, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_RX_ADDR_P1, data, 5);
 8001da2:	463b      	mov	r3, r7
 8001da4:	2205      	movs	r2, #5
 8001da6:	4619      	mov	r1, r3
 8001da8:	200b      	movs	r0, #11
 8001daa:	f7ff fee7 	bl	8001b7c <NRF24L01_WriteRegisterMulti>
	
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P2, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P2);
 8001dae:	21c3      	movs	r1, #195	; 0xc3
 8001db0:	200c      	movs	r0, #12
 8001db2:	f7ff feb7 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P3, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P3);
 8001db6:	21c4      	movs	r1, #196	; 0xc4
 8001db8:	200d      	movs	r0, #13
 8001dba:	f7ff feb3 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P4, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P4);
 8001dbe:	21c5      	movs	r1, #197	; 0xc5
 8001dc0:	200e      	movs	r0, #14
 8001dc2:	f7ff feaf 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_ADDR_P5, 	NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P5);
 8001dc6:	21c6      	movs	r1, #198	; 0xc6
 8001dc8:	200f      	movs	r0, #15
 8001dca:	f7ff feab 	bl	8001b24 <NRF24L01_WriteRegister>
	
	//TX
	data[0] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_0;
 8001dce:	23e7      	movs	r3, #231	; 0xe7
 8001dd0:	703b      	strb	r3, [r7, #0]
	data[1] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_1;
 8001dd2:	23e7      	movs	r3, #231	; 0xe7
 8001dd4:	707b      	strb	r3, [r7, #1]
	data[2] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_2;
 8001dd6:	23e7      	movs	r3, #231	; 0xe7
 8001dd8:	70bb      	strb	r3, [r7, #2]
	data[3] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_3;
 8001dda:	23e7      	movs	r3, #231	; 0xe7
 8001ddc:	70fb      	strb	r3, [r7, #3]
	data[4] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_4;
 8001dde:	23e7      	movs	r3, #231	; 0xe7
 8001de0:	713b      	strb	r3, [r7, #4]
	NRF24L01_WriteRegisterMulti(NRF24L01_REG_TX_ADDR, data, 5);
 8001de2:	463b      	mov	r3, r7
 8001de4:	2205      	movs	r2, #5
 8001de6:	4619      	mov	r1, r3
 8001de8:	2010      	movs	r0, #16
 8001dea:	f7ff fec7 	bl	8001b7c <NRF24L01_WriteRegisterMulti>
	
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P0, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P0);
 8001dee:	2100      	movs	r1, #0
 8001df0:	2011      	movs	r0, #17
 8001df2:	f7ff fe97 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P1, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P1);
 8001df6:	2100      	movs	r1, #0
 8001df8:	2012      	movs	r0, #18
 8001dfa:	f7ff fe93 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P2, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P2);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2013      	movs	r0, #19
 8001e02:	f7ff fe8f 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P3, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P3);
 8001e06:	2100      	movs	r1, #0
 8001e08:	2014      	movs	r0, #20
 8001e0a:	f7ff fe8b 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P4, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P4);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2015      	movs	r0, #21
 8001e12:	f7ff fe87 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_RX_PW_P5, 	NRF24L01_REG_DEFAULT_VAL_RX_PW_P5);
 8001e16:	2100      	movs	r1, #0
 8001e18:	2016      	movs	r0, #22
 8001e1a:	f7ff fe83 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_FIFO_STATUS, NRF24L01_REG_DEFAULT_VAL_FIFO_STATUS);
 8001e1e:	2111      	movs	r1, #17
 8001e20:	2017      	movs	r0, #23
 8001e22:	f7ff fe7f 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_DYNPD, 		NRF24L01_REG_DEFAULT_VAL_DYNPD);
 8001e26:	2100      	movs	r1, #0
 8001e28:	201c      	movs	r0, #28
 8001e2a:	f7ff fe7b 	bl	8001b24 <NRF24L01_WriteRegister>
	NRF24L01_WriteRegister(NRF24L01_REG_FEATURE, 	NRF24L01_REG_DEFAULT_VAL_FEATURE);
 8001e2e:	2100      	movs	r1, #0
 8001e30:	201d      	movs	r0, #29
 8001e32:	f7ff fe77 	bl	8001b24 <NRF24L01_WriteRegister>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <NRF24L01_SetChannel>:
uint8_t NRF24L01_GetRetransmissionsCount(void) {
	/* Low 4 bits */
	return NRF24L01_ReadRegister(NRF24L01_REG_OBSERVE_TX) & 0x0F;
}

void NRF24L01_SetChannel(uint8_t channel) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
	if (channel <= 125 && channel != NRF24L01_Struct.Channel) {
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	2b7d      	cmp	r3, #125	; 0x7d
 8001e4e:	d80c      	bhi.n	8001e6a <NRF24L01_SetChannel+0x2a>
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <NRF24L01_SetChannel+0x34>)
 8001e52:	785b      	ldrb	r3, [r3, #1]
 8001e54:	79fa      	ldrb	r2, [r7, #7]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d007      	beq.n	8001e6a <NRF24L01_SetChannel+0x2a>
		/* Store new channel setting */
		NRF24L01_Struct.Channel = channel;
 8001e5a:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <NRF24L01_SetChannel+0x34>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	7053      	strb	r3, [r2, #1]
		/* Write channel */
		NRF24L01_WriteRegister(NRF24L01_REG_RF_CH, channel);
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	4619      	mov	r1, r3
 8001e64:	2005      	movs	r0, #5
 8001e66:	f7ff fe5d 	bl	8001b24 <NRF24L01_WriteRegister>
	}
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000050c 	.word	0x2000050c

08001e78 <NRF24L01_SetRF>:

void NRF24L01_SetRF(NRF24L01_DataRate_t DataRate, NRF24L01_OutputPower_t OutPwr) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460a      	mov	r2, r1
 8001e82:	71fb      	strb	r3, [r7, #7]
 8001e84:	4613      	mov	r3, r2
 8001e86:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Struct.DataRate = DataRate;
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <NRF24L01_SetRF+0x80>)
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	70d3      	strb	r3, [r2, #3]
	NRF24L01_Struct.OutPwr = OutPwr;
 8001e92:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <NRF24L01_SetRF+0x80>)
 8001e94:	79bb      	ldrb	r3, [r7, #6]
 8001e96:	7093      	strb	r3, [r2, #2]
	
	if (DataRate == NRF24L01_DataRate_2M) {
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d104      	bne.n	8001ea8 <NRF24L01_SetRF+0x30>
		tmp |= 1 << NRF24L01_RF_DR_HIGH;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	73fb      	strb	r3, [r7, #15]
 8001ea6:	e006      	b.n	8001eb6 <NRF24L01_SetRF+0x3e>
	} else if (DataRate == NRF24L01_DataRate_250k) {
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d103      	bne.n	8001eb6 <NRF24L01_SetRF+0x3e>
		tmp |= 1 << NRF24L01_RF_DR_LOW;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	f043 0320 	orr.w	r3, r3, #32
 8001eb4:	73fb      	strb	r3, [r7, #15]
	}
	/* If 1Mbps, all bits set to 0 */
	
	if (OutPwr == NRF24L01_OutputPower_0dBm) {
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d104      	bne.n	8001ec6 <NRF24L01_SetRF+0x4e>
		tmp |= 3 << NRF24L01_RF_PWR;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	f043 0306 	orr.w	r3, r3, #6
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e00e      	b.n	8001ee4 <NRF24L01_SetRF+0x6c>
	} else if (OutPwr == NRF24L01_OutputPower_M6dBm) {
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d104      	bne.n	8001ed6 <NRF24L01_SetRF+0x5e>
		tmp |= 2 << NRF24L01_RF_PWR;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e006      	b.n	8001ee4 <NRF24L01_SetRF+0x6c>
	} else if (OutPwr == NRF24L01_OutputPower_M12dBm) {
 8001ed6:	79bb      	ldrb	r3, [r7, #6]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d103      	bne.n	8001ee4 <NRF24L01_SetRF+0x6c>
		tmp |= 1 << NRF24L01_RF_PWR;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	73fb      	strb	r3, [r7, #15]
	}
	
	NRF24L01_WriteRegister(NRF24L01_REG_RF_SETUP, tmp);
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	2006      	movs	r0, #6
 8001eea:	f7ff fe1b 	bl	8001b24 <NRF24L01_WriteRegister>
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000050c 	.word	0x2000050c

08001efc <NRF24L01_Clear_Interrupts>:
uint8_t NRF24L01_Read_Interrupts(NRF24L01_IRQ_t* IRQ) {
	IRQ->Status = NRF24L01_GetStatus();
	return IRQ->Status;
}

uint8_t NRF24L01_Clear_Interrupts(void) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	return NRF24L01_WriteRegister(0x07, 0x70);
 8001f00:	2170      	movs	r1, #112	; 0x70
 8001f02:	2007      	movs	r0, #7
 8001f04:	f7ff fe0e 	bl	8001b24 <NRF24L01_WriteRegister>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <NRF24L01_SPI_Send>:
extern SPI_HandleTypeDef NRF24L01_SPI_HANDLE;



uint8_t NRF24L01_SPI_Send(uint8_t data)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
	while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 8001f1a:	bf00      	nop
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <NRF24L01_SPI_Send+0x4c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f8      	beq.n	8001f1c <NRF24L01_SPI_Send+0xc>
	*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = data;
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <NRF24L01_SPI_Send+0x4c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	330c      	adds	r3, #12
 8001f30:	79fa      	ldrb	r2, [r7, #7]
 8001f32:	701a      	strb	r2, [r3, #0]
	while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 8001f34:	bf00      	nop
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <NRF24L01_SPI_Send+0x4c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f8      	beq.n	8001f36 <NRF24L01_SPI_Send+0x26>
	data = *(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <NRF24L01_SPI_Send+0x4c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	330c      	adds	r3, #12
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	71fb      	strb	r3, [r7, #7]

	return data;
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	20000298 	.word	0x20000298

08001f60 <NRF24L01_SPI_WriteMulti>:



void NRF24L01_SPI_WriteMulti(uint8_t* dataOut, uint32_t count)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
	while(count > 0)
 8001f6a:	e01f      	b.n	8001fac <NRF24L01_SPI_WriteMulti+0x4c>
	{
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 8001f6c:	bf00      	nop
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <NRF24L01_SPI_WriteMulti+0x60>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f8      	beq.n	8001f6e <NRF24L01_SPI_WriteMulti+0xe>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = *dataOut;
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <NRF24L01_SPI_WriteMulti+0x60>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	330c      	adds	r3, #12
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	701a      	strb	r2, [r3, #0]
		dataOut++;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	607b      	str	r3, [r7, #4]
		count--;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	603b      	str	r3, [r7, #0]
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 8001f94:	bf00      	nop
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <NRF24L01_SPI_WriteMulti+0x60>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f8      	beq.n	8001f96 <NRF24L01_SPI_WriteMulti+0x36>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <NRF24L01_SPI_WriteMulti+0x60>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	781b      	ldrb	r3, [r3, #0]
	while(count > 0)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1dc      	bne.n	8001f6c <NRF24L01_SPI_WriteMulti+0xc>
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000298 	.word	0x20000298

08001fc4 <NRF24L01_SPI_SendMulti>:
	}
}


void NRF24L01_SPI_SendMulti(uint8_t* dataOut, uint8_t* dataIn, uint32_t count)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
	while(count > 0)
 8001fd0:	e025      	b.n	800201e <NRF24L01_SPI_SendMulti+0x5a>
	{
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_TXE));
 8001fd2:	bf00      	nop
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <NRF24L01_SPI_SendMulti+0x6c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f8      	beq.n	8001fd4 <NRF24L01_SPI_SendMulti+0x10>
		*(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR = *dataOut;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <NRF24L01_SPI_SendMulti+0x6c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	7812      	ldrb	r2, [r2, #0]
 8001fec:	701a      	strb	r2, [r3, #0]
		dataOut++;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
		count--;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	607b      	str	r3, [r7, #4]
		while(!(NRF24L01_SPI_HANDLE.Instance->SR & SPI_SR_RXNE));
 8001ffa:	bf00      	nop
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <NRF24L01_SPI_SendMulti+0x6c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f8      	beq.n	8001ffc <NRF24L01_SPI_SendMulti+0x38>
		*dataIn = *(volatile uint8_t *)&NRF24L01_SPI_HANDLE.Instance->DR;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <NRF24L01_SPI_SendMulti+0x6c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	330c      	adds	r3, #12
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	701a      	strb	r2, [r3, #0]
		dataIn++;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	3301      	adds	r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
	while(count > 0)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1d6      	bne.n	8001fd2 <NRF24L01_SPI_SendMulti+0xe>
	}
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	20000298 	.word	0x20000298

08002034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_MspInit+0x44>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_MspInit+0x44>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6193      	str	r3, [r2, #24]
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_MspInit+0x44>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_MspInit+0x44>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <HAL_MspInit+0x44>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	61d3      	str	r3, [r2, #28]
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_MspInit+0x44>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <HAL_ADC_MspInit+0x74>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d124      	bne.n	80020e8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_ADC_MspInit+0x78>)
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <HAL_ADC_MspInit+0x78>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6153      	str	r3, [r2, #20]
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_ADC_MspInit+0x78>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_ADC_MspInit+0x78>)
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_ADC_MspInit+0x78>)
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c0:	6153      	str	r3, [r2, #20]
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_ADC_MspInit+0x78>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA6     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = OP_OUT_Pin;
 80020ce:	2340      	movs	r3, #64	; 0x40
 80020d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d2:	2303      	movs	r3, #3
 80020d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OP_OUT_GPIO_Port, &GPIO_InitStruct);
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e4:	f001 fbbe 	bl	8003864 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020e8:	bf00      	nop
 80020ea:	3728      	adds	r7, #40	; 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	50000100 	.word	0x50000100
 80020f4:	40021000 	.word	0x40021000

080020f8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <HAL_OPAMP_MspInit+0x8c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d130      	bne.n	800217c <HAL_OPAMP_MspInit+0x84>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_OPAMP_MspInit+0x90>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	4a1a      	ldr	r2, [pc, #104]	; (8002188 <HAL_OPAMP_MspInit+0x90>)
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	6153      	str	r3, [r2, #20]
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_OPAMP_MspInit+0x90>)
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_OPAMP_MspInit+0x90>)
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	4a14      	ldr	r2, [pc, #80]	; (8002188 <HAL_OPAMP_MspInit+0x90>)
 8002138:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800213c:	6153      	str	r3, [r2, #20]
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_OPAMP_MspInit+0x90>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP2 GPIO Configuration    
    PA6     ------> OPAMP2_VOUT
    PA7     ------> OPAMP2_VINP
    PC5     ------> OPAMP2_VINM 
    */
    GPIO_InitStruct.Pin = OP_OUT_Pin|OP_INP_Pin;
 800214a:	23c0      	movs	r3, #192	; 0xc0
 800214c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800214e:	2303      	movs	r3, #3
 8002150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002160:	f001 fb80 	bl	8003864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OP_INM_Pin;
 8002164:	2320      	movs	r3, #32
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002168:	2303      	movs	r3, #3
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OP_INM_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <HAL_OPAMP_MspInit+0x94>)
 8002178:	f001 fb74 	bl	8003864 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	4001003c 	.word	0x4001003c
 8002188:	40021000 	.word	0x40021000
 800218c:	48000800 	.word	0x48000800

08002190 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a24      	ldr	r2, [pc, #144]	; (8002240 <HAL_SPI_MspInit+0xb0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d141      	bne.n	8002236 <HAL_SPI_MspInit+0xa6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_SPI_MspInit+0xb4>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4a23      	ldr	r2, [pc, #140]	; (8002244 <HAL_SPI_MspInit+0xb4>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021bc:	61d3      	str	r3, [r2, #28]
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <HAL_SPI_MspInit+0xb4>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_SPI_MspInit+0xb4>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_SPI_MspInit+0xb4>)
 80021d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d4:	6153      	str	r3, [r2, #20]
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_SPI_MspInit+0xb4>)
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = NRF_CLK_Pin|NRF_MOSI_Pin;
 80021e2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80021f0:	2301      	movs	r3, #1
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021f4:	2305      	movs	r3, #5
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	4812      	ldr	r0, [pc, #72]	; (8002248 <HAL_SPI_MspInit+0xb8>)
 8002200:	f001 fb30 	bl	8003864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8002204:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800220e:	2301      	movs	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002212:	2301      	movs	r3, #1
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002216:	2305      	movs	r3, #5
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4809      	ldr	r0, [pc, #36]	; (8002248 <HAL_SPI_MspInit+0xb8>)
 8002222:	f001 fb1f 	bl	8003864 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	2024      	movs	r0, #36	; 0x24
 800222c:	f001 f8f3 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002230:	2024      	movs	r0, #36	; 0x24
 8002232:	f001 f90c 	bl	800344e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002236:	bf00      	nop
 8002238:	3728      	adds	r7, #40	; 0x28
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40003800 	.word	0x40003800
 8002244:	40021000 	.word	0x40021000
 8002248:	48000400 	.word	0x48000400

0800224c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	; 0x30
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a96      	ldr	r2, [pc, #600]	; (80024c4 <HAL_UART_MspInit+0x278>)
 800226a:	4293      	cmp	r3, r2
 800226c:	f040 8090 	bne.w	8002390 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002270:	4b95      	ldr	r3, [pc, #596]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	4a94      	ldr	r2, [pc, #592]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 8002276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227a:	61d3      	str	r3, [r2, #28]
 800227c:	4b92      	ldr	r3, [pc, #584]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002288:	4b8f      	ldr	r3, [pc, #572]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	4a8e      	ldr	r2, [pc, #568]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 800228e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002292:	6153      	str	r3, [r2, #20]
 8002294:	4b8c      	ldr	r3, [pc, #560]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = BT_TX_Pin;
 80022a0:	2304      	movs	r3, #4
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80022ac:	2301      	movs	r3, #1
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b0:	2307      	movs	r3, #7
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BT_TX_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022be:	f001 fad1 	bl	8003864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BT_RX_Pin;
 80022c2:	2308      	movs	r3, #8
 80022c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022d2:	2307      	movs	r3, #7
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BT_RX_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e0:	f001 fac0 	bl	8003864 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80022e4:	4b79      	ldr	r3, [pc, #484]	; (80024cc <HAL_UART_MspInit+0x280>)
 80022e6:	4a7a      	ldr	r2, [pc, #488]	; (80024d0 <HAL_UART_MspInit+0x284>)
 80022e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ea:	4b78      	ldr	r3, [pc, #480]	; (80024cc <HAL_UART_MspInit+0x280>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f0:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_UART_MspInit+0x280>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022f6:	4b75      	ldr	r3, [pc, #468]	; (80024cc <HAL_UART_MspInit+0x280>)
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022fc:	4b73      	ldr	r3, [pc, #460]	; (80024cc <HAL_UART_MspInit+0x280>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002302:	4b72      	ldr	r3, [pc, #456]	; (80024cc <HAL_UART_MspInit+0x280>)
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002308:	4b70      	ldr	r3, [pc, #448]	; (80024cc <HAL_UART_MspInit+0x280>)
 800230a:	2220      	movs	r2, #32
 800230c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800230e:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <HAL_UART_MspInit+0x280>)
 8002310:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002314:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002316:	486d      	ldr	r0, [pc, #436]	; (80024cc <HAL_UART_MspInit+0x280>)
 8002318:	f001 f8b3 	bl	8003482 <HAL_DMA_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8002322:	f7ff fb2d 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a68      	ldr	r2, [pc, #416]	; (80024cc <HAL_UART_MspInit+0x280>)
 800232a:	66da      	str	r2, [r3, #108]	; 0x6c
 800232c:	4a67      	ldr	r2, [pc, #412]	; (80024cc <HAL_UART_MspInit+0x280>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002332:	4b68      	ldr	r3, [pc, #416]	; (80024d4 <HAL_UART_MspInit+0x288>)
 8002334:	4a68      	ldr	r2, [pc, #416]	; (80024d8 <HAL_UART_MspInit+0x28c>)
 8002336:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002338:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <HAL_UART_MspInit+0x288>)
 800233a:	2210      	movs	r2, #16
 800233c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800233e:	4b65      	ldr	r3, [pc, #404]	; (80024d4 <HAL_UART_MspInit+0x288>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002344:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <HAL_UART_MspInit+0x288>)
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800234a:	4b62      	ldr	r3, [pc, #392]	; (80024d4 <HAL_UART_MspInit+0x288>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002350:	4b60      	ldr	r3, [pc, #384]	; (80024d4 <HAL_UART_MspInit+0x288>)
 8002352:	2200      	movs	r2, #0
 8002354:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002356:	4b5f      	ldr	r3, [pc, #380]	; (80024d4 <HAL_UART_MspInit+0x288>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800235c:	4b5d      	ldr	r3, [pc, #372]	; (80024d4 <HAL_UART_MspInit+0x288>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002362:	485c      	ldr	r0, [pc, #368]	; (80024d4 <HAL_UART_MspInit+0x288>)
 8002364:	f001 f88d 	bl	8003482 <HAL_DMA_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 800236e:	f7ff fb07 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a57      	ldr	r2, [pc, #348]	; (80024d4 <HAL_UART_MspInit+0x288>)
 8002376:	669a      	str	r2, [r3, #104]	; 0x68
 8002378:	4a56      	ldr	r2, [pc, #344]	; (80024d4 <HAL_UART_MspInit+0x288>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 6);
 800237e:	2206      	movs	r2, #6
 8002380:	2100      	movs	r1, #0
 8002382:	2026      	movs	r0, #38	; 0x26
 8002384:	f001 f847 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002388:	2026      	movs	r0, #38	; 0x26
 800238a:	f001 f860 	bl	800344e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800238e:	e095      	b.n	80024bc <HAL_UART_MspInit+0x270>
  else if(huart->Instance==USART3)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a51      	ldr	r2, [pc, #324]	; (80024dc <HAL_UART_MspInit+0x290>)
 8002396:	4293      	cmp	r3, r2
 8002398:	f040 8090 	bne.w	80024bc <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART3_CLK_ENABLE();
 800239c:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	4a49      	ldr	r2, [pc, #292]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 80023a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a6:	61d3      	str	r3, [r2, #28]
 80023a8:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b4:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	4a43      	ldr	r2, [pc, #268]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 80023ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023be:	6153      	str	r3, [r2, #20]
 80023c0:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_UART_MspInit+0x27c>)
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PC_TX_Pin;
 80023cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023da:	2301      	movs	r3, #1
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023de:	2307      	movs	r3, #7
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PC_TX_GPIO_Port, &GPIO_InitStruct);
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	4619      	mov	r1, r3
 80023e8:	483d      	ldr	r0, [pc, #244]	; (80024e0 <HAL_UART_MspInit+0x294>)
 80023ea:	f001 fa3b 	bl	8003864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PC_RX_Pin;
 80023ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f8:	2301      	movs	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002400:	2307      	movs	r3, #7
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PC_RX_GPIO_Port, &GPIO_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	4835      	ldr	r0, [pc, #212]	; (80024e0 <HAL_UART_MspInit+0x294>)
 800240c:	f001 fa2a 	bl	8003864 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002410:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <HAL_UART_MspInit+0x298>)
 8002412:	4a35      	ldr	r2, [pc, #212]	; (80024e8 <HAL_UART_MspInit+0x29c>)
 8002414:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002416:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <HAL_UART_MspInit+0x298>)
 8002418:	2200      	movs	r2, #0
 800241a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241c:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <HAL_UART_MspInit+0x298>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002422:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <HAL_UART_MspInit+0x298>)
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002428:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <HAL_UART_MspInit+0x298>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_UART_MspInit+0x298>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002434:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <HAL_UART_MspInit+0x298>)
 8002436:	2220      	movs	r2, #32
 8002438:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_UART_MspInit+0x298>)
 800243c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002440:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002442:	4828      	ldr	r0, [pc, #160]	; (80024e4 <HAL_UART_MspInit+0x298>)
 8002444:	f001 f81d 	bl	8003482 <HAL_DMA_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_UART_MspInit+0x206>
      Error_Handler();
 800244e:	f7ff fa97 	bl	8001980 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a23      	ldr	r2, [pc, #140]	; (80024e4 <HAL_UART_MspInit+0x298>)
 8002456:	66da      	str	r2, [r3, #108]	; 0x6c
 8002458:	4a22      	ldr	r2, [pc, #136]	; (80024e4 <HAL_UART_MspInit+0x298>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800245e:	4b23      	ldr	r3, [pc, #140]	; (80024ec <HAL_UART_MspInit+0x2a0>)
 8002460:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <HAL_UART_MspInit+0x2a4>)
 8002462:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002464:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_UART_MspInit+0x2a0>)
 8002466:	2210      	movs	r2, #16
 8002468:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_UART_MspInit+0x2a0>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002470:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <HAL_UART_MspInit+0x2a0>)
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_UART_MspInit+0x2a0>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_UART_MspInit+0x2a0>)
 800247e:	2200      	movs	r2, #0
 8002480:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_UART_MspInit+0x2a0>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002488:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_UART_MspInit+0x2a0>)
 800248a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800248e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002490:	4816      	ldr	r0, [pc, #88]	; (80024ec <HAL_UART_MspInit+0x2a0>)
 8002492:	f000 fff6 	bl	8003482 <HAL_DMA_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_MspInit+0x254>
      Error_Handler();
 800249c:	f7ff fa70 	bl	8001980 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <HAL_UART_MspInit+0x2a0>)
 80024a4:	669a      	str	r2, [r3, #104]	; 0x68
 80024a6:	4a11      	ldr	r2, [pc, #68]	; (80024ec <HAL_UART_MspInit+0x2a0>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 6);
 80024ac:	2206      	movs	r2, #6
 80024ae:	2100      	movs	r1, #0
 80024b0:	2027      	movs	r0, #39	; 0x27
 80024b2:	f000 ffb0 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024b6:	2027      	movs	r0, #39	; 0x27
 80024b8:	f000 ffc9 	bl	800344e <HAL_NVIC_EnableIRQ>
}
 80024bc:	bf00      	nop
 80024be:	3730      	adds	r7, #48	; 0x30
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40004400 	.word	0x40004400
 80024c8:	40021000 	.word	0x40021000
 80024cc:	200003fc 	.word	0x200003fc
 80024d0:	4002006c 	.word	0x4002006c
 80024d4:	20000440 	.word	0x20000440
 80024d8:	40020080 	.word	0x40020080
 80024dc:	40004800 	.word	0x40004800
 80024e0:	48000800 	.word	0x48000800
 80024e4:	20000484 	.word	0x20000484
 80024e8:	40020030 	.word	0x40020030
 80024ec:	200004c8 	.word	0x200004c8
 80024f0:	4002001c 	.word	0x4002001c

080024f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <HardFault_Handler+0x4>

08002508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <MemManage_Handler+0x4>

0800250e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002512:	e7fe      	b.n	8002512 <BusFault_Handler+0x4>

08002514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <UsageFault_Handler+0x4>

0800251a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002548:	f000 f924 	bl	8002794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}

08002550 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002554:	2010      	movs	r0, #16
 8002556:	f001 fb27 	bl	8003ba8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <DMA1_Channel2_IRQHandler+0x10>)
 8002566:	f001 f870 	bl	800364a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200004c8 	.word	0x200004c8

08002574 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <DMA1_Channel3_IRQHandler+0x10>)
 800257a:	f001 f866 	bl	800364a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000484 	.word	0x20000484

08002588 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800258c:	4802      	ldr	r0, [pc, #8]	; (8002598 <DMA1_Channel6_IRQHandler+0x10>)
 800258e:	f001 f85c 	bl	800364a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200003fc 	.word	0x200003fc

0800259c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <DMA1_Channel7_IRQHandler+0x10>)
 80025a2:	f001 f852 	bl	800364a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000440 	.word	0x20000440

080025b0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <SPI2_IRQHandler+0x10>)
 80025b6:	f002 ffb1 	bl	800551c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000298 	.word	0x20000298

080025c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <USART2_IRQHandler+0x10>)
 80025ca:	f003 f999 	bl	8005900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200002fc 	.word	0x200002fc

080025d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <USART3_IRQHandler+0x10>)
 80025de:	f003 f98f 	bl	8005900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2000037c 	.word	0x2000037c

080025ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
	return 1;
 80025f0:	2301      	movs	r3, #1
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_kill>:

int _kill(int pid, int sig)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002606:	f003 ff6f 	bl	80064e8 <__errno>
 800260a:	4602      	mov	r2, r0
 800260c:	2316      	movs	r3, #22
 800260e:	6013      	str	r3, [r2, #0]
	return -1;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <_exit>:

void _exit (int status)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002624:	f04f 31ff 	mov.w	r1, #4294967295
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ffe7 	bl	80025fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800262e:	e7fe      	b.n	800262e <_exit+0x12>

08002630 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <_sbrk+0x50>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <_sbrk+0x16>
		heap_end = &end;
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <_sbrk+0x50>)
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <_sbrk+0x54>)
 8002644:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <_sbrk+0x50>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <_sbrk+0x50>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	466a      	mov	r2, sp
 8002656:	4293      	cmp	r3, r2
 8002658:	d907      	bls.n	800266a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800265a:	f003 ff45 	bl	80064e8 <__errno>
 800265e:	4602      	mov	r2, r0
 8002660:	230c      	movs	r3, #12
 8002662:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
 8002668:	e006      	b.n	8002678 <_sbrk+0x48>
	}

	heap_end += incr;
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <_sbrk+0x50>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	4a03      	ldr	r2, [pc, #12]	; (8002680 <_sbrk+0x50>)
 8002674:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000510 	.word	0x20000510
 8002684:	20000528 	.word	0x20000528

08002688 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <SystemInit+0x28>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <SystemInit+0x28>)
 8002694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <SystemInit+0x28>)
 800269e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026a2:	609a      	str	r2, [r3, #8]
#endif
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80026b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80026ba:	e003      	b.n	80026c4 <LoopCopyDataInit>

080026bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80026be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80026c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80026c2:	3104      	adds	r1, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80026c4:	480b      	ldr	r0, [pc, #44]	; (80026f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80026c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80026ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80026cc:	d3f6      	bcc.n	80026bc <CopyDataInit>
	ldr	r2, =_sbss
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80026d0:	e002      	b.n	80026d8 <LoopFillZerobss>

080026d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80026d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80026d4:	f842 3b04 	str.w	r3, [r2], #4

080026d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <LoopForever+0x16>)
	cmp	r2, r3
 80026da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026dc:	d3f9      	bcc.n	80026d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026de:	f7ff ffd3 	bl	8002688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f003 ff07 	bl	80064f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026e6:	f7fe fe91 	bl	800140c <main>

080026ea <LoopForever>:

LoopForever:
    b LoopForever
 80026ea:	e7fe      	b.n	80026ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026ec:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80026f0:	08008dc8 	.word	0x08008dc8
	ldr	r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026f8:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80026fc:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002700:	20000528 	.word	0x20000528

08002704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC1_2_IRQHandler>
	...

08002708 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_Init+0x28>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_Init+0x28>)
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002718:	2003      	movs	r0, #3
 800271a:	f000 fe71 	bl	8003400 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800271e:	2000      	movs	r0, #0
 8002720:	f000 f808 	bl	8002734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002724:	f7ff fc86 	bl	8002034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40022000 	.word	0x40022000

08002734 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_InitTick+0x54>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_InitTick+0x58>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274a:	fbb3 f3f1 	udiv	r3, r3, r1
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fe89 	bl	800346a <HAL_SYSTICK_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00e      	b.n	8002780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d80a      	bhi.n	800277e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002768:	2200      	movs	r2, #0
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f000 fe51 	bl	8003416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002774:	4a06      	ldr	r2, [pc, #24]	; (8002790 <HAL_InitTick+0x5c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000000 	.word	0x20000000
 800278c:	20000008 	.word	0x20000008
 8002790:	20000004 	.word	0x20000004

08002794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_IncTick+0x20>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x24>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_IncTick+0x24>)
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000008 	.word	0x20000008
 80027b8:	20000520 	.word	0x20000520

080027bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;  
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_GetTick+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000520 	.word	0x20000520

080027d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b09a      	sub	sp, #104	; 0x68
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e1e3      	b.n	8002bbc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d176      	bne.n	80028f4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d152      	bne.n	80028b4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fc27 	bl	800207c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d13b      	bne.n	80028b4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fcaf 	bl	80031a0 <ADC_Disable>
 8002842:	4603      	mov	r3, r0
 8002844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	d12f      	bne.n	80028b4 <HAL_ADC_Init+0xe0>
 8002854:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002858:	2b00      	cmp	r3, #0
 800285a:	d12b      	bne.n	80028b4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002864:	f023 0302 	bic.w	r3, r3, #2
 8002868:	f043 0202 	orr.w	r2, r3, #2
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800287e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800288e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002890:	4b92      	ldr	r3, [pc, #584]	; (8002adc <HAL_ADC_Init+0x308>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a92      	ldr	r2, [pc, #584]	; (8002ae0 <HAL_ADC_Init+0x30c>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0c9a      	lsrs	r2, r3, #18
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028a6:	e002      	b.n	80028ae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f9      	bne.n	80028a8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d0:	d110      	bne.n	80028f4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f023 0312 	bic.w	r3, r3, #18
 80028da:	f043 0210 	orr.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f040 8150 	bne.w	8002ba2 <HAL_ADC_Init+0x3ce>
 8002902:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 814b 	bne.w	8002ba2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 8143 	bne.w	8002ba2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002924:	f043 0202 	orr.w	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002934:	d004      	beq.n	8002940 <HAL_ADC_Init+0x16c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6a      	ldr	r2, [pc, #424]	; (8002ae4 <HAL_ADC_Init+0x310>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_ADC_Init+0x170>
 8002940:	4b69      	ldr	r3, [pc, #420]	; (8002ae8 <HAL_ADC_Init+0x314>)
 8002942:	e000      	b.n	8002946 <HAL_ADC_Init+0x172>
 8002944:	4b69      	ldr	r3, [pc, #420]	; (8002aec <HAL_ADC_Init+0x318>)
 8002946:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002950:	d102      	bne.n	8002958 <HAL_ADC_Init+0x184>
 8002952:	4b64      	ldr	r3, [pc, #400]	; (8002ae4 <HAL_ADC_Init+0x310>)
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e01a      	b.n	800298e <HAL_ADC_Init+0x1ba>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a61      	ldr	r2, [pc, #388]	; (8002ae4 <HAL_ADC_Init+0x310>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d103      	bne.n	800296a <HAL_ADC_Init+0x196>
 8002962:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e011      	b.n	800298e <HAL_ADC_Init+0x1ba>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a60      	ldr	r2, [pc, #384]	; (8002af0 <HAL_ADC_Init+0x31c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d102      	bne.n	800297a <HAL_ADC_Init+0x1a6>
 8002974:	4b5f      	ldr	r3, [pc, #380]	; (8002af4 <HAL_ADC_Init+0x320>)
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e009      	b.n	800298e <HAL_ADC_Init+0x1ba>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5d      	ldr	r2, [pc, #372]	; (8002af4 <HAL_ADC_Init+0x320>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d102      	bne.n	800298a <HAL_ADC_Init+0x1b6>
 8002984:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <HAL_ADC_Init+0x31c>)
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	e001      	b.n	800298e <HAL_ADC_Init+0x1ba>
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d108      	bne.n	80029ae <HAL_ADC_Init+0x1da>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_Init+0x1da>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_ADC_Init+0x1dc>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d11c      	bne.n	80029ee <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029b4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d010      	beq.n	80029dc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <HAL_ADC_Init+0x202>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_Init+0x202>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_ADC_Init+0x204>
 80029d6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d108      	bne.n	80029ee <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80029dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	7e5b      	ldrb	r3, [r3, #25]
 80029f2:	035b      	lsls	r3, r3, #13
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029f8:	2a01      	cmp	r2, #1
 80029fa:	d002      	beq.n	8002a02 <HAL_ADC_Init+0x22e>
 80029fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a00:	e000      	b.n	8002a04 <HAL_ADC_Init+0x230>
 8002a02:	2200      	movs	r2, #0
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a14:	4313      	orrs	r3, r2
 8002a16:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d11b      	bne.n	8002a5a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7e5b      	ldrb	r3, [r3, #25]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	045a      	lsls	r2, r3, #17
 8002a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a3c:	e00d      	b.n	8002a5a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d054      	beq.n	8002b0c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_ADC_Init+0x31c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d004      	beq.n	8002a76 <HAL_ADC_Init+0x2a2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <HAL_ADC_Init+0x320>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d140      	bne.n	8002af8 <HAL_ADC_Init+0x324>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002a7e:	d02a      	beq.n	8002ad6 <HAL_ADC_Init+0x302>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a88:	d022      	beq.n	8002ad0 <HAL_ADC_Init+0x2fc>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002a92:	d01a      	beq.n	8002aca <HAL_ADC_Init+0x2f6>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002a9c:	d012      	beq.n	8002ac4 <HAL_ADC_Init+0x2f0>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002aa6:	d00a      	beq.n	8002abe <HAL_ADC_Init+0x2ea>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_ADC_Init+0x2e4>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	e023      	b.n	8002b00 <HAL_ADC_Init+0x32c>
 8002ab8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002abc:	e020      	b.n	8002b00 <HAL_ADC_Init+0x32c>
 8002abe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ac2:	e01d      	b.n	8002b00 <HAL_ADC_Init+0x32c>
 8002ac4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002ac8:	e01a      	b.n	8002b00 <HAL_ADC_Init+0x32c>
 8002aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ace:	e017      	b.n	8002b00 <HAL_ADC_Init+0x32c>
 8002ad0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002ad4:	e014      	b.n	8002b00 <HAL_ADC_Init+0x32c>
 8002ad6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002ada:	e011      	b.n	8002b00 <HAL_ADC_Init+0x32c>
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	431bde83 	.word	0x431bde83
 8002ae4:	50000100 	.word	0x50000100
 8002ae8:	50000300 	.word	0x50000300
 8002aec:	50000700 	.word	0x50000700
 8002af0:	50000400 	.word	0x50000400
 8002af4:	50000500 	.word	0x50000500
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b04:	4313      	orrs	r3, r2
 8002b06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d114      	bne.n	8002b44 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b28:	f023 0302 	bic.w	r3, r3, #2
 8002b2c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7e1b      	ldrb	r3, [r3, #24]
 8002b32:	039a      	lsls	r2, r3, #14
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b40:	4313      	orrs	r3, r2
 8002b42:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_ADC_Init+0x3f0>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002b54:	430b      	orrs	r3, r1
 8002b56:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10c      	bne.n	8002b7a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f023 010f 	bic.w	r1, r3, #15
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	1e5a      	subs	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
 8002b78:	e007      	b.n	8002b8a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 020f 	bic.w	r2, r2, #15
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f023 0303 	bic.w	r3, r3, #3
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba0:	e00a      	b.n	8002bb8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f023 0312 	bic.w	r3, r3, #18
 8002baa:	f043 0210 	orr.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002bb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3768      	adds	r7, #104	; 0x68
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	fff0c007 	.word	0xfff0c007

08002bc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b09b      	sub	sp, #108	; 0x6c
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x22>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e2cb      	b.n	8003182 <HAL_ADC_ConfigChannel+0x5ba>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 82af 	bne.w	8003160 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d81c      	bhi.n	8002c44 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	231f      	movs	r3, #31
 8002c20:	4093      	lsls	r3, r2
 8002c22:	43db      	mvns	r3, r3
 8002c24:	4019      	ands	r1, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
 8002c42:	e063      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b09      	cmp	r3, #9
 8002c4a:	d81e      	bhi.n	8002c8a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	3b1e      	subs	r3, #30
 8002c60:	221f      	movs	r2, #31
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	4019      	ands	r1, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	3b1e      	subs	r3, #30
 8002c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	635a      	str	r2, [r3, #52]	; 0x34
 8002c88:	e040      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b0e      	cmp	r3, #14
 8002c90:	d81e      	bhi.n	8002cd0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	3b3c      	subs	r3, #60	; 0x3c
 8002ca6:	221f      	movs	r2, #31
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	4019      	ands	r1, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	3b3c      	subs	r3, #60	; 0x3c
 8002cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8002cce:	e01d      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	3b5a      	subs	r3, #90	; 0x5a
 8002ce4:	221f      	movs	r2, #31
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	4019      	ands	r1, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	3b5a      	subs	r3, #90	; 0x5a
 8002d00:	fa00 f203 	lsl.w	r2, r0, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 80e5 	bne.w	8002ee6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b09      	cmp	r3, #9
 8002d22:	d91c      	bls.n	8002d5e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6999      	ldr	r1, [r3, #24]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	3b1e      	subs	r3, #30
 8002d36:	2207      	movs	r2, #7
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	4019      	ands	r1, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6898      	ldr	r0, [r3, #8]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b1e      	subs	r3, #30
 8002d50:	fa00 f203 	lsl.w	r2, r0, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	619a      	str	r2, [r3, #24]
 8002d5c:	e019      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6959      	ldr	r1, [r3, #20]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	2207      	movs	r2, #7
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	4019      	ands	r1, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6898      	ldr	r0, [r3, #8]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	08db      	lsrs	r3, r3, #3
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d84f      	bhi.n	8002e54 <HAL_ADC_ConfigChannel+0x28c>
 8002db4:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <HAL_ADC_ConfigChannel+0x1f4>)
 8002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dba:	bf00      	nop
 8002dbc:	08002dcd 	.word	0x08002dcd
 8002dc0:	08002def 	.word	0x08002def
 8002dc4:	08002e11 	.word	0x08002e11
 8002dc8:	08002e33 	.word	0x08002e33
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dd2:	4b9f      	ldr	r3, [pc, #636]	; (8003050 <HAL_ADC_ConfigChannel+0x488>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	0691      	lsls	r1, r2, #26
 8002ddc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dde:	430a      	orrs	r2, r1
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002dea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002dec:	e07e      	b.n	8002eec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002df4:	4b96      	ldr	r3, [pc, #600]	; (8003050 <HAL_ADC_ConfigChannel+0x488>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	0691      	lsls	r1, r2, #26
 8002dfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e00:	430a      	orrs	r2, r1
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e0c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e0e:	e06d      	b.n	8002eec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e16:	4b8e      	ldr	r3, [pc, #568]	; (8003050 <HAL_ADC_ConfigChannel+0x488>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	0691      	lsls	r1, r2, #26
 8002e20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e22:	430a      	orrs	r2, r1
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e2e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e30:	e05c      	b.n	8002eec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e38:	4b85      	ldr	r3, [pc, #532]	; (8003050 <HAL_ADC_ConfigChannel+0x488>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	0691      	lsls	r1, r2, #26
 8002e42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e44:	430a      	orrs	r2, r1
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e50:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e52:	e04b      	b.n	8002eec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	069b      	lsls	r3, r3, #26
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d107      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e76:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	069b      	lsls	r3, r3, #26
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d107      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e9a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	069b      	lsls	r3, r3, #26
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d107      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ebe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	069b      	lsls	r3, r3, #26
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d10a      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ee2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002ee4:	e001      	b.n	8002eea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <HAL_ADC_ConfigChannel+0x324>
      break;
 8002eea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d108      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x344>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x344>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x346>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 8131 	bne.w	8003176 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d00f      	beq.n	8002f3c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	400a      	ands	r2, r1
 8002f36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002f3a:	e049      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b09      	cmp	r3, #9
 8002f5c:	d91c      	bls.n	8002f98 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6999      	ldr	r1, [r3, #24]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3b1b      	subs	r3, #27
 8002f70:	2207      	movs	r2, #7
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	4019      	ands	r1, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6898      	ldr	r0, [r3, #8]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	3b1b      	subs	r3, #27
 8002f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	619a      	str	r2, [r3, #24]
 8002f96:	e01b      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6959      	ldr	r1, [r3, #20]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	2207      	movs	r2, #7
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	4019      	ands	r1, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	6898      	ldr	r0, [r3, #8]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd8:	d004      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0x41c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_ADC_ConfigChannel+0x48c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x420>
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_ADC_ConfigChannel+0x490>)
 8002fe6:	e000      	b.n	8002fea <HAL_ADC_ConfigChannel+0x422>
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_ADC_ConfigChannel+0x494>)
 8002fea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d105      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003004:	2b11      	cmp	r3, #17
 8003006:	d105      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00b      	beq.n	800302c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003018:	2b12      	cmp	r3, #18
 800301a:	f040 80ac 	bne.w	8003176 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800301e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003026:	2b00      	cmp	r3, #0
 8003028:	f040 80a5 	bne.w	8003176 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003034:	d102      	bne.n	800303c <HAL_ADC_ConfigChannel+0x474>
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <HAL_ADC_ConfigChannel+0x48c>)
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	e023      	b.n	8003084 <HAL_ADC_ConfigChannel+0x4bc>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_ADC_ConfigChannel+0x48c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10c      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x498>
 8003046:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e01a      	b.n	8003084 <HAL_ADC_ConfigChannel+0x4bc>
 800304e:	bf00      	nop
 8003050:	83fff000 	.word	0x83fff000
 8003054:	50000100 	.word	0x50000100
 8003058:	50000300 	.word	0x50000300
 800305c:	50000700 	.word	0x50000700
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a4a      	ldr	r2, [pc, #296]	; (8003190 <HAL_ADC_ConfigChannel+0x5c8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d102      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x4a8>
 800306a:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <HAL_ADC_ConfigChannel+0x5cc>)
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e009      	b.n	8003084 <HAL_ADC_ConfigChannel+0x4bc>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a47      	ldr	r2, [pc, #284]	; (8003194 <HAL_ADC_ConfigChannel+0x5cc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d102      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x4b8>
 800307a:	4b45      	ldr	r3, [pc, #276]	; (8003190 <HAL_ADC_ConfigChannel+0x5c8>)
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	e001      	b.n	8003084 <HAL_ADC_ConfigChannel+0x4bc>
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d108      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x4dc>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x4dc>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x4de>
 80030a4:	2300      	movs	r3, #0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d150      	bne.n	800314c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80030aa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d010      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d107      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x504>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x504>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_ADC_ConfigChannel+0x506>
 80030cc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d13c      	bne.n	800314c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b10      	cmp	r3, #16
 80030d8:	d11d      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x54e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e2:	d118      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80030e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ee:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030f0:	4b29      	ldr	r3, [pc, #164]	; (8003198 <HAL_ADC_ConfigChannel+0x5d0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a29      	ldr	r2, [pc, #164]	; (800319c <HAL_ADC_ConfigChannel+0x5d4>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	0c9a      	lsrs	r2, r3, #18
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003106:	e002      	b.n	800310e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	3b01      	subs	r3, #1
 800310c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f9      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003114:	e02e      	b.n	8003174 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b11      	cmp	r3, #17
 800311c:	d10b      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x56e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003126:	d106      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003132:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003134:	e01e      	b.n	8003174 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b12      	cmp	r3, #18
 800313c:	d11a      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800313e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003148:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800314a:	e013      	b.n	8003174 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f043 0220 	orr.w	r2, r3, #32
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800315e:	e00a      	b.n	8003176 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003172:	e000      	b.n	8003176 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003174:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800317e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003182:	4618      	mov	r0, r3
 8003184:	376c      	adds	r7, #108	; 0x6c
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	50000400 	.word	0x50000400
 8003194:	50000500 	.word	0x50000500
 8003198:	20000000 	.word	0x20000000
 800319c:	431bde83 	.word	0x431bde83

080031a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d108      	bne.n	80031cc <ADC_Disable+0x2c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <ADC_Disable+0x2c>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <ADC_Disable+0x2e>
 80031cc:	2300      	movs	r3, #0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d040      	beq.n	8003254 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030d 	and.w	r3, r3, #13
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10f      	bne.n	8003200 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0202 	orr.w	r2, r2, #2
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2203      	movs	r2, #3
 80031f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80031f8:	f7ff fae0 	bl	80027bc <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031fe:	e022      	b.n	8003246 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f043 0210 	orr.w	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	f043 0201 	orr.w	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e01c      	b.n	8003256 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800321c:	f7ff face 	bl	80027bc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d90d      	bls.n	8003246 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f043 0210 	orr.w	r2, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f043 0201 	orr.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e007      	b.n	8003256 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d0e3      	beq.n	800321c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800328c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003292:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	60d3      	str	r3, [r2, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0307 	and.w	r3, r3, #7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	db0b      	blt.n	80032ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4907      	ldr	r1, [pc, #28]	; (80032fc <__NVIC_EnableIRQ+0x38>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2001      	movs	r0, #1
 80032e6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000e100 	.word	0xe000e100

08003300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	2b00      	cmp	r3, #0
 8003312:	db0a      	blt.n	800332a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	490c      	ldr	r1, [pc, #48]	; (800334c <__NVIC_SetPriority+0x4c>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	440b      	add	r3, r1
 8003324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003328:	e00a      	b.n	8003340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4908      	ldr	r1, [pc, #32]	; (8003350 <__NVIC_SetPriority+0x50>)
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	3b04      	subs	r3, #4
 8003338:	0112      	lsls	r2, r2, #4
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	440b      	add	r3, r1
 800333e:	761a      	strb	r2, [r3, #24]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000e100 	.word	0xe000e100
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f1c3 0307 	rsb	r3, r3, #7
 800336e:	2b04      	cmp	r3, #4
 8003370:	bf28      	it	cs
 8003372:	2304      	movcs	r3, #4
 8003374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3304      	adds	r3, #4
 800337a:	2b06      	cmp	r3, #6
 800337c:	d902      	bls.n	8003384 <NVIC_EncodePriority+0x30>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3b03      	subs	r3, #3
 8003382:	e000      	b.n	8003386 <NVIC_EncodePriority+0x32>
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	f04f 32ff 	mov.w	r2, #4294967295
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	401a      	ands	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800339c:	f04f 31ff 	mov.w	r1, #4294967295
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	43d9      	mvns	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	4313      	orrs	r3, r2
         );
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033cc:	d301      	bcc.n	80033d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00f      	b.n	80033f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <SysTick_Config+0x40>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033da:	210f      	movs	r1, #15
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	f7ff ff8e 	bl	8003300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <SysTick_Config+0x40>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <SysTick_Config+0x40>)
 80033ec:	2207      	movs	r2, #7
 80033ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000e010 	.word	0xe000e010

08003400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff29 	bl	8003260 <__NVIC_SetPriorityGrouping>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003428:	f7ff ff3e 	bl	80032a8 <__NVIC_GetPriorityGrouping>
 800342c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f7ff ff8e 	bl	8003354 <NVIC_EncodePriority>
 8003438:	4602      	mov	r2, r0
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff5d 	bl	8003300 <__NVIC_SetPriority>
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff31 	bl	80032c4 <__NVIC_EnableIRQ>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffa2 	bl	80033bc <SysTick_Config>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e037      	b.n	8003508 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80034ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80034b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f97e 	bl	80037ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}  
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_DMA_Start_IT+0x20>
 800352c:	2302      	movs	r3, #2
 800352e:	e04a      	b.n	80035c6 <HAL_DMA_Start_IT+0xb6>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800353e:	2b01      	cmp	r3, #1
 8003540:	d13a      	bne.n	80035b8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f912 	bl	8003790 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 020e 	orr.w	r2, r2, #14
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e00f      	b.n	80035a6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 020a 	orr.w	r2, r2, #10
 8003594:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0204 	bic.w	r2, r2, #4
 80035a4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e005      	b.n	80035c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
 80035c2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d005      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2204      	movs	r2, #4
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	e027      	b.n	8003640 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 020e 	bic.w	r2, r2, #14
 80035fe:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f202 	lsl.w	r2, r1, r2
 800361e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
    } 
  }
  return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2204      	movs	r2, #4
 8003668:	409a      	lsls	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d024      	beq.n	80036bc <HAL_DMA_IRQHandler+0x72>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01f      	beq.n	80036bc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0204 	bic.w	r2, r2, #4
 8003698:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	2104      	movs	r1, #4
 80036a4:	fa01 f202 	lsl.w	r2, r1, r2
 80036a8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d06a      	beq.n	8003788 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80036ba:	e065      	b.n	8003788 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	2202      	movs	r2, #2
 80036c2:	409a      	lsls	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d02c      	beq.n	8003726 <HAL_DMA_IRQHandler+0xdc>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d027      	beq.n	8003726 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10b      	bne.n	80036fc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 020a 	bic.w	r2, r2, #10
 80036f2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	2102      	movs	r1, #2
 8003706:	fa01 f202 	lsl.w	r2, r1, r2
 800370a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d035      	beq.n	8003788 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003724:	e030      	b.n	8003788 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2208      	movs	r2, #8
 800372c:	409a      	lsls	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d028      	beq.n	8003788 <HAL_DMA_IRQHandler+0x13e>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d023      	beq.n	8003788 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 020e 	bic.w	r2, r2, #14
 800374e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
    }
  }
}  
 8003786:	e7ff      	b.n	8003788 <HAL_DMA_IRQHandler+0x13e>
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	2101      	movs	r1, #1
 80037a8:	fa01 f202 	lsl.w	r2, r1, r2
 80037ac:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d108      	bne.n	80037d0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037ce:	e007      	b.n	80037e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <DMA_CalcBaseAndBitshift+0x60>)
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d80f      	bhi.n	8003820 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <DMA_CalcBaseAndBitshift+0x64>)
 8003808:	4413      	add	r3, r2
 800380a:	4a12      	ldr	r2, [pc, #72]	; (8003854 <DMA_CalcBaseAndBitshift+0x68>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	009a      	lsls	r2, r3, #2
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a0f      	ldr	r2, [pc, #60]	; (8003858 <DMA_CalcBaseAndBitshift+0x6c>)
 800381c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800381e:	e00e      	b.n	800383e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <DMA_CalcBaseAndBitshift+0x70>)
 8003828:	4413      	add	r3, r2
 800382a:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <DMA_CalcBaseAndBitshift+0x68>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	009a      	lsls	r2, r3, #2
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a09      	ldr	r2, [pc, #36]	; (8003860 <DMA_CalcBaseAndBitshift+0x74>)
 800383c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40020407 	.word	0x40020407
 8003850:	bffdfff8 	.word	0xbffdfff8
 8003854:	cccccccd 	.word	0xcccccccd
 8003858:	40020000 	.word	0x40020000
 800385c:	bffdfbf8 	.word	0xbffdfbf8
 8003860:	40020400 	.word	0x40020400

08003864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003872:	e160      	b.n	8003b36 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2101      	movs	r1, #1
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	4013      	ands	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8152 	beq.w	8003b30 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x38>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b12      	cmp	r3, #18
 800389a:	d123      	bne.n	80038e4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	08da      	lsrs	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3208      	adds	r2, #8
 80038a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	220f      	movs	r2, #15
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4013      	ands	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	08da      	lsrs	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3208      	adds	r2, #8
 80038de:	6939      	ldr	r1, [r7, #16]
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d00b      	beq.n	8003938 <HAL_GPIO_Init+0xd4>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d007      	beq.n	8003938 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800392c:	2b11      	cmp	r3, #17
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b12      	cmp	r3, #18
 8003936:	d130      	bne.n	800399a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	2203      	movs	r2, #3
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800396e:	2201      	movs	r2, #1
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 0201 	and.w	r2, r3, #1
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	2203      	movs	r2, #3
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4013      	ands	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80ac 	beq.w	8003b30 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d8:	4b5e      	ldr	r3, [pc, #376]	; (8003b54 <HAL_GPIO_Init+0x2f0>)
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	4a5d      	ldr	r2, [pc, #372]	; (8003b54 <HAL_GPIO_Init+0x2f0>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6193      	str	r3, [r2, #24]
 80039e4:	4b5b      	ldr	r3, [pc, #364]	; (8003b54 <HAL_GPIO_Init+0x2f0>)
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039f0:	4a59      	ldr	r2, [pc, #356]	; (8003b58 <HAL_GPIO_Init+0x2f4>)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	3302      	adds	r3, #2
 80039f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	220f      	movs	r2, #15
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a1a:	d025      	beq.n	8003a68 <HAL_GPIO_Init+0x204>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a4f      	ldr	r2, [pc, #316]	; (8003b5c <HAL_GPIO_Init+0x2f8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d01f      	beq.n	8003a64 <HAL_GPIO_Init+0x200>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a4e      	ldr	r2, [pc, #312]	; (8003b60 <HAL_GPIO_Init+0x2fc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d019      	beq.n	8003a60 <HAL_GPIO_Init+0x1fc>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a4d      	ldr	r2, [pc, #308]	; (8003b64 <HAL_GPIO_Init+0x300>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d013      	beq.n	8003a5c <HAL_GPIO_Init+0x1f8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a4c      	ldr	r2, [pc, #304]	; (8003b68 <HAL_GPIO_Init+0x304>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00d      	beq.n	8003a58 <HAL_GPIO_Init+0x1f4>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a4b      	ldr	r2, [pc, #300]	; (8003b6c <HAL_GPIO_Init+0x308>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <HAL_GPIO_Init+0x1f0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a4a      	ldr	r2, [pc, #296]	; (8003b70 <HAL_GPIO_Init+0x30c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_GPIO_Init+0x1ec>
 8003a4c:	2306      	movs	r3, #6
 8003a4e:	e00c      	b.n	8003a6a <HAL_GPIO_Init+0x206>
 8003a50:	2307      	movs	r3, #7
 8003a52:	e00a      	b.n	8003a6a <HAL_GPIO_Init+0x206>
 8003a54:	2305      	movs	r3, #5
 8003a56:	e008      	b.n	8003a6a <HAL_GPIO_Init+0x206>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	e006      	b.n	8003a6a <HAL_GPIO_Init+0x206>
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e004      	b.n	8003a6a <HAL_GPIO_Init+0x206>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e002      	b.n	8003a6a <HAL_GPIO_Init+0x206>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_GPIO_Init+0x206>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	f002 0203 	and.w	r2, r2, #3
 8003a70:	0092      	lsls	r2, r2, #2
 8003a72:	4093      	lsls	r3, r2
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a7a:	4937      	ldr	r1, [pc, #220]	; (8003b58 <HAL_GPIO_Init+0x2f4>)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	3302      	adds	r3, #2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a88:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <HAL_GPIO_Init+0x310>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003aac:	4a31      	ldr	r2, [pc, #196]	; (8003b74 <HAL_GPIO_Init+0x310>)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ab2:	4b30      	ldr	r3, [pc, #192]	; (8003b74 <HAL_GPIO_Init+0x310>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ad6:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <HAL_GPIO_Init+0x310>)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <HAL_GPIO_Init+0x310>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <HAL_GPIO_Init+0x310>)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b06:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <HAL_GPIO_Init+0x310>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <HAL_GPIO_Init+0x310>)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	3301      	adds	r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f47f ae97 	bne.w	8003874 <HAL_GPIO_Init+0x10>
  }
}
 8003b46:	bf00      	nop
 8003b48:	371c      	adds	r7, #28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	48000400 	.word	0x48000400
 8003b60:	48000800 	.word	0x48000800
 8003b64:	48000c00 	.word	0x48000c00
 8003b68:	48001000 	.word	0x48001000
 8003b6c:	48001400 	.word	0x48001400
 8003b70:	48001800 	.word	0x48001800
 8003b74:	40010400 	.word	0x40010400

08003b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
 8003b84:	4613      	mov	r3, r2
 8003b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b88:	787b      	ldrb	r3, [r7, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d006      	beq.n	8003bcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bbe:	4a05      	ldr	r2, [pc, #20]	; (8003bd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd f8ee 	bl	8000da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40010400 	.word	0x40010400

08003bd8 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e092      	b.n	8003d14 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d101      	bne.n	8003bfe <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e08a      	b.n	8003d14 <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d101      	bne.n	8003c0e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e082      	b.n	8003d14 <HAL_OPAMP_Init+0x13c>

    /* Set OPAMP parameters */
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1a:	4b40      	ldr	r3, [pc, #256]	; (8003d1c <HAL_OPAMP_Init+0x144>)
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	4a3f      	ldr	r2, [pc, #252]	; (8003d1c <HAL_OPAMP_Init+0x144>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6193      	str	r3, [r2, #24]
 8003c26:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <HAL_OPAMP_Init+0x144>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <HAL_OPAMP_Init+0x6e>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fe fa56 	bl	80020f8 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	d003      	beq.n	8003c5c <HAL_OPAMP_Init+0x84>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b60      	cmp	r3, #96	; 0x60
 8003c5a:	d125      	bne.n	8003ca8 <HAL_OPAMP_Init+0xd0>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <HAL_OPAMP_Init+0x148>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6851      	ldr	r1, [r2, #4]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	4311      	orrs	r1, r2
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6912      	ldr	r2, [r2, #16]
 8003c74:	4311      	orrs	r1, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6992      	ldr	r2, [r2, #24]
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	69d2      	ldr	r2, [r2, #28]
 8003c80:	4311      	orrs	r1, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6a12      	ldr	r2, [r2, #32]
 8003c86:	4311      	orrs	r1, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c8c:	4311      	orrs	r1, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c92:	04d2      	lsls	r2, r2, #19
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c9a:	0612      	lsls	r2, r2, #24
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e02a      	b.n	8003cfe <HAL_OPAMP_Init+0x126>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <HAL_OPAMP_Init+0x148>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6851      	ldr	r1, [r2, #4]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6892      	ldr	r2, [r2, #8]
 8003cba:	4311      	orrs	r1, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68d2      	ldr	r2, [r2, #12]
 8003cc0:	4311      	orrs	r1, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6912      	ldr	r2, [r2, #16]
 8003cc6:	4311      	orrs	r1, r2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6952      	ldr	r2, [r2, #20]
 8003ccc:	4311      	orrs	r1, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6992      	ldr	r2, [r2, #24]
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	69d2      	ldr	r2, [r2, #28]
 8003cd8:	4311      	orrs	r1, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6a12      	ldr	r2, [r2, #32]
 8003cde:	4311      	orrs	r1, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003cea:	04d2      	lsls	r2, r2, #19
 8003cec:	4311      	orrs	r1, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cf2:	0612      	lsls	r2, r2, #24
 8003cf4:	4311      	orrs	r1, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d103      	bne.n	8003d12 <HAL_OPAMP_Init+0x13a>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	e0003811 	.word	0xe0003811

08003d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	1d3b      	adds	r3, r7, #4
 8003d2e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f000 bf01 	b.w	8004b40 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8160 	beq.w	800400e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d4e:	4bae      	ldr	r3, [pc, #696]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d00c      	beq.n	8003d74 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d5a:	4bab      	ldr	r3, [pc, #684]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d159      	bne.n	8003e1a <HAL_RCC_OscConfig+0xf6>
 8003d66:	4ba8      	ldr	r3, [pc, #672]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d72:	d152      	bne.n	8003e1a <HAL_RCC_OscConfig+0xf6>
 8003d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d78:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d88:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d102      	bne.n	8003da6 <HAL_RCC_OscConfig+0x82>
 8003da0:	4b99      	ldr	r3, [pc, #612]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	e015      	b.n	8003dd2 <HAL_RCC_OscConfig+0xae>
 8003da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003daa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dbe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003dc2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003dce:	4b8e      	ldr	r3, [pc, #568]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dd6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003dda:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003dde:	fa92 f2a2 	rbit	r2, r2
 8003de2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003de6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003dea:	fab2 f282 	clz	r2, r2
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	f042 0220 	orr.w	r2, r2, #32
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	f002 021f 	and.w	r2, r2, #31
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8102 	beq.w	800400c <HAL_RCC_OscConfig+0x2e8>
 8003e08:	1d3b      	adds	r3, r7, #4
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 80fc 	bne.w	800400c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f000 be93 	b.w	8004b40 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1a:	1d3b      	adds	r3, r7, #4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d106      	bne.n	8003e34 <HAL_RCC_OscConfig+0x110>
 8003e26:	4b78      	ldr	r3, [pc, #480]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a77      	ldr	r2, [pc, #476]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e030      	b.n	8003e96 <HAL_RCC_OscConfig+0x172>
 8003e34:	1d3b      	adds	r3, r7, #4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x134>
 8003e3e:	4b72      	ldr	r3, [pc, #456]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a71      	ldr	r2, [pc, #452]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b6f      	ldr	r3, [pc, #444]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6e      	ldr	r2, [pc, #440]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e01e      	b.n	8003e96 <HAL_RCC_OscConfig+0x172>
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e62:	d10c      	bne.n	8003e7e <HAL_RCC_OscConfig+0x15a>
 8003e64:	4b68      	ldr	r3, [pc, #416]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a67      	ldr	r2, [pc, #412]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	4b65      	ldr	r3, [pc, #404]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a64      	ldr	r2, [pc, #400]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e00b      	b.n	8003e96 <HAL_RCC_OscConfig+0x172>
 8003e7e:	4b62      	ldr	r3, [pc, #392]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a61      	ldr	r2, [pc, #388]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b5f      	ldr	r3, [pc, #380]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a5e      	ldr	r2, [pc, #376]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e94:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e96:	1d3b      	adds	r3, r7, #4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d059      	beq.n	8003f54 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fc8c 	bl	80027bc <HAL_GetTick>
 8003ea4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eaa:	f7fe fc87 	bl	80027bc <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d902      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	f000 be40 	b.w	8004b40 <HAL_RCC_OscConfig+0xe1c>
 8003ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ec4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003ed4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed8:	fab3 f383 	clz	r3, r3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d102      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x1ce>
 8003eec:	4b46      	ldr	r3, [pc, #280]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	e015      	b.n	8003f1e <HAL_RCC_OscConfig+0x1fa>
 8003ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ef6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f0a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003f0e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003f12:	fa93 f3a3 	rbit	r3, r3
 8003f16:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003f1a:	4b3b      	ldr	r3, [pc, #236]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f22:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003f26:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003f2a:	fa92 f2a2 	rbit	r2, r2
 8003f2e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003f32:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003f36:	fab2 f282 	clz	r2, r2
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	f042 0220 	orr.w	r2, r2, #32
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	f002 021f 	and.w	r2, r2, #31
 8003f46:	2101      	movs	r1, #1
 8003f48:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0ab      	beq.n	8003eaa <HAL_RCC_OscConfig+0x186>
 8003f52:	e05c      	b.n	800400e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fe fc32 	bl	80027bc <HAL_GetTick>
 8003f58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f5e:	f7fe fc2d 	bl	80027bc <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d902      	bls.n	8003f74 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	f000 bde6 	b.w	8004b40 <HAL_RCC_OscConfig+0xe1c>
 8003f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f78:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003f80:	fa93 f3a3 	rbit	r3, r3
 8003f84:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003f88:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8c:	fab3 f383 	clz	r3, r3
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x282>
 8003fa0:	4b19      	ldr	r3, [pc, #100]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCC_OscConfig+0x2ae>
 8003fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003faa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003fb2:	fa93 f3a3 	rbit	r3, r3
 8003fb6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fbe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003fc2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003fc6:	fa93 f3a3 	rbit	r3, r3
 8003fca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <HAL_RCC_OscConfig+0x2e4>)
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fd6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003fda:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003fde:	fa92 f2a2 	rbit	r2, r2
 8003fe2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003fe6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003fea:	fab2 f282 	clz	r2, r2
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	f042 0220 	orr.w	r2, r2, #32
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	f002 021f 	and.w	r2, r2, #31
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ab      	bne.n	8003f5e <HAL_RCC_OscConfig+0x23a>
 8004006:	e002      	b.n	800400e <HAL_RCC_OscConfig+0x2ea>
 8004008:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8170 	beq.w	80042fe <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800401e:	4bd0      	ldr	r3, [pc, #832]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800402a:	4bcd      	ldr	r3, [pc, #820]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b08      	cmp	r3, #8
 8004034:	d16d      	bne.n	8004112 <HAL_RCC_OscConfig+0x3ee>
 8004036:	4bca      	ldr	r3, [pc, #808]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800403e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004042:	d166      	bne.n	8004112 <HAL_RCC_OscConfig+0x3ee>
 8004044:	2302      	movs	r3, #2
 8004046:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004056:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d102      	bne.n	8004074 <HAL_RCC_OscConfig+0x350>
 800406e:	4bbc      	ldr	r3, [pc, #752]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	e013      	b.n	800409c <HAL_RCC_OscConfig+0x378>
 8004074:	2302      	movs	r3, #2
 8004076:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800407e:	fa93 f3a3 	rbit	r3, r3
 8004082:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004086:	2302      	movs	r3, #2
 8004088:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800408c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004098:	4bb1      	ldr	r3, [pc, #708]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	2202      	movs	r2, #2
 800409e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80040a2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80040a6:	fa92 f2a2 	rbit	r2, r2
 80040aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80040ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80040b2:	fab2 f282 	clz	r2, r2
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	f042 0220 	orr.w	r2, r2, #32
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	f002 021f 	and.w	r2, r2, #31
 80040c2:	2101      	movs	r1, #1
 80040c4:	fa01 f202 	lsl.w	r2, r1, r2
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <HAL_RCC_OscConfig+0x3ba>
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d002      	beq.n	80040de <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f000 bd31 	b.w	8004b40 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040de:	4ba0      	ldr	r3, [pc, #640]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e6:	1d3b      	adds	r3, r7, #4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	21f8      	movs	r1, #248	; 0xf8
 80040ee:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80040f6:	fa91 f1a1 	rbit	r1, r1
 80040fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80040fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004102:	fab1 f181 	clz	r1, r1
 8004106:	b2c9      	uxtb	r1, r1
 8004108:	408b      	lsls	r3, r1
 800410a:	4995      	ldr	r1, [pc, #596]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004110:	e0f5      	b.n	80042fe <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004112:	1d3b      	adds	r3, r7, #4
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8085 	beq.w	8004228 <HAL_RCC_OscConfig+0x504>
 800411e:	2301      	movs	r3, #1
 8004120:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004130:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800413e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	461a      	mov	r2, r3
 8004146:	2301      	movs	r3, #1
 8004148:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fe fb37 	bl	80027bc <HAL_GetTick>
 800414e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	e00a      	b.n	800416a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004154:	f7fe fb32 	bl	80027bc <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d902      	bls.n	800416a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	f000 bceb 	b.w	8004b40 <HAL_RCC_OscConfig+0xe1c>
 800416a:	2302      	movs	r3, #2
 800416c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004170:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800417c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	fab3 f383 	clz	r3, r3
 8004184:	b2db      	uxtb	r3, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d102      	bne.n	800419a <HAL_RCC_OscConfig+0x476>
 8004194:	4b72      	ldr	r3, [pc, #456]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	e013      	b.n	80041c2 <HAL_RCC_OscConfig+0x49e>
 800419a:	2302      	movs	r3, #2
 800419c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80041ac:	2302      	movs	r3, #2
 80041ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80041b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80041be:	4b68      	ldr	r3, [pc, #416]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2202      	movs	r2, #2
 80041c4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80041c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80041cc:	fa92 f2a2 	rbit	r2, r2
 80041d0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80041d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80041d8:	fab2 f282 	clz	r2, r2
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	f042 0220 	orr.w	r2, r2, #32
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	f002 021f 	and.w	r2, r2, #31
 80041e8:	2101      	movs	r1, #1
 80041ea:	fa01 f202 	lsl.w	r2, r1, r2
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0af      	beq.n	8004154 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f4:	4b5a      	ldr	r3, [pc, #360]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	21f8      	movs	r1, #248	; 0xf8
 8004204:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800420c:	fa91 f1a1 	rbit	r1, r1
 8004210:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004214:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004218:	fab1 f181 	clz	r1, r1
 800421c:	b2c9      	uxtb	r1, r1
 800421e:	408b      	lsls	r3, r1
 8004220:	494f      	ldr	r1, [pc, #316]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]
 8004226:	e06a      	b.n	80042fe <HAL_RCC_OscConfig+0x5da>
 8004228:	2301      	movs	r3, #1
 800422a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800423a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	461a      	mov	r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fe fab2 	bl	80027bc <HAL_GetTick>
 8004258:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425c:	e00a      	b.n	8004274 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425e:	f7fe faad 	bl	80027bc <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d902      	bls.n	8004274 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	f000 bc66 	b.w	8004b40 <HAL_RCC_OscConfig+0xe1c>
 8004274:	2302      	movs	r3, #2
 8004276:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004286:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428a:	fab3 f383 	clz	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b01      	cmp	r3, #1
 800429c:	d102      	bne.n	80042a4 <HAL_RCC_OscConfig+0x580>
 800429e:	4b30      	ldr	r3, [pc, #192]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	e013      	b.n	80042cc <HAL_RCC_OscConfig+0x5a8>
 80042a4:	2302      	movs	r3, #2
 80042a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80042b6:	2302      	movs	r3, #2
 80042b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80042bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80042c8:	4b25      	ldr	r3, [pc, #148]	; (8004360 <HAL_RCC_OscConfig+0x63c>)
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	2202      	movs	r2, #2
 80042ce:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80042d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80042d6:	fa92 f2a2 	rbit	r2, r2
 80042da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80042de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80042e2:	fab2 f282 	clz	r2, r2
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	f042 0220 	orr.w	r2, r2, #32
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	f002 021f 	and.w	r2, r2, #31
 80042f2:	2101      	movs	r1, #1
 80042f4:	fa01 f202 	lsl.w	r2, r1, r2
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1af      	bne.n	800425e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fe:	1d3b      	adds	r3, r7, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80da 	beq.w	80044c2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800430e:	1d3b      	adds	r3, r7, #4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d069      	beq.n	80043ec <HAL_RCC_OscConfig+0x6c8>
 8004318:	2301      	movs	r3, #1
 800431a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800432a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_RCC_OscConfig+0x640>)
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	461a      	mov	r2, r3
 800433e:	2301      	movs	r3, #1
 8004340:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004342:	f7fe fa3b 	bl	80027bc <HAL_GetTick>
 8004346:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434a:	e00d      	b.n	8004368 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800434c:	f7fe fa36 	bl	80027bc <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d905      	bls.n	8004368 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e3ef      	b.n	8004b40 <HAL_RCC_OscConfig+0xe1c>
 8004360:	40021000 	.word	0x40021000
 8004364:	10908120 	.word	0x10908120
 8004368:	2302      	movs	r3, #2
 800436a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004372:	fa93 f2a3 	rbit	r2, r3
 8004376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004380:	2202      	movs	r2, #2
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	fa93 f2a3 	rbit	r2, r3
 800438e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004398:	2202      	movs	r2, #2
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	fa93 f2a3 	rbit	r2, r3
 80043a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80043aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ac:	4ba4      	ldr	r3, [pc, #656]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 80043ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80043b4:	2102      	movs	r1, #2
 80043b6:	6019      	str	r1, [r3, #0]
 80043b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	fa93 f1a3 	rbit	r1, r3
 80043c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80043c6:	6019      	str	r1, [r3, #0]
  return result;
 80043c8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	fab3 f383 	clz	r3, r3
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	2101      	movs	r1, #1
 80043e0:	fa01 f303 	lsl.w	r3, r1, r3
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0b0      	beq.n	800434c <HAL_RCC_OscConfig+0x628>
 80043ea:	e06a      	b.n	80044c2 <HAL_RCC_OscConfig+0x79e>
 80043ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	fa93 f2a3 	rbit	r2, r3
 80043fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004402:	601a      	str	r2, [r3, #0]
  return result;
 8004404:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004408:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	4b8c      	ldr	r3, [pc, #560]	; (8004644 <HAL_RCC_OscConfig+0x920>)
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	461a      	mov	r2, r3
 800441a:	2300      	movs	r3, #0
 800441c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441e:	f7fe f9cd 	bl	80027bc <HAL_GetTick>
 8004422:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004426:	e009      	b.n	800443c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004428:	f7fe f9c8 	bl	80027bc <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e381      	b.n	8004b40 <HAL_RCC_OscConfig+0xe1c>
 800443c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004440:	2202      	movs	r2, #2
 8004442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004444:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	fa93 f2a3 	rbit	r2, r3
 800444e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004458:	2202      	movs	r2, #2
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	fa93 f2a3 	rbit	r2, r3
 8004466:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004470:	2202      	movs	r2, #2
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	fa93 f2a3 	rbit	r2, r3
 800447e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004482:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004484:	4b6e      	ldr	r3, [pc, #440]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 8004486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004488:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800448c:	2102      	movs	r1, #2
 800448e:	6019      	str	r1, [r3, #0]
 8004490:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	fa93 f1a3 	rbit	r1, r3
 800449a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800449e:	6019      	str	r1, [r3, #0]
  return result;
 80044a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	fab3 f383 	clz	r3, r3
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	2101      	movs	r1, #1
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	4013      	ands	r3, r2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1b2      	bne.n	8004428 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c2:	1d3b      	adds	r3, r7, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8157 	beq.w	8004780 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d2:	2300      	movs	r3, #0
 80044d4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d8:	4b59      	ldr	r3, [pc, #356]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d112      	bne.n	800450a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e4:	4b56      	ldr	r3, [pc, #344]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	4a55      	ldr	r2, [pc, #340]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 80044ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ee:	61d3      	str	r3, [r2, #28]
 80044f0:	4b53      	ldr	r3, [pc, #332]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80044f8:	f107 030c 	add.w	r3, r7, #12
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	f107 030c 	add.w	r3, r7, #12
 8004502:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004504:	2301      	movs	r3, #1
 8004506:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	4b4f      	ldr	r3, [pc, #316]	; (8004648 <HAL_RCC_OscConfig+0x924>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d11a      	bne.n	800454c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004516:	4b4c      	ldr	r3, [pc, #304]	; (8004648 <HAL_RCC_OscConfig+0x924>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a4b      	ldr	r2, [pc, #300]	; (8004648 <HAL_RCC_OscConfig+0x924>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fe f94b 	bl	80027bc <HAL_GetTick>
 8004526:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452a:	e009      	b.n	8004540 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452c:	f7fe f946 	bl	80027bc <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b64      	cmp	r3, #100	; 0x64
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e2ff      	b.n	8004b40 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	4b41      	ldr	r3, [pc, #260]	; (8004648 <HAL_RCC_OscConfig+0x924>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ef      	beq.n	800452c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d106      	bne.n	8004564 <HAL_RCC_OscConfig+0x840>
 8004556:	4b3a      	ldr	r3, [pc, #232]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	4a39      	ldr	r2, [pc, #228]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6213      	str	r3, [r2, #32]
 8004562:	e02f      	b.n	80045c4 <HAL_RCC_OscConfig+0x8a0>
 8004564:	1d3b      	adds	r3, r7, #4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x864>
 800456e:	4b34      	ldr	r3, [pc, #208]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4a33      	ldr	r2, [pc, #204]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	6213      	str	r3, [r2, #32]
 800457a:	4b31      	ldr	r3, [pc, #196]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	4a30      	ldr	r2, [pc, #192]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	6213      	str	r3, [r2, #32]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0x8a0>
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b05      	cmp	r3, #5
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x888>
 8004592:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4a2a      	ldr	r2, [pc, #168]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 8004598:	f043 0304 	orr.w	r3, r3, #4
 800459c:	6213      	str	r3, [r2, #32]
 800459e:	4b28      	ldr	r3, [pc, #160]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a27      	ldr	r2, [pc, #156]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6213      	str	r3, [r2, #32]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0x8a0>
 80045ac:	4b24      	ldr	r3, [pc, #144]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4a23      	ldr	r2, [pc, #140]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	6213      	str	r3, [r2, #32]
 80045b8:	4b21      	ldr	r3, [pc, #132]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4a20      	ldr	r2, [pc, #128]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 80045be:	f023 0304 	bic.w	r3, r3, #4
 80045c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d06a      	beq.n	80046a4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fe f8f5 	bl	80027bc <HAL_GetTick>
 80045d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	e00b      	b.n	80045f0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fe f8f0 	bl	80027bc <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e2a7      	b.n	8004b40 <HAL_RCC_OscConfig+0xe1c>
 80045f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80045f4:	2202      	movs	r2, #2
 80045f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	fa93 f2a3 	rbit	r2, r3
 8004602:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800460c:	2202      	movs	r2, #2
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	fa93 f2a3 	rbit	r2, r3
 800461a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800461e:	601a      	str	r2, [r3, #0]
  return result;
 8004620:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004624:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f043 0302 	orr.w	r3, r3, #2
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d108      	bne.n	800464c <HAL_RCC_OscConfig+0x928>
 800463a:	4b01      	ldr	r3, [pc, #4]	; (8004640 <HAL_RCC_OscConfig+0x91c>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	e013      	b.n	8004668 <HAL_RCC_OscConfig+0x944>
 8004640:	40021000 	.word	0x40021000
 8004644:	10908120 	.word	0x10908120
 8004648:	40007000 	.word	0x40007000
 800464c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004650:	2202      	movs	r2, #2
 8004652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	fa93 f2a3 	rbit	r2, r3
 800465e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	4bc0      	ldr	r3, [pc, #768]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800466c:	2102      	movs	r1, #2
 800466e:	6011      	str	r1, [r2, #0]
 8004670:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	fa92 f1a2 	rbit	r1, r2
 800467a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800467e:	6011      	str	r1, [r2, #0]
  return result;
 8004680:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	fab2 f282 	clz	r2, r2
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	f002 021f 	and.w	r2, r2, #31
 8004696:	2101      	movs	r1, #1
 8004698:	fa01 f202 	lsl.w	r2, r1, r2
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d09a      	beq.n	80045d8 <HAL_RCC_OscConfig+0x8b4>
 80046a2:	e063      	b.n	800476c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a4:	f7fe f88a 	bl	80027bc <HAL_GetTick>
 80046a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ac:	e00b      	b.n	80046c6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ae:	f7fe f885 	bl	80027bc <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e23c      	b.n	8004b40 <HAL_RCC_OscConfig+0xe1c>
 80046c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80046ca:	2202      	movs	r2, #2
 80046cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	fa93 f2a3 	rbit	r2, r3
 80046d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80046e2:	2202      	movs	r2, #2
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	fa93 f2a3 	rbit	r2, r3
 80046f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80046f4:	601a      	str	r2, [r3, #0]
  return result;
 80046f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80046fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fc:	fab3 f383 	clz	r3, r3
 8004700:	b2db      	uxtb	r3, r3
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f043 0302 	orr.w	r3, r3, #2
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d102      	bne.n	8004716 <HAL_RCC_OscConfig+0x9f2>
 8004710:	4b95      	ldr	r3, [pc, #596]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	e00d      	b.n	8004732 <HAL_RCC_OscConfig+0xa0e>
 8004716:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800471a:	2202      	movs	r2, #2
 800471c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	fa93 f2a3 	rbit	r2, r3
 8004728:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	4b8e      	ldr	r3, [pc, #568]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004736:	2102      	movs	r1, #2
 8004738:	6011      	str	r1, [r2, #0]
 800473a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	fa92 f1a2 	rbit	r1, r2
 8004744:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004748:	6011      	str	r1, [r2, #0]
  return result;
 800474a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	fab2 f282 	clz	r2, r2
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	f002 021f 	and.w	r2, r2, #31
 8004760:	2101      	movs	r1, #1
 8004762:	fa01 f202 	lsl.w	r2, r1, r2
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1a0      	bne.n	80046ae <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800476c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004770:	2b01      	cmp	r3, #1
 8004772:	d105      	bne.n	8004780 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004774:	4b7c      	ldr	r3, [pc, #496]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	4a7b      	ldr	r2, [pc, #492]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 800477a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800477e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004780:	1d3b      	adds	r3, r7, #4
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 81d9 	beq.w	8004b3e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800478c:	4b76      	ldr	r3, [pc, #472]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 030c 	and.w	r3, r3, #12
 8004794:	2b08      	cmp	r3, #8
 8004796:	f000 81a6 	beq.w	8004ae6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800479a:	1d3b      	adds	r3, r7, #4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	f040 811e 	bne.w	80049e2 <HAL_RCC_OscConfig+0xcbe>
 80047a6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80047aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	fa93 f2a3 	rbit	r2, r3
 80047ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80047be:	601a      	str	r2, [r3, #0]
  return result;
 80047c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80047c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	fab3 f383 	clz	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	461a      	mov	r2, r3
 80047d8:	2300      	movs	r3, #0
 80047da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047dc:	f7fd ffee 	bl	80027bc <HAL_GetTick>
 80047e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e4:	e009      	b.n	80047fa <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e6:	f7fd ffe9 	bl	80027bc <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e1a2      	b.n	8004b40 <HAL_RCC_OscConfig+0xe1c>
 80047fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80047fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	fa93 f2a3 	rbit	r2, r3
 800480e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004812:	601a      	str	r2, [r3, #0]
  return result;
 8004814:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004818:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d102      	bne.n	8004834 <HAL_RCC_OscConfig+0xb10>
 800482e:	4b4e      	ldr	r3, [pc, #312]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	e01b      	b.n	800486c <HAL_RCC_OscConfig+0xb48>
 8004834:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800483c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	fa93 f2a3 	rbit	r2, r3
 8004848:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	fa93 f2a3 	rbit	r2, r3
 8004862:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004870:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004874:	6011      	str	r1, [r2, #0]
 8004876:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	fa92 f1a2 	rbit	r1, r2
 8004880:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004884:	6011      	str	r1, [r2, #0]
  return result;
 8004886:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	fab2 f282 	clz	r2, r2
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	f042 0220 	orr.w	r2, r2, #32
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	f002 021f 	and.w	r2, r2, #31
 800489c:	2101      	movs	r1, #1
 800489e:	fa01 f202 	lsl.w	r2, r1, r2
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d19e      	bne.n	80047e6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048a8:	4b2f      	ldr	r3, [pc, #188]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	f023 020f 	bic.w	r2, r3, #15
 80048b0:	1d3b      	adds	r3, r7, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	492c      	ldr	r1, [pc, #176]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 80048bc:	4b2a      	ldr	r3, [pc, #168]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80048c4:	1d3b      	adds	r3, r7, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6a19      	ldr	r1, [r3, #32]
 80048ca:	1d3b      	adds	r3, r7, #4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	4925      	ldr	r1, [pc, #148]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]
 80048d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80048dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	fa93 f2a3 	rbit	r2, r3
 80048ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80048f0:	601a      	str	r2, [r3, #0]
  return result;
 80048f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80048f6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004902:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	461a      	mov	r2, r3
 800490a:	2301      	movs	r3, #1
 800490c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490e:	f7fd ff55 	bl	80027bc <HAL_GetTick>
 8004912:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004916:	e009      	b.n	800492c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004918:	f7fd ff50 	bl	80027bc <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e109      	b.n	8004b40 <HAL_RCC_OscConfig+0xe1c>
 800492c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004930:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004936:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	fa93 f2a3 	rbit	r2, r3
 8004940:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004944:	601a      	str	r2, [r3, #0]
  return result;
 8004946:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800494a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d105      	bne.n	800496c <HAL_RCC_OscConfig+0xc48>
 8004960:	4b01      	ldr	r3, [pc, #4]	; (8004968 <HAL_RCC_OscConfig+0xc44>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	e01e      	b.n	80049a4 <HAL_RCC_OscConfig+0xc80>
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
 800496c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004970:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	fa93 f2a3 	rbit	r2, r3
 8004980:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800498a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	fa93 f2a3 	rbit	r2, r3
 800499a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <HAL_RCC_OscConfig+0xe28>)
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80049a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049ac:	6011      	str	r1, [r2, #0]
 80049ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	fa92 f1a2 	rbit	r1, r2
 80049b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80049bc:	6011      	str	r1, [r2, #0]
  return result;
 80049be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	fab2 f282 	clz	r2, r2
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	f042 0220 	orr.w	r2, r2, #32
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	f002 021f 	and.w	r2, r2, #31
 80049d4:	2101      	movs	r1, #1
 80049d6:	fa01 f202 	lsl.w	r2, r1, r2
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d09b      	beq.n	8004918 <HAL_RCC_OscConfig+0xbf4>
 80049e0:	e0ad      	b.n	8004b3e <HAL_RCC_OscConfig+0xe1a>
 80049e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	fa93 f2a3 	rbit	r2, r3
 80049f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049fa:	601a      	str	r2, [r3, #0]
  return result;
 80049fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a00:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	461a      	mov	r2, r3
 8004a14:	2300      	movs	r3, #0
 8004a16:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a18:	f7fd fed0 	bl	80027bc <HAL_GetTick>
 8004a1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a20:	e009      	b.n	8004a36 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a22:	f7fd fecb 	bl	80027bc <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e084      	b.n	8004b40 <HAL_RCC_OscConfig+0xe1c>
 8004a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	fa93 f2a3 	rbit	r2, r3
 8004a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a4e:	601a      	str	r2, [r3, #0]
  return result;
 8004a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d102      	bne.n	8004a70 <HAL_RCC_OscConfig+0xd4c>
 8004a6a:	4b38      	ldr	r3, [pc, #224]	; (8004b4c <HAL_RCC_OscConfig+0xe28>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	e01b      	b.n	8004aa8 <HAL_RCC_OscConfig+0xd84>
 8004a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	fa93 f2a3 	rbit	r2, r3
 8004a84:	f107 0320 	add.w	r3, r7, #32
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	f107 031c 	add.w	r3, r7, #28
 8004a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	f107 031c 	add.w	r3, r7, #28
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	fa93 f2a3 	rbit	r2, r3
 8004a9e:	f107 0318 	add.w	r3, r7, #24
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <HAL_RCC_OscConfig+0xe28>)
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	f107 0214 	add.w	r2, r7, #20
 8004aac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ab0:	6011      	str	r1, [r2, #0]
 8004ab2:	f107 0214 	add.w	r2, r7, #20
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	fa92 f1a2 	rbit	r1, r2
 8004abc:	f107 0210 	add.w	r2, r7, #16
 8004ac0:	6011      	str	r1, [r2, #0]
  return result;
 8004ac2:	f107 0210 	add.w	r2, r7, #16
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	fab2 f282 	clz	r2, r2
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	f042 0220 	orr.w	r2, r2, #32
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	f002 021f 	and.w	r2, r2, #31
 8004ad8:	2101      	movs	r1, #1
 8004ada:	fa01 f202 	lsl.w	r2, r1, r2
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d19e      	bne.n	8004a22 <HAL_RCC_OscConfig+0xcfe>
 8004ae4:	e02b      	b.n	8004b3e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e025      	b.n	8004b40 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004af4:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <HAL_RCC_OscConfig+0xe28>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004afc:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <HAL_RCC_OscConfig+0xe28>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b08:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004b0c:	1d3b      	adds	r3, r7, #4
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d111      	bne.n	8004b3a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004b16:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b1e:	1d3b      	adds	r3, r7, #4
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d108      	bne.n	8004b3a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b2c:	f003 020f 	and.w	r2, r3, #15
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000

08004b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b09e      	sub	sp, #120	; 0x78
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e162      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b68:	4b90      	ldr	r3, [pc, #576]	; (8004dac <HAL_RCC_ClockConfig+0x25c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d910      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b76:	4b8d      	ldr	r3, [pc, #564]	; (8004dac <HAL_RCC_ClockConfig+0x25c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f023 0207 	bic.w	r2, r3, #7
 8004b7e:	498b      	ldr	r1, [pc, #556]	; (8004dac <HAL_RCC_ClockConfig+0x25c>)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b89      	ldr	r3, [pc, #548]	; (8004dac <HAL_RCC_ClockConfig+0x25c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e14a      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba4:	4b82      	ldr	r3, [pc, #520]	; (8004db0 <HAL_RCC_ClockConfig+0x260>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	497f      	ldr	r1, [pc, #508]	; (8004db0 <HAL_RCC_ClockConfig+0x260>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80dc 	beq.w	8004d7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d13c      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xf6>
 8004bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bd4:	fa93 f3a3 	rbit	r3, r3
 8004bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bdc:	fab3 f383 	clz	r3, r3
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d102      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xa6>
 8004bf0:	4b6f      	ldr	r3, [pc, #444]	; (8004db0 <HAL_RCC_ClockConfig+0x260>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	e00f      	b.n	8004c16 <HAL_RCC_ClockConfig+0xc6>
 8004bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	667b      	str	r3, [r7, #100]	; 0x64
 8004c04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c08:	663b      	str	r3, [r7, #96]	; 0x60
 8004c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c0c:	fa93 f3a3 	rbit	r3, r3
 8004c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c12:	4b67      	ldr	r3, [pc, #412]	; (8004db0 <HAL_RCC_ClockConfig+0x260>)
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c1e:	fa92 f2a2 	rbit	r2, r2
 8004c22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c26:	fab2 f282 	clz	r2, r2
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	f042 0220 	orr.w	r2, r2, #32
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	f002 021f 	and.w	r2, r2, #31
 8004c36:	2101      	movs	r1, #1
 8004c38:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d17b      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e0f3      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d13c      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x178>
 8004c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c56:	fa93 f3a3 	rbit	r3, r3
 8004c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5e:	fab3 f383 	clz	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d102      	bne.n	8004c78 <HAL_RCC_ClockConfig+0x128>
 8004c72:	4b4f      	ldr	r3, [pc, #316]	; (8004db0 <HAL_RCC_ClockConfig+0x260>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	e00f      	b.n	8004c98 <HAL_RCC_ClockConfig+0x148>
 8004c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	647b      	str	r3, [r7, #68]	; 0x44
 8004c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8e:	fa93 f3a3 	rbit	r3, r3
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c94:	4b46      	ldr	r3, [pc, #280]	; (8004db0 <HAL_RCC_ClockConfig+0x260>)
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ca0:	fa92 f2a2 	rbit	r2, r2
 8004ca4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca8:	fab2 f282 	clz	r2, r2
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	f042 0220 	orr.w	r2, r2, #32
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	f002 021f 	and.w	r2, r2, #31
 8004cb8:	2101      	movs	r1, #1
 8004cba:	fa01 f202 	lsl.w	r2, r1, r2
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d13a      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0b2      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2de>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	fa93 f3a3 	rbit	r3, r3
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d102      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x1a0>
 8004cea:	4b31      	ldr	r3, [pc, #196]	; (8004db0 <HAL_RCC_ClockConfig+0x260>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	e00d      	b.n	8004d0c <HAL_RCC_ClockConfig+0x1bc>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	fa93 f3a3 	rbit	r3, r3
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	fa93 f3a3 	rbit	r3, r3
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	4b29      	ldr	r3, [pc, #164]	; (8004db0 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	61ba      	str	r2, [r7, #24]
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	fa92 f2a2 	rbit	r2, r2
 8004d16:	617a      	str	r2, [r7, #20]
  return result;
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	fab2 f282 	clz	r2, r2
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	f042 0220 	orr.w	r2, r2, #32
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	f002 021f 	and.w	r2, r2, #31
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e079      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_RCC_ClockConfig+0x260>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f023 0203 	bic.w	r2, r3, #3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	491a      	ldr	r1, [pc, #104]	; (8004db0 <HAL_RCC_ClockConfig+0x260>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d4c:	f7fd fd36 	bl	80027bc <HAL_GetTick>
 8004d50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d52:	e00a      	b.n	8004d6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d54:	f7fd fd32 	bl	80027bc <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e061      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6a:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <HAL_RCC_ClockConfig+0x260>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 020c 	and.w	r2, r3, #12
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d1eb      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_RCC_ClockConfig+0x25c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d214      	bcs.n	8004db4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_RCC_ClockConfig+0x25c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 0207 	bic.w	r2, r3, #7
 8004d92:	4906      	ldr	r1, [pc, #24]	; (8004dac <HAL_RCC_ClockConfig+0x25c>)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b04      	ldr	r3, [pc, #16]	; (8004dac <HAL_RCC_ClockConfig+0x25c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e040      	b.n	8004e2e <HAL_RCC_ClockConfig+0x2de>
 8004dac:	40022000 	.word	0x40022000
 8004db0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <HAL_RCC_ClockConfig+0x2e8>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	491a      	ldr	r1, [pc, #104]	; (8004e38 <HAL_RCC_ClockConfig+0x2e8>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dde:	4b16      	ldr	r3, [pc, #88]	; (8004e38 <HAL_RCC_ClockConfig+0x2e8>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4912      	ldr	r1, [pc, #72]	; (8004e38 <HAL_RCC_ClockConfig+0x2e8>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004df2:	f000 f829 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8004df6:	4601      	mov	r1, r0
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <HAL_RCC_ClockConfig+0x2e8>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e00:	22f0      	movs	r2, #240	; 0xf0
 8004e02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	fa92 f2a2 	rbit	r2, r2
 8004e0a:	60fa      	str	r2, [r7, #12]
  return result;
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	fab2 f282 	clz	r2, r2
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	40d3      	lsrs	r3, r2
 8004e16:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <HAL_RCC_ClockConfig+0x2ec>)
 8004e18:	5cd3      	ldrb	r3, [r2, r3]
 8004e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8004e1e:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <HAL_RCC_ClockConfig+0x2f0>)
 8004e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <HAL_RCC_ClockConfig+0x2f4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd fc84 	bl	8002734 <HAL_InitTick>
  
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3778      	adds	r7, #120	; 0x78
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	08008ae0 	.word	0x08008ae0
 8004e40:	20000000 	.word	0x20000000
 8004e44:	20000004 	.word	0x20000004

08004e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b08b      	sub	sp, #44	; 0x2c
 8004e4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	2300      	movs	r3, #0
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	2300      	movs	r3, #0
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004e62:	4b2a      	ldr	r3, [pc, #168]	; (8004f0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d002      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0x30>
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d003      	beq.n	8004e7e <HAL_RCC_GetSysClockFreq+0x36>
 8004e76:	e03f      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004e7a:	623b      	str	r3, [r7, #32]
      break;
 8004e7c:	e03f      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004e84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004e88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	fa92 f2a2 	rbit	r2, r2
 8004e90:	607a      	str	r2, [r7, #4]
  return result;
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	fab2 f282 	clz	r2, r2
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	40d3      	lsrs	r3, r2
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ea0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004ea2:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	220f      	movs	r2, #15
 8004eac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	fa92 f2a2 	rbit	r2, r2
 8004eb4:	60fa      	str	r2, [r7, #12]
  return result;
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	fab2 f282 	clz	r2, r2
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	40d3      	lsrs	r3, r2
 8004ec0:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ec2:	5cd3      	ldrb	r3, [r2, r3]
 8004ec4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ed0:	4a0f      	ldr	r2, [pc, #60]	; (8004f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee0:	e007      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ee2:	4a0b      	ldr	r2, [pc, #44]	; (8004f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	623b      	str	r3, [r7, #32]
      break;
 8004ef6:	e002      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004efa:	623b      	str	r3, [r7, #32]
      break;
 8004efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004efe:	6a3b      	ldr	r3, [r7, #32]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	372c      	adds	r7, #44	; 0x2c
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	007a1200 	.word	0x007a1200
 8004f14:	08008af8 	.word	0x08008af8
 8004f18:	08008b08 	.word	0x08008b08

08004f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f20:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f22:	681b      	ldr	r3, [r3, #0]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	20000000 	.word	0x20000000

08004f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f3a:	f7ff ffef 	bl	8004f1c <HAL_RCC_GetHCLKFreq>
 8004f3e:	4601      	mov	r1, r0
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	fa92 f2a2 	rbit	r2, r2
 8004f54:	603a      	str	r2, [r7, #0]
  return result;
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	fab2 f282 	clz	r2, r2
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	40d3      	lsrs	r3, r2
 8004f60:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004f62:	5cd3      	ldrb	r3, [r2, r3]
 8004f64:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40021000 	.word	0x40021000
 8004f74:	08008af0 	.word	0x08008af0

08004f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004f7e:	f7ff ffcd 	bl	8004f1c <HAL_RCC_GetHCLKFreq>
 8004f82:	4601      	mov	r1, r0
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004f8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004f90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	fa92 f2a2 	rbit	r2, r2
 8004f98:	603a      	str	r2, [r7, #0]
  return result;
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	fab2 f282 	clz	r2, r2
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	40d3      	lsrs	r3, r2
 8004fa4:	4a04      	ldr	r2, [pc, #16]	; (8004fb8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004fa6:	5cd3      	ldrb	r3, [r2, r3]
 8004fa8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	08008af0 	.word	0x08008af0

08004fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b092      	sub	sp, #72	; 0x48
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80d7 	beq.w	8005188 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe0:	4b4e      	ldr	r3, [pc, #312]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10e      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fec:	4b4b      	ldr	r3, [pc, #300]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	4a4a      	ldr	r2, [pc, #296]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	61d3      	str	r3, [r2, #28]
 8004ff8:	4b48      	ldr	r3, [pc, #288]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500a:	4b45      	ldr	r3, [pc, #276]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d118      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005016:	4b42      	ldr	r3, [pc, #264]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a41      	ldr	r2, [pc, #260]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800501c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005020:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005022:	f7fd fbcb 	bl	80027bc <HAL_GetTick>
 8005026:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	e008      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502a:	f7fd fbc7 	bl	80027bc <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b64      	cmp	r3, #100	; 0x64
 8005036:	d901      	bls.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e1d6      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	4b38      	ldr	r3, [pc, #224]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005048:	4b34      	ldr	r3, [pc, #208]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8084 	beq.w	8005162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005064:	429a      	cmp	r2, r3
 8005066:	d07c      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005068:	4b2c      	ldr	r3, [pc, #176]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005076:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	fa93 f3a3 	rbit	r3, r3
 800507e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005082:	fab3 f383 	clz	r3, r3
 8005086:	b2db      	uxtb	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	4b26      	ldr	r3, [pc, #152]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	461a      	mov	r2, r3
 8005092:	2301      	movs	r3, #1
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800509a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509e:	fa93 f3a3 	rbit	r3, r3
 80050a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050a6:	fab3 f383 	clz	r3, r3
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	461a      	mov	r2, r3
 80050b6:	2300      	movs	r3, #0
 80050b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050ba:	4a18      	ldr	r2, [pc, #96]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d04b      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ca:	f7fd fb77 	bl	80027bc <HAL_GetTick>
 80050ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d0:	e00a      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d2:	f7fd fb73 	bl	80027bc <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e180      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80050e8:	2302      	movs	r3, #2
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	fa93 f3a3 	rbit	r3, r3
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	2302      	movs	r3, #2
 80050f6:	623b      	str	r3, [r7, #32]
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	fa93 f3a3 	rbit	r3, r3
 80050fe:	61fb      	str	r3, [r7, #28]
  return result;
 8005100:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f043 0302 	orr.w	r3, r3, #2
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d108      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005116:	4b01      	ldr	r3, [pc, #4]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	e00d      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800511c:	40021000 	.word	0x40021000
 8005120:	40007000 	.word	0x40007000
 8005124:	10908100 	.word	0x10908100
 8005128:	2302      	movs	r3, #2
 800512a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	fa93 f3a3 	rbit	r3, r3
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	4ba0      	ldr	r3, [pc, #640]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2202      	movs	r2, #2
 800513a:	613a      	str	r2, [r7, #16]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	fa92 f2a2 	rbit	r2, r2
 8005142:	60fa      	str	r2, [r7, #12]
  return result;
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	fab2 f282 	clz	r2, r2
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	f002 021f 	and.w	r2, r2, #31
 8005156:	2101      	movs	r1, #1
 8005158:	fa01 f202 	lsl.w	r2, r1, r2
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0b7      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005162:	4b95      	ldr	r3, [pc, #596]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4992      	ldr	r1, [pc, #584]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005170:	4313      	orrs	r3, r2
 8005172:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005174:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005178:	2b01      	cmp	r3, #1
 800517a:	d105      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800517c:	4b8e      	ldr	r3, [pc, #568]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	4a8d      	ldr	r2, [pc, #564]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005186:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005194:	4b88      	ldr	r3, [pc, #544]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	f023 0203 	bic.w	r2, r3, #3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	4985      	ldr	r1, [pc, #532]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d008      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051b2:	4b81      	ldr	r3, [pc, #516]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	497e      	ldr	r1, [pc, #504]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051d0:	4b79      	ldr	r3, [pc, #484]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	4976      	ldr	r1, [pc, #472]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ee:	4b72      	ldr	r3, [pc, #456]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f023 0210 	bic.w	r2, r3, #16
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	496f      	ldr	r1, [pc, #444]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800520c:	4b6a      	ldr	r3, [pc, #424]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	4967      	ldr	r1, [pc, #412]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800521a:	4313      	orrs	r3, r2
 800521c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d008      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800522a:	4b63      	ldr	r3, [pc, #396]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	f023 0220 	bic.w	r2, r3, #32
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	4960      	ldr	r1, [pc, #384]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005238:	4313      	orrs	r3, r2
 800523a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005248:	4b5b      	ldr	r3, [pc, #364]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	4958      	ldr	r1, [pc, #352]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005266:	4b54      	ldr	r3, [pc, #336]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	4951      	ldr	r1, [pc, #324]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005274:	4313      	orrs	r3, r2
 8005276:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005284:	4b4c      	ldr	r3, [pc, #304]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	4949      	ldr	r1, [pc, #292]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005292:	4313      	orrs	r3, r2
 8005294:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052a2:	4b45      	ldr	r3, [pc, #276]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	4942      	ldr	r1, [pc, #264]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052c0:	4b3d      	ldr	r3, [pc, #244]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	493a      	ldr	r1, [pc, #232]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80052de:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	4933      	ldr	r1, [pc, #204]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80052fc:	4b2e      	ldr	r3, [pc, #184]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005308:	492b      	ldr	r1, [pc, #172]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800530a:	4313      	orrs	r3, r2
 800530c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800531a:	4b27      	ldr	r3, [pc, #156]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	4924      	ldr	r1, [pc, #144]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005328:	4313      	orrs	r3, r2
 800532a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005338:	4b1f      	ldr	r3, [pc, #124]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	491c      	ldr	r1, [pc, #112]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005346:	4313      	orrs	r3, r2
 8005348:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005356:	4b18      	ldr	r3, [pc, #96]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	4915      	ldr	r1, [pc, #84]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005364:	4313      	orrs	r3, r2
 8005366:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005374:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005380:	490d      	ldr	r1, [pc, #52]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005382:	4313      	orrs	r3, r2
 8005384:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005392:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539e:	4906      	ldr	r1, [pc, #24]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00c      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80053b0:	4b01      	ldr	r3, [pc, #4]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	e002      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000
 80053bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c4:	490b      	ldr	r1, [pc, #44]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80053d6:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	4904      	ldr	r1, [pc, #16]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3748      	adds	r7, #72	; 0x48
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000

080053f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e084      	b.n	8005514 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fc feb3 	bl	8002190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005440:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800544a:	d902      	bls.n	8005452 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	e002      	b.n	8005458 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005456:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005460:	d007      	beq.n	8005472 <HAL_SPI_Init+0x7a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800546a:	d002      	beq.n	8005472 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005482:	d903      	bls.n	800548c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
 800548a:	e002      	b.n	8005492 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	ea42 0103 	orr.w	r1, r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	f003 0204 	and.w	r2, r3, #4
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	ea42 0103 	orr.w	r1, r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69da      	ldr	r2, [r3, #28]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005502:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10f      	bne.n	8005560 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	099b      	lsrs	r3, r3, #6
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d004      	beq.n	8005560 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
    return;
 800555e:	e0d8      	b.n	8005712 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	085b      	lsrs	r3, r3, #1
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_SPI_IRQHandler+0x66>
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	09db      	lsrs	r3, r3, #7
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d004      	beq.n	8005582 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	4798      	blx	r3
    return;
 8005580:	e0c7      	b.n	8005712 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10c      	bne.n	80055a8 <HAL_SPI_IRQHandler+0x8c>
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	099b      	lsrs	r3, r3, #6
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80b5 	beq.w	8005712 <HAL_SPI_IRQHandler+0x1f6>
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80ae 	beq.w	8005712 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	099b      	lsrs	r3, r3, #6
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d023      	beq.n	800560a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d011      	beq.n	80055f2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d2:	f043 0204 	orr.w	r2, r3, #4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	e00b      	b.n	800560a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055f2:	2300      	movs	r3, #0
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	693b      	ldr	r3, [r7, #16]
        return;
 8005608:	e083      	b.n	8005712 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	095b      	lsrs	r3, r3, #5
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d014      	beq.n	8005640 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00c      	beq.n	8005666 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005650:	f043 0208 	orr.w	r2, r3, #8
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005658:	2300      	movs	r3, #0
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566a:	2b00      	cmp	r3, #0
 800566c:	d050      	beq.n	8005710 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800567c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d104      	bne.n	800569a <HAL_SPI_IRQHandler+0x17e>
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d034      	beq.n	8005704 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0203 	bic.w	r2, r2, #3
 80056a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d011      	beq.n	80056d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b6:	4a18      	ldr	r2, [pc, #96]	; (8005718 <HAL_SPI_IRQHandler+0x1fc>)
 80056b8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fd ff85 	bl	80035ce <HAL_DMA_Abort_IT>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d016      	beq.n	800570c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e2:	4a0d      	ldr	r2, [pc, #52]	; (8005718 <HAL_SPI_IRQHandler+0x1fc>)
 80056e4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fd ff6f 	bl	80035ce <HAL_DMA_Abort_IT>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005702:	e003      	b.n	800570c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f809 	bl	800571c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800570a:	e000      	b.n	800570e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800570c:	bf00      	nop
    return;
 800570e:	bf00      	nop
 8005710:	bf00      	nop
  }
}
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	08005731 	.word	0x08005731

0800571c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff ffe5 	bl	800571c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b082      	sub	sp, #8
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e040      	b.n	80057ee <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005770:	2b00      	cmp	r3, #0
 8005772:	d106      	bne.n	8005782 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7fc fd65 	bl	800224c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2224      	movs	r2, #36	; 0x24
 8005786:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fa1f 	bl	8005bdc <UART_SetConfig>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e022      	b.n	80057ee <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fc2d 	bl	8006010 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fcb4 	bl	8006154 <UART_CheckIdleState>
 80057ec:	4603      	mov	r3, r0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580a:	2b20      	cmp	r3, #32
 800580c:	d16c      	bne.n	80058e8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <HAL_UART_Receive_DMA+0x22>
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e065      	b.n	80058ea <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_UART_Receive_DMA+0x34>
 8005828:	2302      	movs	r3, #2
 800582a:	e05e      	b.n	80058ea <HAL_UART_Receive_DMA+0xf2>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	88fa      	ldrh	r2, [r7, #6]
 800583e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2222      	movs	r2, #34	; 0x22
 800584c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d02a      	beq.n	80058ac <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800585a:	4a26      	ldr	r2, [pc, #152]	; (80058f4 <HAL_UART_Receive_DMA+0xfc>)
 800585c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005862:	4a25      	ldr	r2, [pc, #148]	; (80058f8 <HAL_UART_Receive_DMA+0x100>)
 8005864:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800586a:	4a24      	ldr	r2, [pc, #144]	; (80058fc <HAL_UART_Receive_DMA+0x104>)
 800586c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005872:	2200      	movs	r2, #0
 8005874:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3324      	adds	r3, #36	; 0x24
 8005880:	4619      	mov	r1, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	461a      	mov	r2, r3
 8005888:	88fb      	ldrh	r3, [r7, #6]
 800588a:	f7fd fe41 	bl	8003510 <HAL_DMA_Start_IT>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00b      	beq.n	80058ac <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2210      	movs	r2, #16
 8005898:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e01e      	b.n	80058ea <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058c2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	e000      	b.n	80058ea <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80058e8:	2302      	movs	r3, #2
  }
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	0800633f 	.word	0x0800633f
 80058f8:	080063a1 	.word	0x080063a1
 80058fc:	080063bd 	.word	0x080063bd

08005900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	f640 030f 	movw	r3, #2063	; 0x80f
 8005926:	4013      	ands	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d113      	bne.n	8005958 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d009      	beq.n	8005958 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8114 	beq.w	8005b76 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
      }
      return;
 8005956:	e10e      	b.n	8005b76 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80d6 	beq.w	8005b0c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d105      	bne.n	8005976 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80cb 	beq.w	8005b0c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00e      	beq.n	800599e <HAL_UART_IRQHandler+0x9e>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2201      	movs	r2, #1
 8005990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00e      	beq.n	80059c6 <HAL_UART_IRQHandler+0xc6>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d009      	beq.n	80059c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2202      	movs	r2, #2
 80059b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059be:	f043 0204 	orr.w	r2, r3, #4
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00e      	beq.n	80059ee <HAL_UART_IRQHandler+0xee>
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2204      	movs	r2, #4
 80059e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e6:	f043 0202 	orr.w	r2, r3, #2
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d013      	beq.n	8005a20 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d009      	beq.n	8005a20 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2208      	movs	r2, #8
 8005a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a18:	f043 0208 	orr.w	r2, r3, #8
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00f      	beq.n	8005a4a <HAL_UART_IRQHandler+0x14a>
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a42:	f043 0220 	orr.w	r2, r3, #32
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8093 	beq.w	8005b7a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a7c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a88:	2b40      	cmp	r3, #64	; 0x40
 8005a8a:	d004      	beq.n	8005a96 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d031      	beq.n	8005afa <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fc31 	bl	80062fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d123      	bne.n	8005af2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d013      	beq.n	8005aea <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac6:	4a30      	ldr	r2, [pc, #192]	; (8005b88 <HAL_UART_IRQHandler+0x288>)
 8005ac8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fd fd7d 	bl	80035ce <HAL_DMA_Abort_IT>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d016      	beq.n	8005b08 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	e00e      	b.n	8005b08 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f86c 	bl	8005bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	e00a      	b.n	8005b08 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f868 	bl	8005bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	e006      	b.n	8005b08 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f864 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005b06:	e038      	b.n	8005b7a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	bf00      	nop
    return;
 8005b0a:	e036      	b.n	8005b7a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <HAL_UART_IRQHandler+0x232>
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d008      	beq.n	8005b32 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fcb1 	bl	8006492 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b30:	e026      	b.n	8005b80 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00d      	beq.n	8005b58 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d008      	beq.n	8005b58 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d017      	beq.n	8005b7e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
    }
    return;
 8005b56:	e012      	b.n	8005b7e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00e      	beq.n	8005b80 <HAL_UART_IRQHandler+0x280>
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fc77 	bl	8006460 <UART_EndTransmit_IT>
    return;
 8005b72:	bf00      	nop
 8005b74:	e004      	b.n	8005b80 <HAL_UART_IRQHandler+0x280>
      return;
 8005b76:	bf00      	nop
 8005b78:	e002      	b.n	8005b80 <HAL_UART_IRQHandler+0x280>
    return;
 8005b7a:	bf00      	nop
 8005b7c:	e000      	b.n	8005b80 <HAL_UART_IRQHandler+0x280>
    return;
 8005b7e:	bf00      	nop
  }

}
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	08006435 	.word	0x08006435

08005b8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	4bac      	ldr	r3, [pc, #688]	; (8005ebc <UART_SetConfig+0x2e0>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	6939      	ldr	r1, [r7, #16]
 8005c14:	430b      	orrs	r3, r1
 8005c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a9a      	ldr	r2, [pc, #616]	; (8005ec0 <UART_SetConfig+0x2e4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d121      	bne.n	8005ca0 <UART_SetConfig+0xc4>
 8005c5c:	4b99      	ldr	r3, [pc, #612]	; (8005ec4 <UART_SetConfig+0x2e8>)
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	f003 0303 	and.w	r3, r3, #3
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d817      	bhi.n	8005c98 <UART_SetConfig+0xbc>
 8005c68:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <UART_SetConfig+0x94>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005c81 	.word	0x08005c81
 8005c74:	08005c8d 	.word	0x08005c8d
 8005c78:	08005c93 	.word	0x08005c93
 8005c7c:	08005c87 	.word	0x08005c87
 8005c80:	2301      	movs	r3, #1
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e0b2      	b.n	8005dec <UART_SetConfig+0x210>
 8005c86:	2302      	movs	r3, #2
 8005c88:	77fb      	strb	r3, [r7, #31]
 8005c8a:	e0af      	b.n	8005dec <UART_SetConfig+0x210>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e0ac      	b.n	8005dec <UART_SetConfig+0x210>
 8005c92:	2308      	movs	r3, #8
 8005c94:	77fb      	strb	r3, [r7, #31]
 8005c96:	e0a9      	b.n	8005dec <UART_SetConfig+0x210>
 8005c98:	2310      	movs	r3, #16
 8005c9a:	77fb      	strb	r3, [r7, #31]
 8005c9c:	bf00      	nop
 8005c9e:	e0a5      	b.n	8005dec <UART_SetConfig+0x210>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a88      	ldr	r2, [pc, #544]	; (8005ec8 <UART_SetConfig+0x2ec>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d123      	bne.n	8005cf2 <UART_SetConfig+0x116>
 8005caa:	4b86      	ldr	r3, [pc, #536]	; (8005ec4 <UART_SetConfig+0x2e8>)
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb6:	d012      	beq.n	8005cde <UART_SetConfig+0x102>
 8005cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cbc:	d802      	bhi.n	8005cc4 <UART_SetConfig+0xe8>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <UART_SetConfig+0xf6>
 8005cc2:	e012      	b.n	8005cea <UART_SetConfig+0x10e>
 8005cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cc8:	d00c      	beq.n	8005ce4 <UART_SetConfig+0x108>
 8005cca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cce:	d003      	beq.n	8005cd8 <UART_SetConfig+0xfc>
 8005cd0:	e00b      	b.n	8005cea <UART_SetConfig+0x10e>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	77fb      	strb	r3, [r7, #31]
 8005cd6:	e089      	b.n	8005dec <UART_SetConfig+0x210>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e086      	b.n	8005dec <UART_SetConfig+0x210>
 8005cde:	2304      	movs	r3, #4
 8005ce0:	77fb      	strb	r3, [r7, #31]
 8005ce2:	e083      	b.n	8005dec <UART_SetConfig+0x210>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e080      	b.n	8005dec <UART_SetConfig+0x210>
 8005cea:	2310      	movs	r3, #16
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	bf00      	nop
 8005cf0:	e07c      	b.n	8005dec <UART_SetConfig+0x210>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a75      	ldr	r2, [pc, #468]	; (8005ecc <UART_SetConfig+0x2f0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d123      	bne.n	8005d44 <UART_SetConfig+0x168>
 8005cfc:	4b71      	ldr	r3, [pc, #452]	; (8005ec4 <UART_SetConfig+0x2e8>)
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005d04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d08:	d012      	beq.n	8005d30 <UART_SetConfig+0x154>
 8005d0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d0e:	d802      	bhi.n	8005d16 <UART_SetConfig+0x13a>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <UART_SetConfig+0x148>
 8005d14:	e012      	b.n	8005d3c <UART_SetConfig+0x160>
 8005d16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d1a:	d00c      	beq.n	8005d36 <UART_SetConfig+0x15a>
 8005d1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d20:	d003      	beq.n	8005d2a <UART_SetConfig+0x14e>
 8005d22:	e00b      	b.n	8005d3c <UART_SetConfig+0x160>
 8005d24:	2300      	movs	r3, #0
 8005d26:	77fb      	strb	r3, [r7, #31]
 8005d28:	e060      	b.n	8005dec <UART_SetConfig+0x210>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	77fb      	strb	r3, [r7, #31]
 8005d2e:	e05d      	b.n	8005dec <UART_SetConfig+0x210>
 8005d30:	2304      	movs	r3, #4
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e05a      	b.n	8005dec <UART_SetConfig+0x210>
 8005d36:	2308      	movs	r3, #8
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e057      	b.n	8005dec <UART_SetConfig+0x210>
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	bf00      	nop
 8005d42:	e053      	b.n	8005dec <UART_SetConfig+0x210>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a61      	ldr	r2, [pc, #388]	; (8005ed0 <UART_SetConfig+0x2f4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d123      	bne.n	8005d96 <UART_SetConfig+0x1ba>
 8005d4e:	4b5d      	ldr	r3, [pc, #372]	; (8005ec4 <UART_SetConfig+0x2e8>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d5a:	d012      	beq.n	8005d82 <UART_SetConfig+0x1a6>
 8005d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d60:	d802      	bhi.n	8005d68 <UART_SetConfig+0x18c>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <UART_SetConfig+0x19a>
 8005d66:	e012      	b.n	8005d8e <UART_SetConfig+0x1b2>
 8005d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d6c:	d00c      	beq.n	8005d88 <UART_SetConfig+0x1ac>
 8005d6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d72:	d003      	beq.n	8005d7c <UART_SetConfig+0x1a0>
 8005d74:	e00b      	b.n	8005d8e <UART_SetConfig+0x1b2>
 8005d76:	2300      	movs	r3, #0
 8005d78:	77fb      	strb	r3, [r7, #31]
 8005d7a:	e037      	b.n	8005dec <UART_SetConfig+0x210>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e034      	b.n	8005dec <UART_SetConfig+0x210>
 8005d82:	2304      	movs	r3, #4
 8005d84:	77fb      	strb	r3, [r7, #31]
 8005d86:	e031      	b.n	8005dec <UART_SetConfig+0x210>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	77fb      	strb	r3, [r7, #31]
 8005d8c:	e02e      	b.n	8005dec <UART_SetConfig+0x210>
 8005d8e:	2310      	movs	r3, #16
 8005d90:	77fb      	strb	r3, [r7, #31]
 8005d92:	bf00      	nop
 8005d94:	e02a      	b.n	8005dec <UART_SetConfig+0x210>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a4e      	ldr	r2, [pc, #312]	; (8005ed4 <UART_SetConfig+0x2f8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d123      	bne.n	8005de8 <UART_SetConfig+0x20c>
 8005da0:	4b48      	ldr	r3, [pc, #288]	; (8005ec4 <UART_SetConfig+0x2e8>)
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dac:	d012      	beq.n	8005dd4 <UART_SetConfig+0x1f8>
 8005dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005db2:	d802      	bhi.n	8005dba <UART_SetConfig+0x1de>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <UART_SetConfig+0x1ec>
 8005db8:	e012      	b.n	8005de0 <UART_SetConfig+0x204>
 8005dba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dbe:	d00c      	beq.n	8005dda <UART_SetConfig+0x1fe>
 8005dc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005dc4:	d003      	beq.n	8005dce <UART_SetConfig+0x1f2>
 8005dc6:	e00b      	b.n	8005de0 <UART_SetConfig+0x204>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e00e      	b.n	8005dec <UART_SetConfig+0x210>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	e00b      	b.n	8005dec <UART_SetConfig+0x210>
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	77fb      	strb	r3, [r7, #31]
 8005dd8:	e008      	b.n	8005dec <UART_SetConfig+0x210>
 8005dda:	2308      	movs	r3, #8
 8005ddc:	77fb      	strb	r3, [r7, #31]
 8005dde:	e005      	b.n	8005dec <UART_SetConfig+0x210>
 8005de0:	2310      	movs	r3, #16
 8005de2:	77fb      	strb	r3, [r7, #31]
 8005de4:	bf00      	nop
 8005de6:	e001      	b.n	8005dec <UART_SetConfig+0x210>
 8005de8:	2310      	movs	r3, #16
 8005dea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df4:	f040 8090 	bne.w	8005f18 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8005df8:	7ffb      	ldrb	r3, [r7, #31]
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d86c      	bhi.n	8005ed8 <UART_SetConfig+0x2fc>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0x228>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e49 	.word	0x08005e49
 8005e0c:	08005e69 	.word	0x08005e69
 8005e10:	08005ed9 	.word	0x08005ed9
 8005e14:	08005e85 	.word	0x08005e85
 8005e18:	08005ed9 	.word	0x08005ed9
 8005e1c:	08005ed9 	.word	0x08005ed9
 8005e20:	08005ed9 	.word	0x08005ed9
 8005e24:	08005ea5 	.word	0x08005ea5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e28:	f7ff f884 	bl	8004f34 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	005a      	lsls	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	441a      	add	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	61bb      	str	r3, [r7, #24]
        break;
 8005e46:	e04a      	b.n	8005ede <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e48:	f7ff f896 	bl	8004f78 <HAL_RCC_GetPCLK2Freq>
 8005e4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	005a      	lsls	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	085b      	lsrs	r3, r3, #1
 8005e58:	441a      	add	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	61bb      	str	r3, [r7, #24]
        break;
 8005e66:	e03a      	b.n	8005ede <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005e72:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6852      	ldr	r2, [r2, #4]
 8005e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	61bb      	str	r3, [r7, #24]
        break;
 8005e82:	e02c      	b.n	8005ede <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e84:	f7fe ffe0 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8005e88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	005a      	lsls	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	441a      	add	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	61bb      	str	r3, [r7, #24]
        break;
 8005ea2:	e01c      	b.n	8005ede <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	61bb      	str	r3, [r7, #24]
        break;
 8005eba:	e010      	b.n	8005ede <UART_SetConfig+0x302>
 8005ebc:	efff69f3 	.word	0xefff69f3
 8005ec0:	40013800 	.word	0x40013800
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40004400 	.word	0x40004400
 8005ecc:	40004800 	.word	0x40004800
 8005ed0:	40004c00 	.word	0x40004c00
 8005ed4:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	75fb      	strb	r3, [r7, #23]
        break;
 8005edc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b0f      	cmp	r3, #15
 8005ee2:	d916      	bls.n	8005f12 <UART_SetConfig+0x336>
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eea:	d212      	bcs.n	8005f12 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f023 030f 	bic.w	r3, r3, #15
 8005ef4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	085b      	lsrs	r3, r3, #1
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	897b      	ldrh	r3, [r7, #10]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	897a      	ldrh	r2, [r7, #10]
 8005f0e:	60da      	str	r2, [r3, #12]
 8005f10:	e072      	b.n	8005ff8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	75fb      	strb	r3, [r7, #23]
 8005f16:	e06f      	b.n	8005ff8 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8005f18:	7ffb      	ldrb	r3, [r7, #31]
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d85b      	bhi.n	8005fd6 <UART_SetConfig+0x3fa>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x348>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f49 	.word	0x08005f49
 8005f28:	08005f67 	.word	0x08005f67
 8005f2c:	08005f85 	.word	0x08005f85
 8005f30:	08005fd7 	.word	0x08005fd7
 8005f34:	08005fa1 	.word	0x08005fa1
 8005f38:	08005fd7 	.word	0x08005fd7
 8005f3c:	08005fd7 	.word	0x08005fd7
 8005f40:	08005fd7 	.word	0x08005fd7
 8005f44:	08005fbf 	.word	0x08005fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f48:	f7fe fff4 	bl	8004f34 <HAL_RCC_GetPCLK1Freq>
 8005f4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	085a      	lsrs	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	441a      	add	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	61bb      	str	r3, [r7, #24]
        break;
 8005f64:	e03a      	b.n	8005fdc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f66:	f7ff f807 	bl	8004f78 <HAL_RCC_GetPCLK2Freq>
 8005f6a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	085a      	lsrs	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	441a      	add	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	61bb      	str	r3, [r7, #24]
        break;
 8005f82:	e02b      	b.n	8005fdc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005f8e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6852      	ldr	r2, [r2, #4]
 8005f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	61bb      	str	r3, [r7, #24]
        break;
 8005f9e:	e01d      	b.n	8005fdc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa0:	f7fe ff52 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8005fa4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	085a      	lsrs	r2, r3, #1
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	441a      	add	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	61bb      	str	r3, [r7, #24]
        break;
 8005fbc:	e00e      	b.n	8005fdc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	61bb      	str	r3, [r7, #24]
        break;
 8005fd4:	e002      	b.n	8005fdc <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	75fb      	strb	r3, [r7, #23]
        break;
 8005fda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b0f      	cmp	r3, #15
 8005fe0:	d908      	bls.n	8005ff4 <UART_SetConfig+0x418>
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe8:	d204      	bcs.n	8005ff4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	e001      	b.n	8005ff8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006004:	7dfb      	ldrb	r3, [r7, #23]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3720      	adds	r7, #32
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop

08006010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	f003 0320 	and.w	r3, r3, #32
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01a      	beq.n	8006126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800610e:	d10a      	bne.n	8006126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	605a      	str	r2, [r3, #4]
  }
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af02      	add	r7, sp, #8
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006162:	f7fc fb2b 	bl	80027bc <HAL_GetTick>
 8006166:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b08      	cmp	r3, #8
 8006174:	d10e      	bne.n	8006194 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006176:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f82a 	bl	80061de <UART_WaitOnFlagUntilTimeout>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e020      	b.n	80061d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d10e      	bne.n	80061c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f814 	bl	80061de <UART_WaitOnFlagUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e00a      	b.n	80061d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	603b      	str	r3, [r7, #0]
 80061ea:	4613      	mov	r3, r2
 80061ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ee:	e05d      	b.n	80062ac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d059      	beq.n	80062ac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f8:	f7fc fae0 	bl	80027bc <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	429a      	cmp	r2, r3
 8006206:	d302      	bcc.n	800620e <UART_WaitOnFlagUntilTimeout+0x30>
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d11b      	bne.n	8006246 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800621c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0201 	bic.w	r2, r2, #1
 800622c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2220      	movs	r2, #32
 8006232:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e042      	b.n	80062cc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02b      	beq.n	80062ac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800625e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006262:	d123      	bne.n	80062ac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800626c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800627c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2220      	movs	r2, #32
 8006292:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2220      	movs	r2, #32
 800629e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e00f      	b.n	80062cc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69da      	ldr	r2, [r3, #28]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d092      	beq.n	80061f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80062ea:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006314:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0201 	bic.w	r2, r2, #1
 8006324:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	2b20      	cmp	r3, #32
 8006352:	d01e      	beq.n	8006392 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800636a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800638a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff fc04 	bl	8005ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff fc00 	bl	8005bb4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b4:	bf00      	nop
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b80      	cmp	r3, #128	; 0x80
 80063e2:	d109      	bne.n	80063f8 <UART_DMAError+0x3c>
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b21      	cmp	r3, #33	; 0x21
 80063e8:	d106      	bne.n	80063f8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80063f2:	6978      	ldr	r0, [r7, #20]
 80063f4:	f7ff ff6e 	bl	80062d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	d109      	bne.n	800641a <UART_DMAError+0x5e>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b22      	cmp	r3, #34	; 0x22
 800640a:	d106      	bne.n	800641a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2200      	movs	r2, #0
 8006410:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006414:	6978      	ldr	r0, [r7, #20]
 8006416:	f7ff ff72 	bl	80062fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800641e:	f043 0210 	orr.w	r2, r3, #16
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006426:	6978      	ldr	r0, [r7, #20]
 8006428:	f7ff fbce 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800642c:	bf00      	nop
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7ff fbb8 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006458:	bf00      	nop
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006476:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff fb81 	bl	8005b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <_Znwj>:
 80064a6:	b510      	push	{r4, lr}
 80064a8:	2800      	cmp	r0, #0
 80064aa:	bf14      	ite	ne
 80064ac:	4604      	movne	r4, r0
 80064ae:	2401      	moveq	r4, #1
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 f843 	bl	800653c <malloc>
 80064b6:	b930      	cbnz	r0, 80064c6 <_Znwj+0x20>
 80064b8:	f000 f806 	bl	80064c8 <_ZSt15get_new_handlerv>
 80064bc:	b908      	cbnz	r0, 80064c2 <_Znwj+0x1c>
 80064be:	f000 f80b 	bl	80064d8 <abort>
 80064c2:	4780      	blx	r0
 80064c4:	e7f4      	b.n	80064b0 <_Znwj+0xa>
 80064c6:	bd10      	pop	{r4, pc}

080064c8 <_ZSt15get_new_handlerv>:
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <_ZSt15get_new_handlerv+0xc>)
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	f3bf 8f5b 	dmb	ish
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000514 	.word	0x20000514

080064d8 <abort>:
 80064d8:	b508      	push	{r3, lr}
 80064da:	2006      	movs	r0, #6
 80064dc:	f000 fc68 	bl	8006db0 <raise>
 80064e0:	2001      	movs	r0, #1
 80064e2:	f7fc f89b 	bl	800261c <_exit>
	...

080064e8 <__errno>:
 80064e8:	4b01      	ldr	r3, [pc, #4]	; (80064f0 <__errno+0x8>)
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	2000000c 	.word	0x2000000c

080064f4 <__libc_init_array>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	4e0d      	ldr	r6, [pc, #52]	; (800652c <__libc_init_array+0x38>)
 80064f8:	4c0d      	ldr	r4, [pc, #52]	; (8006530 <__libc_init_array+0x3c>)
 80064fa:	1ba4      	subs	r4, r4, r6
 80064fc:	10a4      	asrs	r4, r4, #2
 80064fe:	2500      	movs	r5, #0
 8006500:	42a5      	cmp	r5, r4
 8006502:	d109      	bne.n	8006518 <__libc_init_array+0x24>
 8006504:	4e0b      	ldr	r6, [pc, #44]	; (8006534 <__libc_init_array+0x40>)
 8006506:	4c0c      	ldr	r4, [pc, #48]	; (8006538 <__libc_init_array+0x44>)
 8006508:	f002 faca 	bl	8008aa0 <_init>
 800650c:	1ba4      	subs	r4, r4, r6
 800650e:	10a4      	asrs	r4, r4, #2
 8006510:	2500      	movs	r5, #0
 8006512:	42a5      	cmp	r5, r4
 8006514:	d105      	bne.n	8006522 <__libc_init_array+0x2e>
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800651c:	4798      	blx	r3
 800651e:	3501      	adds	r5, #1
 8006520:	e7ee      	b.n	8006500 <__libc_init_array+0xc>
 8006522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006526:	4798      	blx	r3
 8006528:	3501      	adds	r5, #1
 800652a:	e7f2      	b.n	8006512 <__libc_init_array+0x1e>
 800652c:	08008dc0 	.word	0x08008dc0
 8006530:	08008dc0 	.word	0x08008dc0
 8006534:	08008dc0 	.word	0x08008dc0
 8006538:	08008dc4 	.word	0x08008dc4

0800653c <malloc>:
 800653c:	4b02      	ldr	r3, [pc, #8]	; (8006548 <malloc+0xc>)
 800653e:	4601      	mov	r1, r0
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	f000 b859 	b.w	80065f8 <_malloc_r>
 8006546:	bf00      	nop
 8006548:	2000000c 	.word	0x2000000c

0800654c <memset>:
 800654c:	4402      	add	r2, r0
 800654e:	4603      	mov	r3, r0
 8006550:	4293      	cmp	r3, r2
 8006552:	d100      	bne.n	8006556 <memset+0xa>
 8006554:	4770      	bx	lr
 8006556:	f803 1b01 	strb.w	r1, [r3], #1
 800655a:	e7f9      	b.n	8006550 <memset+0x4>

0800655c <_free_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4605      	mov	r5, r0
 8006560:	2900      	cmp	r1, #0
 8006562:	d045      	beq.n	80065f0 <_free_r+0x94>
 8006564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006568:	1f0c      	subs	r4, r1, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	bfb8      	it	lt
 800656e:	18e4      	addlt	r4, r4, r3
 8006570:	f001 fac3 	bl	8007afa <__malloc_lock>
 8006574:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <_free_r+0x98>)
 8006576:	6813      	ldr	r3, [r2, #0]
 8006578:	4610      	mov	r0, r2
 800657a:	b933      	cbnz	r3, 800658a <_free_r+0x2e>
 800657c:	6063      	str	r3, [r4, #4]
 800657e:	6014      	str	r4, [r2, #0]
 8006580:	4628      	mov	r0, r5
 8006582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006586:	f001 bab9 	b.w	8007afc <__malloc_unlock>
 800658a:	42a3      	cmp	r3, r4
 800658c:	d90c      	bls.n	80065a8 <_free_r+0x4c>
 800658e:	6821      	ldr	r1, [r4, #0]
 8006590:	1862      	adds	r2, r4, r1
 8006592:	4293      	cmp	r3, r2
 8006594:	bf04      	itt	eq
 8006596:	681a      	ldreq	r2, [r3, #0]
 8006598:	685b      	ldreq	r3, [r3, #4]
 800659a:	6063      	str	r3, [r4, #4]
 800659c:	bf04      	itt	eq
 800659e:	1852      	addeq	r2, r2, r1
 80065a0:	6022      	streq	r2, [r4, #0]
 80065a2:	6004      	str	r4, [r0, #0]
 80065a4:	e7ec      	b.n	8006580 <_free_r+0x24>
 80065a6:	4613      	mov	r3, r2
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	b10a      	cbz	r2, 80065b0 <_free_r+0x54>
 80065ac:	42a2      	cmp	r2, r4
 80065ae:	d9fa      	bls.n	80065a6 <_free_r+0x4a>
 80065b0:	6819      	ldr	r1, [r3, #0]
 80065b2:	1858      	adds	r0, r3, r1
 80065b4:	42a0      	cmp	r0, r4
 80065b6:	d10b      	bne.n	80065d0 <_free_r+0x74>
 80065b8:	6820      	ldr	r0, [r4, #0]
 80065ba:	4401      	add	r1, r0
 80065bc:	1858      	adds	r0, r3, r1
 80065be:	4282      	cmp	r2, r0
 80065c0:	6019      	str	r1, [r3, #0]
 80065c2:	d1dd      	bne.n	8006580 <_free_r+0x24>
 80065c4:	6810      	ldr	r0, [r2, #0]
 80065c6:	6852      	ldr	r2, [r2, #4]
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	4401      	add	r1, r0
 80065cc:	6019      	str	r1, [r3, #0]
 80065ce:	e7d7      	b.n	8006580 <_free_r+0x24>
 80065d0:	d902      	bls.n	80065d8 <_free_r+0x7c>
 80065d2:	230c      	movs	r3, #12
 80065d4:	602b      	str	r3, [r5, #0]
 80065d6:	e7d3      	b.n	8006580 <_free_r+0x24>
 80065d8:	6820      	ldr	r0, [r4, #0]
 80065da:	1821      	adds	r1, r4, r0
 80065dc:	428a      	cmp	r2, r1
 80065de:	bf04      	itt	eq
 80065e0:	6811      	ldreq	r1, [r2, #0]
 80065e2:	6852      	ldreq	r2, [r2, #4]
 80065e4:	6062      	str	r2, [r4, #4]
 80065e6:	bf04      	itt	eq
 80065e8:	1809      	addeq	r1, r1, r0
 80065ea:	6021      	streq	r1, [r4, #0]
 80065ec:	605c      	str	r4, [r3, #4]
 80065ee:	e7c7      	b.n	8006580 <_free_r+0x24>
 80065f0:	bd38      	pop	{r3, r4, r5, pc}
 80065f2:	bf00      	nop
 80065f4:	20000518 	.word	0x20000518

080065f8 <_malloc_r>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	1ccd      	adds	r5, r1, #3
 80065fc:	f025 0503 	bic.w	r5, r5, #3
 8006600:	3508      	adds	r5, #8
 8006602:	2d0c      	cmp	r5, #12
 8006604:	bf38      	it	cc
 8006606:	250c      	movcc	r5, #12
 8006608:	2d00      	cmp	r5, #0
 800660a:	4606      	mov	r6, r0
 800660c:	db01      	blt.n	8006612 <_malloc_r+0x1a>
 800660e:	42a9      	cmp	r1, r5
 8006610:	d903      	bls.n	800661a <_malloc_r+0x22>
 8006612:	230c      	movs	r3, #12
 8006614:	6033      	str	r3, [r6, #0]
 8006616:	2000      	movs	r0, #0
 8006618:	bd70      	pop	{r4, r5, r6, pc}
 800661a:	f001 fa6e 	bl	8007afa <__malloc_lock>
 800661e:	4a21      	ldr	r2, [pc, #132]	; (80066a4 <_malloc_r+0xac>)
 8006620:	6814      	ldr	r4, [r2, #0]
 8006622:	4621      	mov	r1, r4
 8006624:	b991      	cbnz	r1, 800664c <_malloc_r+0x54>
 8006626:	4c20      	ldr	r4, [pc, #128]	; (80066a8 <_malloc_r+0xb0>)
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	b91b      	cbnz	r3, 8006634 <_malloc_r+0x3c>
 800662c:	4630      	mov	r0, r6
 800662e:	f000 fb87 	bl	8006d40 <_sbrk_r>
 8006632:	6020      	str	r0, [r4, #0]
 8006634:	4629      	mov	r1, r5
 8006636:	4630      	mov	r0, r6
 8006638:	f000 fb82 	bl	8006d40 <_sbrk_r>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d124      	bne.n	800668a <_malloc_r+0x92>
 8006640:	230c      	movs	r3, #12
 8006642:	6033      	str	r3, [r6, #0]
 8006644:	4630      	mov	r0, r6
 8006646:	f001 fa59 	bl	8007afc <__malloc_unlock>
 800664a:	e7e4      	b.n	8006616 <_malloc_r+0x1e>
 800664c:	680b      	ldr	r3, [r1, #0]
 800664e:	1b5b      	subs	r3, r3, r5
 8006650:	d418      	bmi.n	8006684 <_malloc_r+0x8c>
 8006652:	2b0b      	cmp	r3, #11
 8006654:	d90f      	bls.n	8006676 <_malloc_r+0x7e>
 8006656:	600b      	str	r3, [r1, #0]
 8006658:	50cd      	str	r5, [r1, r3]
 800665a:	18cc      	adds	r4, r1, r3
 800665c:	4630      	mov	r0, r6
 800665e:	f001 fa4d 	bl	8007afc <__malloc_unlock>
 8006662:	f104 000b 	add.w	r0, r4, #11
 8006666:	1d23      	adds	r3, r4, #4
 8006668:	f020 0007 	bic.w	r0, r0, #7
 800666c:	1ac3      	subs	r3, r0, r3
 800666e:	d0d3      	beq.n	8006618 <_malloc_r+0x20>
 8006670:	425a      	negs	r2, r3
 8006672:	50e2      	str	r2, [r4, r3]
 8006674:	e7d0      	b.n	8006618 <_malloc_r+0x20>
 8006676:	428c      	cmp	r4, r1
 8006678:	684b      	ldr	r3, [r1, #4]
 800667a:	bf16      	itet	ne
 800667c:	6063      	strne	r3, [r4, #4]
 800667e:	6013      	streq	r3, [r2, #0]
 8006680:	460c      	movne	r4, r1
 8006682:	e7eb      	b.n	800665c <_malloc_r+0x64>
 8006684:	460c      	mov	r4, r1
 8006686:	6849      	ldr	r1, [r1, #4]
 8006688:	e7cc      	b.n	8006624 <_malloc_r+0x2c>
 800668a:	1cc4      	adds	r4, r0, #3
 800668c:	f024 0403 	bic.w	r4, r4, #3
 8006690:	42a0      	cmp	r0, r4
 8006692:	d005      	beq.n	80066a0 <_malloc_r+0xa8>
 8006694:	1a21      	subs	r1, r4, r0
 8006696:	4630      	mov	r0, r6
 8006698:	f000 fb52 	bl	8006d40 <_sbrk_r>
 800669c:	3001      	adds	r0, #1
 800669e:	d0cf      	beq.n	8006640 <_malloc_r+0x48>
 80066a0:	6025      	str	r5, [r4, #0]
 80066a2:	e7db      	b.n	800665c <_malloc_r+0x64>
 80066a4:	20000518 	.word	0x20000518
 80066a8:	2000051c 	.word	0x2000051c

080066ac <__cvt>:
 80066ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	ec55 4b10 	vmov	r4, r5, d0
 80066b4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80066b6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80066ba:	2d00      	cmp	r5, #0
 80066bc:	460e      	mov	r6, r1
 80066be:	4691      	mov	r9, r2
 80066c0:	4619      	mov	r1, r3
 80066c2:	bfb8      	it	lt
 80066c4:	4622      	movlt	r2, r4
 80066c6:	462b      	mov	r3, r5
 80066c8:	f027 0720 	bic.w	r7, r7, #32
 80066cc:	bfbb      	ittet	lt
 80066ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80066d2:	461d      	movlt	r5, r3
 80066d4:	2300      	movge	r3, #0
 80066d6:	232d      	movlt	r3, #45	; 0x2d
 80066d8:	bfb8      	it	lt
 80066da:	4614      	movlt	r4, r2
 80066dc:	2f46      	cmp	r7, #70	; 0x46
 80066de:	700b      	strb	r3, [r1, #0]
 80066e0:	d004      	beq.n	80066ec <__cvt+0x40>
 80066e2:	2f45      	cmp	r7, #69	; 0x45
 80066e4:	d100      	bne.n	80066e8 <__cvt+0x3c>
 80066e6:	3601      	adds	r6, #1
 80066e8:	2102      	movs	r1, #2
 80066ea:	e000      	b.n	80066ee <__cvt+0x42>
 80066ec:	2103      	movs	r1, #3
 80066ee:	ab03      	add	r3, sp, #12
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	ab02      	add	r3, sp, #8
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	4632      	mov	r2, r6
 80066f8:	4653      	mov	r3, sl
 80066fa:	ec45 4b10 	vmov	d0, r4, r5
 80066fe:	f000 fc2b 	bl	8006f58 <_dtoa_r>
 8006702:	2f47      	cmp	r7, #71	; 0x47
 8006704:	4680      	mov	r8, r0
 8006706:	d102      	bne.n	800670e <__cvt+0x62>
 8006708:	f019 0f01 	tst.w	r9, #1
 800670c:	d026      	beq.n	800675c <__cvt+0xb0>
 800670e:	2f46      	cmp	r7, #70	; 0x46
 8006710:	eb08 0906 	add.w	r9, r8, r6
 8006714:	d111      	bne.n	800673a <__cvt+0x8e>
 8006716:	f898 3000 	ldrb.w	r3, [r8]
 800671a:	2b30      	cmp	r3, #48	; 0x30
 800671c:	d10a      	bne.n	8006734 <__cvt+0x88>
 800671e:	2200      	movs	r2, #0
 8006720:	2300      	movs	r3, #0
 8006722:	4620      	mov	r0, r4
 8006724:	4629      	mov	r1, r5
 8006726:	f7fa f9d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800672a:	b918      	cbnz	r0, 8006734 <__cvt+0x88>
 800672c:	f1c6 0601 	rsb	r6, r6, #1
 8006730:	f8ca 6000 	str.w	r6, [sl]
 8006734:	f8da 3000 	ldr.w	r3, [sl]
 8006738:	4499      	add	r9, r3
 800673a:	2200      	movs	r2, #0
 800673c:	2300      	movs	r3, #0
 800673e:	4620      	mov	r0, r4
 8006740:	4629      	mov	r1, r5
 8006742:	f7fa f9c9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006746:	b938      	cbnz	r0, 8006758 <__cvt+0xac>
 8006748:	2230      	movs	r2, #48	; 0x30
 800674a:	9b03      	ldr	r3, [sp, #12]
 800674c:	454b      	cmp	r3, r9
 800674e:	d205      	bcs.n	800675c <__cvt+0xb0>
 8006750:	1c59      	adds	r1, r3, #1
 8006752:	9103      	str	r1, [sp, #12]
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	e7f8      	b.n	800674a <__cvt+0x9e>
 8006758:	f8cd 900c 	str.w	r9, [sp, #12]
 800675c:	9b03      	ldr	r3, [sp, #12]
 800675e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006760:	eba3 0308 	sub.w	r3, r3, r8
 8006764:	4640      	mov	r0, r8
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	b004      	add	sp, #16
 800676a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800676e <__exponent>:
 800676e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006770:	2900      	cmp	r1, #0
 8006772:	4604      	mov	r4, r0
 8006774:	bfba      	itte	lt
 8006776:	4249      	neglt	r1, r1
 8006778:	232d      	movlt	r3, #45	; 0x2d
 800677a:	232b      	movge	r3, #43	; 0x2b
 800677c:	2909      	cmp	r1, #9
 800677e:	f804 2b02 	strb.w	r2, [r4], #2
 8006782:	7043      	strb	r3, [r0, #1]
 8006784:	dd20      	ble.n	80067c8 <__exponent+0x5a>
 8006786:	f10d 0307 	add.w	r3, sp, #7
 800678a:	461f      	mov	r7, r3
 800678c:	260a      	movs	r6, #10
 800678e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006792:	fb06 1115 	mls	r1, r6, r5, r1
 8006796:	3130      	adds	r1, #48	; 0x30
 8006798:	2d09      	cmp	r5, #9
 800679a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800679e:	f103 32ff 	add.w	r2, r3, #4294967295
 80067a2:	4629      	mov	r1, r5
 80067a4:	dc09      	bgt.n	80067ba <__exponent+0x4c>
 80067a6:	3130      	adds	r1, #48	; 0x30
 80067a8:	3b02      	subs	r3, #2
 80067aa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80067ae:	42bb      	cmp	r3, r7
 80067b0:	4622      	mov	r2, r4
 80067b2:	d304      	bcc.n	80067be <__exponent+0x50>
 80067b4:	1a10      	subs	r0, r2, r0
 80067b6:	b003      	add	sp, #12
 80067b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ba:	4613      	mov	r3, r2
 80067bc:	e7e7      	b.n	800678e <__exponent+0x20>
 80067be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067c2:	f804 2b01 	strb.w	r2, [r4], #1
 80067c6:	e7f2      	b.n	80067ae <__exponent+0x40>
 80067c8:	2330      	movs	r3, #48	; 0x30
 80067ca:	4419      	add	r1, r3
 80067cc:	7083      	strb	r3, [r0, #2]
 80067ce:	1d02      	adds	r2, r0, #4
 80067d0:	70c1      	strb	r1, [r0, #3]
 80067d2:	e7ef      	b.n	80067b4 <__exponent+0x46>

080067d4 <_printf_float>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	b08d      	sub	sp, #52	; 0x34
 80067da:	460c      	mov	r4, r1
 80067dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80067e0:	4616      	mov	r6, r2
 80067e2:	461f      	mov	r7, r3
 80067e4:	4605      	mov	r5, r0
 80067e6:	f001 f96f 	bl	8007ac8 <_localeconv_r>
 80067ea:	6803      	ldr	r3, [r0, #0]
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7f9 fcf6 	bl	80001e0 <strlen>
 80067f4:	2300      	movs	r3, #0
 80067f6:	930a      	str	r3, [sp, #40]	; 0x28
 80067f8:	f8d8 3000 	ldr.w	r3, [r8]
 80067fc:	9005      	str	r0, [sp, #20]
 80067fe:	3307      	adds	r3, #7
 8006800:	f023 0307 	bic.w	r3, r3, #7
 8006804:	f103 0208 	add.w	r2, r3, #8
 8006808:	f894 a018 	ldrb.w	sl, [r4, #24]
 800680c:	f8d4 b000 	ldr.w	fp, [r4]
 8006810:	f8c8 2000 	str.w	r2, [r8]
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800681c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006820:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006824:	9307      	str	r3, [sp, #28]
 8006826:	f8cd 8018 	str.w	r8, [sp, #24]
 800682a:	f04f 32ff 	mov.w	r2, #4294967295
 800682e:	4ba7      	ldr	r3, [pc, #668]	; (8006acc <_printf_float+0x2f8>)
 8006830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006834:	f7fa f982 	bl	8000b3c <__aeabi_dcmpun>
 8006838:	bb70      	cbnz	r0, 8006898 <_printf_float+0xc4>
 800683a:	f04f 32ff 	mov.w	r2, #4294967295
 800683e:	4ba3      	ldr	r3, [pc, #652]	; (8006acc <_printf_float+0x2f8>)
 8006840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006844:	f7fa f95c 	bl	8000b00 <__aeabi_dcmple>
 8006848:	bb30      	cbnz	r0, 8006898 <_printf_float+0xc4>
 800684a:	2200      	movs	r2, #0
 800684c:	2300      	movs	r3, #0
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f7fa f94b 	bl	8000aec <__aeabi_dcmplt>
 8006856:	b110      	cbz	r0, 800685e <_printf_float+0x8a>
 8006858:	232d      	movs	r3, #45	; 0x2d
 800685a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685e:	4a9c      	ldr	r2, [pc, #624]	; (8006ad0 <_printf_float+0x2fc>)
 8006860:	4b9c      	ldr	r3, [pc, #624]	; (8006ad4 <_printf_float+0x300>)
 8006862:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006866:	bf8c      	ite	hi
 8006868:	4690      	movhi	r8, r2
 800686a:	4698      	movls	r8, r3
 800686c:	2303      	movs	r3, #3
 800686e:	f02b 0204 	bic.w	r2, fp, #4
 8006872:	6123      	str	r3, [r4, #16]
 8006874:	6022      	str	r2, [r4, #0]
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	9700      	str	r7, [sp, #0]
 800687c:	4633      	mov	r3, r6
 800687e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f9e6 	bl	8006c54 <_printf_common>
 8006888:	3001      	adds	r0, #1
 800688a:	f040 808d 	bne.w	80069a8 <_printf_float+0x1d4>
 800688e:	f04f 30ff 	mov.w	r0, #4294967295
 8006892:	b00d      	add	sp, #52	; 0x34
 8006894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006898:	4642      	mov	r2, r8
 800689a:	464b      	mov	r3, r9
 800689c:	4640      	mov	r0, r8
 800689e:	4649      	mov	r1, r9
 80068a0:	f7fa f94c 	bl	8000b3c <__aeabi_dcmpun>
 80068a4:	b110      	cbz	r0, 80068ac <_printf_float+0xd8>
 80068a6:	4a8c      	ldr	r2, [pc, #560]	; (8006ad8 <_printf_float+0x304>)
 80068a8:	4b8c      	ldr	r3, [pc, #560]	; (8006adc <_printf_float+0x308>)
 80068aa:	e7da      	b.n	8006862 <_printf_float+0x8e>
 80068ac:	6861      	ldr	r1, [r4, #4]
 80068ae:	1c4b      	adds	r3, r1, #1
 80068b0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80068b4:	a80a      	add	r0, sp, #40	; 0x28
 80068b6:	d13e      	bne.n	8006936 <_printf_float+0x162>
 80068b8:	2306      	movs	r3, #6
 80068ba:	6063      	str	r3, [r4, #4]
 80068bc:	2300      	movs	r3, #0
 80068be:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80068c2:	ab09      	add	r3, sp, #36	; 0x24
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	ec49 8b10 	vmov	d0, r8, r9
 80068ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80068ce:	6022      	str	r2, [r4, #0]
 80068d0:	f8cd a004 	str.w	sl, [sp, #4]
 80068d4:	6861      	ldr	r1, [r4, #4]
 80068d6:	4628      	mov	r0, r5
 80068d8:	f7ff fee8 	bl	80066ac <__cvt>
 80068dc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80068e0:	2b47      	cmp	r3, #71	; 0x47
 80068e2:	4680      	mov	r8, r0
 80068e4:	d109      	bne.n	80068fa <_printf_float+0x126>
 80068e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e8:	1cd8      	adds	r0, r3, #3
 80068ea:	db02      	blt.n	80068f2 <_printf_float+0x11e>
 80068ec:	6862      	ldr	r2, [r4, #4]
 80068ee:	4293      	cmp	r3, r2
 80068f0:	dd47      	ble.n	8006982 <_printf_float+0x1ae>
 80068f2:	f1aa 0a02 	sub.w	sl, sl, #2
 80068f6:	fa5f fa8a 	uxtb.w	sl, sl
 80068fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80068fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006900:	d824      	bhi.n	800694c <_printf_float+0x178>
 8006902:	3901      	subs	r1, #1
 8006904:	4652      	mov	r2, sl
 8006906:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800690a:	9109      	str	r1, [sp, #36]	; 0x24
 800690c:	f7ff ff2f 	bl	800676e <__exponent>
 8006910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006912:	1813      	adds	r3, r2, r0
 8006914:	2a01      	cmp	r2, #1
 8006916:	4681      	mov	r9, r0
 8006918:	6123      	str	r3, [r4, #16]
 800691a:	dc02      	bgt.n	8006922 <_printf_float+0x14e>
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	07d1      	lsls	r1, r2, #31
 8006920:	d501      	bpl.n	8006926 <_printf_float+0x152>
 8006922:	3301      	adds	r3, #1
 8006924:	6123      	str	r3, [r4, #16]
 8006926:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0a5      	beq.n	800687a <_printf_float+0xa6>
 800692e:	232d      	movs	r3, #45	; 0x2d
 8006930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006934:	e7a1      	b.n	800687a <_printf_float+0xa6>
 8006936:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800693a:	f000 8177 	beq.w	8006c2c <_printf_float+0x458>
 800693e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006942:	d1bb      	bne.n	80068bc <_printf_float+0xe8>
 8006944:	2900      	cmp	r1, #0
 8006946:	d1b9      	bne.n	80068bc <_printf_float+0xe8>
 8006948:	2301      	movs	r3, #1
 800694a:	e7b6      	b.n	80068ba <_printf_float+0xe6>
 800694c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006950:	d119      	bne.n	8006986 <_printf_float+0x1b2>
 8006952:	2900      	cmp	r1, #0
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	dd0c      	ble.n	8006972 <_printf_float+0x19e>
 8006958:	6121      	str	r1, [r4, #16]
 800695a:	b913      	cbnz	r3, 8006962 <_printf_float+0x18e>
 800695c:	6822      	ldr	r2, [r4, #0]
 800695e:	07d2      	lsls	r2, r2, #31
 8006960:	d502      	bpl.n	8006968 <_printf_float+0x194>
 8006962:	3301      	adds	r3, #1
 8006964:	440b      	add	r3, r1
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696a:	65a3      	str	r3, [r4, #88]	; 0x58
 800696c:	f04f 0900 	mov.w	r9, #0
 8006970:	e7d9      	b.n	8006926 <_printf_float+0x152>
 8006972:	b913      	cbnz	r3, 800697a <_printf_float+0x1a6>
 8006974:	6822      	ldr	r2, [r4, #0]
 8006976:	07d0      	lsls	r0, r2, #31
 8006978:	d501      	bpl.n	800697e <_printf_float+0x1aa>
 800697a:	3302      	adds	r3, #2
 800697c:	e7f3      	b.n	8006966 <_printf_float+0x192>
 800697e:	2301      	movs	r3, #1
 8006980:	e7f1      	b.n	8006966 <_printf_float+0x192>
 8006982:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006986:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800698a:	4293      	cmp	r3, r2
 800698c:	db05      	blt.n	800699a <_printf_float+0x1c6>
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	6123      	str	r3, [r4, #16]
 8006992:	07d1      	lsls	r1, r2, #31
 8006994:	d5e8      	bpl.n	8006968 <_printf_float+0x194>
 8006996:	3301      	adds	r3, #1
 8006998:	e7e5      	b.n	8006966 <_printf_float+0x192>
 800699a:	2b00      	cmp	r3, #0
 800699c:	bfd4      	ite	le
 800699e:	f1c3 0302 	rsble	r3, r3, #2
 80069a2:	2301      	movgt	r3, #1
 80069a4:	4413      	add	r3, r2
 80069a6:	e7de      	b.n	8006966 <_printf_float+0x192>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	055a      	lsls	r2, r3, #21
 80069ac:	d407      	bmi.n	80069be <_printf_float+0x1ea>
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	4642      	mov	r2, r8
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	d12b      	bne.n	8006a14 <_printf_float+0x240>
 80069bc:	e767      	b.n	800688e <_printf_float+0xba>
 80069be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80069c2:	f240 80dc 	bls.w	8006b7e <_printf_float+0x3aa>
 80069c6:	2200      	movs	r2, #0
 80069c8:	2300      	movs	r3, #0
 80069ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069ce:	f7fa f883 	bl	8000ad8 <__aeabi_dcmpeq>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d033      	beq.n	8006a3e <_printf_float+0x26a>
 80069d6:	2301      	movs	r3, #1
 80069d8:	4a41      	ldr	r2, [pc, #260]	; (8006ae0 <_printf_float+0x30c>)
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	f43f af54 	beq.w	800688e <_printf_float+0xba>
 80069e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069ea:	429a      	cmp	r2, r3
 80069ec:	db02      	blt.n	80069f4 <_printf_float+0x220>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	07d8      	lsls	r0, r3, #31
 80069f2:	d50f      	bpl.n	8006a14 <_printf_float+0x240>
 80069f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	f43f af45 	beq.w	800688e <_printf_float+0xba>
 8006a04:	f04f 0800 	mov.w	r8, #0
 8006a08:	f104 091a 	add.w	r9, r4, #26
 8006a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	4543      	cmp	r3, r8
 8006a12:	dc09      	bgt.n	8006a28 <_printf_float+0x254>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	079b      	lsls	r3, r3, #30
 8006a18:	f100 8103 	bmi.w	8006c22 <_printf_float+0x44e>
 8006a1c:	68e0      	ldr	r0, [r4, #12]
 8006a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a20:	4298      	cmp	r0, r3
 8006a22:	bfb8      	it	lt
 8006a24:	4618      	movlt	r0, r3
 8006a26:	e734      	b.n	8006892 <_printf_float+0xbe>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	464a      	mov	r2, r9
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	f43f af2b 	beq.w	800688e <_printf_float+0xba>
 8006a38:	f108 0801 	add.w	r8, r8, #1
 8006a3c:	e7e6      	b.n	8006a0c <_printf_float+0x238>
 8006a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dc2b      	bgt.n	8006a9c <_printf_float+0x2c8>
 8006a44:	2301      	movs	r3, #1
 8006a46:	4a26      	ldr	r2, [pc, #152]	; (8006ae0 <_printf_float+0x30c>)
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b8      	blx	r7
 8006a4e:	3001      	adds	r0, #1
 8006a50:	f43f af1d 	beq.w	800688e <_printf_float+0xba>
 8006a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a56:	b923      	cbnz	r3, 8006a62 <_printf_float+0x28e>
 8006a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5a:	b913      	cbnz	r3, 8006a62 <_printf_float+0x28e>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	07d9      	lsls	r1, r3, #31
 8006a60:	d5d8      	bpl.n	8006a14 <_printf_float+0x240>
 8006a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f43f af0e 	beq.w	800688e <_printf_float+0xba>
 8006a72:	f04f 0900 	mov.w	r9, #0
 8006a76:	f104 0a1a 	add.w	sl, r4, #26
 8006a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7c:	425b      	negs	r3, r3
 8006a7e:	454b      	cmp	r3, r9
 8006a80:	dc01      	bgt.n	8006a86 <_printf_float+0x2b2>
 8006a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a84:	e794      	b.n	80069b0 <_printf_float+0x1dc>
 8006a86:	2301      	movs	r3, #1
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f aefc 	beq.w	800688e <_printf_float+0xba>
 8006a96:	f109 0901 	add.w	r9, r9, #1
 8006a9a:	e7ee      	b.n	8006a7a <_printf_float+0x2a6>
 8006a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	bfa8      	it	ge
 8006aa4:	461a      	movge	r2, r3
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	4691      	mov	r9, r2
 8006aaa:	dd07      	ble.n	8006abc <_printf_float+0x2e8>
 8006aac:	4613      	mov	r3, r2
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f43f aee9 	beq.w	800688e <_printf_float+0xba>
 8006abc:	f104 031a 	add.w	r3, r4, #26
 8006ac0:	f04f 0b00 	mov.w	fp, #0
 8006ac4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ac8:	9306      	str	r3, [sp, #24]
 8006aca:	e015      	b.n	8006af8 <_printf_float+0x324>
 8006acc:	7fefffff 	.word	0x7fefffff
 8006ad0:	08008b1c 	.word	0x08008b1c
 8006ad4:	08008b18 	.word	0x08008b18
 8006ad8:	08008b24 	.word	0x08008b24
 8006adc:	08008b20 	.word	0x08008b20
 8006ae0:	08008c4e 	.word	0x08008c4e
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	9a06      	ldr	r2, [sp, #24]
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	f43f aecd 	beq.w	800688e <_printf_float+0xba>
 8006af4:	f10b 0b01 	add.w	fp, fp, #1
 8006af8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006afc:	ebaa 0309 	sub.w	r3, sl, r9
 8006b00:	455b      	cmp	r3, fp
 8006b02:	dcef      	bgt.n	8006ae4 <_printf_float+0x310>
 8006b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	44d0      	add	r8, sl
 8006b0c:	db15      	blt.n	8006b3a <_printf_float+0x366>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	07da      	lsls	r2, r3, #31
 8006b12:	d412      	bmi.n	8006b3a <_printf_float+0x366>
 8006b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b18:	eba3 020a 	sub.w	r2, r3, sl
 8006b1c:	eba3 0a01 	sub.w	sl, r3, r1
 8006b20:	4592      	cmp	sl, r2
 8006b22:	bfa8      	it	ge
 8006b24:	4692      	movge	sl, r2
 8006b26:	f1ba 0f00 	cmp.w	sl, #0
 8006b2a:	dc0e      	bgt.n	8006b4a <_printf_float+0x376>
 8006b2c:	f04f 0800 	mov.w	r8, #0
 8006b30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b34:	f104 091a 	add.w	r9, r4, #26
 8006b38:	e019      	b.n	8006b6e <_printf_float+0x39a>
 8006b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b8      	blx	r7
 8006b44:	3001      	adds	r0, #1
 8006b46:	d1e5      	bne.n	8006b14 <_printf_float+0x340>
 8006b48:	e6a1      	b.n	800688e <_printf_float+0xba>
 8006b4a:	4653      	mov	r3, sl
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4628      	mov	r0, r5
 8006b52:	47b8      	blx	r7
 8006b54:	3001      	adds	r0, #1
 8006b56:	d1e9      	bne.n	8006b2c <_printf_float+0x358>
 8006b58:	e699      	b.n	800688e <_printf_float+0xba>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	464a      	mov	r2, r9
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4628      	mov	r0, r5
 8006b62:	47b8      	blx	r7
 8006b64:	3001      	adds	r0, #1
 8006b66:	f43f ae92 	beq.w	800688e <_printf_float+0xba>
 8006b6a:	f108 0801 	add.w	r8, r8, #1
 8006b6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b72:	1a9b      	subs	r3, r3, r2
 8006b74:	eba3 030a 	sub.w	r3, r3, sl
 8006b78:	4543      	cmp	r3, r8
 8006b7a:	dcee      	bgt.n	8006b5a <_printf_float+0x386>
 8006b7c:	e74a      	b.n	8006a14 <_printf_float+0x240>
 8006b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b80:	2a01      	cmp	r2, #1
 8006b82:	dc01      	bgt.n	8006b88 <_printf_float+0x3b4>
 8006b84:	07db      	lsls	r3, r3, #31
 8006b86:	d53a      	bpl.n	8006bfe <_printf_float+0x42a>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4642      	mov	r2, r8
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f ae7b 	beq.w	800688e <_printf_float+0xba>
 8006b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	f108 0801 	add.w	r8, r8, #1
 8006ba8:	f43f ae71 	beq.w	800688e <_printf_float+0xba>
 8006bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f103 3aff 	add.w	sl, r3, #4294967295
 8006bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f7f9 ff8d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bbe:	b9c8      	cbnz	r0, 8006bf4 <_printf_float+0x420>
 8006bc0:	4653      	mov	r3, sl
 8006bc2:	4642      	mov	r2, r8
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d10e      	bne.n	8006bec <_printf_float+0x418>
 8006bce:	e65e      	b.n	800688e <_printf_float+0xba>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4652      	mov	r2, sl
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	47b8      	blx	r7
 8006bda:	3001      	adds	r0, #1
 8006bdc:	f43f ae57 	beq.w	800688e <_printf_float+0xba>
 8006be0:	f108 0801 	add.w	r8, r8, #1
 8006be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be6:	3b01      	subs	r3, #1
 8006be8:	4543      	cmp	r3, r8
 8006bea:	dcf1      	bgt.n	8006bd0 <_printf_float+0x3fc>
 8006bec:	464b      	mov	r3, r9
 8006bee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006bf2:	e6de      	b.n	80069b2 <_printf_float+0x1de>
 8006bf4:	f04f 0800 	mov.w	r8, #0
 8006bf8:	f104 0a1a 	add.w	sl, r4, #26
 8006bfc:	e7f2      	b.n	8006be4 <_printf_float+0x410>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e7df      	b.n	8006bc2 <_printf_float+0x3ee>
 8006c02:	2301      	movs	r3, #1
 8006c04:	464a      	mov	r2, r9
 8006c06:	4631      	mov	r1, r6
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b8      	blx	r7
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	f43f ae3e 	beq.w	800688e <_printf_float+0xba>
 8006c12:	f108 0801 	add.w	r8, r8, #1
 8006c16:	68e3      	ldr	r3, [r4, #12]
 8006c18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c1a:	1a9b      	subs	r3, r3, r2
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	dcf0      	bgt.n	8006c02 <_printf_float+0x42e>
 8006c20:	e6fc      	b.n	8006a1c <_printf_float+0x248>
 8006c22:	f04f 0800 	mov.w	r8, #0
 8006c26:	f104 0919 	add.w	r9, r4, #25
 8006c2a:	e7f4      	b.n	8006c16 <_printf_float+0x442>
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	f43f ae8b 	beq.w	8006948 <_printf_float+0x174>
 8006c32:	2300      	movs	r3, #0
 8006c34:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006c38:	ab09      	add	r3, sp, #36	; 0x24
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	ec49 8b10 	vmov	d0, r8, r9
 8006c40:	6022      	str	r2, [r4, #0]
 8006c42:	f8cd a004 	str.w	sl, [sp, #4]
 8006c46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f7ff fd2e 	bl	80066ac <__cvt>
 8006c50:	4680      	mov	r8, r0
 8006c52:	e648      	b.n	80068e6 <_printf_float+0x112>

08006c54 <_printf_common>:
 8006c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c58:	4691      	mov	r9, r2
 8006c5a:	461f      	mov	r7, r3
 8006c5c:	688a      	ldr	r2, [r1, #8]
 8006c5e:	690b      	ldr	r3, [r1, #16]
 8006c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c64:	4293      	cmp	r3, r2
 8006c66:	bfb8      	it	lt
 8006c68:	4613      	movlt	r3, r2
 8006c6a:	f8c9 3000 	str.w	r3, [r9]
 8006c6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c72:	4606      	mov	r6, r0
 8006c74:	460c      	mov	r4, r1
 8006c76:	b112      	cbz	r2, 8006c7e <_printf_common+0x2a>
 8006c78:	3301      	adds	r3, #1
 8006c7a:	f8c9 3000 	str.w	r3, [r9]
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	0699      	lsls	r1, r3, #26
 8006c82:	bf42      	ittt	mi
 8006c84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c88:	3302      	addmi	r3, #2
 8006c8a:	f8c9 3000 	strmi.w	r3, [r9]
 8006c8e:	6825      	ldr	r5, [r4, #0]
 8006c90:	f015 0506 	ands.w	r5, r5, #6
 8006c94:	d107      	bne.n	8006ca6 <_printf_common+0x52>
 8006c96:	f104 0a19 	add.w	sl, r4, #25
 8006c9a:	68e3      	ldr	r3, [r4, #12]
 8006c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8006ca0:	1a9b      	subs	r3, r3, r2
 8006ca2:	42ab      	cmp	r3, r5
 8006ca4:	dc28      	bgt.n	8006cf8 <_printf_common+0xa4>
 8006ca6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006caa:	6822      	ldr	r2, [r4, #0]
 8006cac:	3300      	adds	r3, #0
 8006cae:	bf18      	it	ne
 8006cb0:	2301      	movne	r3, #1
 8006cb2:	0692      	lsls	r2, r2, #26
 8006cb4:	d42d      	bmi.n	8006d12 <_printf_common+0xbe>
 8006cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cba:	4639      	mov	r1, r7
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	47c0      	blx	r8
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d020      	beq.n	8006d06 <_printf_common+0xb2>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	68e5      	ldr	r5, [r4, #12]
 8006cc8:	f8d9 2000 	ldr.w	r2, [r9]
 8006ccc:	f003 0306 	and.w	r3, r3, #6
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	bf08      	it	eq
 8006cd4:	1aad      	subeq	r5, r5, r2
 8006cd6:	68a3      	ldr	r3, [r4, #8]
 8006cd8:	6922      	ldr	r2, [r4, #16]
 8006cda:	bf0c      	ite	eq
 8006cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ce0:	2500      	movne	r5, #0
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	bfc4      	itt	gt
 8006ce6:	1a9b      	subgt	r3, r3, r2
 8006ce8:	18ed      	addgt	r5, r5, r3
 8006cea:	f04f 0900 	mov.w	r9, #0
 8006cee:	341a      	adds	r4, #26
 8006cf0:	454d      	cmp	r5, r9
 8006cf2:	d11a      	bne.n	8006d2a <_printf_common+0xd6>
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	e008      	b.n	8006d0a <_printf_common+0xb6>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	4652      	mov	r2, sl
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	4630      	mov	r0, r6
 8006d00:	47c0      	blx	r8
 8006d02:	3001      	adds	r0, #1
 8006d04:	d103      	bne.n	8006d0e <_printf_common+0xba>
 8006d06:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0e:	3501      	adds	r5, #1
 8006d10:	e7c3      	b.n	8006c9a <_printf_common+0x46>
 8006d12:	18e1      	adds	r1, r4, r3
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	2030      	movs	r0, #48	; 0x30
 8006d18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d1c:	4422      	add	r2, r4
 8006d1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d26:	3302      	adds	r3, #2
 8006d28:	e7c5      	b.n	8006cb6 <_printf_common+0x62>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4639      	mov	r1, r7
 8006d30:	4630      	mov	r0, r6
 8006d32:	47c0      	blx	r8
 8006d34:	3001      	adds	r0, #1
 8006d36:	d0e6      	beq.n	8006d06 <_printf_common+0xb2>
 8006d38:	f109 0901 	add.w	r9, r9, #1
 8006d3c:	e7d8      	b.n	8006cf0 <_printf_common+0x9c>
	...

08006d40 <_sbrk_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4c06      	ldr	r4, [pc, #24]	; (8006d5c <_sbrk_r+0x1c>)
 8006d44:	2300      	movs	r3, #0
 8006d46:	4605      	mov	r5, r0
 8006d48:	4608      	mov	r0, r1
 8006d4a:	6023      	str	r3, [r4, #0]
 8006d4c:	f7fb fc70 	bl	8002630 <_sbrk>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d102      	bne.n	8006d5a <_sbrk_r+0x1a>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	b103      	cbz	r3, 8006d5a <_sbrk_r+0x1a>
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	20000524 	.word	0x20000524

08006d60 <_raise_r>:
 8006d60:	291f      	cmp	r1, #31
 8006d62:	b538      	push	{r3, r4, r5, lr}
 8006d64:	4604      	mov	r4, r0
 8006d66:	460d      	mov	r5, r1
 8006d68:	d904      	bls.n	8006d74 <_raise_r+0x14>
 8006d6a:	2316      	movs	r3, #22
 8006d6c:	6003      	str	r3, [r0, #0]
 8006d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d76:	b112      	cbz	r2, 8006d7e <_raise_r+0x1e>
 8006d78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d7c:	b94b      	cbnz	r3, 8006d92 <_raise_r+0x32>
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 f830 	bl	8006de4 <_getpid_r>
 8006d84:	462a      	mov	r2, r5
 8006d86:	4601      	mov	r1, r0
 8006d88:	4620      	mov	r0, r4
 8006d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d8e:	f000 b817 	b.w	8006dc0 <_kill_r>
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d00a      	beq.n	8006dac <_raise_r+0x4c>
 8006d96:	1c59      	adds	r1, r3, #1
 8006d98:	d103      	bne.n	8006da2 <_raise_r+0x42>
 8006d9a:	2316      	movs	r3, #22
 8006d9c:	6003      	str	r3, [r0, #0]
 8006d9e:	2001      	movs	r0, #1
 8006da0:	e7e7      	b.n	8006d72 <_raise_r+0x12>
 8006da2:	2400      	movs	r4, #0
 8006da4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006da8:	4628      	mov	r0, r5
 8006daa:	4798      	blx	r3
 8006dac:	2000      	movs	r0, #0
 8006dae:	e7e0      	b.n	8006d72 <_raise_r+0x12>

08006db0 <raise>:
 8006db0:	4b02      	ldr	r3, [pc, #8]	; (8006dbc <raise+0xc>)
 8006db2:	4601      	mov	r1, r0
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	f7ff bfd3 	b.w	8006d60 <_raise_r>
 8006dba:	bf00      	nop
 8006dbc:	2000000c 	.word	0x2000000c

08006dc0 <_kill_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4c07      	ldr	r4, [pc, #28]	; (8006de0 <_kill_r+0x20>)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	4608      	mov	r0, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	f7fb fc15 	bl	80025fc <_kill>
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	d102      	bne.n	8006ddc <_kill_r+0x1c>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	b103      	cbz	r3, 8006ddc <_kill_r+0x1c>
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	bd38      	pop	{r3, r4, r5, pc}
 8006dde:	bf00      	nop
 8006de0:	20000524 	.word	0x20000524

08006de4 <_getpid_r>:
 8006de4:	f7fb bc02 	b.w	80025ec <_getpid>

08006de8 <siscanf>:
 8006de8:	b40e      	push	{r1, r2, r3}
 8006dea:	b530      	push	{r4, r5, lr}
 8006dec:	b09c      	sub	sp, #112	; 0x70
 8006dee:	ac1f      	add	r4, sp, #124	; 0x7c
 8006df0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006df4:	f854 5b04 	ldr.w	r5, [r4], #4
 8006df8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006dfc:	9002      	str	r0, [sp, #8]
 8006dfe:	9006      	str	r0, [sp, #24]
 8006e00:	f7f9 f9ee 	bl	80001e0 <strlen>
 8006e04:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <siscanf+0x4c>)
 8006e06:	9003      	str	r0, [sp, #12]
 8006e08:	9007      	str	r0, [sp, #28]
 8006e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e0c:	480a      	ldr	r0, [pc, #40]	; (8006e38 <siscanf+0x50>)
 8006e0e:	9401      	str	r4, [sp, #4]
 8006e10:	2300      	movs	r3, #0
 8006e12:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e14:	9314      	str	r3, [sp, #80]	; 0x50
 8006e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e1e:	462a      	mov	r2, r5
 8006e20:	4623      	mov	r3, r4
 8006e22:	a902      	add	r1, sp, #8
 8006e24:	6800      	ldr	r0, [r0, #0]
 8006e26:	f001 f9ad 	bl	8008184 <__ssvfiscanf_r>
 8006e2a:	b01c      	add	sp, #112	; 0x70
 8006e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e30:	b003      	add	sp, #12
 8006e32:	4770      	bx	lr
 8006e34:	08006e3d 	.word	0x08006e3d
 8006e38:	2000000c 	.word	0x2000000c

08006e3c <__seofread>:
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	4770      	bx	lr

08006e40 <quorem>:
 8006e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	6903      	ldr	r3, [r0, #16]
 8006e46:	690c      	ldr	r4, [r1, #16]
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	f2c0 8082 	blt.w	8006f54 <quorem+0x114>
 8006e50:	3c01      	subs	r4, #1
 8006e52:	f101 0714 	add.w	r7, r1, #20
 8006e56:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006e5a:	f100 0614 	add.w	r6, r0, #20
 8006e5e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006e62:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006e66:	eb06 030c 	add.w	r3, r6, ip
 8006e6a:	3501      	adds	r5, #1
 8006e6c:	eb07 090c 	add.w	r9, r7, ip
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	fbb0 f5f5 	udiv	r5, r0, r5
 8006e76:	b395      	cbz	r5, 8006ede <quorem+0x9e>
 8006e78:	f04f 0a00 	mov.w	sl, #0
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	46b6      	mov	lr, r6
 8006e80:	46d3      	mov	fp, sl
 8006e82:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e86:	b293      	uxth	r3, r2
 8006e88:	fb05 a303 	mla	r3, r5, r3, sl
 8006e8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	ebab 0303 	sub.w	r3, fp, r3
 8006e96:	0c12      	lsrs	r2, r2, #16
 8006e98:	f8de b000 	ldr.w	fp, [lr]
 8006e9c:	fb05 a202 	mla	r2, r5, r2, sl
 8006ea0:	fa13 f38b 	uxtah	r3, r3, fp
 8006ea4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006ea8:	fa1f fb82 	uxth.w	fp, r2
 8006eac:	f8de 2000 	ldr.w	r2, [lr]
 8006eb0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006eb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ebe:	4581      	cmp	r9, r0
 8006ec0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006ec4:	f84e 3b04 	str.w	r3, [lr], #4
 8006ec8:	d2db      	bcs.n	8006e82 <quorem+0x42>
 8006eca:	f856 300c 	ldr.w	r3, [r6, ip]
 8006ece:	b933      	cbnz	r3, 8006ede <quorem+0x9e>
 8006ed0:	9b01      	ldr	r3, [sp, #4]
 8006ed2:	3b04      	subs	r3, #4
 8006ed4:	429e      	cmp	r6, r3
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	d330      	bcc.n	8006f3c <quorem+0xfc>
 8006eda:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ede:	4640      	mov	r0, r8
 8006ee0:	f001 f822 	bl	8007f28 <__mcmp>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	db25      	blt.n	8006f34 <quorem+0xf4>
 8006ee8:	3501      	adds	r5, #1
 8006eea:	4630      	mov	r0, r6
 8006eec:	f04f 0c00 	mov.w	ip, #0
 8006ef0:	f857 2b04 	ldr.w	r2, [r7], #4
 8006ef4:	f8d0 e000 	ldr.w	lr, [r0]
 8006ef8:	b293      	uxth	r3, r2
 8006efa:	ebac 0303 	sub.w	r3, ip, r3
 8006efe:	0c12      	lsrs	r2, r2, #16
 8006f00:	fa13 f38e 	uxtah	r3, r3, lr
 8006f04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f12:	45b9      	cmp	r9, r7
 8006f14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f18:	f840 3b04 	str.w	r3, [r0], #4
 8006f1c:	d2e8      	bcs.n	8006ef0 <quorem+0xb0>
 8006f1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006f26:	b92a      	cbnz	r2, 8006f34 <quorem+0xf4>
 8006f28:	3b04      	subs	r3, #4
 8006f2a:	429e      	cmp	r6, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	d30b      	bcc.n	8006f48 <quorem+0x108>
 8006f30:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f34:	4628      	mov	r0, r5
 8006f36:	b003      	add	sp, #12
 8006f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	3b04      	subs	r3, #4
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	d1ca      	bne.n	8006eda <quorem+0x9a>
 8006f44:	3c01      	subs	r4, #1
 8006f46:	e7c5      	b.n	8006ed4 <quorem+0x94>
 8006f48:	6812      	ldr	r2, [r2, #0]
 8006f4a:	3b04      	subs	r3, #4
 8006f4c:	2a00      	cmp	r2, #0
 8006f4e:	d1ef      	bne.n	8006f30 <quorem+0xf0>
 8006f50:	3c01      	subs	r4, #1
 8006f52:	e7ea      	b.n	8006f2a <quorem+0xea>
 8006f54:	2000      	movs	r0, #0
 8006f56:	e7ee      	b.n	8006f36 <quorem+0xf6>

08006f58 <_dtoa_r>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	ec57 6b10 	vmov	r6, r7, d0
 8006f60:	b097      	sub	sp, #92	; 0x5c
 8006f62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f64:	9106      	str	r1, [sp, #24]
 8006f66:	4604      	mov	r4, r0
 8006f68:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f6a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f70:	e9cd 6700 	strd	r6, r7, [sp]
 8006f74:	b93d      	cbnz	r5, 8006f86 <_dtoa_r+0x2e>
 8006f76:	2010      	movs	r0, #16
 8006f78:	f7ff fae0 	bl	800653c <malloc>
 8006f7c:	6260      	str	r0, [r4, #36]	; 0x24
 8006f7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f82:	6005      	str	r5, [r0, #0]
 8006f84:	60c5      	str	r5, [r0, #12]
 8006f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f88:	6819      	ldr	r1, [r3, #0]
 8006f8a:	b151      	cbz	r1, 8006fa2 <_dtoa_r+0x4a>
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	604a      	str	r2, [r1, #4]
 8006f90:	2301      	movs	r3, #1
 8006f92:	4093      	lsls	r3, r2
 8006f94:	608b      	str	r3, [r1, #8]
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 fde5 	bl	8007b66 <_Bfree>
 8006f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	1e3b      	subs	r3, r7, #0
 8006fa4:	bfbb      	ittet	lt
 8006fa6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006faa:	9301      	strlt	r3, [sp, #4]
 8006fac:	2300      	movge	r3, #0
 8006fae:	2201      	movlt	r2, #1
 8006fb0:	bfac      	ite	ge
 8006fb2:	f8c8 3000 	strge.w	r3, [r8]
 8006fb6:	f8c8 2000 	strlt.w	r2, [r8]
 8006fba:	4baf      	ldr	r3, [pc, #700]	; (8007278 <_dtoa_r+0x320>)
 8006fbc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006fc0:	ea33 0308 	bics.w	r3, r3, r8
 8006fc4:	d114      	bne.n	8006ff0 <_dtoa_r+0x98>
 8006fc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	9b00      	ldr	r3, [sp, #0]
 8006fd0:	b923      	cbnz	r3, 8006fdc <_dtoa_r+0x84>
 8006fd2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f000 8542 	beq.w	8007a60 <_dtoa_r+0xb08>
 8006fdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fde:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800728c <_dtoa_r+0x334>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8544 	beq.w	8007a70 <_dtoa_r+0xb18>
 8006fe8:	f10b 0303 	add.w	r3, fp, #3
 8006fec:	f000 bd3e 	b.w	8007a6c <_dtoa_r+0xb14>
 8006ff0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	f7f9 fd6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007000:	4681      	mov	r9, r0
 8007002:	b168      	cbz	r0, 8007020 <_dtoa_r+0xc8>
 8007004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007006:	2301      	movs	r3, #1
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 8524 	beq.w	8007a5a <_dtoa_r+0xb02>
 8007012:	4b9a      	ldr	r3, [pc, #616]	; (800727c <_dtoa_r+0x324>)
 8007014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007016:	f103 3bff 	add.w	fp, r3, #4294967295
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	f000 bd28 	b.w	8007a70 <_dtoa_r+0xb18>
 8007020:	aa14      	add	r2, sp, #80	; 0x50
 8007022:	a915      	add	r1, sp, #84	; 0x54
 8007024:	ec47 6b10 	vmov	d0, r6, r7
 8007028:	4620      	mov	r0, r4
 800702a:	f000 fff4 	bl	8008016 <__d2b>
 800702e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007032:	9004      	str	r0, [sp, #16]
 8007034:	2d00      	cmp	r5, #0
 8007036:	d07c      	beq.n	8007132 <_dtoa_r+0x1da>
 8007038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800703c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007040:	46b2      	mov	sl, r6
 8007042:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800704a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800704e:	2200      	movs	r2, #0
 8007050:	4b8b      	ldr	r3, [pc, #556]	; (8007280 <_dtoa_r+0x328>)
 8007052:	4650      	mov	r0, sl
 8007054:	4659      	mov	r1, fp
 8007056:	f7f9 f91f 	bl	8000298 <__aeabi_dsub>
 800705a:	a381      	add	r3, pc, #516	; (adr r3, 8007260 <_dtoa_r+0x308>)
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f7f9 fad2 	bl	8000608 <__aeabi_dmul>
 8007064:	a380      	add	r3, pc, #512	; (adr r3, 8007268 <_dtoa_r+0x310>)
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	f7f9 f917 	bl	800029c <__adddf3>
 800706e:	4606      	mov	r6, r0
 8007070:	4628      	mov	r0, r5
 8007072:	460f      	mov	r7, r1
 8007074:	f7f9 fa5e 	bl	8000534 <__aeabi_i2d>
 8007078:	a37d      	add	r3, pc, #500	; (adr r3, 8007270 <_dtoa_r+0x318>)
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f7f9 fac3 	bl	8000608 <__aeabi_dmul>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	4630      	mov	r0, r6
 8007088:	4639      	mov	r1, r7
 800708a:	f7f9 f907 	bl	800029c <__adddf3>
 800708e:	4606      	mov	r6, r0
 8007090:	460f      	mov	r7, r1
 8007092:	f7f9 fd69 	bl	8000b68 <__aeabi_d2iz>
 8007096:	2200      	movs	r2, #0
 8007098:	4682      	mov	sl, r0
 800709a:	2300      	movs	r3, #0
 800709c:	4630      	mov	r0, r6
 800709e:	4639      	mov	r1, r7
 80070a0:	f7f9 fd24 	bl	8000aec <__aeabi_dcmplt>
 80070a4:	b148      	cbz	r0, 80070ba <_dtoa_r+0x162>
 80070a6:	4650      	mov	r0, sl
 80070a8:	f7f9 fa44 	bl	8000534 <__aeabi_i2d>
 80070ac:	4632      	mov	r2, r6
 80070ae:	463b      	mov	r3, r7
 80070b0:	f7f9 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 80070b4:	b908      	cbnz	r0, 80070ba <_dtoa_r+0x162>
 80070b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070ba:	f1ba 0f16 	cmp.w	sl, #22
 80070be:	d859      	bhi.n	8007174 <_dtoa_r+0x21c>
 80070c0:	4970      	ldr	r1, [pc, #448]	; (8007284 <_dtoa_r+0x32c>)
 80070c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80070c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070ce:	f7f9 fd2b 	bl	8000b28 <__aeabi_dcmpgt>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d050      	beq.n	8007178 <_dtoa_r+0x220>
 80070d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070da:	2300      	movs	r3, #0
 80070dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80070de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070e0:	1b5d      	subs	r5, r3, r5
 80070e2:	f1b5 0801 	subs.w	r8, r5, #1
 80070e6:	bf49      	itett	mi
 80070e8:	f1c5 0301 	rsbmi	r3, r5, #1
 80070ec:	2300      	movpl	r3, #0
 80070ee:	9305      	strmi	r3, [sp, #20]
 80070f0:	f04f 0800 	movmi.w	r8, #0
 80070f4:	bf58      	it	pl
 80070f6:	9305      	strpl	r3, [sp, #20]
 80070f8:	f1ba 0f00 	cmp.w	sl, #0
 80070fc:	db3e      	blt.n	800717c <_dtoa_r+0x224>
 80070fe:	2300      	movs	r3, #0
 8007100:	44d0      	add	r8, sl
 8007102:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007106:	9307      	str	r3, [sp, #28]
 8007108:	9b06      	ldr	r3, [sp, #24]
 800710a:	2b09      	cmp	r3, #9
 800710c:	f200 8090 	bhi.w	8007230 <_dtoa_r+0x2d8>
 8007110:	2b05      	cmp	r3, #5
 8007112:	bfc4      	itt	gt
 8007114:	3b04      	subgt	r3, #4
 8007116:	9306      	strgt	r3, [sp, #24]
 8007118:	9b06      	ldr	r3, [sp, #24]
 800711a:	f1a3 0302 	sub.w	r3, r3, #2
 800711e:	bfcc      	ite	gt
 8007120:	2500      	movgt	r5, #0
 8007122:	2501      	movle	r5, #1
 8007124:	2b03      	cmp	r3, #3
 8007126:	f200 808f 	bhi.w	8007248 <_dtoa_r+0x2f0>
 800712a:	e8df f003 	tbb	[pc, r3]
 800712e:	7f7d      	.short	0x7f7d
 8007130:	7131      	.short	0x7131
 8007132:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007136:	441d      	add	r5, r3
 8007138:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800713c:	2820      	cmp	r0, #32
 800713e:	dd13      	ble.n	8007168 <_dtoa_r+0x210>
 8007140:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007144:	9b00      	ldr	r3, [sp, #0]
 8007146:	fa08 f800 	lsl.w	r8, r8, r0
 800714a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800714e:	fa23 f000 	lsr.w	r0, r3, r0
 8007152:	ea48 0000 	orr.w	r0, r8, r0
 8007156:	f7f9 f9dd 	bl	8000514 <__aeabi_ui2d>
 800715a:	2301      	movs	r3, #1
 800715c:	4682      	mov	sl, r0
 800715e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007162:	3d01      	subs	r5, #1
 8007164:	9313      	str	r3, [sp, #76]	; 0x4c
 8007166:	e772      	b.n	800704e <_dtoa_r+0xf6>
 8007168:	9b00      	ldr	r3, [sp, #0]
 800716a:	f1c0 0020 	rsb	r0, r0, #32
 800716e:	fa03 f000 	lsl.w	r0, r3, r0
 8007172:	e7f0      	b.n	8007156 <_dtoa_r+0x1fe>
 8007174:	2301      	movs	r3, #1
 8007176:	e7b1      	b.n	80070dc <_dtoa_r+0x184>
 8007178:	900f      	str	r0, [sp, #60]	; 0x3c
 800717a:	e7b0      	b.n	80070de <_dtoa_r+0x186>
 800717c:	9b05      	ldr	r3, [sp, #20]
 800717e:	eba3 030a 	sub.w	r3, r3, sl
 8007182:	9305      	str	r3, [sp, #20]
 8007184:	f1ca 0300 	rsb	r3, sl, #0
 8007188:	9307      	str	r3, [sp, #28]
 800718a:	2300      	movs	r3, #0
 800718c:	930e      	str	r3, [sp, #56]	; 0x38
 800718e:	e7bb      	b.n	8007108 <_dtoa_r+0x1b0>
 8007190:	2301      	movs	r3, #1
 8007192:	930a      	str	r3, [sp, #40]	; 0x28
 8007194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007196:	2b00      	cmp	r3, #0
 8007198:	dd59      	ble.n	800724e <_dtoa_r+0x2f6>
 800719a:	9302      	str	r3, [sp, #8]
 800719c:	4699      	mov	r9, r3
 800719e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071a0:	2200      	movs	r2, #0
 80071a2:	6072      	str	r2, [r6, #4]
 80071a4:	2204      	movs	r2, #4
 80071a6:	f102 0014 	add.w	r0, r2, #20
 80071aa:	4298      	cmp	r0, r3
 80071ac:	6871      	ldr	r1, [r6, #4]
 80071ae:	d953      	bls.n	8007258 <_dtoa_r+0x300>
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fca4 	bl	8007afe <_Balloc>
 80071b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071b8:	6030      	str	r0, [r6, #0]
 80071ba:	f1b9 0f0e 	cmp.w	r9, #14
 80071be:	f8d3 b000 	ldr.w	fp, [r3]
 80071c2:	f200 80e6 	bhi.w	8007392 <_dtoa_r+0x43a>
 80071c6:	2d00      	cmp	r5, #0
 80071c8:	f000 80e3 	beq.w	8007392 <_dtoa_r+0x43a>
 80071cc:	ed9d 7b00 	vldr	d7, [sp]
 80071d0:	f1ba 0f00 	cmp.w	sl, #0
 80071d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80071d8:	dd74      	ble.n	80072c4 <_dtoa_r+0x36c>
 80071da:	4a2a      	ldr	r2, [pc, #168]	; (8007284 <_dtoa_r+0x32c>)
 80071dc:	f00a 030f 	and.w	r3, sl, #15
 80071e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071e4:	ed93 7b00 	vldr	d7, [r3]
 80071e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80071ec:	06f0      	lsls	r0, r6, #27
 80071ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80071f2:	d565      	bpl.n	80072c0 <_dtoa_r+0x368>
 80071f4:	4b24      	ldr	r3, [pc, #144]	; (8007288 <_dtoa_r+0x330>)
 80071f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071fe:	f7f9 fb2d 	bl	800085c <__aeabi_ddiv>
 8007202:	e9cd 0100 	strd	r0, r1, [sp]
 8007206:	f006 060f 	and.w	r6, r6, #15
 800720a:	2503      	movs	r5, #3
 800720c:	4f1e      	ldr	r7, [pc, #120]	; (8007288 <_dtoa_r+0x330>)
 800720e:	e04c      	b.n	80072aa <_dtoa_r+0x352>
 8007210:	2301      	movs	r3, #1
 8007212:	930a      	str	r3, [sp, #40]	; 0x28
 8007214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007216:	4453      	add	r3, sl
 8007218:	f103 0901 	add.w	r9, r3, #1
 800721c:	9302      	str	r3, [sp, #8]
 800721e:	464b      	mov	r3, r9
 8007220:	2b01      	cmp	r3, #1
 8007222:	bfb8      	it	lt
 8007224:	2301      	movlt	r3, #1
 8007226:	e7ba      	b.n	800719e <_dtoa_r+0x246>
 8007228:	2300      	movs	r3, #0
 800722a:	e7b2      	b.n	8007192 <_dtoa_r+0x23a>
 800722c:	2300      	movs	r3, #0
 800722e:	e7f0      	b.n	8007212 <_dtoa_r+0x2ba>
 8007230:	2501      	movs	r5, #1
 8007232:	2300      	movs	r3, #0
 8007234:	9306      	str	r3, [sp, #24]
 8007236:	950a      	str	r5, [sp, #40]	; 0x28
 8007238:	f04f 33ff 	mov.w	r3, #4294967295
 800723c:	9302      	str	r3, [sp, #8]
 800723e:	4699      	mov	r9, r3
 8007240:	2200      	movs	r2, #0
 8007242:	2312      	movs	r3, #18
 8007244:	920b      	str	r2, [sp, #44]	; 0x2c
 8007246:	e7aa      	b.n	800719e <_dtoa_r+0x246>
 8007248:	2301      	movs	r3, #1
 800724a:	930a      	str	r3, [sp, #40]	; 0x28
 800724c:	e7f4      	b.n	8007238 <_dtoa_r+0x2e0>
 800724e:	2301      	movs	r3, #1
 8007250:	9302      	str	r3, [sp, #8]
 8007252:	4699      	mov	r9, r3
 8007254:	461a      	mov	r2, r3
 8007256:	e7f5      	b.n	8007244 <_dtoa_r+0x2ec>
 8007258:	3101      	adds	r1, #1
 800725a:	6071      	str	r1, [r6, #4]
 800725c:	0052      	lsls	r2, r2, #1
 800725e:	e7a2      	b.n	80071a6 <_dtoa_r+0x24e>
 8007260:	636f4361 	.word	0x636f4361
 8007264:	3fd287a7 	.word	0x3fd287a7
 8007268:	8b60c8b3 	.word	0x8b60c8b3
 800726c:	3fc68a28 	.word	0x3fc68a28
 8007270:	509f79fb 	.word	0x509f79fb
 8007274:	3fd34413 	.word	0x3fd34413
 8007278:	7ff00000 	.word	0x7ff00000
 800727c:	08008c4f 	.word	0x08008c4f
 8007280:	3ff80000 	.word	0x3ff80000
 8007284:	08008b60 	.word	0x08008b60
 8007288:	08008b38 	.word	0x08008b38
 800728c:	08008b31 	.word	0x08008b31
 8007290:	07f1      	lsls	r1, r6, #31
 8007292:	d508      	bpl.n	80072a6 <_dtoa_r+0x34e>
 8007294:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800729c:	f7f9 f9b4 	bl	8000608 <__aeabi_dmul>
 80072a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072a4:	3501      	adds	r5, #1
 80072a6:	1076      	asrs	r6, r6, #1
 80072a8:	3708      	adds	r7, #8
 80072aa:	2e00      	cmp	r6, #0
 80072ac:	d1f0      	bne.n	8007290 <_dtoa_r+0x338>
 80072ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072b6:	f7f9 fad1 	bl	800085c <__aeabi_ddiv>
 80072ba:	e9cd 0100 	strd	r0, r1, [sp]
 80072be:	e01a      	b.n	80072f6 <_dtoa_r+0x39e>
 80072c0:	2502      	movs	r5, #2
 80072c2:	e7a3      	b.n	800720c <_dtoa_r+0x2b4>
 80072c4:	f000 80a0 	beq.w	8007408 <_dtoa_r+0x4b0>
 80072c8:	f1ca 0600 	rsb	r6, sl, #0
 80072cc:	4b9f      	ldr	r3, [pc, #636]	; (800754c <_dtoa_r+0x5f4>)
 80072ce:	4fa0      	ldr	r7, [pc, #640]	; (8007550 <_dtoa_r+0x5f8>)
 80072d0:	f006 020f 	and.w	r2, r6, #15
 80072d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072e0:	f7f9 f992 	bl	8000608 <__aeabi_dmul>
 80072e4:	e9cd 0100 	strd	r0, r1, [sp]
 80072e8:	1136      	asrs	r6, r6, #4
 80072ea:	2300      	movs	r3, #0
 80072ec:	2502      	movs	r5, #2
 80072ee:	2e00      	cmp	r6, #0
 80072f0:	d17f      	bne.n	80073f2 <_dtoa_r+0x49a>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e1      	bne.n	80072ba <_dtoa_r+0x362>
 80072f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8087 	beq.w	800740c <_dtoa_r+0x4b4>
 80072fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007302:	2200      	movs	r2, #0
 8007304:	4b93      	ldr	r3, [pc, #588]	; (8007554 <_dtoa_r+0x5fc>)
 8007306:	4630      	mov	r0, r6
 8007308:	4639      	mov	r1, r7
 800730a:	f7f9 fbef 	bl	8000aec <__aeabi_dcmplt>
 800730e:	2800      	cmp	r0, #0
 8007310:	d07c      	beq.n	800740c <_dtoa_r+0x4b4>
 8007312:	f1b9 0f00 	cmp.w	r9, #0
 8007316:	d079      	beq.n	800740c <_dtoa_r+0x4b4>
 8007318:	9b02      	ldr	r3, [sp, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	dd35      	ble.n	800738a <_dtoa_r+0x432>
 800731e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007322:	9308      	str	r3, [sp, #32]
 8007324:	4639      	mov	r1, r7
 8007326:	2200      	movs	r2, #0
 8007328:	4b8b      	ldr	r3, [pc, #556]	; (8007558 <_dtoa_r+0x600>)
 800732a:	4630      	mov	r0, r6
 800732c:	f7f9 f96c 	bl	8000608 <__aeabi_dmul>
 8007330:	e9cd 0100 	strd	r0, r1, [sp]
 8007334:	9f02      	ldr	r7, [sp, #8]
 8007336:	3501      	adds	r5, #1
 8007338:	4628      	mov	r0, r5
 800733a:	f7f9 f8fb 	bl	8000534 <__aeabi_i2d>
 800733e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007342:	f7f9 f961 	bl	8000608 <__aeabi_dmul>
 8007346:	2200      	movs	r2, #0
 8007348:	4b84      	ldr	r3, [pc, #528]	; (800755c <_dtoa_r+0x604>)
 800734a:	f7f8 ffa7 	bl	800029c <__adddf3>
 800734e:	4605      	mov	r5, r0
 8007350:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007354:	2f00      	cmp	r7, #0
 8007356:	d15d      	bne.n	8007414 <_dtoa_r+0x4bc>
 8007358:	2200      	movs	r2, #0
 800735a:	4b81      	ldr	r3, [pc, #516]	; (8007560 <_dtoa_r+0x608>)
 800735c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007360:	f7f8 ff9a 	bl	8000298 <__aeabi_dsub>
 8007364:	462a      	mov	r2, r5
 8007366:	4633      	mov	r3, r6
 8007368:	e9cd 0100 	strd	r0, r1, [sp]
 800736c:	f7f9 fbdc 	bl	8000b28 <__aeabi_dcmpgt>
 8007370:	2800      	cmp	r0, #0
 8007372:	f040 8288 	bne.w	8007886 <_dtoa_r+0x92e>
 8007376:	462a      	mov	r2, r5
 8007378:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800737c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007380:	f7f9 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8007384:	2800      	cmp	r0, #0
 8007386:	f040 827c 	bne.w	8007882 <_dtoa_r+0x92a>
 800738a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800738e:	e9cd 2300 	strd	r2, r3, [sp]
 8007392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007394:	2b00      	cmp	r3, #0
 8007396:	f2c0 8150 	blt.w	800763a <_dtoa_r+0x6e2>
 800739a:	f1ba 0f0e 	cmp.w	sl, #14
 800739e:	f300 814c 	bgt.w	800763a <_dtoa_r+0x6e2>
 80073a2:	4b6a      	ldr	r3, [pc, #424]	; (800754c <_dtoa_r+0x5f4>)
 80073a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073a8:	ed93 7b00 	vldr	d7, [r3]
 80073ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073b4:	f280 80d8 	bge.w	8007568 <_dtoa_r+0x610>
 80073b8:	f1b9 0f00 	cmp.w	r9, #0
 80073bc:	f300 80d4 	bgt.w	8007568 <_dtoa_r+0x610>
 80073c0:	f040 825e 	bne.w	8007880 <_dtoa_r+0x928>
 80073c4:	2200      	movs	r2, #0
 80073c6:	4b66      	ldr	r3, [pc, #408]	; (8007560 <_dtoa_r+0x608>)
 80073c8:	ec51 0b17 	vmov	r0, r1, d7
 80073cc:	f7f9 f91c 	bl	8000608 <__aeabi_dmul>
 80073d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073d4:	f7f9 fb9e 	bl	8000b14 <__aeabi_dcmpge>
 80073d8:	464f      	mov	r7, r9
 80073da:	464e      	mov	r6, r9
 80073dc:	2800      	cmp	r0, #0
 80073de:	f040 8234 	bne.w	800784a <_dtoa_r+0x8f2>
 80073e2:	2331      	movs	r3, #49	; 0x31
 80073e4:	f10b 0501 	add.w	r5, fp, #1
 80073e8:	f88b 3000 	strb.w	r3, [fp]
 80073ec:	f10a 0a01 	add.w	sl, sl, #1
 80073f0:	e22f      	b.n	8007852 <_dtoa_r+0x8fa>
 80073f2:	07f2      	lsls	r2, r6, #31
 80073f4:	d505      	bpl.n	8007402 <_dtoa_r+0x4aa>
 80073f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073fa:	f7f9 f905 	bl	8000608 <__aeabi_dmul>
 80073fe:	3501      	adds	r5, #1
 8007400:	2301      	movs	r3, #1
 8007402:	1076      	asrs	r6, r6, #1
 8007404:	3708      	adds	r7, #8
 8007406:	e772      	b.n	80072ee <_dtoa_r+0x396>
 8007408:	2502      	movs	r5, #2
 800740a:	e774      	b.n	80072f6 <_dtoa_r+0x39e>
 800740c:	f8cd a020 	str.w	sl, [sp, #32]
 8007410:	464f      	mov	r7, r9
 8007412:	e791      	b.n	8007338 <_dtoa_r+0x3e0>
 8007414:	4b4d      	ldr	r3, [pc, #308]	; (800754c <_dtoa_r+0x5f4>)
 8007416:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800741a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800741e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007420:	2b00      	cmp	r3, #0
 8007422:	d047      	beq.n	80074b4 <_dtoa_r+0x55c>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	2000      	movs	r0, #0
 800742a:	494e      	ldr	r1, [pc, #312]	; (8007564 <_dtoa_r+0x60c>)
 800742c:	f7f9 fa16 	bl	800085c <__aeabi_ddiv>
 8007430:	462a      	mov	r2, r5
 8007432:	4633      	mov	r3, r6
 8007434:	f7f8 ff30 	bl	8000298 <__aeabi_dsub>
 8007438:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800743c:	465d      	mov	r5, fp
 800743e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007442:	f7f9 fb91 	bl	8000b68 <__aeabi_d2iz>
 8007446:	4606      	mov	r6, r0
 8007448:	f7f9 f874 	bl	8000534 <__aeabi_i2d>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007454:	f7f8 ff20 	bl	8000298 <__aeabi_dsub>
 8007458:	3630      	adds	r6, #48	; 0x30
 800745a:	f805 6b01 	strb.w	r6, [r5], #1
 800745e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007462:	e9cd 0100 	strd	r0, r1, [sp]
 8007466:	f7f9 fb41 	bl	8000aec <__aeabi_dcmplt>
 800746a:	2800      	cmp	r0, #0
 800746c:	d163      	bne.n	8007536 <_dtoa_r+0x5de>
 800746e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007472:	2000      	movs	r0, #0
 8007474:	4937      	ldr	r1, [pc, #220]	; (8007554 <_dtoa_r+0x5fc>)
 8007476:	f7f8 ff0f 	bl	8000298 <__aeabi_dsub>
 800747a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800747e:	f7f9 fb35 	bl	8000aec <__aeabi_dcmplt>
 8007482:	2800      	cmp	r0, #0
 8007484:	f040 80b7 	bne.w	80075f6 <_dtoa_r+0x69e>
 8007488:	eba5 030b 	sub.w	r3, r5, fp
 800748c:	429f      	cmp	r7, r3
 800748e:	f77f af7c 	ble.w	800738a <_dtoa_r+0x432>
 8007492:	2200      	movs	r2, #0
 8007494:	4b30      	ldr	r3, [pc, #192]	; (8007558 <_dtoa_r+0x600>)
 8007496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800749a:	f7f9 f8b5 	bl	8000608 <__aeabi_dmul>
 800749e:	2200      	movs	r2, #0
 80074a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074a4:	4b2c      	ldr	r3, [pc, #176]	; (8007558 <_dtoa_r+0x600>)
 80074a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074aa:	f7f9 f8ad 	bl	8000608 <__aeabi_dmul>
 80074ae:	e9cd 0100 	strd	r0, r1, [sp]
 80074b2:	e7c4      	b.n	800743e <_dtoa_r+0x4e6>
 80074b4:	462a      	mov	r2, r5
 80074b6:	4633      	mov	r3, r6
 80074b8:	f7f9 f8a6 	bl	8000608 <__aeabi_dmul>
 80074bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074c0:	eb0b 0507 	add.w	r5, fp, r7
 80074c4:	465e      	mov	r6, fp
 80074c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074ca:	f7f9 fb4d 	bl	8000b68 <__aeabi_d2iz>
 80074ce:	4607      	mov	r7, r0
 80074d0:	f7f9 f830 	bl	8000534 <__aeabi_i2d>
 80074d4:	3730      	adds	r7, #48	; 0x30
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074de:	f7f8 fedb 	bl	8000298 <__aeabi_dsub>
 80074e2:	f806 7b01 	strb.w	r7, [r6], #1
 80074e6:	42ae      	cmp	r6, r5
 80074e8:	e9cd 0100 	strd	r0, r1, [sp]
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	d126      	bne.n	8007540 <_dtoa_r+0x5e8>
 80074f2:	4b1c      	ldr	r3, [pc, #112]	; (8007564 <_dtoa_r+0x60c>)
 80074f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074f8:	f7f8 fed0 	bl	800029c <__adddf3>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007504:	f7f9 fb10 	bl	8000b28 <__aeabi_dcmpgt>
 8007508:	2800      	cmp	r0, #0
 800750a:	d174      	bne.n	80075f6 <_dtoa_r+0x69e>
 800750c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007510:	2000      	movs	r0, #0
 8007512:	4914      	ldr	r1, [pc, #80]	; (8007564 <_dtoa_r+0x60c>)
 8007514:	f7f8 fec0 	bl	8000298 <__aeabi_dsub>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007520:	f7f9 fae4 	bl	8000aec <__aeabi_dcmplt>
 8007524:	2800      	cmp	r0, #0
 8007526:	f43f af30 	beq.w	800738a <_dtoa_r+0x432>
 800752a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800752e:	2b30      	cmp	r3, #48	; 0x30
 8007530:	f105 32ff 	add.w	r2, r5, #4294967295
 8007534:	d002      	beq.n	800753c <_dtoa_r+0x5e4>
 8007536:	f8dd a020 	ldr.w	sl, [sp, #32]
 800753a:	e04a      	b.n	80075d2 <_dtoa_r+0x67a>
 800753c:	4615      	mov	r5, r2
 800753e:	e7f4      	b.n	800752a <_dtoa_r+0x5d2>
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <_dtoa_r+0x600>)
 8007542:	f7f9 f861 	bl	8000608 <__aeabi_dmul>
 8007546:	e9cd 0100 	strd	r0, r1, [sp]
 800754a:	e7bc      	b.n	80074c6 <_dtoa_r+0x56e>
 800754c:	08008b60 	.word	0x08008b60
 8007550:	08008b38 	.word	0x08008b38
 8007554:	3ff00000 	.word	0x3ff00000
 8007558:	40240000 	.word	0x40240000
 800755c:	401c0000 	.word	0x401c0000
 8007560:	40140000 	.word	0x40140000
 8007564:	3fe00000 	.word	0x3fe00000
 8007568:	e9dd 6700 	ldrd	r6, r7, [sp]
 800756c:	465d      	mov	r5, fp
 800756e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007572:	4630      	mov	r0, r6
 8007574:	4639      	mov	r1, r7
 8007576:	f7f9 f971 	bl	800085c <__aeabi_ddiv>
 800757a:	f7f9 faf5 	bl	8000b68 <__aeabi_d2iz>
 800757e:	4680      	mov	r8, r0
 8007580:	f7f8 ffd8 	bl	8000534 <__aeabi_i2d>
 8007584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007588:	f7f9 f83e 	bl	8000608 <__aeabi_dmul>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007598:	f7f8 fe7e 	bl	8000298 <__aeabi_dsub>
 800759c:	f805 6b01 	strb.w	r6, [r5], #1
 80075a0:	eba5 060b 	sub.w	r6, r5, fp
 80075a4:	45b1      	cmp	r9, r6
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	d139      	bne.n	8007620 <_dtoa_r+0x6c8>
 80075ac:	f7f8 fe76 	bl	800029c <__adddf3>
 80075b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075b4:	4606      	mov	r6, r0
 80075b6:	460f      	mov	r7, r1
 80075b8:	f7f9 fab6 	bl	8000b28 <__aeabi_dcmpgt>
 80075bc:	b9c8      	cbnz	r0, 80075f2 <_dtoa_r+0x69a>
 80075be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075c2:	4630      	mov	r0, r6
 80075c4:	4639      	mov	r1, r7
 80075c6:	f7f9 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80075ca:	b110      	cbz	r0, 80075d2 <_dtoa_r+0x67a>
 80075cc:	f018 0f01 	tst.w	r8, #1
 80075d0:	d10f      	bne.n	80075f2 <_dtoa_r+0x69a>
 80075d2:	9904      	ldr	r1, [sp, #16]
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fac6 	bl	8007b66 <_Bfree>
 80075da:	2300      	movs	r3, #0
 80075dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075de:	702b      	strb	r3, [r5, #0]
 80075e0:	f10a 0301 	add.w	r3, sl, #1
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 8241 	beq.w	8007a70 <_dtoa_r+0xb18>
 80075ee:	601d      	str	r5, [r3, #0]
 80075f0:	e23e      	b.n	8007a70 <_dtoa_r+0xb18>
 80075f2:	f8cd a020 	str.w	sl, [sp, #32]
 80075f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075fa:	2a39      	cmp	r2, #57	; 0x39
 80075fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8007600:	d108      	bne.n	8007614 <_dtoa_r+0x6bc>
 8007602:	459b      	cmp	fp, r3
 8007604:	d10a      	bne.n	800761c <_dtoa_r+0x6c4>
 8007606:	9b08      	ldr	r3, [sp, #32]
 8007608:	3301      	adds	r3, #1
 800760a:	9308      	str	r3, [sp, #32]
 800760c:	2330      	movs	r3, #48	; 0x30
 800760e:	f88b 3000 	strb.w	r3, [fp]
 8007612:	465b      	mov	r3, fp
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	3201      	adds	r2, #1
 8007618:	701a      	strb	r2, [r3, #0]
 800761a:	e78c      	b.n	8007536 <_dtoa_r+0x5de>
 800761c:	461d      	mov	r5, r3
 800761e:	e7ea      	b.n	80075f6 <_dtoa_r+0x69e>
 8007620:	2200      	movs	r2, #0
 8007622:	4b9b      	ldr	r3, [pc, #620]	; (8007890 <_dtoa_r+0x938>)
 8007624:	f7f8 fff0 	bl	8000608 <__aeabi_dmul>
 8007628:	2200      	movs	r2, #0
 800762a:	2300      	movs	r3, #0
 800762c:	4606      	mov	r6, r0
 800762e:	460f      	mov	r7, r1
 8007630:	f7f9 fa52 	bl	8000ad8 <__aeabi_dcmpeq>
 8007634:	2800      	cmp	r0, #0
 8007636:	d09a      	beq.n	800756e <_dtoa_r+0x616>
 8007638:	e7cb      	b.n	80075d2 <_dtoa_r+0x67a>
 800763a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800763c:	2a00      	cmp	r2, #0
 800763e:	f000 808b 	beq.w	8007758 <_dtoa_r+0x800>
 8007642:	9a06      	ldr	r2, [sp, #24]
 8007644:	2a01      	cmp	r2, #1
 8007646:	dc6e      	bgt.n	8007726 <_dtoa_r+0x7ce>
 8007648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800764a:	2a00      	cmp	r2, #0
 800764c:	d067      	beq.n	800771e <_dtoa_r+0x7c6>
 800764e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007652:	9f07      	ldr	r7, [sp, #28]
 8007654:	9d05      	ldr	r5, [sp, #20]
 8007656:	9a05      	ldr	r2, [sp, #20]
 8007658:	2101      	movs	r1, #1
 800765a:	441a      	add	r2, r3
 800765c:	4620      	mov	r0, r4
 800765e:	9205      	str	r2, [sp, #20]
 8007660:	4498      	add	r8, r3
 8007662:	f000 fb20 	bl	8007ca6 <__i2b>
 8007666:	4606      	mov	r6, r0
 8007668:	2d00      	cmp	r5, #0
 800766a:	dd0c      	ble.n	8007686 <_dtoa_r+0x72e>
 800766c:	f1b8 0f00 	cmp.w	r8, #0
 8007670:	dd09      	ble.n	8007686 <_dtoa_r+0x72e>
 8007672:	4545      	cmp	r5, r8
 8007674:	9a05      	ldr	r2, [sp, #20]
 8007676:	462b      	mov	r3, r5
 8007678:	bfa8      	it	ge
 800767a:	4643      	movge	r3, r8
 800767c:	1ad2      	subs	r2, r2, r3
 800767e:	9205      	str	r2, [sp, #20]
 8007680:	1aed      	subs	r5, r5, r3
 8007682:	eba8 0803 	sub.w	r8, r8, r3
 8007686:	9b07      	ldr	r3, [sp, #28]
 8007688:	b1eb      	cbz	r3, 80076c6 <_dtoa_r+0x76e>
 800768a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800768c:	2b00      	cmp	r3, #0
 800768e:	d067      	beq.n	8007760 <_dtoa_r+0x808>
 8007690:	b18f      	cbz	r7, 80076b6 <_dtoa_r+0x75e>
 8007692:	4631      	mov	r1, r6
 8007694:	463a      	mov	r2, r7
 8007696:	4620      	mov	r0, r4
 8007698:	f000 fba4 	bl	8007de4 <__pow5mult>
 800769c:	9a04      	ldr	r2, [sp, #16]
 800769e:	4601      	mov	r1, r0
 80076a0:	4606      	mov	r6, r0
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 fb08 	bl	8007cb8 <__multiply>
 80076a8:	9904      	ldr	r1, [sp, #16]
 80076aa:	9008      	str	r0, [sp, #32]
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 fa5a 	bl	8007b66 <_Bfree>
 80076b2:	9b08      	ldr	r3, [sp, #32]
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	9b07      	ldr	r3, [sp, #28]
 80076b8:	1bda      	subs	r2, r3, r7
 80076ba:	d004      	beq.n	80076c6 <_dtoa_r+0x76e>
 80076bc:	9904      	ldr	r1, [sp, #16]
 80076be:	4620      	mov	r0, r4
 80076c0:	f000 fb90 	bl	8007de4 <__pow5mult>
 80076c4:	9004      	str	r0, [sp, #16]
 80076c6:	2101      	movs	r1, #1
 80076c8:	4620      	mov	r0, r4
 80076ca:	f000 faec 	bl	8007ca6 <__i2b>
 80076ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d0:	4607      	mov	r7, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 81d0 	beq.w	8007a78 <_dtoa_r+0xb20>
 80076d8:	461a      	mov	r2, r3
 80076da:	4601      	mov	r1, r0
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 fb81 	bl	8007de4 <__pow5mult>
 80076e2:	9b06      	ldr	r3, [sp, #24]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	4607      	mov	r7, r0
 80076e8:	dc40      	bgt.n	800776c <_dtoa_r+0x814>
 80076ea:	9b00      	ldr	r3, [sp, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d139      	bne.n	8007764 <_dtoa_r+0x80c>
 80076f0:	9b01      	ldr	r3, [sp, #4]
 80076f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d136      	bne.n	8007768 <_dtoa_r+0x810>
 80076fa:	9b01      	ldr	r3, [sp, #4]
 80076fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007700:	0d1b      	lsrs	r3, r3, #20
 8007702:	051b      	lsls	r3, r3, #20
 8007704:	b12b      	cbz	r3, 8007712 <_dtoa_r+0x7ba>
 8007706:	9b05      	ldr	r3, [sp, #20]
 8007708:	3301      	adds	r3, #1
 800770a:	9305      	str	r3, [sp, #20]
 800770c:	f108 0801 	add.w	r8, r8, #1
 8007710:	2301      	movs	r3, #1
 8007712:	9307      	str	r3, [sp, #28]
 8007714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007716:	2b00      	cmp	r3, #0
 8007718:	d12a      	bne.n	8007770 <_dtoa_r+0x818>
 800771a:	2001      	movs	r0, #1
 800771c:	e030      	b.n	8007780 <_dtoa_r+0x828>
 800771e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007720:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007724:	e795      	b.n	8007652 <_dtoa_r+0x6fa>
 8007726:	9b07      	ldr	r3, [sp, #28]
 8007728:	f109 37ff 	add.w	r7, r9, #4294967295
 800772c:	42bb      	cmp	r3, r7
 800772e:	bfbf      	itttt	lt
 8007730:	9b07      	ldrlt	r3, [sp, #28]
 8007732:	9707      	strlt	r7, [sp, #28]
 8007734:	1afa      	sublt	r2, r7, r3
 8007736:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007738:	bfbb      	ittet	lt
 800773a:	189b      	addlt	r3, r3, r2
 800773c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800773e:	1bdf      	subge	r7, r3, r7
 8007740:	2700      	movlt	r7, #0
 8007742:	f1b9 0f00 	cmp.w	r9, #0
 8007746:	bfb5      	itete	lt
 8007748:	9b05      	ldrlt	r3, [sp, #20]
 800774a:	9d05      	ldrge	r5, [sp, #20]
 800774c:	eba3 0509 	sublt.w	r5, r3, r9
 8007750:	464b      	movge	r3, r9
 8007752:	bfb8      	it	lt
 8007754:	2300      	movlt	r3, #0
 8007756:	e77e      	b.n	8007656 <_dtoa_r+0x6fe>
 8007758:	9f07      	ldr	r7, [sp, #28]
 800775a:	9d05      	ldr	r5, [sp, #20]
 800775c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800775e:	e783      	b.n	8007668 <_dtoa_r+0x710>
 8007760:	9a07      	ldr	r2, [sp, #28]
 8007762:	e7ab      	b.n	80076bc <_dtoa_r+0x764>
 8007764:	2300      	movs	r3, #0
 8007766:	e7d4      	b.n	8007712 <_dtoa_r+0x7ba>
 8007768:	9b00      	ldr	r3, [sp, #0]
 800776a:	e7d2      	b.n	8007712 <_dtoa_r+0x7ba>
 800776c:	2300      	movs	r3, #0
 800776e:	9307      	str	r3, [sp, #28]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007776:	6918      	ldr	r0, [r3, #16]
 8007778:	f000 fa47 	bl	8007c0a <__hi0bits>
 800777c:	f1c0 0020 	rsb	r0, r0, #32
 8007780:	4440      	add	r0, r8
 8007782:	f010 001f 	ands.w	r0, r0, #31
 8007786:	d047      	beq.n	8007818 <_dtoa_r+0x8c0>
 8007788:	f1c0 0320 	rsb	r3, r0, #32
 800778c:	2b04      	cmp	r3, #4
 800778e:	dd3b      	ble.n	8007808 <_dtoa_r+0x8b0>
 8007790:	9b05      	ldr	r3, [sp, #20]
 8007792:	f1c0 001c 	rsb	r0, r0, #28
 8007796:	4403      	add	r3, r0
 8007798:	9305      	str	r3, [sp, #20]
 800779a:	4405      	add	r5, r0
 800779c:	4480      	add	r8, r0
 800779e:	9b05      	ldr	r3, [sp, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	dd05      	ble.n	80077b0 <_dtoa_r+0x858>
 80077a4:	461a      	mov	r2, r3
 80077a6:	9904      	ldr	r1, [sp, #16]
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 fb69 	bl	8007e80 <__lshift>
 80077ae:	9004      	str	r0, [sp, #16]
 80077b0:	f1b8 0f00 	cmp.w	r8, #0
 80077b4:	dd05      	ble.n	80077c2 <_dtoa_r+0x86a>
 80077b6:	4639      	mov	r1, r7
 80077b8:	4642      	mov	r2, r8
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 fb60 	bl	8007e80 <__lshift>
 80077c0:	4607      	mov	r7, r0
 80077c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077c4:	b353      	cbz	r3, 800781c <_dtoa_r+0x8c4>
 80077c6:	4639      	mov	r1, r7
 80077c8:	9804      	ldr	r0, [sp, #16]
 80077ca:	f000 fbad 	bl	8007f28 <__mcmp>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	da24      	bge.n	800781c <_dtoa_r+0x8c4>
 80077d2:	2300      	movs	r3, #0
 80077d4:	220a      	movs	r2, #10
 80077d6:	9904      	ldr	r1, [sp, #16]
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 f9db 	bl	8007b94 <__multadd>
 80077de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e0:	9004      	str	r0, [sp, #16]
 80077e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 814d 	beq.w	8007a86 <_dtoa_r+0xb2e>
 80077ec:	2300      	movs	r3, #0
 80077ee:	4631      	mov	r1, r6
 80077f0:	220a      	movs	r2, #10
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 f9ce 	bl	8007b94 <__multadd>
 80077f8:	9b02      	ldr	r3, [sp, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	4606      	mov	r6, r0
 80077fe:	dc4f      	bgt.n	80078a0 <_dtoa_r+0x948>
 8007800:	9b06      	ldr	r3, [sp, #24]
 8007802:	2b02      	cmp	r3, #2
 8007804:	dd4c      	ble.n	80078a0 <_dtoa_r+0x948>
 8007806:	e011      	b.n	800782c <_dtoa_r+0x8d4>
 8007808:	d0c9      	beq.n	800779e <_dtoa_r+0x846>
 800780a:	9a05      	ldr	r2, [sp, #20]
 800780c:	331c      	adds	r3, #28
 800780e:	441a      	add	r2, r3
 8007810:	9205      	str	r2, [sp, #20]
 8007812:	441d      	add	r5, r3
 8007814:	4498      	add	r8, r3
 8007816:	e7c2      	b.n	800779e <_dtoa_r+0x846>
 8007818:	4603      	mov	r3, r0
 800781a:	e7f6      	b.n	800780a <_dtoa_r+0x8b2>
 800781c:	f1b9 0f00 	cmp.w	r9, #0
 8007820:	dc38      	bgt.n	8007894 <_dtoa_r+0x93c>
 8007822:	9b06      	ldr	r3, [sp, #24]
 8007824:	2b02      	cmp	r3, #2
 8007826:	dd35      	ble.n	8007894 <_dtoa_r+0x93c>
 8007828:	f8cd 9008 	str.w	r9, [sp, #8]
 800782c:	9b02      	ldr	r3, [sp, #8]
 800782e:	b963      	cbnz	r3, 800784a <_dtoa_r+0x8f2>
 8007830:	4639      	mov	r1, r7
 8007832:	2205      	movs	r2, #5
 8007834:	4620      	mov	r0, r4
 8007836:	f000 f9ad 	bl	8007b94 <__multadd>
 800783a:	4601      	mov	r1, r0
 800783c:	4607      	mov	r7, r0
 800783e:	9804      	ldr	r0, [sp, #16]
 8007840:	f000 fb72 	bl	8007f28 <__mcmp>
 8007844:	2800      	cmp	r0, #0
 8007846:	f73f adcc 	bgt.w	80073e2 <_dtoa_r+0x48a>
 800784a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800784c:	465d      	mov	r5, fp
 800784e:	ea6f 0a03 	mvn.w	sl, r3
 8007852:	f04f 0900 	mov.w	r9, #0
 8007856:	4639      	mov	r1, r7
 8007858:	4620      	mov	r0, r4
 800785a:	f000 f984 	bl	8007b66 <_Bfree>
 800785e:	2e00      	cmp	r6, #0
 8007860:	f43f aeb7 	beq.w	80075d2 <_dtoa_r+0x67a>
 8007864:	f1b9 0f00 	cmp.w	r9, #0
 8007868:	d005      	beq.n	8007876 <_dtoa_r+0x91e>
 800786a:	45b1      	cmp	r9, r6
 800786c:	d003      	beq.n	8007876 <_dtoa_r+0x91e>
 800786e:	4649      	mov	r1, r9
 8007870:	4620      	mov	r0, r4
 8007872:	f000 f978 	bl	8007b66 <_Bfree>
 8007876:	4631      	mov	r1, r6
 8007878:	4620      	mov	r0, r4
 800787a:	f000 f974 	bl	8007b66 <_Bfree>
 800787e:	e6a8      	b.n	80075d2 <_dtoa_r+0x67a>
 8007880:	2700      	movs	r7, #0
 8007882:	463e      	mov	r6, r7
 8007884:	e7e1      	b.n	800784a <_dtoa_r+0x8f2>
 8007886:	f8dd a020 	ldr.w	sl, [sp, #32]
 800788a:	463e      	mov	r6, r7
 800788c:	e5a9      	b.n	80073e2 <_dtoa_r+0x48a>
 800788e:	bf00      	nop
 8007890:	40240000 	.word	0x40240000
 8007894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007896:	f8cd 9008 	str.w	r9, [sp, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 80fa 	beq.w	8007a94 <_dtoa_r+0xb3c>
 80078a0:	2d00      	cmp	r5, #0
 80078a2:	dd05      	ble.n	80078b0 <_dtoa_r+0x958>
 80078a4:	4631      	mov	r1, r6
 80078a6:	462a      	mov	r2, r5
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 fae9 	bl	8007e80 <__lshift>
 80078ae:	4606      	mov	r6, r0
 80078b0:	9b07      	ldr	r3, [sp, #28]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d04c      	beq.n	8007950 <_dtoa_r+0x9f8>
 80078b6:	6871      	ldr	r1, [r6, #4]
 80078b8:	4620      	mov	r0, r4
 80078ba:	f000 f920 	bl	8007afe <_Balloc>
 80078be:	6932      	ldr	r2, [r6, #16]
 80078c0:	3202      	adds	r2, #2
 80078c2:	4605      	mov	r5, r0
 80078c4:	0092      	lsls	r2, r2, #2
 80078c6:	f106 010c 	add.w	r1, r6, #12
 80078ca:	300c      	adds	r0, #12
 80078cc:	f000 f90a 	bl	8007ae4 <memcpy>
 80078d0:	2201      	movs	r2, #1
 80078d2:	4629      	mov	r1, r5
 80078d4:	4620      	mov	r0, r4
 80078d6:	f000 fad3 	bl	8007e80 <__lshift>
 80078da:	9b00      	ldr	r3, [sp, #0]
 80078dc:	f8cd b014 	str.w	fp, [sp, #20]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	46b1      	mov	r9, r6
 80078e6:	9307      	str	r3, [sp, #28]
 80078e8:	4606      	mov	r6, r0
 80078ea:	4639      	mov	r1, r7
 80078ec:	9804      	ldr	r0, [sp, #16]
 80078ee:	f7ff faa7 	bl	8006e40 <quorem>
 80078f2:	4649      	mov	r1, r9
 80078f4:	4605      	mov	r5, r0
 80078f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80078fa:	9804      	ldr	r0, [sp, #16]
 80078fc:	f000 fb14 	bl	8007f28 <__mcmp>
 8007900:	4632      	mov	r2, r6
 8007902:	9000      	str	r0, [sp, #0]
 8007904:	4639      	mov	r1, r7
 8007906:	4620      	mov	r0, r4
 8007908:	f000 fb28 	bl	8007f5c <__mdiff>
 800790c:	68c3      	ldr	r3, [r0, #12]
 800790e:	4602      	mov	r2, r0
 8007910:	bb03      	cbnz	r3, 8007954 <_dtoa_r+0x9fc>
 8007912:	4601      	mov	r1, r0
 8007914:	9008      	str	r0, [sp, #32]
 8007916:	9804      	ldr	r0, [sp, #16]
 8007918:	f000 fb06 	bl	8007f28 <__mcmp>
 800791c:	9a08      	ldr	r2, [sp, #32]
 800791e:	4603      	mov	r3, r0
 8007920:	4611      	mov	r1, r2
 8007922:	4620      	mov	r0, r4
 8007924:	9308      	str	r3, [sp, #32]
 8007926:	f000 f91e 	bl	8007b66 <_Bfree>
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	b9a3      	cbnz	r3, 8007958 <_dtoa_r+0xa00>
 800792e:	9a06      	ldr	r2, [sp, #24]
 8007930:	b992      	cbnz	r2, 8007958 <_dtoa_r+0xa00>
 8007932:	9a07      	ldr	r2, [sp, #28]
 8007934:	b982      	cbnz	r2, 8007958 <_dtoa_r+0xa00>
 8007936:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800793a:	d029      	beq.n	8007990 <_dtoa_r+0xa38>
 800793c:	9b00      	ldr	r3, [sp, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	dd01      	ble.n	8007946 <_dtoa_r+0x9ee>
 8007942:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007946:	9b05      	ldr	r3, [sp, #20]
 8007948:	1c5d      	adds	r5, r3, #1
 800794a:	f883 8000 	strb.w	r8, [r3]
 800794e:	e782      	b.n	8007856 <_dtoa_r+0x8fe>
 8007950:	4630      	mov	r0, r6
 8007952:	e7c2      	b.n	80078da <_dtoa_r+0x982>
 8007954:	2301      	movs	r3, #1
 8007956:	e7e3      	b.n	8007920 <_dtoa_r+0x9c8>
 8007958:	9a00      	ldr	r2, [sp, #0]
 800795a:	2a00      	cmp	r2, #0
 800795c:	db04      	blt.n	8007968 <_dtoa_r+0xa10>
 800795e:	d125      	bne.n	80079ac <_dtoa_r+0xa54>
 8007960:	9a06      	ldr	r2, [sp, #24]
 8007962:	bb1a      	cbnz	r2, 80079ac <_dtoa_r+0xa54>
 8007964:	9a07      	ldr	r2, [sp, #28]
 8007966:	bb0a      	cbnz	r2, 80079ac <_dtoa_r+0xa54>
 8007968:	2b00      	cmp	r3, #0
 800796a:	ddec      	ble.n	8007946 <_dtoa_r+0x9ee>
 800796c:	2201      	movs	r2, #1
 800796e:	9904      	ldr	r1, [sp, #16]
 8007970:	4620      	mov	r0, r4
 8007972:	f000 fa85 	bl	8007e80 <__lshift>
 8007976:	4639      	mov	r1, r7
 8007978:	9004      	str	r0, [sp, #16]
 800797a:	f000 fad5 	bl	8007f28 <__mcmp>
 800797e:	2800      	cmp	r0, #0
 8007980:	dc03      	bgt.n	800798a <_dtoa_r+0xa32>
 8007982:	d1e0      	bne.n	8007946 <_dtoa_r+0x9ee>
 8007984:	f018 0f01 	tst.w	r8, #1
 8007988:	d0dd      	beq.n	8007946 <_dtoa_r+0x9ee>
 800798a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800798e:	d1d8      	bne.n	8007942 <_dtoa_r+0x9ea>
 8007990:	9b05      	ldr	r3, [sp, #20]
 8007992:	9a05      	ldr	r2, [sp, #20]
 8007994:	1c5d      	adds	r5, r3, #1
 8007996:	2339      	movs	r3, #57	; 0x39
 8007998:	7013      	strb	r3, [r2, #0]
 800799a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800799e:	2b39      	cmp	r3, #57	; 0x39
 80079a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80079a4:	d04f      	beq.n	8007a46 <_dtoa_r+0xaee>
 80079a6:	3301      	adds	r3, #1
 80079a8:	7013      	strb	r3, [r2, #0]
 80079aa:	e754      	b.n	8007856 <_dtoa_r+0x8fe>
 80079ac:	9a05      	ldr	r2, [sp, #20]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f102 0501 	add.w	r5, r2, #1
 80079b4:	dd06      	ble.n	80079c4 <_dtoa_r+0xa6c>
 80079b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079ba:	d0e9      	beq.n	8007990 <_dtoa_r+0xa38>
 80079bc:	f108 0801 	add.w	r8, r8, #1
 80079c0:	9b05      	ldr	r3, [sp, #20]
 80079c2:	e7c2      	b.n	800794a <_dtoa_r+0x9f2>
 80079c4:	9a02      	ldr	r2, [sp, #8]
 80079c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80079ca:	eba5 030b 	sub.w	r3, r5, fp
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d021      	beq.n	8007a16 <_dtoa_r+0xabe>
 80079d2:	2300      	movs	r3, #0
 80079d4:	220a      	movs	r2, #10
 80079d6:	9904      	ldr	r1, [sp, #16]
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 f8db 	bl	8007b94 <__multadd>
 80079de:	45b1      	cmp	r9, r6
 80079e0:	9004      	str	r0, [sp, #16]
 80079e2:	f04f 0300 	mov.w	r3, #0
 80079e6:	f04f 020a 	mov.w	r2, #10
 80079ea:	4649      	mov	r1, r9
 80079ec:	4620      	mov	r0, r4
 80079ee:	d105      	bne.n	80079fc <_dtoa_r+0xaa4>
 80079f0:	f000 f8d0 	bl	8007b94 <__multadd>
 80079f4:	4681      	mov	r9, r0
 80079f6:	4606      	mov	r6, r0
 80079f8:	9505      	str	r5, [sp, #20]
 80079fa:	e776      	b.n	80078ea <_dtoa_r+0x992>
 80079fc:	f000 f8ca 	bl	8007b94 <__multadd>
 8007a00:	4631      	mov	r1, r6
 8007a02:	4681      	mov	r9, r0
 8007a04:	2300      	movs	r3, #0
 8007a06:	220a      	movs	r2, #10
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f8c3 	bl	8007b94 <__multadd>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	e7f2      	b.n	80079f8 <_dtoa_r+0xaa0>
 8007a12:	f04f 0900 	mov.w	r9, #0
 8007a16:	2201      	movs	r2, #1
 8007a18:	9904      	ldr	r1, [sp, #16]
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 fa30 	bl	8007e80 <__lshift>
 8007a20:	4639      	mov	r1, r7
 8007a22:	9004      	str	r0, [sp, #16]
 8007a24:	f000 fa80 	bl	8007f28 <__mcmp>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	dcb6      	bgt.n	800799a <_dtoa_r+0xa42>
 8007a2c:	d102      	bne.n	8007a34 <_dtoa_r+0xadc>
 8007a2e:	f018 0f01 	tst.w	r8, #1
 8007a32:	d1b2      	bne.n	800799a <_dtoa_r+0xa42>
 8007a34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a38:	2b30      	cmp	r3, #48	; 0x30
 8007a3a:	f105 32ff 	add.w	r2, r5, #4294967295
 8007a3e:	f47f af0a 	bne.w	8007856 <_dtoa_r+0x8fe>
 8007a42:	4615      	mov	r5, r2
 8007a44:	e7f6      	b.n	8007a34 <_dtoa_r+0xadc>
 8007a46:	4593      	cmp	fp, r2
 8007a48:	d105      	bne.n	8007a56 <_dtoa_r+0xafe>
 8007a4a:	2331      	movs	r3, #49	; 0x31
 8007a4c:	f10a 0a01 	add.w	sl, sl, #1
 8007a50:	f88b 3000 	strb.w	r3, [fp]
 8007a54:	e6ff      	b.n	8007856 <_dtoa_r+0x8fe>
 8007a56:	4615      	mov	r5, r2
 8007a58:	e79f      	b.n	800799a <_dtoa_r+0xa42>
 8007a5a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007ac0 <_dtoa_r+0xb68>
 8007a5e:	e007      	b.n	8007a70 <_dtoa_r+0xb18>
 8007a60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a62:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007ac4 <_dtoa_r+0xb6c>
 8007a66:	b11b      	cbz	r3, 8007a70 <_dtoa_r+0xb18>
 8007a68:	f10b 0308 	add.w	r3, fp, #8
 8007a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	4658      	mov	r0, fp
 8007a72:	b017      	add	sp, #92	; 0x5c
 8007a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a78:	9b06      	ldr	r3, [sp, #24]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	f77f ae35 	ble.w	80076ea <_dtoa_r+0x792>
 8007a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a82:	9307      	str	r3, [sp, #28]
 8007a84:	e649      	b.n	800771a <_dtoa_r+0x7c2>
 8007a86:	9b02      	ldr	r3, [sp, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dc03      	bgt.n	8007a94 <_dtoa_r+0xb3c>
 8007a8c:	9b06      	ldr	r3, [sp, #24]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	f73f aecc 	bgt.w	800782c <_dtoa_r+0x8d4>
 8007a94:	465d      	mov	r5, fp
 8007a96:	4639      	mov	r1, r7
 8007a98:	9804      	ldr	r0, [sp, #16]
 8007a9a:	f7ff f9d1 	bl	8006e40 <quorem>
 8007a9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007aa2:	f805 8b01 	strb.w	r8, [r5], #1
 8007aa6:	9a02      	ldr	r2, [sp, #8]
 8007aa8:	eba5 030b 	sub.w	r3, r5, fp
 8007aac:	429a      	cmp	r2, r3
 8007aae:	ddb0      	ble.n	8007a12 <_dtoa_r+0xaba>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	220a      	movs	r2, #10
 8007ab4:	9904      	ldr	r1, [sp, #16]
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 f86c 	bl	8007b94 <__multadd>
 8007abc:	9004      	str	r0, [sp, #16]
 8007abe:	e7ea      	b.n	8007a96 <_dtoa_r+0xb3e>
 8007ac0:	08008c4e 	.word	0x08008c4e
 8007ac4:	08008b28 	.word	0x08008b28

08007ac8 <_localeconv_r>:
 8007ac8:	4b04      	ldr	r3, [pc, #16]	; (8007adc <_localeconv_r+0x14>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6a18      	ldr	r0, [r3, #32]
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <_localeconv_r+0x18>)
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	bf08      	it	eq
 8007ad4:	4618      	moveq	r0, r3
 8007ad6:	30f0      	adds	r0, #240	; 0xf0
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	2000000c 	.word	0x2000000c
 8007ae0:	20000070 	.word	0x20000070

08007ae4 <memcpy>:
 8007ae4:	b510      	push	{r4, lr}
 8007ae6:	1e43      	subs	r3, r0, #1
 8007ae8:	440a      	add	r2, r1
 8007aea:	4291      	cmp	r1, r2
 8007aec:	d100      	bne.n	8007af0 <memcpy+0xc>
 8007aee:	bd10      	pop	{r4, pc}
 8007af0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007af4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007af8:	e7f7      	b.n	8007aea <memcpy+0x6>

08007afa <__malloc_lock>:
 8007afa:	4770      	bx	lr

08007afc <__malloc_unlock>:
 8007afc:	4770      	bx	lr

08007afe <_Balloc>:
 8007afe:	b570      	push	{r4, r5, r6, lr}
 8007b00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b02:	4604      	mov	r4, r0
 8007b04:	460e      	mov	r6, r1
 8007b06:	b93d      	cbnz	r5, 8007b18 <_Balloc+0x1a>
 8007b08:	2010      	movs	r0, #16
 8007b0a:	f7fe fd17 	bl	800653c <malloc>
 8007b0e:	6260      	str	r0, [r4, #36]	; 0x24
 8007b10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b14:	6005      	str	r5, [r0, #0]
 8007b16:	60c5      	str	r5, [r0, #12]
 8007b18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b1a:	68eb      	ldr	r3, [r5, #12]
 8007b1c:	b183      	cbz	r3, 8007b40 <_Balloc+0x42>
 8007b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b26:	b9b8      	cbnz	r0, 8007b58 <_Balloc+0x5a>
 8007b28:	2101      	movs	r1, #1
 8007b2a:	fa01 f506 	lsl.w	r5, r1, r6
 8007b2e:	1d6a      	adds	r2, r5, #5
 8007b30:	0092      	lsls	r2, r2, #2
 8007b32:	4620      	mov	r0, r4
 8007b34:	f000 fabe 	bl	80080b4 <_calloc_r>
 8007b38:	b160      	cbz	r0, 8007b54 <_Balloc+0x56>
 8007b3a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b3e:	e00e      	b.n	8007b5e <_Balloc+0x60>
 8007b40:	2221      	movs	r2, #33	; 0x21
 8007b42:	2104      	movs	r1, #4
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 fab5 	bl	80080b4 <_calloc_r>
 8007b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b4c:	60e8      	str	r0, [r5, #12]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e4      	bne.n	8007b1e <_Balloc+0x20>
 8007b54:	2000      	movs	r0, #0
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	6802      	ldr	r2, [r0, #0]
 8007b5a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b64:	e7f7      	b.n	8007b56 <_Balloc+0x58>

08007b66 <_Bfree>:
 8007b66:	b570      	push	{r4, r5, r6, lr}
 8007b68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460d      	mov	r5, r1
 8007b6e:	b93c      	cbnz	r4, 8007b80 <_Bfree+0x1a>
 8007b70:	2010      	movs	r0, #16
 8007b72:	f7fe fce3 	bl	800653c <malloc>
 8007b76:	6270      	str	r0, [r6, #36]	; 0x24
 8007b78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b7c:	6004      	str	r4, [r0, #0]
 8007b7e:	60c4      	str	r4, [r0, #12]
 8007b80:	b13d      	cbz	r5, 8007b92 <_Bfree+0x2c>
 8007b82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b84:	686a      	ldr	r2, [r5, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b8c:	6029      	str	r1, [r5, #0]
 8007b8e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007b92:	bd70      	pop	{r4, r5, r6, pc}

08007b94 <__multadd>:
 8007b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b98:	690d      	ldr	r5, [r1, #16]
 8007b9a:	461f      	mov	r7, r3
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	f101 0c14 	add.w	ip, r1, #20
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f8dc 0000 	ldr.w	r0, [ip]
 8007baa:	b281      	uxth	r1, r0
 8007bac:	fb02 7101 	mla	r1, r2, r1, r7
 8007bb0:	0c0f      	lsrs	r7, r1, #16
 8007bb2:	0c00      	lsrs	r0, r0, #16
 8007bb4:	fb02 7000 	mla	r0, r2, r0, r7
 8007bb8:	b289      	uxth	r1, r1
 8007bba:	3301      	adds	r3, #1
 8007bbc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007bc0:	429d      	cmp	r5, r3
 8007bc2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007bc6:	f84c 1b04 	str.w	r1, [ip], #4
 8007bca:	dcec      	bgt.n	8007ba6 <__multadd+0x12>
 8007bcc:	b1d7      	cbz	r7, 8007c04 <__multadd+0x70>
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	42ab      	cmp	r3, r5
 8007bd2:	dc12      	bgt.n	8007bfa <__multadd+0x66>
 8007bd4:	6861      	ldr	r1, [r4, #4]
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	3101      	adds	r1, #1
 8007bda:	f7ff ff90 	bl	8007afe <_Balloc>
 8007bde:	6922      	ldr	r2, [r4, #16]
 8007be0:	3202      	adds	r2, #2
 8007be2:	f104 010c 	add.w	r1, r4, #12
 8007be6:	4680      	mov	r8, r0
 8007be8:	0092      	lsls	r2, r2, #2
 8007bea:	300c      	adds	r0, #12
 8007bec:	f7ff ff7a 	bl	8007ae4 <memcpy>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ffb7 	bl	8007b66 <_Bfree>
 8007bf8:	4644      	mov	r4, r8
 8007bfa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bfe:	3501      	adds	r5, #1
 8007c00:	615f      	str	r7, [r3, #20]
 8007c02:	6125      	str	r5, [r4, #16]
 8007c04:	4620      	mov	r0, r4
 8007c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c0a <__hi0bits>:
 8007c0a:	0c02      	lsrs	r2, r0, #16
 8007c0c:	0412      	lsls	r2, r2, #16
 8007c0e:	4603      	mov	r3, r0
 8007c10:	b9b2      	cbnz	r2, 8007c40 <__hi0bits+0x36>
 8007c12:	0403      	lsls	r3, r0, #16
 8007c14:	2010      	movs	r0, #16
 8007c16:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c1a:	bf04      	itt	eq
 8007c1c:	021b      	lsleq	r3, r3, #8
 8007c1e:	3008      	addeq	r0, #8
 8007c20:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c24:	bf04      	itt	eq
 8007c26:	011b      	lsleq	r3, r3, #4
 8007c28:	3004      	addeq	r0, #4
 8007c2a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c2e:	bf04      	itt	eq
 8007c30:	009b      	lsleq	r3, r3, #2
 8007c32:	3002      	addeq	r0, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	db06      	blt.n	8007c46 <__hi0bits+0x3c>
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	d503      	bpl.n	8007c44 <__hi0bits+0x3a>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	4770      	bx	lr
 8007c40:	2000      	movs	r0, #0
 8007c42:	e7e8      	b.n	8007c16 <__hi0bits+0xc>
 8007c44:	2020      	movs	r0, #32
 8007c46:	4770      	bx	lr

08007c48 <__lo0bits>:
 8007c48:	6803      	ldr	r3, [r0, #0]
 8007c4a:	f013 0207 	ands.w	r2, r3, #7
 8007c4e:	4601      	mov	r1, r0
 8007c50:	d00b      	beq.n	8007c6a <__lo0bits+0x22>
 8007c52:	07da      	lsls	r2, r3, #31
 8007c54:	d423      	bmi.n	8007c9e <__lo0bits+0x56>
 8007c56:	0798      	lsls	r0, r3, #30
 8007c58:	bf49      	itett	mi
 8007c5a:	085b      	lsrmi	r3, r3, #1
 8007c5c:	089b      	lsrpl	r3, r3, #2
 8007c5e:	2001      	movmi	r0, #1
 8007c60:	600b      	strmi	r3, [r1, #0]
 8007c62:	bf5c      	itt	pl
 8007c64:	600b      	strpl	r3, [r1, #0]
 8007c66:	2002      	movpl	r0, #2
 8007c68:	4770      	bx	lr
 8007c6a:	b298      	uxth	r0, r3
 8007c6c:	b9a8      	cbnz	r0, 8007c9a <__lo0bits+0x52>
 8007c6e:	0c1b      	lsrs	r3, r3, #16
 8007c70:	2010      	movs	r0, #16
 8007c72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c76:	bf04      	itt	eq
 8007c78:	0a1b      	lsreq	r3, r3, #8
 8007c7a:	3008      	addeq	r0, #8
 8007c7c:	071a      	lsls	r2, r3, #28
 8007c7e:	bf04      	itt	eq
 8007c80:	091b      	lsreq	r3, r3, #4
 8007c82:	3004      	addeq	r0, #4
 8007c84:	079a      	lsls	r2, r3, #30
 8007c86:	bf04      	itt	eq
 8007c88:	089b      	lsreq	r3, r3, #2
 8007c8a:	3002      	addeq	r0, #2
 8007c8c:	07da      	lsls	r2, r3, #31
 8007c8e:	d402      	bmi.n	8007c96 <__lo0bits+0x4e>
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	d006      	beq.n	8007ca2 <__lo0bits+0x5a>
 8007c94:	3001      	adds	r0, #1
 8007c96:	600b      	str	r3, [r1, #0]
 8007c98:	4770      	bx	lr
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	e7e9      	b.n	8007c72 <__lo0bits+0x2a>
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	4770      	bx	lr
 8007ca2:	2020      	movs	r0, #32
 8007ca4:	4770      	bx	lr

08007ca6 <__i2b>:
 8007ca6:	b510      	push	{r4, lr}
 8007ca8:	460c      	mov	r4, r1
 8007caa:	2101      	movs	r1, #1
 8007cac:	f7ff ff27 	bl	8007afe <_Balloc>
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	6144      	str	r4, [r0, #20]
 8007cb4:	6102      	str	r2, [r0, #16]
 8007cb6:	bd10      	pop	{r4, pc}

08007cb8 <__multiply>:
 8007cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	690a      	ldr	r2, [r1, #16]
 8007cc0:	6923      	ldr	r3, [r4, #16]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	bfb8      	it	lt
 8007cc6:	460b      	movlt	r3, r1
 8007cc8:	4688      	mov	r8, r1
 8007cca:	bfbc      	itt	lt
 8007ccc:	46a0      	movlt	r8, r4
 8007cce:	461c      	movlt	r4, r3
 8007cd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007cd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007cd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ce0:	eb07 0609 	add.w	r6, r7, r9
 8007ce4:	42b3      	cmp	r3, r6
 8007ce6:	bfb8      	it	lt
 8007ce8:	3101      	addlt	r1, #1
 8007cea:	f7ff ff08 	bl	8007afe <_Balloc>
 8007cee:	f100 0514 	add.w	r5, r0, #20
 8007cf2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	4573      	cmp	r3, lr
 8007cfc:	d316      	bcc.n	8007d2c <__multiply+0x74>
 8007cfe:	f104 0214 	add.w	r2, r4, #20
 8007d02:	f108 0114 	add.w	r1, r8, #20
 8007d06:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007d0a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	9b00      	ldr	r3, [sp, #0]
 8007d12:	9201      	str	r2, [sp, #4]
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d80c      	bhi.n	8007d32 <__multiply+0x7a>
 8007d18:	2e00      	cmp	r6, #0
 8007d1a:	dd03      	ble.n	8007d24 <__multiply+0x6c>
 8007d1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d05d      	beq.n	8007de0 <__multiply+0x128>
 8007d24:	6106      	str	r6, [r0, #16]
 8007d26:	b003      	add	sp, #12
 8007d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2c:	f843 2b04 	str.w	r2, [r3], #4
 8007d30:	e7e3      	b.n	8007cfa <__multiply+0x42>
 8007d32:	f8b2 b000 	ldrh.w	fp, [r2]
 8007d36:	f1bb 0f00 	cmp.w	fp, #0
 8007d3a:	d023      	beq.n	8007d84 <__multiply+0xcc>
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	46ac      	mov	ip, r5
 8007d40:	f04f 0800 	mov.w	r8, #0
 8007d44:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d48:	f8dc a000 	ldr.w	sl, [ip]
 8007d4c:	b2a3      	uxth	r3, r4
 8007d4e:	fa1f fa8a 	uxth.w	sl, sl
 8007d52:	fb0b a303 	mla	r3, fp, r3, sl
 8007d56:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d5a:	f8dc 4000 	ldr.w	r4, [ip]
 8007d5e:	4443      	add	r3, r8
 8007d60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d64:	fb0b 840a 	mla	r4, fp, sl, r8
 8007d68:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007d6c:	46e2      	mov	sl, ip
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d74:	454f      	cmp	r7, r9
 8007d76:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d7a:	f84a 3b04 	str.w	r3, [sl], #4
 8007d7e:	d82b      	bhi.n	8007dd8 <__multiply+0x120>
 8007d80:	f8cc 8004 	str.w	r8, [ip, #4]
 8007d84:	9b01      	ldr	r3, [sp, #4]
 8007d86:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007d8a:	3204      	adds	r2, #4
 8007d8c:	f1ba 0f00 	cmp.w	sl, #0
 8007d90:	d020      	beq.n	8007dd4 <__multiply+0x11c>
 8007d92:	682b      	ldr	r3, [r5, #0]
 8007d94:	4689      	mov	r9, r1
 8007d96:	46a8      	mov	r8, r5
 8007d98:	f04f 0b00 	mov.w	fp, #0
 8007d9c:	f8b9 c000 	ldrh.w	ip, [r9]
 8007da0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007da4:	fb0a 440c 	mla	r4, sl, ip, r4
 8007da8:	445c      	add	r4, fp
 8007daa:	46c4      	mov	ip, r8
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007db2:	f84c 3b04 	str.w	r3, [ip], #4
 8007db6:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007dbe:	0c1b      	lsrs	r3, r3, #16
 8007dc0:	fb0a b303 	mla	r3, sl, r3, fp
 8007dc4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007dc8:	454f      	cmp	r7, r9
 8007dca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007dce:	d805      	bhi.n	8007ddc <__multiply+0x124>
 8007dd0:	f8c8 3004 	str.w	r3, [r8, #4]
 8007dd4:	3504      	adds	r5, #4
 8007dd6:	e79b      	b.n	8007d10 <__multiply+0x58>
 8007dd8:	46d4      	mov	ip, sl
 8007dda:	e7b3      	b.n	8007d44 <__multiply+0x8c>
 8007ddc:	46e0      	mov	r8, ip
 8007dde:	e7dd      	b.n	8007d9c <__multiply+0xe4>
 8007de0:	3e01      	subs	r6, #1
 8007de2:	e799      	b.n	8007d18 <__multiply+0x60>

08007de4 <__pow5mult>:
 8007de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de8:	4615      	mov	r5, r2
 8007dea:	f012 0203 	ands.w	r2, r2, #3
 8007dee:	4606      	mov	r6, r0
 8007df0:	460f      	mov	r7, r1
 8007df2:	d007      	beq.n	8007e04 <__pow5mult+0x20>
 8007df4:	3a01      	subs	r2, #1
 8007df6:	4c21      	ldr	r4, [pc, #132]	; (8007e7c <__pow5mult+0x98>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dfe:	f7ff fec9 	bl	8007b94 <__multadd>
 8007e02:	4607      	mov	r7, r0
 8007e04:	10ad      	asrs	r5, r5, #2
 8007e06:	d035      	beq.n	8007e74 <__pow5mult+0x90>
 8007e08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e0a:	b93c      	cbnz	r4, 8007e1c <__pow5mult+0x38>
 8007e0c:	2010      	movs	r0, #16
 8007e0e:	f7fe fb95 	bl	800653c <malloc>
 8007e12:	6270      	str	r0, [r6, #36]	; 0x24
 8007e14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e18:	6004      	str	r4, [r0, #0]
 8007e1a:	60c4      	str	r4, [r0, #12]
 8007e1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e24:	b94c      	cbnz	r4, 8007e3a <__pow5mult+0x56>
 8007e26:	f240 2171 	movw	r1, #625	; 0x271
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7ff ff3b 	bl	8007ca6 <__i2b>
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e36:	4604      	mov	r4, r0
 8007e38:	6003      	str	r3, [r0, #0]
 8007e3a:	f04f 0800 	mov.w	r8, #0
 8007e3e:	07eb      	lsls	r3, r5, #31
 8007e40:	d50a      	bpl.n	8007e58 <__pow5mult+0x74>
 8007e42:	4639      	mov	r1, r7
 8007e44:	4622      	mov	r2, r4
 8007e46:	4630      	mov	r0, r6
 8007e48:	f7ff ff36 	bl	8007cb8 <__multiply>
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	4681      	mov	r9, r0
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff fe88 	bl	8007b66 <_Bfree>
 8007e56:	464f      	mov	r7, r9
 8007e58:	106d      	asrs	r5, r5, #1
 8007e5a:	d00b      	beq.n	8007e74 <__pow5mult+0x90>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	b938      	cbnz	r0, 8007e70 <__pow5mult+0x8c>
 8007e60:	4622      	mov	r2, r4
 8007e62:	4621      	mov	r1, r4
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7ff ff27 	bl	8007cb8 <__multiply>
 8007e6a:	6020      	str	r0, [r4, #0]
 8007e6c:	f8c0 8000 	str.w	r8, [r0]
 8007e70:	4604      	mov	r4, r0
 8007e72:	e7e4      	b.n	8007e3e <__pow5mult+0x5a>
 8007e74:	4638      	mov	r0, r7
 8007e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e7a:	bf00      	nop
 8007e7c:	08008c28 	.word	0x08008c28

08007e80 <__lshift>:
 8007e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e84:	460c      	mov	r4, r1
 8007e86:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	6849      	ldr	r1, [r1, #4]
 8007e8e:	eb0a 0903 	add.w	r9, sl, r3
 8007e92:	68a3      	ldr	r3, [r4, #8]
 8007e94:	4607      	mov	r7, r0
 8007e96:	4616      	mov	r6, r2
 8007e98:	f109 0501 	add.w	r5, r9, #1
 8007e9c:	42ab      	cmp	r3, r5
 8007e9e:	db32      	blt.n	8007f06 <__lshift+0x86>
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff fe2c 	bl	8007afe <_Balloc>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	4680      	mov	r8, r0
 8007eaa:	f100 0114 	add.w	r1, r0, #20
 8007eae:	461a      	mov	r2, r3
 8007eb0:	4553      	cmp	r3, sl
 8007eb2:	db2b      	blt.n	8007f0c <__lshift+0x8c>
 8007eb4:	6920      	ldr	r0, [r4, #16]
 8007eb6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007eba:	f104 0314 	add.w	r3, r4, #20
 8007ebe:	f016 021f 	ands.w	r2, r6, #31
 8007ec2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ec6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007eca:	d025      	beq.n	8007f18 <__lshift+0x98>
 8007ecc:	f1c2 0e20 	rsb	lr, r2, #32
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	681e      	ldr	r6, [r3, #0]
 8007ed4:	468a      	mov	sl, r1
 8007ed6:	4096      	lsls	r6, r2
 8007ed8:	4330      	orrs	r0, r6
 8007eda:	f84a 0b04 	str.w	r0, [sl], #4
 8007ede:	f853 0b04 	ldr.w	r0, [r3], #4
 8007ee2:	459c      	cmp	ip, r3
 8007ee4:	fa20 f00e 	lsr.w	r0, r0, lr
 8007ee8:	d814      	bhi.n	8007f14 <__lshift+0x94>
 8007eea:	6048      	str	r0, [r1, #4]
 8007eec:	b108      	cbz	r0, 8007ef2 <__lshift+0x72>
 8007eee:	f109 0502 	add.w	r5, r9, #2
 8007ef2:	3d01      	subs	r5, #1
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f8c8 5010 	str.w	r5, [r8, #16]
 8007efa:	4621      	mov	r1, r4
 8007efc:	f7ff fe33 	bl	8007b66 <_Bfree>
 8007f00:	4640      	mov	r0, r8
 8007f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f06:	3101      	adds	r1, #1
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	e7c7      	b.n	8007e9c <__lshift+0x1c>
 8007f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007f10:	3301      	adds	r3, #1
 8007f12:	e7cd      	b.n	8007eb0 <__lshift+0x30>
 8007f14:	4651      	mov	r1, sl
 8007f16:	e7dc      	b.n	8007ed2 <__lshift+0x52>
 8007f18:	3904      	subs	r1, #4
 8007f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f22:	459c      	cmp	ip, r3
 8007f24:	d8f9      	bhi.n	8007f1a <__lshift+0x9a>
 8007f26:	e7e4      	b.n	8007ef2 <__lshift+0x72>

08007f28 <__mcmp>:
 8007f28:	6903      	ldr	r3, [r0, #16]
 8007f2a:	690a      	ldr	r2, [r1, #16]
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	b530      	push	{r4, r5, lr}
 8007f30:	d10c      	bne.n	8007f4c <__mcmp+0x24>
 8007f32:	0092      	lsls	r2, r2, #2
 8007f34:	3014      	adds	r0, #20
 8007f36:	3114      	adds	r1, #20
 8007f38:	1884      	adds	r4, r0, r2
 8007f3a:	4411      	add	r1, r2
 8007f3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f44:	4295      	cmp	r5, r2
 8007f46:	d003      	beq.n	8007f50 <__mcmp+0x28>
 8007f48:	d305      	bcc.n	8007f56 <__mcmp+0x2e>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	bd30      	pop	{r4, r5, pc}
 8007f50:	42a0      	cmp	r0, r4
 8007f52:	d3f3      	bcc.n	8007f3c <__mcmp+0x14>
 8007f54:	e7fa      	b.n	8007f4c <__mcmp+0x24>
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5a:	e7f7      	b.n	8007f4c <__mcmp+0x24>

08007f5c <__mdiff>:
 8007f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f60:	460d      	mov	r5, r1
 8007f62:	4607      	mov	r7, r0
 8007f64:	4611      	mov	r1, r2
 8007f66:	4628      	mov	r0, r5
 8007f68:	4614      	mov	r4, r2
 8007f6a:	f7ff ffdd 	bl	8007f28 <__mcmp>
 8007f6e:	1e06      	subs	r6, r0, #0
 8007f70:	d108      	bne.n	8007f84 <__mdiff+0x28>
 8007f72:	4631      	mov	r1, r6
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7ff fdc2 	bl	8007afe <_Balloc>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f84:	bfa4      	itt	ge
 8007f86:	4623      	movge	r3, r4
 8007f88:	462c      	movge	r4, r5
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	6861      	ldr	r1, [r4, #4]
 8007f8e:	bfa6      	itte	ge
 8007f90:	461d      	movge	r5, r3
 8007f92:	2600      	movge	r6, #0
 8007f94:	2601      	movlt	r6, #1
 8007f96:	f7ff fdb2 	bl	8007afe <_Balloc>
 8007f9a:	692b      	ldr	r3, [r5, #16]
 8007f9c:	60c6      	str	r6, [r0, #12]
 8007f9e:	6926      	ldr	r6, [r4, #16]
 8007fa0:	f105 0914 	add.w	r9, r5, #20
 8007fa4:	f104 0214 	add.w	r2, r4, #20
 8007fa8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007fac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007fb0:	f100 0514 	add.w	r5, r0, #20
 8007fb4:	f04f 0e00 	mov.w	lr, #0
 8007fb8:	f852 ab04 	ldr.w	sl, [r2], #4
 8007fbc:	f859 4b04 	ldr.w	r4, [r9], #4
 8007fc0:	fa1e f18a 	uxtah	r1, lr, sl
 8007fc4:	b2a3      	uxth	r3, r4
 8007fc6:	1ac9      	subs	r1, r1, r3
 8007fc8:	0c23      	lsrs	r3, r4, #16
 8007fca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007fce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007fd2:	b289      	uxth	r1, r1
 8007fd4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007fd8:	45c8      	cmp	r8, r9
 8007fda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007fde:	4694      	mov	ip, r2
 8007fe0:	f845 3b04 	str.w	r3, [r5], #4
 8007fe4:	d8e8      	bhi.n	8007fb8 <__mdiff+0x5c>
 8007fe6:	45bc      	cmp	ip, r7
 8007fe8:	d304      	bcc.n	8007ff4 <__mdiff+0x98>
 8007fea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007fee:	b183      	cbz	r3, 8008012 <__mdiff+0xb6>
 8007ff0:	6106      	str	r6, [r0, #16]
 8007ff2:	e7c5      	b.n	8007f80 <__mdiff+0x24>
 8007ff4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ff8:	fa1e f381 	uxtah	r3, lr, r1
 8007ffc:	141a      	asrs	r2, r3, #16
 8007ffe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008002:	b29b      	uxth	r3, r3
 8008004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008008:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800800c:	f845 3b04 	str.w	r3, [r5], #4
 8008010:	e7e9      	b.n	8007fe6 <__mdiff+0x8a>
 8008012:	3e01      	subs	r6, #1
 8008014:	e7e9      	b.n	8007fea <__mdiff+0x8e>

08008016 <__d2b>:
 8008016:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800801a:	460e      	mov	r6, r1
 800801c:	2101      	movs	r1, #1
 800801e:	ec59 8b10 	vmov	r8, r9, d0
 8008022:	4615      	mov	r5, r2
 8008024:	f7ff fd6b 	bl	8007afe <_Balloc>
 8008028:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800802c:	4607      	mov	r7, r0
 800802e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008032:	bb34      	cbnz	r4, 8008082 <__d2b+0x6c>
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	f1b8 0300 	subs.w	r3, r8, #0
 800803a:	d027      	beq.n	800808c <__d2b+0x76>
 800803c:	a802      	add	r0, sp, #8
 800803e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008042:	f7ff fe01 	bl	8007c48 <__lo0bits>
 8008046:	9900      	ldr	r1, [sp, #0]
 8008048:	b1f0      	cbz	r0, 8008088 <__d2b+0x72>
 800804a:	9a01      	ldr	r2, [sp, #4]
 800804c:	f1c0 0320 	rsb	r3, r0, #32
 8008050:	fa02 f303 	lsl.w	r3, r2, r3
 8008054:	430b      	orrs	r3, r1
 8008056:	40c2      	lsrs	r2, r0
 8008058:	617b      	str	r3, [r7, #20]
 800805a:	9201      	str	r2, [sp, #4]
 800805c:	9b01      	ldr	r3, [sp, #4]
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	bf14      	ite	ne
 8008064:	2102      	movne	r1, #2
 8008066:	2101      	moveq	r1, #1
 8008068:	6139      	str	r1, [r7, #16]
 800806a:	b1c4      	cbz	r4, 800809e <__d2b+0x88>
 800806c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008070:	4404      	add	r4, r0
 8008072:	6034      	str	r4, [r6, #0]
 8008074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008078:	6028      	str	r0, [r5, #0]
 800807a:	4638      	mov	r0, r7
 800807c:	b003      	add	sp, #12
 800807e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008086:	e7d5      	b.n	8008034 <__d2b+0x1e>
 8008088:	6179      	str	r1, [r7, #20]
 800808a:	e7e7      	b.n	800805c <__d2b+0x46>
 800808c:	a801      	add	r0, sp, #4
 800808e:	f7ff fddb 	bl	8007c48 <__lo0bits>
 8008092:	9b01      	ldr	r3, [sp, #4]
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	2101      	movs	r1, #1
 8008098:	6139      	str	r1, [r7, #16]
 800809a:	3020      	adds	r0, #32
 800809c:	e7e5      	b.n	800806a <__d2b+0x54>
 800809e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80080a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080a6:	6030      	str	r0, [r6, #0]
 80080a8:	6918      	ldr	r0, [r3, #16]
 80080aa:	f7ff fdae 	bl	8007c0a <__hi0bits>
 80080ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080b2:	e7e1      	b.n	8008078 <__d2b+0x62>

080080b4 <_calloc_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	fb02 f401 	mul.w	r4, r2, r1
 80080ba:	4621      	mov	r1, r4
 80080bc:	f7fe fa9c 	bl	80065f8 <_malloc_r>
 80080c0:	4605      	mov	r5, r0
 80080c2:	b118      	cbz	r0, 80080cc <_calloc_r+0x18>
 80080c4:	4622      	mov	r2, r4
 80080c6:	2100      	movs	r1, #0
 80080c8:	f7fe fa40 	bl	800654c <memset>
 80080cc:	4628      	mov	r0, r5
 80080ce:	bd38      	pop	{r3, r4, r5, pc}

080080d0 <_sungetc_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	1c4b      	adds	r3, r1, #1
 80080d4:	4614      	mov	r4, r2
 80080d6:	d103      	bne.n	80080e0 <_sungetc_r+0x10>
 80080d8:	f04f 35ff 	mov.w	r5, #4294967295
 80080dc:	4628      	mov	r0, r5
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	8993      	ldrh	r3, [r2, #12]
 80080e2:	f023 0320 	bic.w	r3, r3, #32
 80080e6:	8193      	strh	r3, [r2, #12]
 80080e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080ea:	6852      	ldr	r2, [r2, #4]
 80080ec:	b2cd      	uxtb	r5, r1
 80080ee:	b18b      	cbz	r3, 8008114 <_sungetc_r+0x44>
 80080f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080f2:	4293      	cmp	r3, r2
 80080f4:	dd08      	ble.n	8008108 <_sungetc_r+0x38>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	1e5a      	subs	r2, r3, #1
 80080fa:	6022      	str	r2, [r4, #0]
 80080fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008100:	6863      	ldr	r3, [r4, #4]
 8008102:	3301      	adds	r3, #1
 8008104:	6063      	str	r3, [r4, #4]
 8008106:	e7e9      	b.n	80080dc <_sungetc_r+0xc>
 8008108:	4621      	mov	r1, r4
 800810a:	f000 fc2f 	bl	800896c <__submore>
 800810e:	2800      	cmp	r0, #0
 8008110:	d0f1      	beq.n	80080f6 <_sungetc_r+0x26>
 8008112:	e7e1      	b.n	80080d8 <_sungetc_r+0x8>
 8008114:	6921      	ldr	r1, [r4, #16]
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	b151      	cbz	r1, 8008130 <_sungetc_r+0x60>
 800811a:	4299      	cmp	r1, r3
 800811c:	d208      	bcs.n	8008130 <_sungetc_r+0x60>
 800811e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008122:	42a9      	cmp	r1, r5
 8008124:	d104      	bne.n	8008130 <_sungetc_r+0x60>
 8008126:	3b01      	subs	r3, #1
 8008128:	3201      	adds	r2, #1
 800812a:	6023      	str	r3, [r4, #0]
 800812c:	6062      	str	r2, [r4, #4]
 800812e:	e7d5      	b.n	80080dc <_sungetc_r+0xc>
 8008130:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008138:	6363      	str	r3, [r4, #52]	; 0x34
 800813a:	2303      	movs	r3, #3
 800813c:	63a3      	str	r3, [r4, #56]	; 0x38
 800813e:	4623      	mov	r3, r4
 8008140:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	2301      	movs	r3, #1
 8008148:	e7dc      	b.n	8008104 <_sungetc_r+0x34>

0800814a <__ssrefill_r>:
 800814a:	b510      	push	{r4, lr}
 800814c:	460c      	mov	r4, r1
 800814e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008150:	b169      	cbz	r1, 800816e <__ssrefill_r+0x24>
 8008152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008156:	4299      	cmp	r1, r3
 8008158:	d001      	beq.n	800815e <__ssrefill_r+0x14>
 800815a:	f7fe f9ff 	bl	800655c <_free_r>
 800815e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008160:	6063      	str	r3, [r4, #4]
 8008162:	2000      	movs	r0, #0
 8008164:	6360      	str	r0, [r4, #52]	; 0x34
 8008166:	b113      	cbz	r3, 800816e <__ssrefill_r+0x24>
 8008168:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	bd10      	pop	{r4, pc}
 800816e:	6923      	ldr	r3, [r4, #16]
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	2300      	movs	r3, #0
 8008174:	6063      	str	r3, [r4, #4]
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	f043 0320 	orr.w	r3, r3, #32
 800817c:	81a3      	strh	r3, [r4, #12]
 800817e:	f04f 30ff 	mov.w	r0, #4294967295
 8008182:	e7f3      	b.n	800816c <__ssrefill_r+0x22>

08008184 <__ssvfiscanf_r>:
 8008184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800818c:	460c      	mov	r4, r1
 800818e:	2100      	movs	r1, #0
 8008190:	9144      	str	r1, [sp, #272]	; 0x110
 8008192:	9145      	str	r1, [sp, #276]	; 0x114
 8008194:	499f      	ldr	r1, [pc, #636]	; (8008414 <__ssvfiscanf_r+0x290>)
 8008196:	91a0      	str	r1, [sp, #640]	; 0x280
 8008198:	f10d 0804 	add.w	r8, sp, #4
 800819c:	499e      	ldr	r1, [pc, #632]	; (8008418 <__ssvfiscanf_r+0x294>)
 800819e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800841c <__ssvfiscanf_r+0x298>
 80081a2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80081a6:	4606      	mov	r6, r0
 80081a8:	4692      	mov	sl, r2
 80081aa:	91a1      	str	r1, [sp, #644]	; 0x284
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	270a      	movs	r7, #10
 80081b0:	f89a 3000 	ldrb.w	r3, [sl]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 812a 	beq.w	800840e <__ssvfiscanf_r+0x28a>
 80081ba:	4655      	mov	r5, sl
 80081bc:	f000 fc14 	bl	80089e8 <__locale_ctype_ptr>
 80081c0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80081c4:	4458      	add	r0, fp
 80081c6:	7843      	ldrb	r3, [r0, #1]
 80081c8:	f013 0308 	ands.w	r3, r3, #8
 80081cc:	d01c      	beq.n	8008208 <__ssvfiscanf_r+0x84>
 80081ce:	6863      	ldr	r3, [r4, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dd12      	ble.n	80081fa <__ssvfiscanf_r+0x76>
 80081d4:	f000 fc08 	bl	80089e8 <__locale_ctype_ptr>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	781a      	ldrb	r2, [r3, #0]
 80081dc:	4410      	add	r0, r2
 80081de:	7842      	ldrb	r2, [r0, #1]
 80081e0:	0712      	lsls	r2, r2, #28
 80081e2:	d401      	bmi.n	80081e8 <__ssvfiscanf_r+0x64>
 80081e4:	46aa      	mov	sl, r5
 80081e6:	e7e3      	b.n	80081b0 <__ssvfiscanf_r+0x2c>
 80081e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80081ea:	3201      	adds	r2, #1
 80081ec:	9245      	str	r2, [sp, #276]	; 0x114
 80081ee:	6862      	ldr	r2, [r4, #4]
 80081f0:	3301      	adds	r3, #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	6062      	str	r2, [r4, #4]
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	e7e9      	b.n	80081ce <__ssvfiscanf_r+0x4a>
 80081fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80081fc:	4621      	mov	r1, r4
 80081fe:	4630      	mov	r0, r6
 8008200:	4798      	blx	r3
 8008202:	2800      	cmp	r0, #0
 8008204:	d0e6      	beq.n	80081d4 <__ssvfiscanf_r+0x50>
 8008206:	e7ed      	b.n	80081e4 <__ssvfiscanf_r+0x60>
 8008208:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800820c:	f040 8082 	bne.w	8008314 <__ssvfiscanf_r+0x190>
 8008210:	9343      	str	r3, [sp, #268]	; 0x10c
 8008212:	9341      	str	r3, [sp, #260]	; 0x104
 8008214:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008218:	2b2a      	cmp	r3, #42	; 0x2a
 800821a:	d103      	bne.n	8008224 <__ssvfiscanf_r+0xa0>
 800821c:	2310      	movs	r3, #16
 800821e:	9341      	str	r3, [sp, #260]	; 0x104
 8008220:	f10a 0502 	add.w	r5, sl, #2
 8008224:	46aa      	mov	sl, r5
 8008226:	f815 1b01 	ldrb.w	r1, [r5], #1
 800822a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800822e:	2a09      	cmp	r2, #9
 8008230:	d922      	bls.n	8008278 <__ssvfiscanf_r+0xf4>
 8008232:	2203      	movs	r2, #3
 8008234:	4879      	ldr	r0, [pc, #484]	; (800841c <__ssvfiscanf_r+0x298>)
 8008236:	f7f7 ffdb 	bl	80001f0 <memchr>
 800823a:	b138      	cbz	r0, 800824c <__ssvfiscanf_r+0xc8>
 800823c:	eba0 0309 	sub.w	r3, r0, r9
 8008240:	2001      	movs	r0, #1
 8008242:	4098      	lsls	r0, r3
 8008244:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008246:	4318      	orrs	r0, r3
 8008248:	9041      	str	r0, [sp, #260]	; 0x104
 800824a:	46aa      	mov	sl, r5
 800824c:	f89a 3000 	ldrb.w	r3, [sl]
 8008250:	2b67      	cmp	r3, #103	; 0x67
 8008252:	f10a 0501 	add.w	r5, sl, #1
 8008256:	d82b      	bhi.n	80082b0 <__ssvfiscanf_r+0x12c>
 8008258:	2b65      	cmp	r3, #101	; 0x65
 800825a:	f080 809f 	bcs.w	800839c <__ssvfiscanf_r+0x218>
 800825e:	2b47      	cmp	r3, #71	; 0x47
 8008260:	d810      	bhi.n	8008284 <__ssvfiscanf_r+0x100>
 8008262:	2b45      	cmp	r3, #69	; 0x45
 8008264:	f080 809a 	bcs.w	800839c <__ssvfiscanf_r+0x218>
 8008268:	2b00      	cmp	r3, #0
 800826a:	d06c      	beq.n	8008346 <__ssvfiscanf_r+0x1c2>
 800826c:	2b25      	cmp	r3, #37	; 0x25
 800826e:	d051      	beq.n	8008314 <__ssvfiscanf_r+0x190>
 8008270:	2303      	movs	r3, #3
 8008272:	9347      	str	r3, [sp, #284]	; 0x11c
 8008274:	9742      	str	r7, [sp, #264]	; 0x108
 8008276:	e027      	b.n	80082c8 <__ssvfiscanf_r+0x144>
 8008278:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800827a:	fb07 1303 	mla	r3, r7, r3, r1
 800827e:	3b30      	subs	r3, #48	; 0x30
 8008280:	9343      	str	r3, [sp, #268]	; 0x10c
 8008282:	e7cf      	b.n	8008224 <__ssvfiscanf_r+0xa0>
 8008284:	2b5b      	cmp	r3, #91	; 0x5b
 8008286:	d06a      	beq.n	800835e <__ssvfiscanf_r+0x1da>
 8008288:	d80c      	bhi.n	80082a4 <__ssvfiscanf_r+0x120>
 800828a:	2b58      	cmp	r3, #88	; 0x58
 800828c:	d1f0      	bne.n	8008270 <__ssvfiscanf_r+0xec>
 800828e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008294:	9241      	str	r2, [sp, #260]	; 0x104
 8008296:	2210      	movs	r2, #16
 8008298:	9242      	str	r2, [sp, #264]	; 0x108
 800829a:	2b6e      	cmp	r3, #110	; 0x6e
 800829c:	bf8c      	ite	hi
 800829e:	2304      	movhi	r3, #4
 80082a0:	2303      	movls	r3, #3
 80082a2:	e010      	b.n	80082c6 <__ssvfiscanf_r+0x142>
 80082a4:	2b63      	cmp	r3, #99	; 0x63
 80082a6:	d065      	beq.n	8008374 <__ssvfiscanf_r+0x1f0>
 80082a8:	2b64      	cmp	r3, #100	; 0x64
 80082aa:	d1e1      	bne.n	8008270 <__ssvfiscanf_r+0xec>
 80082ac:	9742      	str	r7, [sp, #264]	; 0x108
 80082ae:	e7f4      	b.n	800829a <__ssvfiscanf_r+0x116>
 80082b0:	2b70      	cmp	r3, #112	; 0x70
 80082b2:	d04b      	beq.n	800834c <__ssvfiscanf_r+0x1c8>
 80082b4:	d826      	bhi.n	8008304 <__ssvfiscanf_r+0x180>
 80082b6:	2b6e      	cmp	r3, #110	; 0x6e
 80082b8:	d062      	beq.n	8008380 <__ssvfiscanf_r+0x1fc>
 80082ba:	d84c      	bhi.n	8008356 <__ssvfiscanf_r+0x1d2>
 80082bc:	2b69      	cmp	r3, #105	; 0x69
 80082be:	d1d7      	bne.n	8008270 <__ssvfiscanf_r+0xec>
 80082c0:	2300      	movs	r3, #0
 80082c2:	9342      	str	r3, [sp, #264]	; 0x108
 80082c4:	2303      	movs	r3, #3
 80082c6:	9347      	str	r3, [sp, #284]	; 0x11c
 80082c8:	6863      	ldr	r3, [r4, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	dd68      	ble.n	80083a0 <__ssvfiscanf_r+0x21c>
 80082ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80082d0:	0659      	lsls	r1, r3, #25
 80082d2:	d407      	bmi.n	80082e4 <__ssvfiscanf_r+0x160>
 80082d4:	f000 fb88 	bl	80089e8 <__locale_ctype_ptr>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	4410      	add	r0, r2
 80082de:	7842      	ldrb	r2, [r0, #1]
 80082e0:	0712      	lsls	r2, r2, #28
 80082e2:	d464      	bmi.n	80083ae <__ssvfiscanf_r+0x22a>
 80082e4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	dc73      	bgt.n	80083d2 <__ssvfiscanf_r+0x24e>
 80082ea:	466b      	mov	r3, sp
 80082ec:	4622      	mov	r2, r4
 80082ee:	a941      	add	r1, sp, #260	; 0x104
 80082f0:	4630      	mov	r0, r6
 80082f2:	f000 f897 	bl	8008424 <_scanf_chars>
 80082f6:	2801      	cmp	r0, #1
 80082f8:	f000 8089 	beq.w	800840e <__ssvfiscanf_r+0x28a>
 80082fc:	2802      	cmp	r0, #2
 80082fe:	f47f af71 	bne.w	80081e4 <__ssvfiscanf_r+0x60>
 8008302:	e01d      	b.n	8008340 <__ssvfiscanf_r+0x1bc>
 8008304:	2b75      	cmp	r3, #117	; 0x75
 8008306:	d0d1      	beq.n	80082ac <__ssvfiscanf_r+0x128>
 8008308:	2b78      	cmp	r3, #120	; 0x78
 800830a:	d0c0      	beq.n	800828e <__ssvfiscanf_r+0x10a>
 800830c:	2b73      	cmp	r3, #115	; 0x73
 800830e:	d1af      	bne.n	8008270 <__ssvfiscanf_r+0xec>
 8008310:	2302      	movs	r3, #2
 8008312:	e7d8      	b.n	80082c6 <__ssvfiscanf_r+0x142>
 8008314:	6863      	ldr	r3, [r4, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	dd0c      	ble.n	8008334 <__ssvfiscanf_r+0x1b0>
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	781a      	ldrb	r2, [r3, #0]
 800831e:	455a      	cmp	r2, fp
 8008320:	d175      	bne.n	800840e <__ssvfiscanf_r+0x28a>
 8008322:	3301      	adds	r3, #1
 8008324:	6862      	ldr	r2, [r4, #4]
 8008326:	6023      	str	r3, [r4, #0]
 8008328:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800832a:	3a01      	subs	r2, #1
 800832c:	3301      	adds	r3, #1
 800832e:	6062      	str	r2, [r4, #4]
 8008330:	9345      	str	r3, [sp, #276]	; 0x114
 8008332:	e757      	b.n	80081e4 <__ssvfiscanf_r+0x60>
 8008334:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008336:	4621      	mov	r1, r4
 8008338:	4630      	mov	r0, r6
 800833a:	4798      	blx	r3
 800833c:	2800      	cmp	r0, #0
 800833e:	d0ec      	beq.n	800831a <__ssvfiscanf_r+0x196>
 8008340:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008342:	2800      	cmp	r0, #0
 8008344:	d159      	bne.n	80083fa <__ssvfiscanf_r+0x276>
 8008346:	f04f 30ff 	mov.w	r0, #4294967295
 800834a:	e05c      	b.n	8008406 <__ssvfiscanf_r+0x282>
 800834c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800834e:	f042 0220 	orr.w	r2, r2, #32
 8008352:	9241      	str	r2, [sp, #260]	; 0x104
 8008354:	e79b      	b.n	800828e <__ssvfiscanf_r+0x10a>
 8008356:	2308      	movs	r3, #8
 8008358:	9342      	str	r3, [sp, #264]	; 0x108
 800835a:	2304      	movs	r3, #4
 800835c:	e7b3      	b.n	80082c6 <__ssvfiscanf_r+0x142>
 800835e:	4629      	mov	r1, r5
 8008360:	4640      	mov	r0, r8
 8008362:	f000 f9b7 	bl	80086d4 <__sccl>
 8008366:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800836c:	9341      	str	r3, [sp, #260]	; 0x104
 800836e:	4605      	mov	r5, r0
 8008370:	2301      	movs	r3, #1
 8008372:	e7a8      	b.n	80082c6 <__ssvfiscanf_r+0x142>
 8008374:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800837a:	9341      	str	r3, [sp, #260]	; 0x104
 800837c:	2300      	movs	r3, #0
 800837e:	e7a2      	b.n	80082c6 <__ssvfiscanf_r+0x142>
 8008380:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008382:	06c3      	lsls	r3, r0, #27
 8008384:	f53f af2e 	bmi.w	80081e4 <__ssvfiscanf_r+0x60>
 8008388:	9b00      	ldr	r3, [sp, #0]
 800838a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800838c:	1d19      	adds	r1, r3, #4
 800838e:	9100      	str	r1, [sp, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	07c0      	lsls	r0, r0, #31
 8008394:	bf4c      	ite	mi
 8008396:	801a      	strhmi	r2, [r3, #0]
 8008398:	601a      	strpl	r2, [r3, #0]
 800839a:	e723      	b.n	80081e4 <__ssvfiscanf_r+0x60>
 800839c:	2305      	movs	r3, #5
 800839e:	e792      	b.n	80082c6 <__ssvfiscanf_r+0x142>
 80083a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083a2:	4621      	mov	r1, r4
 80083a4:	4630      	mov	r0, r6
 80083a6:	4798      	blx	r3
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d090      	beq.n	80082ce <__ssvfiscanf_r+0x14a>
 80083ac:	e7c8      	b.n	8008340 <__ssvfiscanf_r+0x1bc>
 80083ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083b0:	3201      	adds	r2, #1
 80083b2:	9245      	str	r2, [sp, #276]	; 0x114
 80083b4:	6862      	ldr	r2, [r4, #4]
 80083b6:	3a01      	subs	r2, #1
 80083b8:	2a00      	cmp	r2, #0
 80083ba:	6062      	str	r2, [r4, #4]
 80083bc:	dd02      	ble.n	80083c4 <__ssvfiscanf_r+0x240>
 80083be:	3301      	adds	r3, #1
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	e787      	b.n	80082d4 <__ssvfiscanf_r+0x150>
 80083c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083c6:	4621      	mov	r1, r4
 80083c8:	4630      	mov	r0, r6
 80083ca:	4798      	blx	r3
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d081      	beq.n	80082d4 <__ssvfiscanf_r+0x150>
 80083d0:	e7b6      	b.n	8008340 <__ssvfiscanf_r+0x1bc>
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	dc06      	bgt.n	80083e4 <__ssvfiscanf_r+0x260>
 80083d6:	466b      	mov	r3, sp
 80083d8:	4622      	mov	r2, r4
 80083da:	a941      	add	r1, sp, #260	; 0x104
 80083dc:	4630      	mov	r0, r6
 80083de:	f000 f885 	bl	80084ec <_scanf_i>
 80083e2:	e788      	b.n	80082f6 <__ssvfiscanf_r+0x172>
 80083e4:	4b0e      	ldr	r3, [pc, #56]	; (8008420 <__ssvfiscanf_r+0x29c>)
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f43f aefc 	beq.w	80081e4 <__ssvfiscanf_r+0x60>
 80083ec:	466b      	mov	r3, sp
 80083ee:	4622      	mov	r2, r4
 80083f0:	a941      	add	r1, sp, #260	; 0x104
 80083f2:	4630      	mov	r0, r6
 80083f4:	f3af 8000 	nop.w
 80083f8:	e77d      	b.n	80082f6 <__ssvfiscanf_r+0x172>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008400:	bf18      	it	ne
 8008402:	f04f 30ff 	movne.w	r0, #4294967295
 8008406:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008410:	e7f9      	b.n	8008406 <__ssvfiscanf_r+0x282>
 8008412:	bf00      	nop
 8008414:	080080d1 	.word	0x080080d1
 8008418:	0800814b 	.word	0x0800814b
 800841c:	08008c34 	.word	0x08008c34
 8008420:	00000000 	.word	0x00000000

08008424 <_scanf_chars>:
 8008424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008428:	4615      	mov	r5, r2
 800842a:	688a      	ldr	r2, [r1, #8]
 800842c:	4680      	mov	r8, r0
 800842e:	460c      	mov	r4, r1
 8008430:	b932      	cbnz	r2, 8008440 <_scanf_chars+0x1c>
 8008432:	698a      	ldr	r2, [r1, #24]
 8008434:	2a00      	cmp	r2, #0
 8008436:	bf14      	ite	ne
 8008438:	f04f 32ff 	movne.w	r2, #4294967295
 800843c:	2201      	moveq	r2, #1
 800843e:	608a      	str	r2, [r1, #8]
 8008440:	6822      	ldr	r2, [r4, #0]
 8008442:	06d1      	lsls	r1, r2, #27
 8008444:	bf5f      	itttt	pl
 8008446:	681a      	ldrpl	r2, [r3, #0]
 8008448:	1d11      	addpl	r1, r2, #4
 800844a:	6019      	strpl	r1, [r3, #0]
 800844c:	6817      	ldrpl	r7, [r2, #0]
 800844e:	2600      	movs	r6, #0
 8008450:	69a3      	ldr	r3, [r4, #24]
 8008452:	b1db      	cbz	r3, 800848c <_scanf_chars+0x68>
 8008454:	2b01      	cmp	r3, #1
 8008456:	d107      	bne.n	8008468 <_scanf_chars+0x44>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	6962      	ldr	r2, [r4, #20]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	5cd3      	ldrb	r3, [r2, r3]
 8008460:	b9a3      	cbnz	r3, 800848c <_scanf_chars+0x68>
 8008462:	2e00      	cmp	r6, #0
 8008464:	d132      	bne.n	80084cc <_scanf_chars+0xa8>
 8008466:	e006      	b.n	8008476 <_scanf_chars+0x52>
 8008468:	2b02      	cmp	r3, #2
 800846a:	d007      	beq.n	800847c <_scanf_chars+0x58>
 800846c:	2e00      	cmp	r6, #0
 800846e:	d12d      	bne.n	80084cc <_scanf_chars+0xa8>
 8008470:	69a3      	ldr	r3, [r4, #24]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d12a      	bne.n	80084cc <_scanf_chars+0xa8>
 8008476:	2001      	movs	r0, #1
 8008478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800847c:	f000 fab4 	bl	80089e8 <__locale_ctype_ptr>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	4418      	add	r0, r3
 8008486:	7843      	ldrb	r3, [r0, #1]
 8008488:	071b      	lsls	r3, r3, #28
 800848a:	d4ef      	bmi.n	800846c <_scanf_chars+0x48>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	06da      	lsls	r2, r3, #27
 8008490:	bf5e      	ittt	pl
 8008492:	682b      	ldrpl	r3, [r5, #0]
 8008494:	781b      	ldrbpl	r3, [r3, #0]
 8008496:	703b      	strbpl	r3, [r7, #0]
 8008498:	682a      	ldr	r2, [r5, #0]
 800849a:	686b      	ldr	r3, [r5, #4]
 800849c:	f102 0201 	add.w	r2, r2, #1
 80084a0:	602a      	str	r2, [r5, #0]
 80084a2:	68a2      	ldr	r2, [r4, #8]
 80084a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80084a8:	f102 32ff 	add.w	r2, r2, #4294967295
 80084ac:	606b      	str	r3, [r5, #4]
 80084ae:	f106 0601 	add.w	r6, r6, #1
 80084b2:	bf58      	it	pl
 80084b4:	3701      	addpl	r7, #1
 80084b6:	60a2      	str	r2, [r4, #8]
 80084b8:	b142      	cbz	r2, 80084cc <_scanf_chars+0xa8>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dcc8      	bgt.n	8008450 <_scanf_chars+0x2c>
 80084be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084c2:	4629      	mov	r1, r5
 80084c4:	4640      	mov	r0, r8
 80084c6:	4798      	blx	r3
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d0c1      	beq.n	8008450 <_scanf_chars+0x2c>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	f013 0310 	ands.w	r3, r3, #16
 80084d2:	d105      	bne.n	80084e0 <_scanf_chars+0xbc>
 80084d4:	68e2      	ldr	r2, [r4, #12]
 80084d6:	3201      	adds	r2, #1
 80084d8:	60e2      	str	r2, [r4, #12]
 80084da:	69a2      	ldr	r2, [r4, #24]
 80084dc:	b102      	cbz	r2, 80084e0 <_scanf_chars+0xbc>
 80084de:	703b      	strb	r3, [r7, #0]
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	441e      	add	r6, r3
 80084e4:	6126      	str	r6, [r4, #16]
 80084e6:	2000      	movs	r0, #0
 80084e8:	e7c6      	b.n	8008478 <_scanf_chars+0x54>
	...

080084ec <_scanf_i>:
 80084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f0:	469a      	mov	sl, r3
 80084f2:	4b74      	ldr	r3, [pc, #464]	; (80086c4 <_scanf_i+0x1d8>)
 80084f4:	460c      	mov	r4, r1
 80084f6:	4683      	mov	fp, r0
 80084f8:	4616      	mov	r6, r2
 80084fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80084fe:	b087      	sub	sp, #28
 8008500:	ab03      	add	r3, sp, #12
 8008502:	68a7      	ldr	r7, [r4, #8]
 8008504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008508:	4b6f      	ldr	r3, [pc, #444]	; (80086c8 <_scanf_i+0x1dc>)
 800850a:	69a1      	ldr	r1, [r4, #24]
 800850c:	4a6f      	ldr	r2, [pc, #444]	; (80086cc <_scanf_i+0x1e0>)
 800850e:	2903      	cmp	r1, #3
 8008510:	bf08      	it	eq
 8008512:	461a      	moveq	r2, r3
 8008514:	1e7b      	subs	r3, r7, #1
 8008516:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800851a:	bf84      	itt	hi
 800851c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008520:	60a3      	strhi	r3, [r4, #8]
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	9200      	str	r2, [sp, #0]
 8008526:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800852a:	bf88      	it	hi
 800852c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008530:	f104 091c 	add.w	r9, r4, #28
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	bf8c      	ite	hi
 8008538:	197f      	addhi	r7, r7, r5
 800853a:	2700      	movls	r7, #0
 800853c:	464b      	mov	r3, r9
 800853e:	f04f 0800 	mov.w	r8, #0
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	6831      	ldr	r1, [r6, #0]
 8008546:	ab03      	add	r3, sp, #12
 8008548:	2202      	movs	r2, #2
 800854a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800854e:	7809      	ldrb	r1, [r1, #0]
 8008550:	f7f7 fe4e 	bl	80001f0 <memchr>
 8008554:	9b01      	ldr	r3, [sp, #4]
 8008556:	b330      	cbz	r0, 80085a6 <_scanf_i+0xba>
 8008558:	f1b8 0f01 	cmp.w	r8, #1
 800855c:	d15a      	bne.n	8008614 <_scanf_i+0x128>
 800855e:	6862      	ldr	r2, [r4, #4]
 8008560:	b92a      	cbnz	r2, 800856e <_scanf_i+0x82>
 8008562:	6822      	ldr	r2, [r4, #0]
 8008564:	2108      	movs	r1, #8
 8008566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800856a:	6061      	str	r1, [r4, #4]
 800856c:	6022      	str	r2, [r4, #0]
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008574:	6022      	str	r2, [r4, #0]
 8008576:	68a2      	ldr	r2, [r4, #8]
 8008578:	1e51      	subs	r1, r2, #1
 800857a:	60a1      	str	r1, [r4, #8]
 800857c:	b19a      	cbz	r2, 80085a6 <_scanf_i+0xba>
 800857e:	6832      	ldr	r2, [r6, #0]
 8008580:	1c51      	adds	r1, r2, #1
 8008582:	6031      	str	r1, [r6, #0]
 8008584:	7812      	ldrb	r2, [r2, #0]
 8008586:	701a      	strb	r2, [r3, #0]
 8008588:	1c5d      	adds	r5, r3, #1
 800858a:	6873      	ldr	r3, [r6, #4]
 800858c:	3b01      	subs	r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	6073      	str	r3, [r6, #4]
 8008592:	dc07      	bgt.n	80085a4 <_scanf_i+0xb8>
 8008594:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008598:	4631      	mov	r1, r6
 800859a:	4658      	mov	r0, fp
 800859c:	4798      	blx	r3
 800859e:	2800      	cmp	r0, #0
 80085a0:	f040 8086 	bne.w	80086b0 <_scanf_i+0x1c4>
 80085a4:	462b      	mov	r3, r5
 80085a6:	f108 0801 	add.w	r8, r8, #1
 80085aa:	f1b8 0f03 	cmp.w	r8, #3
 80085ae:	d1c8      	bne.n	8008542 <_scanf_i+0x56>
 80085b0:	6862      	ldr	r2, [r4, #4]
 80085b2:	b90a      	cbnz	r2, 80085b8 <_scanf_i+0xcc>
 80085b4:	220a      	movs	r2, #10
 80085b6:	6062      	str	r2, [r4, #4]
 80085b8:	6862      	ldr	r2, [r4, #4]
 80085ba:	4945      	ldr	r1, [pc, #276]	; (80086d0 <_scanf_i+0x1e4>)
 80085bc:	6960      	ldr	r0, [r4, #20]
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	1a89      	subs	r1, r1, r2
 80085c2:	f000 f887 	bl	80086d4 <__sccl>
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	f04f 0800 	mov.w	r8, #0
 80085cc:	461d      	mov	r5, r3
 80085ce:	68a3      	ldr	r3, [r4, #8]
 80085d0:	6822      	ldr	r2, [r4, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d03a      	beq.n	800864c <_scanf_i+0x160>
 80085d6:	6831      	ldr	r1, [r6, #0]
 80085d8:	6960      	ldr	r0, [r4, #20]
 80085da:	f891 c000 	ldrb.w	ip, [r1]
 80085de:	f810 000c 	ldrb.w	r0, [r0, ip]
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d032      	beq.n	800864c <_scanf_i+0x160>
 80085e6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80085ea:	d121      	bne.n	8008630 <_scanf_i+0x144>
 80085ec:	0510      	lsls	r0, r2, #20
 80085ee:	d51f      	bpl.n	8008630 <_scanf_i+0x144>
 80085f0:	f108 0801 	add.w	r8, r8, #1
 80085f4:	b117      	cbz	r7, 80085fc <_scanf_i+0x110>
 80085f6:	3301      	adds	r3, #1
 80085f8:	3f01      	subs	r7, #1
 80085fa:	60a3      	str	r3, [r4, #8]
 80085fc:	6873      	ldr	r3, [r6, #4]
 80085fe:	3b01      	subs	r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	6073      	str	r3, [r6, #4]
 8008604:	dd1b      	ble.n	800863e <_scanf_i+0x152>
 8008606:	6833      	ldr	r3, [r6, #0]
 8008608:	3301      	adds	r3, #1
 800860a:	6033      	str	r3, [r6, #0]
 800860c:	68a3      	ldr	r3, [r4, #8]
 800860e:	3b01      	subs	r3, #1
 8008610:	60a3      	str	r3, [r4, #8]
 8008612:	e7dc      	b.n	80085ce <_scanf_i+0xe2>
 8008614:	f1b8 0f02 	cmp.w	r8, #2
 8008618:	d1ad      	bne.n	8008576 <_scanf_i+0x8a>
 800861a:	6822      	ldr	r2, [r4, #0]
 800861c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008620:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008624:	d1bf      	bne.n	80085a6 <_scanf_i+0xba>
 8008626:	2110      	movs	r1, #16
 8008628:	6061      	str	r1, [r4, #4]
 800862a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800862e:	e7a1      	b.n	8008574 <_scanf_i+0x88>
 8008630:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008634:	6022      	str	r2, [r4, #0]
 8008636:	780b      	ldrb	r3, [r1, #0]
 8008638:	702b      	strb	r3, [r5, #0]
 800863a:	3501      	adds	r5, #1
 800863c:	e7de      	b.n	80085fc <_scanf_i+0x110>
 800863e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008642:	4631      	mov	r1, r6
 8008644:	4658      	mov	r0, fp
 8008646:	4798      	blx	r3
 8008648:	2800      	cmp	r0, #0
 800864a:	d0df      	beq.n	800860c <_scanf_i+0x120>
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	05d9      	lsls	r1, r3, #23
 8008650:	d50c      	bpl.n	800866c <_scanf_i+0x180>
 8008652:	454d      	cmp	r5, r9
 8008654:	d908      	bls.n	8008668 <_scanf_i+0x17c>
 8008656:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800865a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800865e:	4632      	mov	r2, r6
 8008660:	4658      	mov	r0, fp
 8008662:	4798      	blx	r3
 8008664:	1e6f      	subs	r7, r5, #1
 8008666:	463d      	mov	r5, r7
 8008668:	454d      	cmp	r5, r9
 800866a:	d029      	beq.n	80086c0 <_scanf_i+0x1d4>
 800866c:	6822      	ldr	r2, [r4, #0]
 800866e:	f012 0210 	ands.w	r2, r2, #16
 8008672:	d113      	bne.n	800869c <_scanf_i+0x1b0>
 8008674:	702a      	strb	r2, [r5, #0]
 8008676:	6863      	ldr	r3, [r4, #4]
 8008678:	9e00      	ldr	r6, [sp, #0]
 800867a:	4649      	mov	r1, r9
 800867c:	4658      	mov	r0, fp
 800867e:	47b0      	blx	r6
 8008680:	f8da 3000 	ldr.w	r3, [sl]
 8008684:	6821      	ldr	r1, [r4, #0]
 8008686:	1d1a      	adds	r2, r3, #4
 8008688:	f8ca 2000 	str.w	r2, [sl]
 800868c:	f011 0f20 	tst.w	r1, #32
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	d010      	beq.n	80086b6 <_scanf_i+0x1ca>
 8008694:	6018      	str	r0, [r3, #0]
 8008696:	68e3      	ldr	r3, [r4, #12]
 8008698:	3301      	adds	r3, #1
 800869a:	60e3      	str	r3, [r4, #12]
 800869c:	eba5 0509 	sub.w	r5, r5, r9
 80086a0:	44a8      	add	r8, r5
 80086a2:	6925      	ldr	r5, [r4, #16]
 80086a4:	4445      	add	r5, r8
 80086a6:	6125      	str	r5, [r4, #16]
 80086a8:	2000      	movs	r0, #0
 80086aa:	b007      	add	sp, #28
 80086ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b0:	f04f 0800 	mov.w	r8, #0
 80086b4:	e7ca      	b.n	800864c <_scanf_i+0x160>
 80086b6:	07ca      	lsls	r2, r1, #31
 80086b8:	bf4c      	ite	mi
 80086ba:	8018      	strhmi	r0, [r3, #0]
 80086bc:	6018      	strpl	r0, [r3, #0]
 80086be:	e7ea      	b.n	8008696 <_scanf_i+0x1aa>
 80086c0:	2001      	movs	r0, #1
 80086c2:	e7f2      	b.n	80086aa <_scanf_i+0x1be>
 80086c4:	08008ad4 	.word	0x08008ad4
 80086c8:	08008831 	.word	0x08008831
 80086cc:	08008949 	.word	0x08008949
 80086d0:	08008c48 	.word	0x08008c48

080086d4 <__sccl>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	780b      	ldrb	r3, [r1, #0]
 80086d8:	2b5e      	cmp	r3, #94	; 0x5e
 80086da:	bf13      	iteet	ne
 80086dc:	1c4a      	addne	r2, r1, #1
 80086de:	1c8a      	addeq	r2, r1, #2
 80086e0:	784b      	ldrbeq	r3, [r1, #1]
 80086e2:	2100      	movne	r1, #0
 80086e4:	bf08      	it	eq
 80086e6:	2101      	moveq	r1, #1
 80086e8:	1e44      	subs	r4, r0, #1
 80086ea:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80086ee:	f804 1f01 	strb.w	r1, [r4, #1]!
 80086f2:	42ac      	cmp	r4, r5
 80086f4:	d1fb      	bne.n	80086ee <__sccl+0x1a>
 80086f6:	b913      	cbnz	r3, 80086fe <__sccl+0x2a>
 80086f8:	3a01      	subs	r2, #1
 80086fa:	4610      	mov	r0, r2
 80086fc:	bd70      	pop	{r4, r5, r6, pc}
 80086fe:	f081 0401 	eor.w	r4, r1, #1
 8008702:	54c4      	strb	r4, [r0, r3]
 8008704:	1c51      	adds	r1, r2, #1
 8008706:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800870a:	2d2d      	cmp	r5, #45	; 0x2d
 800870c:	f101 36ff 	add.w	r6, r1, #4294967295
 8008710:	460a      	mov	r2, r1
 8008712:	d006      	beq.n	8008722 <__sccl+0x4e>
 8008714:	2d5d      	cmp	r5, #93	; 0x5d
 8008716:	d0f0      	beq.n	80086fa <__sccl+0x26>
 8008718:	b90d      	cbnz	r5, 800871e <__sccl+0x4a>
 800871a:	4632      	mov	r2, r6
 800871c:	e7ed      	b.n	80086fa <__sccl+0x26>
 800871e:	462b      	mov	r3, r5
 8008720:	e7ef      	b.n	8008702 <__sccl+0x2e>
 8008722:	780e      	ldrb	r6, [r1, #0]
 8008724:	2e5d      	cmp	r6, #93	; 0x5d
 8008726:	d0fa      	beq.n	800871e <__sccl+0x4a>
 8008728:	42b3      	cmp	r3, r6
 800872a:	dcf8      	bgt.n	800871e <__sccl+0x4a>
 800872c:	3301      	adds	r3, #1
 800872e:	429e      	cmp	r6, r3
 8008730:	54c4      	strb	r4, [r0, r3]
 8008732:	dcfb      	bgt.n	800872c <__sccl+0x58>
 8008734:	3102      	adds	r1, #2
 8008736:	e7e6      	b.n	8008706 <__sccl+0x32>

08008738 <_strtol_l.isra.0>:
 8008738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	4680      	mov	r8, r0
 800873e:	4689      	mov	r9, r1
 8008740:	4692      	mov	sl, r2
 8008742:	461e      	mov	r6, r3
 8008744:	460f      	mov	r7, r1
 8008746:	463d      	mov	r5, r7
 8008748:	9808      	ldr	r0, [sp, #32]
 800874a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800874e:	f000 f947 	bl	80089e0 <__locale_ctype_ptr_l>
 8008752:	4420      	add	r0, r4
 8008754:	7843      	ldrb	r3, [r0, #1]
 8008756:	f013 0308 	ands.w	r3, r3, #8
 800875a:	d132      	bne.n	80087c2 <_strtol_l.isra.0+0x8a>
 800875c:	2c2d      	cmp	r4, #45	; 0x2d
 800875e:	d132      	bne.n	80087c6 <_strtol_l.isra.0+0x8e>
 8008760:	787c      	ldrb	r4, [r7, #1]
 8008762:	1cbd      	adds	r5, r7, #2
 8008764:	2201      	movs	r2, #1
 8008766:	2e00      	cmp	r6, #0
 8008768:	d05d      	beq.n	8008826 <_strtol_l.isra.0+0xee>
 800876a:	2e10      	cmp	r6, #16
 800876c:	d109      	bne.n	8008782 <_strtol_l.isra.0+0x4a>
 800876e:	2c30      	cmp	r4, #48	; 0x30
 8008770:	d107      	bne.n	8008782 <_strtol_l.isra.0+0x4a>
 8008772:	782b      	ldrb	r3, [r5, #0]
 8008774:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008778:	2b58      	cmp	r3, #88	; 0x58
 800877a:	d14f      	bne.n	800881c <_strtol_l.isra.0+0xe4>
 800877c:	786c      	ldrb	r4, [r5, #1]
 800877e:	2610      	movs	r6, #16
 8008780:	3502      	adds	r5, #2
 8008782:	2a00      	cmp	r2, #0
 8008784:	bf14      	ite	ne
 8008786:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800878a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800878e:	2700      	movs	r7, #0
 8008790:	fbb1 fcf6 	udiv	ip, r1, r6
 8008794:	4638      	mov	r0, r7
 8008796:	fb06 1e1c 	mls	lr, r6, ip, r1
 800879a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800879e:	2b09      	cmp	r3, #9
 80087a0:	d817      	bhi.n	80087d2 <_strtol_l.isra.0+0x9a>
 80087a2:	461c      	mov	r4, r3
 80087a4:	42a6      	cmp	r6, r4
 80087a6:	dd23      	ble.n	80087f0 <_strtol_l.isra.0+0xb8>
 80087a8:	1c7b      	adds	r3, r7, #1
 80087aa:	d007      	beq.n	80087bc <_strtol_l.isra.0+0x84>
 80087ac:	4584      	cmp	ip, r0
 80087ae:	d31c      	bcc.n	80087ea <_strtol_l.isra.0+0xb2>
 80087b0:	d101      	bne.n	80087b6 <_strtol_l.isra.0+0x7e>
 80087b2:	45a6      	cmp	lr, r4
 80087b4:	db19      	blt.n	80087ea <_strtol_l.isra.0+0xb2>
 80087b6:	fb00 4006 	mla	r0, r0, r6, r4
 80087ba:	2701      	movs	r7, #1
 80087bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087c0:	e7eb      	b.n	800879a <_strtol_l.isra.0+0x62>
 80087c2:	462f      	mov	r7, r5
 80087c4:	e7bf      	b.n	8008746 <_strtol_l.isra.0+0xe>
 80087c6:	2c2b      	cmp	r4, #43	; 0x2b
 80087c8:	bf04      	itt	eq
 80087ca:	1cbd      	addeq	r5, r7, #2
 80087cc:	787c      	ldrbeq	r4, [r7, #1]
 80087ce:	461a      	mov	r2, r3
 80087d0:	e7c9      	b.n	8008766 <_strtol_l.isra.0+0x2e>
 80087d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80087d6:	2b19      	cmp	r3, #25
 80087d8:	d801      	bhi.n	80087de <_strtol_l.isra.0+0xa6>
 80087da:	3c37      	subs	r4, #55	; 0x37
 80087dc:	e7e2      	b.n	80087a4 <_strtol_l.isra.0+0x6c>
 80087de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80087e2:	2b19      	cmp	r3, #25
 80087e4:	d804      	bhi.n	80087f0 <_strtol_l.isra.0+0xb8>
 80087e6:	3c57      	subs	r4, #87	; 0x57
 80087e8:	e7dc      	b.n	80087a4 <_strtol_l.isra.0+0x6c>
 80087ea:	f04f 37ff 	mov.w	r7, #4294967295
 80087ee:	e7e5      	b.n	80087bc <_strtol_l.isra.0+0x84>
 80087f0:	1c7b      	adds	r3, r7, #1
 80087f2:	d108      	bne.n	8008806 <_strtol_l.isra.0+0xce>
 80087f4:	2322      	movs	r3, #34	; 0x22
 80087f6:	f8c8 3000 	str.w	r3, [r8]
 80087fa:	4608      	mov	r0, r1
 80087fc:	f1ba 0f00 	cmp.w	sl, #0
 8008800:	d107      	bne.n	8008812 <_strtol_l.isra.0+0xda>
 8008802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008806:	b102      	cbz	r2, 800880a <_strtol_l.isra.0+0xd2>
 8008808:	4240      	negs	r0, r0
 800880a:	f1ba 0f00 	cmp.w	sl, #0
 800880e:	d0f8      	beq.n	8008802 <_strtol_l.isra.0+0xca>
 8008810:	b10f      	cbz	r7, 8008816 <_strtol_l.isra.0+0xde>
 8008812:	f105 39ff 	add.w	r9, r5, #4294967295
 8008816:	f8ca 9000 	str.w	r9, [sl]
 800881a:	e7f2      	b.n	8008802 <_strtol_l.isra.0+0xca>
 800881c:	2430      	movs	r4, #48	; 0x30
 800881e:	2e00      	cmp	r6, #0
 8008820:	d1af      	bne.n	8008782 <_strtol_l.isra.0+0x4a>
 8008822:	2608      	movs	r6, #8
 8008824:	e7ad      	b.n	8008782 <_strtol_l.isra.0+0x4a>
 8008826:	2c30      	cmp	r4, #48	; 0x30
 8008828:	d0a3      	beq.n	8008772 <_strtol_l.isra.0+0x3a>
 800882a:	260a      	movs	r6, #10
 800882c:	e7a9      	b.n	8008782 <_strtol_l.isra.0+0x4a>
	...

08008830 <_strtol_r>:
 8008830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008832:	4c06      	ldr	r4, [pc, #24]	; (800884c <_strtol_r+0x1c>)
 8008834:	4d06      	ldr	r5, [pc, #24]	; (8008850 <_strtol_r+0x20>)
 8008836:	6824      	ldr	r4, [r4, #0]
 8008838:	6a24      	ldr	r4, [r4, #32]
 800883a:	2c00      	cmp	r4, #0
 800883c:	bf08      	it	eq
 800883e:	462c      	moveq	r4, r5
 8008840:	9400      	str	r4, [sp, #0]
 8008842:	f7ff ff79 	bl	8008738 <_strtol_l.isra.0>
 8008846:	b003      	add	sp, #12
 8008848:	bd30      	pop	{r4, r5, pc}
 800884a:	bf00      	nop
 800884c:	2000000c 	.word	0x2000000c
 8008850:	20000070 	.word	0x20000070

08008854 <_strtoul_l.isra.0>:
 8008854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008858:	4680      	mov	r8, r0
 800885a:	4689      	mov	r9, r1
 800885c:	4692      	mov	sl, r2
 800885e:	461e      	mov	r6, r3
 8008860:	460f      	mov	r7, r1
 8008862:	463d      	mov	r5, r7
 8008864:	9808      	ldr	r0, [sp, #32]
 8008866:	f815 4b01 	ldrb.w	r4, [r5], #1
 800886a:	f000 f8b9 	bl	80089e0 <__locale_ctype_ptr_l>
 800886e:	4420      	add	r0, r4
 8008870:	7843      	ldrb	r3, [r0, #1]
 8008872:	f013 0308 	ands.w	r3, r3, #8
 8008876:	d130      	bne.n	80088da <_strtoul_l.isra.0+0x86>
 8008878:	2c2d      	cmp	r4, #45	; 0x2d
 800887a:	d130      	bne.n	80088de <_strtoul_l.isra.0+0x8a>
 800887c:	787c      	ldrb	r4, [r7, #1]
 800887e:	1cbd      	adds	r5, r7, #2
 8008880:	2101      	movs	r1, #1
 8008882:	2e00      	cmp	r6, #0
 8008884:	d05c      	beq.n	8008940 <_strtoul_l.isra.0+0xec>
 8008886:	2e10      	cmp	r6, #16
 8008888:	d109      	bne.n	800889e <_strtoul_l.isra.0+0x4a>
 800888a:	2c30      	cmp	r4, #48	; 0x30
 800888c:	d107      	bne.n	800889e <_strtoul_l.isra.0+0x4a>
 800888e:	782b      	ldrb	r3, [r5, #0]
 8008890:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008894:	2b58      	cmp	r3, #88	; 0x58
 8008896:	d14e      	bne.n	8008936 <_strtoul_l.isra.0+0xe2>
 8008898:	786c      	ldrb	r4, [r5, #1]
 800889a:	2610      	movs	r6, #16
 800889c:	3502      	adds	r5, #2
 800889e:	f04f 32ff 	mov.w	r2, #4294967295
 80088a2:	2300      	movs	r3, #0
 80088a4:	fbb2 f2f6 	udiv	r2, r2, r6
 80088a8:	fb06 fc02 	mul.w	ip, r6, r2
 80088ac:	ea6f 0c0c 	mvn.w	ip, ip
 80088b0:	4618      	mov	r0, r3
 80088b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80088b6:	2f09      	cmp	r7, #9
 80088b8:	d817      	bhi.n	80088ea <_strtoul_l.isra.0+0x96>
 80088ba:	463c      	mov	r4, r7
 80088bc:	42a6      	cmp	r6, r4
 80088be:	dd23      	ble.n	8008908 <_strtoul_l.isra.0+0xb4>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	db1e      	blt.n	8008902 <_strtoul_l.isra.0+0xae>
 80088c4:	4282      	cmp	r2, r0
 80088c6:	d31c      	bcc.n	8008902 <_strtoul_l.isra.0+0xae>
 80088c8:	d101      	bne.n	80088ce <_strtoul_l.isra.0+0x7a>
 80088ca:	45a4      	cmp	ip, r4
 80088cc:	db19      	blt.n	8008902 <_strtoul_l.isra.0+0xae>
 80088ce:	fb00 4006 	mla	r0, r0, r6, r4
 80088d2:	2301      	movs	r3, #1
 80088d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088d8:	e7eb      	b.n	80088b2 <_strtoul_l.isra.0+0x5e>
 80088da:	462f      	mov	r7, r5
 80088dc:	e7c1      	b.n	8008862 <_strtoul_l.isra.0+0xe>
 80088de:	2c2b      	cmp	r4, #43	; 0x2b
 80088e0:	bf04      	itt	eq
 80088e2:	1cbd      	addeq	r5, r7, #2
 80088e4:	787c      	ldrbeq	r4, [r7, #1]
 80088e6:	4619      	mov	r1, r3
 80088e8:	e7cb      	b.n	8008882 <_strtoul_l.isra.0+0x2e>
 80088ea:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80088ee:	2f19      	cmp	r7, #25
 80088f0:	d801      	bhi.n	80088f6 <_strtoul_l.isra.0+0xa2>
 80088f2:	3c37      	subs	r4, #55	; 0x37
 80088f4:	e7e2      	b.n	80088bc <_strtoul_l.isra.0+0x68>
 80088f6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80088fa:	2f19      	cmp	r7, #25
 80088fc:	d804      	bhi.n	8008908 <_strtoul_l.isra.0+0xb4>
 80088fe:	3c57      	subs	r4, #87	; 0x57
 8008900:	e7dc      	b.n	80088bc <_strtoul_l.isra.0+0x68>
 8008902:	f04f 33ff 	mov.w	r3, #4294967295
 8008906:	e7e5      	b.n	80088d4 <_strtoul_l.isra.0+0x80>
 8008908:	2b00      	cmp	r3, #0
 800890a:	da09      	bge.n	8008920 <_strtoul_l.isra.0+0xcc>
 800890c:	2322      	movs	r3, #34	; 0x22
 800890e:	f8c8 3000 	str.w	r3, [r8]
 8008912:	f04f 30ff 	mov.w	r0, #4294967295
 8008916:	f1ba 0f00 	cmp.w	sl, #0
 800891a:	d107      	bne.n	800892c <_strtoul_l.isra.0+0xd8>
 800891c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008920:	b101      	cbz	r1, 8008924 <_strtoul_l.isra.0+0xd0>
 8008922:	4240      	negs	r0, r0
 8008924:	f1ba 0f00 	cmp.w	sl, #0
 8008928:	d0f8      	beq.n	800891c <_strtoul_l.isra.0+0xc8>
 800892a:	b10b      	cbz	r3, 8008930 <_strtoul_l.isra.0+0xdc>
 800892c:	f105 39ff 	add.w	r9, r5, #4294967295
 8008930:	f8ca 9000 	str.w	r9, [sl]
 8008934:	e7f2      	b.n	800891c <_strtoul_l.isra.0+0xc8>
 8008936:	2430      	movs	r4, #48	; 0x30
 8008938:	2e00      	cmp	r6, #0
 800893a:	d1b0      	bne.n	800889e <_strtoul_l.isra.0+0x4a>
 800893c:	2608      	movs	r6, #8
 800893e:	e7ae      	b.n	800889e <_strtoul_l.isra.0+0x4a>
 8008940:	2c30      	cmp	r4, #48	; 0x30
 8008942:	d0a4      	beq.n	800888e <_strtoul_l.isra.0+0x3a>
 8008944:	260a      	movs	r6, #10
 8008946:	e7aa      	b.n	800889e <_strtoul_l.isra.0+0x4a>

08008948 <_strtoul_r>:
 8008948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800894a:	4c06      	ldr	r4, [pc, #24]	; (8008964 <_strtoul_r+0x1c>)
 800894c:	4d06      	ldr	r5, [pc, #24]	; (8008968 <_strtoul_r+0x20>)
 800894e:	6824      	ldr	r4, [r4, #0]
 8008950:	6a24      	ldr	r4, [r4, #32]
 8008952:	2c00      	cmp	r4, #0
 8008954:	bf08      	it	eq
 8008956:	462c      	moveq	r4, r5
 8008958:	9400      	str	r4, [sp, #0]
 800895a:	f7ff ff7b 	bl	8008854 <_strtoul_l.isra.0>
 800895e:	b003      	add	sp, #12
 8008960:	bd30      	pop	{r4, r5, pc}
 8008962:	bf00      	nop
 8008964:	2000000c 	.word	0x2000000c
 8008968:	20000070 	.word	0x20000070

0800896c <__submore>:
 800896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008970:	460c      	mov	r4, r1
 8008972:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008978:	4299      	cmp	r1, r3
 800897a:	d11d      	bne.n	80089b8 <__submore+0x4c>
 800897c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008980:	f7fd fe3a 	bl	80065f8 <_malloc_r>
 8008984:	b918      	cbnz	r0, 800898e <__submore+0x22>
 8008986:	f04f 30ff 	mov.w	r0, #4294967295
 800898a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800898e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008992:	63a3      	str	r3, [r4, #56]	; 0x38
 8008994:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008998:	6360      	str	r0, [r4, #52]	; 0x34
 800899a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800899e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80089a2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80089a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80089aa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80089ae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80089b2:	6020      	str	r0, [r4, #0]
 80089b4:	2000      	movs	r0, #0
 80089b6:	e7e8      	b.n	800898a <__submore+0x1e>
 80089b8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80089ba:	0077      	lsls	r7, r6, #1
 80089bc:	463a      	mov	r2, r7
 80089be:	f000 f833 	bl	8008a28 <_realloc_r>
 80089c2:	4605      	mov	r5, r0
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d0de      	beq.n	8008986 <__submore+0x1a>
 80089c8:	eb00 0806 	add.w	r8, r0, r6
 80089cc:	4601      	mov	r1, r0
 80089ce:	4632      	mov	r2, r6
 80089d0:	4640      	mov	r0, r8
 80089d2:	f7ff f887 	bl	8007ae4 <memcpy>
 80089d6:	f8c4 8000 	str.w	r8, [r4]
 80089da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80089de:	e7e9      	b.n	80089b4 <__submore+0x48>

080089e0 <__locale_ctype_ptr_l>:
 80089e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80089e4:	4770      	bx	lr
	...

080089e8 <__locale_ctype_ptr>:
 80089e8:	4b04      	ldr	r3, [pc, #16]	; (80089fc <__locale_ctype_ptr+0x14>)
 80089ea:	4a05      	ldr	r2, [pc, #20]	; (8008a00 <__locale_ctype_ptr+0x18>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	bf08      	it	eq
 80089f4:	4613      	moveq	r3, r2
 80089f6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80089fa:	4770      	bx	lr
 80089fc:	2000000c 	.word	0x2000000c
 8008a00:	20000070 	.word	0x20000070

08008a04 <__ascii_mbtowc>:
 8008a04:	b082      	sub	sp, #8
 8008a06:	b901      	cbnz	r1, 8008a0a <__ascii_mbtowc+0x6>
 8008a08:	a901      	add	r1, sp, #4
 8008a0a:	b142      	cbz	r2, 8008a1e <__ascii_mbtowc+0x1a>
 8008a0c:	b14b      	cbz	r3, 8008a22 <__ascii_mbtowc+0x1e>
 8008a0e:	7813      	ldrb	r3, [r2, #0]
 8008a10:	600b      	str	r3, [r1, #0]
 8008a12:	7812      	ldrb	r2, [r2, #0]
 8008a14:	1c10      	adds	r0, r2, #0
 8008a16:	bf18      	it	ne
 8008a18:	2001      	movne	r0, #1
 8008a1a:	b002      	add	sp, #8
 8008a1c:	4770      	bx	lr
 8008a1e:	4610      	mov	r0, r2
 8008a20:	e7fb      	b.n	8008a1a <__ascii_mbtowc+0x16>
 8008a22:	f06f 0001 	mvn.w	r0, #1
 8008a26:	e7f8      	b.n	8008a1a <__ascii_mbtowc+0x16>

08008a28 <_realloc_r>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	460e      	mov	r6, r1
 8008a30:	b921      	cbnz	r1, 8008a3c <_realloc_r+0x14>
 8008a32:	4611      	mov	r1, r2
 8008a34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a38:	f7fd bdde 	b.w	80065f8 <_malloc_r>
 8008a3c:	b922      	cbnz	r2, 8008a48 <_realloc_r+0x20>
 8008a3e:	f7fd fd8d 	bl	800655c <_free_r>
 8008a42:	4625      	mov	r5, r4
 8008a44:	4628      	mov	r0, r5
 8008a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a48:	f000 f821 	bl	8008a8e <_malloc_usable_size_r>
 8008a4c:	42a0      	cmp	r0, r4
 8008a4e:	d20f      	bcs.n	8008a70 <_realloc_r+0x48>
 8008a50:	4621      	mov	r1, r4
 8008a52:	4638      	mov	r0, r7
 8008a54:	f7fd fdd0 	bl	80065f8 <_malloc_r>
 8008a58:	4605      	mov	r5, r0
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d0f2      	beq.n	8008a44 <_realloc_r+0x1c>
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4622      	mov	r2, r4
 8008a62:	f7ff f83f 	bl	8007ae4 <memcpy>
 8008a66:	4631      	mov	r1, r6
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f7fd fd77 	bl	800655c <_free_r>
 8008a6e:	e7e9      	b.n	8008a44 <_realloc_r+0x1c>
 8008a70:	4635      	mov	r5, r6
 8008a72:	e7e7      	b.n	8008a44 <_realloc_r+0x1c>

08008a74 <__ascii_wctomb>:
 8008a74:	b149      	cbz	r1, 8008a8a <__ascii_wctomb+0x16>
 8008a76:	2aff      	cmp	r2, #255	; 0xff
 8008a78:	bf85      	ittet	hi
 8008a7a:	238a      	movhi	r3, #138	; 0x8a
 8008a7c:	6003      	strhi	r3, [r0, #0]
 8008a7e:	700a      	strbls	r2, [r1, #0]
 8008a80:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a84:	bf98      	it	ls
 8008a86:	2001      	movls	r0, #1
 8008a88:	4770      	bx	lr
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	4770      	bx	lr

08008a8e <_malloc_usable_size_r>:
 8008a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a92:	1f18      	subs	r0, r3, #4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	bfbc      	itt	lt
 8008a98:	580b      	ldrlt	r3, [r1, r0]
 8008a9a:	18c0      	addlt	r0, r0, r3
 8008a9c:	4770      	bx	lr
	...

08008aa0 <_init>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	bf00      	nop
 8008aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa6:	bc08      	pop	{r3}
 8008aa8:	469e      	mov	lr, r3
 8008aaa:	4770      	bx	lr

08008aac <_fini>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	bf00      	nop
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr
